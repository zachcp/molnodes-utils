(ns torus-pattern
  "Creates a torus pattern with randomly colored materials."
  (:import bpy math pathlib)
  ;;  (:import [bl_ext.blender_org.molecularnodes :as molnodes])
  (:require
   [basilisp.string :as string]))


(def object (.. bpy/ops -object))
(def materials (.. bpy/data -materials))
(def mesh (.. bpy/ops -mesh))
(def libs (.. bpy/data -libraries))


(defn clear-mesh-objects []
  (.select-all object ** :action "DESELECT")
  (.select-by-type object ** :type "MESH")
  (.delete object))

(clear-mesh-objects)

(defn create-random-material []
  (let [mat (.new materials ** :name "RandomMaterial")
        _ (set! (.-use-nodes mat) true)
        bsdf (aget (.. mat -node-tree -nodes) "Principled BSDF")]

    (set! (-> bsdf .-inputs (aget "Base Color") .-default-value)
          [(rand) (rand) (rand) 1])
    mat))

(defn create-torus [radius tube-radius location segments]
  (.primitive-torus-add mesh **
                        :major-radius radius
                        :minor-radius tube-radius
                        :location location
                        :major-segments segments
                        :minor-segments segments)
  (let [obj (.. bpy/context -object)
        material (create-random-material)]
    (-> obj .-data .-materials (.append material))))

#_(create-torus 5, 5, [0 0 0] 48)

(defn create-pattern [{:keys [layers-num radius tube-radius]
                       :or {layers-num 2
                            radius 2
                            tube-radius 0.2}}]
  (let [angle-step (/ math/pi 4)]
    (dotimes [i layers-num]
      (let [layer-radius (* radius (inc i))
            objects-num (* 12 (inc i))]
        (dotimes [j objects-num]
          (let [angle (* j angle-step)
                x (* layer-radius (math/cos angle))
                y (* layer-radius (math/sin angle))
                z (* i 0.5)]
            (create-torus (/ radius 2) tube-radius [x y z] 48)))))))

#_(create-pattern {:layers-num 5})



;; -------------------------------------------------------------------


(def molecular-node-types
  ; from: for groups in bpy.data.node_groups: print(groups.name)
  {:atoms-to-curves "atoms_to_curves"
   :backbone-nh "Backbone NH"
   :base-align ".Base align"
   :between-float "Between Float"
   :boolean-run-fill "Boolean Run Fill"
   :boolean-run-mask "Boolean Run Mask"
   :bs-smooth ".bs_smooth"
   :cartoon-arrow-instance ".cartoon_arrow_instance"
   :cartoon-arrow-primitive ".cartoon.arrow_primitive"
   :cartoon-arrows-scale ".cartoon_arrows_scale"
   :color-attribute-random "Color Attribute Random"
   :color-common "Color Common"
   :curve-custom-profile ".curve_custom_profile"
   :curve-end-fix-color ".curve_end_fix_color"
   :curve-ends-adjust-angle ".curve_ends_adjust_angle"
   :curve-ends-adjust-position "curve_ends_adjust_position"
   :curve-profile-backup ".curve_profile_backup"
   :curve-to-mesh ".curve_to_mesh"
   :debug-arrows ".DEBUG_arrows"
   :dihedral-angle "Dihedral Angle"
   :dssp-sheet-checks ".DSSP Sheet Checks"
   :expand-selection ".expand_selection"
   :fallback-boolean "Fallback Boolean"
   :field-offset ".field_offset"
   :field-offset-bool ".field_offset_bool"
   :field-offset-vec ".field_offset_vec"
   :group-pick "Group Pick"
   :group-pick-vector "Group Pick Vector"
   :guide-rotation ".guide_rotation"
   :hbond-backbone-check "HBond Backbone Check"
   :hbond-backbone-check-backup "HBond Backbone Check_backup"
   :hbond-energy "HBond Energy"
   :hbond-i-1-j+1-and-hbond-j-1-i+1 ".HBond (i - 1, j + 1) and HBond (j - 1, i + 1)"
   :hbond-i-1-j-and-hbond-j-i+1 ".Hbond (i - 1,j) and Hbond (j,i + 1)"
   :hbond-i-j-and-hbond-j-i ".HBond (i, j) and HBond (j, i)"
   :hbond-j-1-i-and-hbond-i-j+1 ".Hbond (j - 1,i) and Hbond (i,j + 1)"
   :helix-detect "Helix Detect"
   :is-alpha-carbon "Is Alpha Carbon"
   :is-helix "Is Helix"
   :is-loop "Is Loop"
   :is-nucleic "Is Nucleic"
   :is-odd ".is_odd"
   :is-peptide "Is Peptide"
   :is-sheet "Is Sheet"
   :mn-assembly-instance-chains ".MN_assembly_instance_chains"
   :mn-cartoon-bs-alternate-axis ".MN_cartoon_bs_alternate_axis"
   :mn-cartoon-smooth-handles ".MN_cartoon_smooth_handles"
   :mn-color-input "MN Color Input"
   :mn-constants-atom-name-nucleic ".MN_constants_atom_name_nucleic"
   :mn-constants-atom-name-peptide ".MN_constants_atom_name_peptide"
   :mn-dna-double-helix "MN_dna_double_helix"
   :mn-fresnel "MN Fresnel"
   :mn-mask-transparent ".MN_mask_transparent"
   :mn-mask-transparent001 ".MN_mask_transparent.001"
   :mn-select-nucleic ".MN_select_nucleic"
   :mn-select-nucleic-type "MN_select_nucleic_type"
   :mn-select-peptide ".MN_select_peptide"
   :mn-select-sec-struct ".MN_select_sec_struct"
   :mn-select-sec-struct-id ".MN_select_sec_struct_id"
   :mn-topo-assign-backbone ".MN_topo_assign_backbone"
   :mn-topo-backbone "MN_topo_backbone"
   :mn-topo-calc-helix ".MN_topo_calc_helix"
   :mn-topo-calc-sheet ".MN_topo_calc_sheet"
   :mn-topo-phi-psi ".MN_topo_phi_psi"
   :mn-units "MN Units"
   :mn-utils-curve-resample "MN_utils_curve_resample"
   :mn-utils-helix "MN_utils_helix"
   :mn-utils-style-cartoon ".MN_utils_style_cartoon"
   :mn-utils-style-ribbon-nucleic ".MN_utils_style_ribbon_nucleic"
   :mn-utils-style-spheres-icosphere ".MN_utils_style_spheres_icosphere"
   :mn-utils-style-spheres-points ".MN_utils_style_spheres_points"
   :mn-world-scale ".MN_world_scale"
   :sample-atom-value ".SampleAtomValue"
   :sec-struct-counter ".sec_struct_counter"
   :selective-scale ".selective_scale"})

(defn locate-molnodes-file []
  "locate the molecularnodes blenderfile"
  (let [package "molecularnodes"
        prefix "MN_"
        extensions-path (pathlib/Path (bpy.utils/user_resource "EXTENSIONS"))
        blend-files (python/list (.rglob extensions-path (str "**/" package "/**/" prefix "*.blend")))]
    ;; (println extensions-path)
    (str (first blend-files))))

(defn load-node-groups []
  (let [blendfile (locate-molnodes-file)]
    (with [[data-from data-to] (bpy.data.libraries/load blendfile)]
          (doseq [node (.-node-groups data-from)]
            (.append (.-node-groups data-to) node)))))
  

(defn get-current-nodegroups
  "set of nodegroups in the workspace"
  []
  (into #{}  (for [node (bpy.data.node_groups/values)] (.-name node))))


;; note: it would be nice to specify the node type here
(defn load-pdb [code]
  (do
    (set! (.. bpy/context -scene -MN_pdb_code) code)
    (bpy.ops.mn/import_wwpdb)))


(defn mol-by-name [objname]
  (bpy.data.objects/get objname))


(defn geom-node-by-name [name]
  ^bpy.types.GeometryNodeTree
  (let [node (mol-by-name name)
        node_group  (-> node .-modifiers .-active .-node-group)]
    node_group))



(comment
  (.register molnodes)
  (load-molecular-nodes)
  ;; for groups in bpy.data.node_groups: print(groups.name)

  (load-node-groups)

  
 ;; Works
  (load-pdb "1FAP")
  (load-pdb "7VDV")
  (mol-by-name "1FAP")
  (geom-node-by-name "1FAP")

  (def fap (mol-by-name "1FAP"))
  (def exampletree (geom-node-by-name "1FAP"))


 ;; Nodes need to be added to the workspace before they can be used

  (let [nodes (.-nodes exampletree)
        newnode (.new nodes "GeometryNodeGroup")
        node_group (bpy.data.node_groups/get (molecular-node-types :mn-dna-double-helix))]
   ;; (set! (.-location newnode) [(rand), (rand)])
    (set! (.-node_tree newnode) node_group))

  (molecular-node-types :mn-dna-double-helix)
  (def blend_file "/Users/zcpowers/Library/Application Support/Blender/4.2/extensions/blender_org/molecularnodes/assets/MN_data_file_4.2.blend")


  (load-node-groups)
  (def blendfile "/Users/zcpowers/Library/Application Support/Blender/4.2/extensions/blender_org/molecularnodes/assets/MN_data_file_4.2.blend")
        ;;     with bpy.data.libraries.load(blend_file_path) as (data_from, data_to):
;;         data_to.node_groups = [
;;             name for name in data_from.node_groups if name.startswith("MN_")
;;         ]
