bl_info = {
    "name": "NodeStorage",
    "author": "Brady Johnson",
    "version": (4, 2, 0),
    "blender": (4, 2, 0),
    "location": "Node",
    "category": "Node",
}

import bpy
import mathutils
import os


class NodeStorage(bpy.types.Operator):
    bl_idname = "node.nodestorage"
    bl_label = "NodeStorage"
    bl_options = {"REGISTER", "UNDO"}

    def execute(self, context):
        # initialize _mn_world_scale node group
        def _mn_world_scale_node_group():
            _mn_world_scale = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_world_scale"
            )

            _mn_world_scale.color_tag = "NONE"
            _mn_world_scale.description = ""

            # _mn_world_scale interface
            # Socket world_scale
            world_scale_socket = _mn_world_scale.interface.new_socket(
                name="world_scale", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            world_scale_socket.subtype = "NONE"
            world_scale_socket.default_value = 0.009999999776482582
            world_scale_socket.min_value = -3.4028234663852886e38
            world_scale_socket.max_value = 3.4028234663852886e38
            world_scale_socket.attribute_domain = "POINT"

            # initialize _mn_world_scale nodes
            # node Group Input
            group_input = _mn_world_scale.nodes.new("NodeGroupInput")
            group_input.name = "Group Input"

            # node Value
            value = _mn_world_scale.nodes.new("ShaderNodeValue")
            value.label = "world_scale"
            value.name = "Value"

            value.outputs[0].default_value = 0.009999999776482582
            # node Group Output
            group_output = _mn_world_scale.nodes.new("NodeGroupOutput")
            group_output.name = "Group Output"
            group_output.is_active_output = True

            # Set locations
            group_input.location = (-200.0, 0.0)
            value.location = (0.0, 0.0)
            group_output.location = (190.0, 0.0)

            # Set dimensions
            group_input.width, group_input.height = 140.0, 100.0
            value.width, value.height = 140.0, 100.0
            group_output.width, group_output.height = 140.0, 100.0

            # initialize _mn_world_scale links
            # value.Value -> group_output.world_scale
            _mn_world_scale.links.new(value.outputs[0], group_output.inputs[0])
            return _mn_world_scale

        _mn_world_scale = _mn_world_scale_node_group()

        # initialize mn_units node group
        def mn_units_node_group():
            mn_units = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN Units"
            )

            mn_units.color_tag = "NONE"
            mn_units.description = ""

            # mn_units interface
            # Socket Angstrom
            angstrom_socket = mn_units.interface.new_socket(
                name="Angstrom", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angstrom_socket.subtype = "NONE"
            angstrom_socket.default_value = 0.0
            angstrom_socket.min_value = -3.4028234663852886e38
            angstrom_socket.max_value = 3.4028234663852886e38
            angstrom_socket.attribute_domain = "POINT"

            # Socket Nanometre
            nanometre_socket = mn_units.interface.new_socket(
                name="Nanometre", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            nanometre_socket.subtype = "NONE"
            nanometre_socket.default_value = 0.0
            nanometre_socket.min_value = -3.4028234663852886e38
            nanometre_socket.max_value = 3.4028234663852886e38
            nanometre_socket.attribute_domain = "POINT"

            # Socket Value
            value_socket = mn_units.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket.subtype = "NONE"
            value_socket.default_value = 3.0
            value_socket.min_value = -10000.0
            value_socket.max_value = 10000.0
            value_socket.attribute_domain = "POINT"
            value_socket.description = (
                "A value which will be scaled appropriately for the world"
            )

            # initialize mn_units nodes
            # node Group Output
            group_output_1 = mn_units.nodes.new("NodeGroupOutput")
            group_output_1.name = "Group Output"
            group_output_1.is_active_output = True

            # node Group Input
            group_input_1 = mn_units.nodes.new("NodeGroupInput")
            group_input_1.name = "Group Input"

            # node Math
            math = mn_units.nodes.new("ShaderNodeMath")
            math.name = "Math"
            math.operation = "MULTIPLY"
            math.use_clamp = False

            # node Math.001
            math_001 = mn_units.nodes.new("ShaderNodeMath")
            math_001.name = "Math.001"
            math_001.operation = "MULTIPLY"
            math_001.use_clamp = False
            # Value_001
            math_001.inputs[1].default_value = 10.0

            # node Group
            group = mn_units.nodes.new("GeometryNodeGroup")
            group.name = "Group"
            group.node_tree = _mn_world_scale

            # Set locations
            group_output_1.location = (190.0, 0.0)
            group_input_1.location = (-240.0, 0.0)
            math.location = (-60.0, 0.0)
            math_001.location = (-60.0, -160.0)
            group.location = (-304.00421142578125, -104.114013671875)

            # Set dimensions
            group_output_1.width, group_output_1.height = 140.0, 100.0
            group_input_1.width, group_input_1.height = 140.0, 100.0
            math.width, math.height = 140.0, 100.0
            math_001.width, math_001.height = 140.0, 100.0
            group.width, group.height = 197.58424377441406, 100.0

            # initialize mn_units links
            # math.Value -> group_output_1.Angstrom
            mn_units.links.new(math.outputs[0], group_output_1.inputs[0])
            # group_input_1.Value -> math.Value
            mn_units.links.new(group_input_1.outputs[0], math.inputs[0])
            # group.world_scale -> math.Value
            mn_units.links.new(group.outputs[0], math.inputs[1])
            # math.Value -> math_001.Value
            mn_units.links.new(math.outputs[0], math_001.inputs[0])
            # math_001.Value -> group_output_1.Nanometre
            mn_units.links.new(math_001.outputs[0], group_output_1.inputs[1])
            return mn_units

        mn_units = mn_units_node_group()

        # initialize _mn_utils_style_spheres_points node group
        def _mn_utils_style_spheres_points_node_group():
            _mn_utils_style_spheres_points = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_spheres_points"
            )

            _mn_utils_style_spheres_points.color_tag = "GEOMETRY"
            _mn_utils_style_spheres_points.description = ""

            _mn_utils_style_spheres_points.is_modifier = True

            # _mn_utils_style_spheres_points interface
            # Socket Point Cloud
            point_cloud_socket = _mn_utils_style_spheres_points.interface.new_socket(
                name="Point Cloud", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            point_cloud_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket = _mn_utils_style_spheres_points.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket.attribute_domain = "POINT"
            atoms_socket.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket = _mn_utils_style_spheres_points.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket.attribute_domain = "POINT"
            selection_socket.hide_value = True
            selection_socket.description = "Selection of atoms to apply this node to"

            # Socket Radii
            radii_socket = _mn_utils_style_spheres_points.interface.new_socket(
                name="Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radii_socket.subtype = "NONE"
            radii_socket.default_value = 0.800000011920929
            radii_socket.min_value = 0.0
            radii_socket.max_value = 10000.0
            radii_socket.attribute_domain = "POINT"

            # Socket Material
            material_socket = _mn_utils_style_spheres_points.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket.attribute_domain = "POINT"
            material_socket.description = "Material to apply to the resulting geometry"

            # initialize _mn_utils_style_spheres_points nodes
            # node Group Input
            group_input_2 = _mn_utils_style_spheres_points.nodes.new("NodeGroupInput")
            group_input_2.name = "Group Input"

            # node Mesh to Points
            mesh_to_points = _mn_utils_style_spheres_points.nodes.new(
                "GeometryNodeMeshToPoints"
            )
            mesh_to_points.name = "Mesh to Points"
            mesh_to_points.mode = "VERTICES"
            # Position
            mesh_to_points.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Switch
            switch = _mn_utils_style_spheres_points.nodes.new("GeometryNodeSwitch")
            switch.name = "Switch"
            switch.input_type = "FLOAT"

            # node Named Attribute
            named_attribute = _mn_utils_style_spheres_points.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute.name = "Named Attribute"
            named_attribute.data_type = "FLOAT"
            # Name
            named_attribute.inputs[0].default_value = "vdw_radii"

            # node Group
            group_1 = _mn_utils_style_spheres_points.nodes.new("GeometryNodeGroup")
            group_1.name = "Group"
            group_1.node_tree = mn_units
            # Input_1
            group_1.inputs[0].default_value = 0.800000011920929

            # node Math
            math_1 = _mn_utils_style_spheres_points.nodes.new("ShaderNodeMath")
            math_1.name = "Math"
            math_1.operation = "MULTIPLY"
            math_1.use_clamp = False

            # node Group Output
            group_output_2 = _mn_utils_style_spheres_points.nodes.new("NodeGroupOutput")
            group_output_2.name = "Group Output"
            group_output_2.is_active_output = True

            # node Set Material
            set_material = _mn_utils_style_spheres_points.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material.name = "Set Material"
            # Selection
            set_material.inputs[1].default_value = True

            # Set locations
            group_input_2.location = (-1060.0, 60.0)
            mesh_to_points.location = (-540.0, 220.0)
            switch.location = (-900.0, -100.0)
            named_attribute.location = (-1080.0, -100.0)
            group_1.location = (-1080.0, -240.0)
            math_1.location = (-720.0, 40.0)
            group_output_2.location = (-220.0, 220.0)
            set_material.location = (-380.0, 220.0)

            # Set dimensions
            group_input_2.width, group_input_2.height = 140.0, 100.0
            mesh_to_points.width, mesh_to_points.height = 140.0, 100.0
            switch.width, switch.height = 140.0, 100.0
            named_attribute.width, named_attribute.height = 140.0, 100.0
            group_1.width, group_1.height = 140.0, 100.0
            math_1.width, math_1.height = 140.0, 100.0
            group_output_2.width, group_output_2.height = 140.0, 100.0
            set_material.width, set_material.height = 140.0, 100.0

            # initialize _mn_utils_style_spheres_points links
            # set_material.Geometry -> group_output_2.Point Cloud
            _mn_utils_style_spheres_points.links.new(
                set_material.outputs[0], group_output_2.inputs[0]
            )
            # group_input_2.Selection -> mesh_to_points.Selection
            _mn_utils_style_spheres_points.links.new(
                group_input_2.outputs[1], mesh_to_points.inputs[1]
            )
            # group_input_2.Radii -> math_1.Value
            _mn_utils_style_spheres_points.links.new(
                group_input_2.outputs[2], math_1.inputs[0]
            )
            # math_1.Value -> mesh_to_points.Radius
            _mn_utils_style_spheres_points.links.new(
                math_1.outputs[0], mesh_to_points.inputs[3]
            )
            # group_input_2.Material -> set_material.Material
            _mn_utils_style_spheres_points.links.new(
                group_input_2.outputs[3], set_material.inputs[2]
            )
            # named_attribute.Attribute -> switch.Switch
            _mn_utils_style_spheres_points.links.new(
                named_attribute.outputs[0], switch.inputs[0]
            )
            # named_attribute.Attribute -> switch.True
            _mn_utils_style_spheres_points.links.new(
                named_attribute.outputs[0], switch.inputs[2]
            )
            # switch.Output -> math_1.Value
            _mn_utils_style_spheres_points.links.new(
                switch.outputs[0], math_1.inputs[1]
            )
            # group_input_2.Atoms -> mesh_to_points.Mesh
            _mn_utils_style_spheres_points.links.new(
                group_input_2.outputs[0], mesh_to_points.inputs[0]
            )
            # mesh_to_points.Points -> set_material.Geometry
            _mn_utils_style_spheres_points.links.new(
                mesh_to_points.outputs[0], set_material.inputs[0]
            )
            # group_1.Angstrom -> switch.False
            _mn_utils_style_spheres_points.links.new(
                group_1.outputs[0], switch.inputs[1]
            )
            return _mn_utils_style_spheres_points

        _mn_utils_style_spheres_points = _mn_utils_style_spheres_points_node_group()

        # initialize _mn_utils_style_spheres_icosphere node group
        def _mn_utils_style_spheres_icosphere_node_group():
            _mn_utils_style_spheres_icosphere = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_spheres_icosphere"
            )

            _mn_utils_style_spheres_icosphere.color_tag = "GEOMETRY"
            _mn_utils_style_spheres_icosphere.description = ""

            _mn_utils_style_spheres_icosphere.is_modifier = True

            # _mn_utils_style_spheres_icosphere interface
            # Socket Instances
            instances_socket = _mn_utils_style_spheres_icosphere.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_1 = _mn_utils_style_spheres_icosphere.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_1.attribute_domain = "POINT"
            atoms_socket_1.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_1 = _mn_utils_style_spheres_icosphere.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_1.attribute_domain = "POINT"
            selection_socket_1.hide_value = True
            selection_socket_1.description = "Selection of atoms to apply this node to"

            # Socket Radii
            radii_socket_1 = _mn_utils_style_spheres_icosphere.interface.new_socket(
                name="Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radii_socket_1.subtype = "NONE"
            radii_socket_1.default_value = 0.800000011920929
            radii_socket_1.min_value = 0.0
            radii_socket_1.max_value = 10000.0
            radii_socket_1.attribute_domain = "POINT"
            radii_socket_1.description = "Scale the VDW radii of the atoms."

            # Socket Subdivisions
            subdivisions_socket = (
                _mn_utils_style_spheres_icosphere.interface.new_socket(
                    name="Subdivisions", in_out="INPUT", socket_type="NodeSocketInt"
                )
            )
            subdivisions_socket.subtype = "NONE"
            subdivisions_socket.default_value = 2
            subdivisions_socket.min_value = 0
            subdivisions_socket.max_value = 5
            subdivisions_socket.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket = (
                _mn_utils_style_spheres_icosphere.interface.new_socket(
                    name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
                )
            )
            shade_smooth_socket.attribute_domain = "POINT"
            shade_smooth_socket.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_1 = _mn_utils_style_spheres_icosphere.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_1.attribute_domain = "POINT"
            material_socket_1.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize _mn_utils_style_spheres_icosphere nodes
            # node Frame
            frame = _mn_utils_style_spheres_icosphere.nodes.new("NodeFrame")
            frame.label = "Different Levels of Detail."
            frame.name = "Frame"
            frame.label_size = 20
            frame.shrink = True

            # node Reroute
            reroute = _mn_utils_style_spheres_icosphere.nodes.new("NodeReroute")
            reroute.name = "Reroute"
            # node Math.001
            math_001_1 = _mn_utils_style_spheres_icosphere.nodes.new("ShaderNodeMath")
            math_001_1.name = "Math.001"
            math_001_1.operation = "MINIMUM"
            math_001_1.use_clamp = False

            # node Group Output
            group_output_3 = _mn_utils_style_spheres_icosphere.nodes.new(
                "NodeGroupOutput"
            )
            group_output_3.name = "Group Output"
            group_output_3.is_active_output = True

            # node Group Input.002
            group_input_002 = _mn_utils_style_spheres_icosphere.nodes.new(
                "NodeGroupInput"
            )
            group_input_002.name = "Group Input.002"
            group_input_002.outputs[0].hide = True
            group_input_002.outputs[1].hide = True
            group_input_002.outputs[2].hide = True
            group_input_002.outputs[3].hide = True
            group_input_002.outputs[6].hide = True

            # node Set Shade Smooth
            set_shade_smooth = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth.name = "Set Shade Smooth"
            set_shade_smooth.domain = "FACE"
            # Selection
            set_shade_smooth.inputs[1].default_value = True

            # node Set Material
            set_material_1 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_1.name = "Set Material"
            # Selection
            set_material_1.inputs[1].default_value = True

            # node Group Input
            group_input_3 = _mn_utils_style_spheres_icosphere.nodes.new(
                "NodeGroupInput"
            )
            group_input_3.name = "Group Input"
            group_input_3.outputs[2].hide = True
            group_input_3.outputs[3].hide = True
            group_input_3.outputs[4].hide = True
            group_input_3.outputs[5].hide = True
            group_input_3.outputs[6].hide = True

            # node Reroute.001
            reroute_001 = _mn_utils_style_spheres_icosphere.nodes.new("NodeReroute")
            reroute_001.name = "Reroute.001"
            # node Group Input.001
            group_input_001 = _mn_utils_style_spheres_icosphere.nodes.new(
                "NodeGroupInput"
            )
            group_input_001.name = "Group Input.001"
            group_input_001.outputs[0].hide = True
            group_input_001.outputs[1].hide = True
            group_input_001.outputs[2].hide = True
            group_input_001.outputs[4].hide = True
            group_input_001.outputs[5].hide = True
            group_input_001.outputs[6].hide = True

            # node Ico Sphere.001
            ico_sphere_001 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_001.name = "Ico Sphere.001"
            # Radius
            ico_sphere_001.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere_001.inputs[1].default_value = 1

            # node Ico Sphere.002
            ico_sphere_002 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_002.name = "Ico Sphere.002"
            # Radius
            ico_sphere_002.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere_002.inputs[1].default_value = 2

            # node Ico Sphere.003
            ico_sphere_003 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_003.name = "Ico Sphere.003"
            # Radius
            ico_sphere_003.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere_003.inputs[1].default_value = 3

            # node Geometry to Instance
            geometry_to_instance = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance.name = "Geometry to Instance"

            # node Ico Sphere.004
            ico_sphere_004 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_004.name = "Ico Sphere.004"
            # Radius
            ico_sphere_004.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere_004.inputs[1].default_value = 4

            # node Ico Sphere.005
            ico_sphere_005 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_005.name = "Ico Sphere.005"
            # Radius
            ico_sphere_005.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere_005.inputs[1].default_value = 5

            # node Reroute.002
            reroute_002 = _mn_utils_style_spheres_icosphere.nodes.new("NodeReroute")
            reroute_002.name = "Reroute.002"
            # node Transform Geometry
            transform_geometry = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry.name = "Transform Geometry"
            transform_geometry.mode = "COMPONENTS"
            # Translation
            transform_geometry.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry.inputs[2].default_value = (
                0.7853981852531433,
                0.7853981852531433,
                0.0,
            )
            # Scale
            transform_geometry.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Cube
            cube = _mn_utils_style_spheres_icosphere.nodes.new("GeometryNodeMeshCube")
            cube.name = "Cube"
            # Size
            cube.inputs[0].default_value = (1.0, 1.0, 1.0)
            # Vertices X
            cube.inputs[1].default_value = 2
            # Vertices Y
            cube.inputs[2].default_value = 2
            # Vertices Z
            cube.inputs[3].default_value = 2

            # node Named Attribute
            named_attribute_1 = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_1.name = "Named Attribute"
            named_attribute_1.data_type = "FLOAT"
            # Name
            named_attribute_1.inputs[0].default_value = "vdw_radii"

            # node Radius
            radius = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeInputRadius"
            )
            radius.name = "Radius"

            # node Math
            math_2 = _mn_utils_style_spheres_icosphere.nodes.new("ShaderNodeMath")
            math_2.name = "Math"
            math_2.operation = "MAXIMUM"
            math_2.use_clamp = False

            # node Math.003
            math_003 = _mn_utils_style_spheres_icosphere.nodes.new("ShaderNodeMath")
            math_003.name = "Math.003"
            math_003.operation = "MULTIPLY"
            math_003.use_clamp = False

            # node Group Input.003
            group_input_003 = _mn_utils_style_spheres_icosphere.nodes.new(
                "NodeGroupInput"
            )
            group_input_003.name = "Group Input.003"
            group_input_003.outputs[0].hide = True
            group_input_003.outputs[1].hide = True
            group_input_003.outputs[3].hide = True
            group_input_003.outputs[4].hide = True
            group_input_003.outputs[5].hide = True
            group_input_003.outputs[6].hide = True

            # node Math.002
            math_002 = _mn_utils_style_spheres_icosphere.nodes.new("ShaderNodeMath")
            math_002.name = "Math.002"
            math_002.operation = "ADD"
            math_002.use_clamp = False

            # node Integer
            integer = _mn_utils_style_spheres_icosphere.nodes.new(
                "FunctionNodeInputInt"
            )
            integer.name = "Integer"
            integer.integer = -1

            # node Domain Size
            domain_size = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size.name = "Domain Size"
            domain_size.component = "INSTANCES"

            # node Instance on Points
            instance_on_points = _mn_utils_style_spheres_icosphere.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points.name = "Instance on Points"
            # Pick Instance
            instance_on_points.inputs[3].default_value = True
            # Rotation
            instance_on_points.inputs[5].default_value = (0.0, 0.0, 0.0)

            # Set parents
            ico_sphere_001.parent = frame
            ico_sphere_002.parent = frame
            ico_sphere_003.parent = frame
            geometry_to_instance.parent = frame
            ico_sphere_004.parent = frame
            ico_sphere_005.parent = frame
            reroute_002.parent = frame
            transform_geometry.parent = frame
            cube.parent = frame

            # Set locations
            frame.location = (0.0, 0.0)
            reroute.location = (-560.0, -40.0)
            math_001_1.location = (-140.0, 60.0)
            group_output_3.location = (835.407470703125, 359.5566711425781)
            group_input_002.location = (320.0, 260.0)
            set_shade_smooth.location = (500.0, 340.0)
            set_material_1.location = (660.0, 340.0)
            group_input_3.location = (-160.0, 240.0)
            reroute_001.location = (-480.0, 120.0)
            group_input_001.location = (-300.0, 60.0)
            ico_sphere_001.location = (-1180.0, 120.0)
            ico_sphere_002.location = (-1180.0, -20.0)
            ico_sphere_003.location = (-1180.0, -160.0)
            geometry_to_instance.location = (-940.0, 0.0)
            ico_sphere_004.location = (-1180.0, -300.0)
            ico_sphere_005.location = (-1180.0, -440.0)
            reroute_002.location = (-1040.0, 160.0)
            transform_geometry.location = (-1360.0, 200.0)
            cube.location = (-1520.0, 200.0)
            named_attribute_1.location = (-240.0, -340.0)
            radius.location = (-240.0, -480.0)
            math_2.location = (-60.0, -340.0)
            math_003.location = (100.0, -340.0)
            group_input_003.location = (-60.0, -520.0)
            math_002.location = (-140.0, -100.0)
            integer.location = (-320.0, -220.0)
            domain_size.location = (-320.0, -100.0)
            instance_on_points.location = (91.33897399902344, 216.86837768554688)

            # Set dimensions
            frame.width, frame.height = 800.0, 829.0
            reroute.width, reroute.height = 16.0, 100.0
            math_001_1.width, math_001_1.height = 140.0, 100.0
            group_output_3.width, group_output_3.height = 140.0, 100.0
            group_input_002.width, group_input_002.height = 140.0, 100.0
            set_shade_smooth.width, set_shade_smooth.height = 140.0, 100.0
            set_material_1.width, set_material_1.height = 140.0, 100.0
            group_input_3.width, group_input_3.height = 140.0, 100.0
            reroute_001.width, reroute_001.height = 16.0, 100.0
            group_input_001.width, group_input_001.height = 140.0, 100.0
            ico_sphere_001.width, ico_sphere_001.height = 140.0, 100.0
            ico_sphere_002.width, ico_sphere_002.height = 140.0, 100.0
            ico_sphere_003.width, ico_sphere_003.height = 140.0, 100.0
            geometry_to_instance.width, geometry_to_instance.height = 160.0, 100.0
            ico_sphere_004.width, ico_sphere_004.height = 140.0, 100.0
            ico_sphere_005.width, ico_sphere_005.height = 140.0, 100.0
            reroute_002.width, reroute_002.height = 16.0, 100.0
            transform_geometry.width, transform_geometry.height = 140.0, 100.0
            cube.width, cube.height = 140.0, 100.0
            named_attribute_1.width, named_attribute_1.height = 140.0, 100.0
            radius.width, radius.height = 140.0, 100.0
            math_2.width, math_2.height = 140.0, 100.0
            math_003.width, math_003.height = 140.0, 100.0
            group_input_003.width, group_input_003.height = 140.0, 100.0
            math_002.width, math_002.height = 140.0, 100.0
            integer.width, integer.height = 140.0, 100.0
            domain_size.width, domain_size.height = 140.0, 100.0
            instance_on_points.width, instance_on_points.height = 140.9404296875, 100.0

            # initialize _mn_utils_style_spheres_icosphere links
            # set_material_1.Geometry -> group_output_3.Instances
            _mn_utils_style_spheres_icosphere.links.new(
                set_material_1.outputs[0], group_output_3.inputs[0]
            )
            # set_shade_smooth.Geometry -> set_material_1.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                set_shade_smooth.outputs[0], set_material_1.inputs[0]
            )
            # group_input_3.Atoms -> instance_on_points.Points
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_3.outputs[0], instance_on_points.inputs[0]
            )
            # reroute_001.Output -> instance_on_points.Instance
            _mn_utils_style_spheres_icosphere.links.new(
                reroute_001.outputs[0], instance_on_points.inputs[2]
            )
            # ico_sphere_005.Mesh -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                ico_sphere_005.outputs[0], geometry_to_instance.inputs[0]
            )
            # math_001_1.Value -> instance_on_points.Instance Index
            _mn_utils_style_spheres_icosphere.links.new(
                math_001_1.outputs[0], instance_on_points.inputs[4]
            )
            # group_input_001.Subdivisions -> math_001_1.Value
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_001.outputs[3], math_001_1.inputs[0]
            )
            # reroute.Output -> domain_size.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                reroute.outputs[0], domain_size.inputs[0]
            )
            # geometry_to_instance.Instances -> reroute.Input
            _mn_utils_style_spheres_icosphere.links.new(
                geometry_to_instance.outputs[0], reroute.inputs[0]
            )
            # named_attribute_1.Attribute -> math_2.Value
            _mn_utils_style_spheres_icosphere.links.new(
                named_attribute_1.outputs[0], math_2.inputs[0]
            )
            # radius.Radius -> math_2.Value
            _mn_utils_style_spheres_icosphere.links.new(
                radius.outputs[0], math_2.inputs[1]
            )
            # group_input_002.Material -> set_material_1.Material
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_002.outputs[5], set_material_1.inputs[2]
            )
            # instance_on_points.Instances -> set_shade_smooth.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                instance_on_points.outputs[0], set_shade_smooth.inputs[0]
            )
            # group_input_002.Shade Smooth -> set_shade_smooth.Shade Smooth
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_002.outputs[4], set_shade_smooth.inputs[2]
            )
            # group_input_3.Selection -> instance_on_points.Selection
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_3.outputs[1], instance_on_points.inputs[1]
            )
            # math_2.Value -> math_003.Value
            _mn_utils_style_spheres_icosphere.links.new(
                math_2.outputs[0], math_003.inputs[0]
            )
            # group_input_003.Radii -> math_003.Value
            _mn_utils_style_spheres_icosphere.links.new(
                group_input_003.outputs[2], math_003.inputs[1]
            )
            # reroute.Output -> reroute_001.Input
            _mn_utils_style_spheres_icosphere.links.new(
                reroute.outputs[0], reroute_001.inputs[0]
            )
            # math_003.Value -> instance_on_points.Scale
            _mn_utils_style_spheres_icosphere.links.new(
                math_003.outputs[0], instance_on_points.inputs[6]
            )
            # cube.Mesh -> transform_geometry.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                cube.outputs[0], transform_geometry.inputs[0]
            )
            # transform_geometry.Geometry -> reroute_002.Input
            _mn_utils_style_spheres_icosphere.links.new(
                transform_geometry.outputs[0], reroute_002.inputs[0]
            )
            # domain_size.Instance Count -> math_002.Value
            _mn_utils_style_spheres_icosphere.links.new(
                domain_size.outputs[5], math_002.inputs[0]
            )
            # integer.Integer -> math_002.Value
            _mn_utils_style_spheres_icosphere.links.new(
                integer.outputs[0], math_002.inputs[1]
            )
            # math_002.Value -> math_001_1.Value
            _mn_utils_style_spheres_icosphere.links.new(
                math_002.outputs[0], math_001_1.inputs[1]
            )
            # ico_sphere_004.Mesh -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                ico_sphere_004.outputs[0], geometry_to_instance.inputs[0]
            )
            # ico_sphere_003.Mesh -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                ico_sphere_003.outputs[0], geometry_to_instance.inputs[0]
            )
            # ico_sphere_002.Mesh -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                ico_sphere_002.outputs[0], geometry_to_instance.inputs[0]
            )
            # ico_sphere_001.Mesh -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                ico_sphere_001.outputs[0], geometry_to_instance.inputs[0]
            )
            # reroute_002.Output -> geometry_to_instance.Geometry
            _mn_utils_style_spheres_icosphere.links.new(
                reroute_002.outputs[0], geometry_to_instance.inputs[0]
            )
            return _mn_utils_style_spheres_icosphere

        _mn_utils_style_spheres_icosphere = (
            _mn_utils_style_spheres_icosphere_node_group()
        )

        # initialize style_spheres node group
        def style_spheres_node_group():
            style_spheres = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Spheres"
            )

            style_spheres.color_tag = "GEOMETRY"
            style_spheres.description = ""

            style_spheres.is_modifier = True

            # style_spheres interface
            # Socket Geometry
            geometry_socket = style_spheres.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_2 = style_spheres.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_2.attribute_domain = "POINT"
            atoms_socket_2.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_2 = style_spheres.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_2.attribute_domain = "POINT"
            selection_socket_2.hide_value = True
            selection_socket_2.description = "Selection of atoms to apply this style to"

            # Panel Sphere
            sphere_panel = style_spheres.interface.new_panel("Sphere")
            # Socket Sphere As Mesh
            sphere_as_mesh_socket = style_spheres.interface.new_socket(
                name="Sphere As Mesh",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=sphere_panel,
            )
            sphere_as_mesh_socket.attribute_domain = "POINT"
            sphere_as_mesh_socket.description = "Use Eevee or Cycles compatible atoms."

            # Socket Sphere Radii
            sphere_radii_socket = style_spheres.interface.new_socket(
                name="Sphere Radii",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sphere_panel,
            )
            sphere_radii_socket.subtype = "NONE"
            sphere_radii_socket.default_value = 0.800000011920929
            sphere_radii_socket.min_value = 0.0
            sphere_radii_socket.max_value = 2.0
            sphere_radii_socket.attribute_domain = "POINT"
            sphere_radii_socket.description = "Scale the `vdw_radii` of the atoms."

            # Socket Sphere Subdivisions
            sphere_subdivisions_socket = style_spheres.interface.new_socket(
                name="Sphere Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=sphere_panel,
            )
            sphere_subdivisions_socket.subtype = "NONE"
            sphere_subdivisions_socket.default_value = 2
            sphere_subdivisions_socket.min_value = 0
            sphere_subdivisions_socket.max_value = 5
            sphere_subdivisions_socket.attribute_domain = "POINT"
            sphere_subdivisions_socket.description = (
                "Subdivisions for Eevee compatible atoms."
            )

            # Panel Material
            material_panel = style_spheres.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Shade Smooth
            shade_smooth_socket_1 = style_spheres.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel,
            )
            shade_smooth_socket_1.attribute_domain = "POINT"
            shade_smooth_socket_1.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_2 = style_spheres.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel,
            )
            material_socket_2.attribute_domain = "POINT"
            material_socket_2.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_spheres nodes
            # node Group Input
            group_input_4 = style_spheres.nodes.new("NodeGroupInput")
            group_input_4.name = "Group Input"

            # node Group Output
            group_output_4 = style_spheres.nodes.new("NodeGroupOutput")
            group_output_4.name = "Group Output"
            group_output_4.is_active_output = True

            # node Join Geometry
            join_geometry = style_spheres.nodes.new("GeometryNodeJoinGeometry")
            join_geometry.name = "Join Geometry"

            # node Separate Geometry
            separate_geometry = style_spheres.nodes.new("GeometryNodeSeparateGeometry")
            separate_geometry.name = "Separate Geometry"
            separate_geometry.domain = "POINT"

            # node Group.014
            group_014 = style_spheres.nodes.new("GeometryNodeGroup")
            group_014.name = "Group.014"
            group_014.node_tree = _mn_utils_style_spheres_points

            # node Group.026
            group_026 = style_spheres.nodes.new("GeometryNodeGroup")
            group_026.name = "Group.026"
            group_026.node_tree = _mn_utils_style_spheres_icosphere

            # node Realize Instances
            realize_instances = style_spheres.nodes.new("GeometryNodeRealizeInstances")
            realize_instances.name = "Realize Instances"
            # Selection
            realize_instances.inputs[1].default_value = True
            # Realize All
            realize_instances.inputs[2].default_value = True
            # Depth
            realize_instances.inputs[3].default_value = 0

            # Set locations
            group_input_4.location = (-679.2061157226562, -54.561466217041016)
            group_output_4.location = (480.0, 40.0)
            join_geometry.location = (320.0, 40.0)
            separate_geometry.location = (-420.0, 80.0)
            group_014.location = (-200.0, -200.0)
            group_026.location = (-200.0, 60.0)
            realize_instances.location = (100.0, 60.0)

            # Set dimensions
            group_input_4.width, group_input_4.height = 140.0, 100.0
            group_output_4.width, group_output_4.height = 140.0, 100.0
            join_geometry.width, join_geometry.height = 140.0, 100.0
            separate_geometry.width, separate_geometry.height = 140.0, 100.0
            group_014.width, group_014.height = 277.9979248046875, 100.0
            group_026.width, group_026.height = 278.0207824707031, 100.0
            realize_instances.width, realize_instances.height = 140.0, 100.0

            # initialize style_spheres links
            # group_input_4.Atoms -> separate_geometry.Geometry
            style_spheres.links.new(
                group_input_4.outputs[0], separate_geometry.inputs[0]
            )
            # group_input_4.Selection -> group_014.Selection
            style_spheres.links.new(group_input_4.outputs[1], group_014.inputs[1])
            # group_input_4.Selection -> group_026.Selection
            style_spheres.links.new(group_input_4.outputs[1], group_026.inputs[1])
            # group_input_4.Sphere As Mesh -> separate_geometry.Selection
            style_spheres.links.new(
                group_input_4.outputs[2], separate_geometry.inputs[1]
            )
            # group_input_4.Sphere Radii -> group_014.Radii
            style_spheres.links.new(group_input_4.outputs[3], group_014.inputs[2])
            # group_input_4.Sphere Radii -> group_026.Radii
            style_spheres.links.new(group_input_4.outputs[3], group_026.inputs[2])
            # group_input_4.Sphere Subdivisions -> group_026.Subdivisions
            style_spheres.links.new(group_input_4.outputs[4], group_026.inputs[3])
            # group_input_4.Shade Smooth -> group_026.Shade Smooth
            style_spheres.links.new(group_input_4.outputs[5], group_026.inputs[4])
            # group_input_4.Material -> group_014.Material
            style_spheres.links.new(group_input_4.outputs[6], group_014.inputs[3])
            # group_input_4.Material -> group_026.Material
            style_spheres.links.new(group_input_4.outputs[6], group_026.inputs[5])
            # join_geometry.Geometry -> group_output_4.Geometry
            style_spheres.links.new(join_geometry.outputs[0], group_output_4.inputs[0])
            # realize_instances.Geometry -> join_geometry.Geometry
            style_spheres.links.new(
                realize_instances.outputs[0], join_geometry.inputs[0]
            )
            # group_026.Instances -> realize_instances.Geometry
            style_spheres.links.new(group_026.outputs[0], realize_instances.inputs[0])
            # separate_geometry.Inverted -> group_014.Atoms
            style_spheres.links.new(separate_geometry.outputs[1], group_014.inputs[0])
            # separate_geometry.Selection -> group_026.Atoms
            style_spheres.links.new(separate_geometry.outputs[0], group_026.inputs[0])
            # group_014.Point Cloud -> join_geometry.Geometry
            style_spheres.links.new(group_014.outputs[0], join_geometry.inputs[0])
            return style_spheres

        style_spheres = style_spheres_node_group()

        # initialize _mn_utils_style_sticks node group
        def _mn_utils_style_sticks_node_group():
            _mn_utils_style_sticks = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_sticks"
            )

            _mn_utils_style_sticks.color_tag = "GEOMETRY"
            _mn_utils_style_sticks.description = ""

            _mn_utils_style_sticks.is_modifier = True

            # _mn_utils_style_sticks interface
            # Socket Geometry
            geometry_socket_1 = _mn_utils_style_sticks.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_1.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_3 = _mn_utils_style_sticks.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_3.attribute_domain = "POINT"
            atoms_socket_3.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_3 = _mn_utils_style_sticks.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_3.attribute_domain = "POINT"
            selection_socket_3.hide_value = True
            selection_socket_3.description = "Selection of atoms to apply this node to"

            # Socket Radius
            radius_socket = _mn_utils_style_sticks.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket.subtype = "NONE"
            radius_socket.default_value = 0.30000001192092896
            radius_socket.min_value = 0.0
            radius_socket.max_value = 1.0
            radius_socket.attribute_domain = "POINT"
            radius_socket.description = "Radius of the bond mesh."

            # Socket Resolution
            resolution_socket = _mn_utils_style_sticks.interface.new_socket(
                name="Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            resolution_socket.subtype = "NONE"
            resolution_socket.default_value = 6
            resolution_socket.min_value = 3
            resolution_socket.max_value = 512
            resolution_socket.attribute_domain = "POINT"
            resolution_socket.description = "Resolution of the created bond cylinders."

            # Socket Fill Caps
            fill_caps_socket = _mn_utils_style_sticks.interface.new_socket(
                name="Fill Caps", in_out="INPUT", socket_type="NodeSocketBool"
            )
            fill_caps_socket.attribute_domain = "POINT"
            fill_caps_socket.description = "Fill the caps at each end of the bonds."

            # Socket Interpolate Color
            interpolate_color_socket = _mn_utils_style_sticks.interface.new_socket(
                name="Interpolate Color", in_out="INPUT", socket_type="NodeSocketBool"
            )
            interpolate_color_socket.attribute_domain = "POINT"

            # Panel Material
            material_panel_1 = _mn_utils_style_sticks.interface.new_panel("Material")
            # Socket Shade Smooth
            shade_smooth_socket_2 = _mn_utils_style_sticks.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_1,
            )
            shade_smooth_socket_2.attribute_domain = "POINT"
            shade_smooth_socket_2.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_3 = _mn_utils_style_sticks.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_1,
            )
            material_socket_3.attribute_domain = "POINT"
            material_socket_3.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize _mn_utils_style_sticks nodes
            # node Frame
            frame_1 = _mn_utils_style_sticks.nodes.new("NodeFrame")
            frame_1.label = "Bonds to Mesh"
            frame_1.name = "Frame"
            frame_1.label_size = 20
            frame_1.shrink = True

            # node Frame.001
            frame_001 = _mn_utils_style_sticks.nodes.new("NodeFrame")
            frame_001.label = "Capture index for pulling colors from atoms"
            frame_001.name = "Frame.001"
            frame_001.label_size = 20
            frame_001.shrink = True

            # node Frame.003
            frame_003 = _mn_utils_style_sticks.nodes.new("NodeFrame")
            frame_003.label = "Set up materials"
            frame_003.name = "Frame.003"
            frame_003.label_size = 20
            frame_003.shrink = True

            # node Frame.002
            frame_002 = _mn_utils_style_sticks.nodes.new("NodeFrame")
            frame_002.label = "Store correct color on the new bond mesh"
            frame_002.name = "Frame.002"
            frame_002.label_size = 20
            frame_002.shrink = True

            # node Mesh to Curve
            mesh_to_curve = _mn_utils_style_sticks.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve.name = "Mesh to Curve"
            # Selection
            mesh_to_curve.inputs[1].default_value = True

            # node Set Curve Radius
            set_curve_radius = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius.name = "Set Curve Radius"
            # Selection
            set_curve_radius.inputs[1].default_value = True

            # node Subdivide Curve
            subdivide_curve = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeSubdivideCurve"
            )
            subdivide_curve.name = "Subdivide Curve"
            # Cuts
            subdivide_curve.inputs[1].default_value = 1

            # node Group
            group_2 = _mn_utils_style_sticks.nodes.new("GeometryNodeGroup")
            group_2.name = "Group"
            group_2.node_tree = mn_units

            # node Group Input.002
            group_input_002_1 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_002_1.name = "Group Input.002"
            group_input_002_1.outputs[0].hide = True
            group_input_002_1.outputs[3].hide = True
            group_input_002_1.outputs[5].hide = True
            group_input_002_1.outputs[6].hide = True
            group_input_002_1.outputs[7].hide = True
            group_input_002_1.outputs[8].hide = True

            # node Curve Circle
            curve_circle = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle.name = "Curve Circle"
            curve_circle.mode = "RADIUS"
            # Radius
            curve_circle.inputs[4].default_value = 1.0

            # node Curve to Mesh
            curve_to_mesh = _mn_utils_style_sticks.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh.name = "Curve to Mesh"

            # node Group Input.001
            group_input_001_1 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_001_1.name = "Group Input.001"
            group_input_001_1.outputs[0].hide = True
            group_input_001_1.outputs[2].hide = True
            group_input_001_1.outputs[4].hide = True
            group_input_001_1.outputs[5].hide = True
            group_input_001_1.outputs[6].hide = True
            group_input_001_1.outputs[7].hide = True
            group_input_001_1.outputs[8].hide = True

            # node Duplicate Elements
            duplicate_elements = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeDuplicateElements"
            )
            duplicate_elements.name = "Duplicate Elements"
            duplicate_elements.domain = "EDGE"
            # Selection
            duplicate_elements.inputs[1].default_value = True
            # Amount
            duplicate_elements.inputs[2].default_value = 1

            # node Mesh Island.001
            mesh_island_001 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeInputMeshIsland"
            )
            mesh_island_001.name = "Mesh Island.001"

            # node Accumulate Field.001
            accumulate_field_001 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001.name = "Accumulate Field.001"
            accumulate_field_001.data_type = "INT"
            accumulate_field_001.domain = "POINT"
            # Value
            accumulate_field_001.inputs[0].default_value = 1

            # node Capture Attribute
            capture_attribute = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute.name = "Capture Attribute"
            capture_attribute.active_index = 0
            capture_attribute.capture_items.clear()
            capture_attribute.capture_items.new("FLOAT", "Value")
            capture_attribute.capture_items["Value"].data_type = "BOOLEAN"
            capture_attribute.domain = "POINT"

            # node Capture Attribute.003
            capture_attribute_003 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_003.name = "Capture Attribute.003"
            capture_attribute_003.active_index = 0
            capture_attribute_003.capture_items.clear()
            capture_attribute_003.capture_items.new("FLOAT", "Vertex Index 1")
            capture_attribute_003.capture_items["Vertex Index 1"].data_type = "INT"
            capture_attribute_003.capture_items.new("FLOAT", "Vertex Index 2")
            capture_attribute_003.capture_items["Vertex Index 2"].data_type = "INT"
            capture_attribute_003.domain = "EDGE"

            # node Edge Vertices
            edge_vertices = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices.name = "Edge Vertices"

            # node Group Input.003
            group_input_003_1 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_003_1.name = "Group Input.003"
            group_input_003_1.outputs[0].hide = True
            group_input_003_1.outputs[2].hide = True
            group_input_003_1.outputs[3].hide = True
            group_input_003_1.outputs[4].hide = True
            group_input_003_1.outputs[5].hide = True
            group_input_003_1.outputs[6].hide = True
            group_input_003_1.outputs[8].hide = True

            # node Set Material
            set_material_2 = _mn_utils_style_sticks.nodes.new("GeometryNodeSetMaterial")
            set_material_2.name = "Set Material"
            # Selection
            set_material_2.inputs[1].default_value = True

            # node Set Shade Smooth
            set_shade_smooth_1 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_1.name = "Set Shade Smooth"
            set_shade_smooth_1.domain = "FACE"
            # Selection
            set_shade_smooth_1.inputs[1].default_value = True

            # node Group Input.004
            group_input_004 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_004.name = "Group Input.004"
            group_input_004.outputs[0].hide = True
            group_input_004.outputs[2].hide = True
            group_input_004.outputs[3].hide = True
            group_input_004.outputs[4].hide = True
            group_input_004.outputs[5].hide = True
            group_input_004.outputs[7].hide = True
            group_input_004.outputs[8].hide = True

            # node Group Output
            group_output_5 = _mn_utils_style_sticks.nodes.new("NodeGroupOutput")
            group_output_5.name = "Group Output"
            group_output_5.is_active_output = True

            # node Capture Attribute.001
            capture_attribute_001 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001.name = "Capture Attribute.001"
            capture_attribute_001.active_index = 0
            capture_attribute_001.capture_items.clear()
            capture_attribute_001.capture_items.new("FLOAT", "Value")
            capture_attribute_001.capture_items["Value"].data_type = "BOOLEAN"
            capture_attribute_001.domain = "FACE"

            # node Sample Index.001
            sample_index_001 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001.name = "Sample Index.001"
            sample_index_001.hide = True
            sample_index_001.clamp = False
            sample_index_001.data_type = "FLOAT_COLOR"
            sample_index_001.domain = "POINT"

            # node Evaluate on Domain.003
            evaluate_on_domain_003 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_003.name = "Evaluate on Domain.003"
            evaluate_on_domain_003.hide = True
            evaluate_on_domain_003.data_type = "FLOAT_COLOR"
            evaluate_on_domain_003.domain = "FACE"

            # node Named Attribute.002
            named_attribute_002 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002.name = "Named Attribute.002"
            named_attribute_002.hide = True
            named_attribute_002.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_002.inputs[0].default_value = "Color"

            # node Switch.001
            switch_001 = _mn_utils_style_sticks.nodes.new("GeometryNodeSwitch")
            switch_001.name = "Switch.001"
            switch_001.hide = True
            switch_001.input_type = "INT"

            # node Evaluate on Domain
            evaluate_on_domain = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain.name = "Evaluate on Domain"
            evaluate_on_domain.hide = True
            evaluate_on_domain.data_type = "FLOAT_COLOR"
            evaluate_on_domain.domain = "POINT"

            # node Switch
            switch_1 = _mn_utils_style_sticks.nodes.new("GeometryNodeSwitch")
            switch_1.name = "Switch"
            switch_1.input_type = "RGBA"

            # node Group Input.005
            group_input_005 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_005.name = "Group Input.005"
            group_input_005.outputs[0].hide = True
            group_input_005.outputs[2].hide = True
            group_input_005.outputs[3].hide = True
            group_input_005.outputs[4].hide = True
            group_input_005.outputs[6].hide = True
            group_input_005.outputs[7].hide = True
            group_input_005.outputs[8].hide = True

            # node Store Named Attribute
            store_named_attribute = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute.name = "Store Named Attribute"
            store_named_attribute.data_type = "FLOAT_COLOR"
            store_named_attribute.domain = "CORNER"
            # Selection
            store_named_attribute.inputs[1].default_value = True
            # Name
            store_named_attribute.inputs[2].default_value = "Color"

            # node Group Input
            group_input_5 = _mn_utils_style_sticks.nodes.new("NodeGroupInput")
            group_input_5.name = "Group Input"

            # node Separate Geometry
            separate_geometry_1 = _mn_utils_style_sticks.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_1.name = "Separate Geometry"
            separate_geometry_1.domain = "POINT"

            # Set parents
            mesh_to_curve.parent = frame_1
            set_curve_radius.parent = frame_1
            subdivide_curve.parent = frame_1
            group_2.parent = frame_1
            group_input_002_1.parent = frame_1
            curve_circle.parent = frame_1
            curve_to_mesh.parent = frame_1
            group_input_001_1.parent = frame_1
            duplicate_elements.parent = frame_001
            mesh_island_001.parent = frame_001
            accumulate_field_001.parent = frame_001
            capture_attribute.parent = frame_001
            capture_attribute_003.parent = frame_001
            group_input_003_1.parent = frame_003
            set_material_2.parent = frame_003
            set_shade_smooth_1.parent = frame_003
            group_input_004.parent = frame_003
            capture_attribute_001.parent = frame_002
            sample_index_001.parent = frame_002
            evaluate_on_domain_003.parent = frame_002
            named_attribute_002.parent = frame_002
            switch_001.parent = frame_002
            evaluate_on_domain.parent = frame_002
            switch_1.parent = frame_002
            group_input_005.parent = frame_002
            store_named_attribute.parent = frame_002

            # Set locations
            frame_1.location = (-20.0, -180.0)
            frame_001.location = (-40.0, 115.0)
            frame_003.location = (230.0, 120.0)
            frame_002.location = (0.0, 0.0)
            mesh_to_curve.location = (-1560.0, 0.0)
            set_curve_radius.location = (-1400.0, 0.0)
            subdivide_curve.location = (-1240.0, 0.0)
            group_2.location = (-1560.0, -120.0)
            group_input_002_1.location = (-1570.0, -270.0)
            curve_circle.location = (-1080.0, -140.0)
            curve_to_mesh.location = (-1080.0, 0.0)
            group_input_001_1.location = (-1080.0, -280.0)
            duplicate_elements.location = (-2000.0, -20.0)
            mesh_island_001.location = (-2000.0, -195.0)
            accumulate_field_001.location = (-1840.0, -155.0)
            capture_attribute.location = (-1840.0, -20.0)
            capture_attribute_003.location = (-2190.0, 125.0)
            edge_vertices.location = (-2460.0, 80.0)
            group_input_003_1.location = (-80.0, -40.0)
            set_material_2.location = (-80.0, 100.0)
            set_shade_smooth_1.location = (110.0, 100.0)
            group_input_004.location = (110.0, -60.0)
            group_output_5.location = (620.0, 220.0)
            capture_attribute_001.location = (-920.0, 60.0)
            sample_index_001.location = (-480.0, 180.0)
            evaluate_on_domain_003.location = (-480.0, 140.0)
            named_attribute_002.location = (-660.0, 160.0)
            switch_001.location = (-660.0, 120.0)
            evaluate_on_domain.location = (-480.0, 100.0)
            switch_1.location = (-300.0, 220.0)
            group_input_005.location = (-480.0, 60.0)
            store_named_attribute.location = (-120.0, 120.0)
            group_input_5.location = (-2680.0, 240.0)
            separate_geometry_1.location = (-2460.0, 240.0)

            # Set dimensions
            frame_1.width, frame_1.height = 690.4000244140625, 434.79998779296875
            frame_001.width, frame_001.height = 550.39990234375, 538.7999877929688
            frame_003.width, frame_003.height = 389.6000061035156, 303.6000061035156
            frame_002.width, frame_002.height = 1000.0, 358.79998779296875
            mesh_to_curve.width, mesh_to_curve.height = 140.0, 100.0
            set_curve_radius.width, set_curve_radius.height = 140.0, 100.0
            subdivide_curve.width, subdivide_curve.height = 140.0, 100.0
            group_2.width, group_2.height = 140.0, 100.0
            group_input_002_1.width, group_input_002_1.height = 140.0, 100.0
            curve_circle.width, curve_circle.height = 140.0, 100.0
            curve_to_mesh.width, curve_to_mesh.height = 140.0, 100.0
            group_input_001_1.width, group_input_001_1.height = 140.0, 100.0
            duplicate_elements.width, duplicate_elements.height = 140.0, 100.0
            mesh_island_001.width, mesh_island_001.height = 140.0, 100.0
            accumulate_field_001.width, accumulate_field_001.height = 140.0, 100.0
            capture_attribute.width, capture_attribute.height = 140.0, 100.0
            capture_attribute_003.width, capture_attribute_003.height = 140.0, 100.0
            edge_vertices.width, edge_vertices.height = 140.0, 100.0
            group_input_003_1.width, group_input_003_1.height = 140.0, 100.0
            set_material_2.width, set_material_2.height = 140.0, 100.0
            set_shade_smooth_1.width, set_shade_smooth_1.height = 140.0, 100.0
            group_input_004.width, group_input_004.height = 140.0, 100.0
            group_output_5.width, group_output_5.height = 140.0, 100.0
            capture_attribute_001.width, capture_attribute_001.height = 140.0, 100.0
            sample_index_001.width, sample_index_001.height = 140.0, 100.0
            evaluate_on_domain_003.width, evaluate_on_domain_003.height = 140.0, 100.0
            named_attribute_002.width, named_attribute_002.height = 140.0, 100.0
            switch_001.width, switch_001.height = 140.0, 100.0
            evaluate_on_domain.width, evaluate_on_domain.height = 140.0, 100.0
            switch_1.width, switch_1.height = 140.0, 100.0
            group_input_005.width, group_input_005.height = 140.0, 100.0
            store_named_attribute.width, store_named_attribute.height = 140.0, 100.0
            group_input_5.width, group_input_5.height = 140.0, 100.0
            separate_geometry_1.width, separate_geometry_1.height = 140.0, 100.0

            # initialize _mn_utils_style_sticks links
            # capture_attribute.Geometry -> mesh_to_curve.Mesh
            _mn_utils_style_sticks.links.new(
                capture_attribute.outputs[0], mesh_to_curve.inputs[0]
            )
            # set_shade_smooth_1.Geometry -> group_output_5.Geometry
            _mn_utils_style_sticks.links.new(
                set_shade_smooth_1.outputs[0], group_output_5.inputs[0]
            )
            # curve_circle.Curve -> curve_to_mesh.Profile Curve
            _mn_utils_style_sticks.links.new(
                curve_circle.outputs[0], curve_to_mesh.inputs[1]
            )
            # mesh_to_curve.Curve -> set_curve_radius.Curve
            _mn_utils_style_sticks.links.new(
                mesh_to_curve.outputs[0], set_curve_radius.inputs[0]
            )
            # group_2.Angstrom -> set_curve_radius.Radius
            _mn_utils_style_sticks.links.new(
                group_2.outputs[0], set_curve_radius.inputs[2]
            )
            # set_curve_radius.Curve -> subdivide_curve.Curve
            _mn_utils_style_sticks.links.new(
                set_curve_radius.outputs[0], subdivide_curve.inputs[0]
            )
            # capture_attribute_003.Geometry -> duplicate_elements.Geometry
            _mn_utils_style_sticks.links.new(
                capture_attribute_003.outputs[0], duplicate_elements.inputs[0]
            )
            # group_input_001_1.Resolution -> curve_circle.Resolution
            _mn_utils_style_sticks.links.new(
                group_input_001_1.outputs[3], curve_circle.inputs[0]
            )
            # group_input_003_1.Material -> set_material_2.Material
            _mn_utils_style_sticks.links.new(
                group_input_003_1.outputs[7], set_material_2.inputs[2]
            )
            # set_material_2.Geometry -> set_shade_smooth_1.Geometry
            _mn_utils_style_sticks.links.new(
                set_material_2.outputs[0], set_shade_smooth_1.inputs[0]
            )
            # group_input_004.Shade Smooth -> set_shade_smooth_1.Shade Smooth
            _mn_utils_style_sticks.links.new(
                group_input_004.outputs[6], set_shade_smooth_1.inputs[2]
            )
            # capture_attribute_003.Geometry -> sample_index_001.Geometry
            _mn_utils_style_sticks.links.new(
                capture_attribute_003.outputs[0], sample_index_001.inputs[0]
            )
            # named_attribute_002.Attribute -> sample_index_001.Value
            _mn_utils_style_sticks.links.new(
                named_attribute_002.outputs[0], sample_index_001.inputs[1]
            )
            # subdivide_curve.Curve -> curve_to_mesh.Curve
            _mn_utils_style_sticks.links.new(
                subdivide_curve.outputs[0], curve_to_mesh.inputs[0]
            )
            # switch_001.Output -> sample_index_001.Index
            _mn_utils_style_sticks.links.new(
                switch_001.outputs[0], sample_index_001.inputs[2]
            )
            # capture_attribute_001.Geometry -> store_named_attribute.Geometry
            _mn_utils_style_sticks.links.new(
                capture_attribute_001.outputs[0], store_named_attribute.inputs[0]
            )
            # capture_attribute_003.Vertex Index 1 -> switch_001.False
            _mn_utils_style_sticks.links.new(
                capture_attribute_003.outputs[1], switch_001.inputs[1]
            )
            # duplicate_elements.Geometry -> capture_attribute.Geometry
            _mn_utils_style_sticks.links.new(
                duplicate_elements.outputs[0], capture_attribute.inputs[0]
            )
            # accumulate_field_001.Trailing -> capture_attribute.Value
            _mn_utils_style_sticks.links.new(
                accumulate_field_001.outputs[1], capture_attribute.inputs[1]
            )
            # mesh_island_001.Island Index -> accumulate_field_001.Group ID
            _mn_utils_style_sticks.links.new(
                mesh_island_001.outputs[0], accumulate_field_001.inputs[1]
            )
            # capture_attribute_003.Vertex Index 2 -> switch_001.True
            _mn_utils_style_sticks.links.new(
                capture_attribute_003.outputs[2], switch_001.inputs[2]
            )
            # curve_to_mesh.Mesh -> capture_attribute_001.Geometry
            _mn_utils_style_sticks.links.new(
                curve_to_mesh.outputs[0], capture_attribute_001.inputs[0]
            )
            # capture_attribute_001.Value -> switch_001.Switch
            _mn_utils_style_sticks.links.new(
                capture_attribute_001.outputs[1], switch_001.inputs[0]
            )
            # capture_attribute.Value -> capture_attribute_001.Value
            _mn_utils_style_sticks.links.new(
                capture_attribute.outputs[1], capture_attribute_001.inputs[1]
            )
            # sample_index_001.Value -> evaluate_on_domain_003.Value
            _mn_utils_style_sticks.links.new(
                sample_index_001.outputs[0], evaluate_on_domain_003.inputs[0]
            )
            # store_named_attribute.Geometry -> set_material_2.Geometry
            _mn_utils_style_sticks.links.new(
                store_named_attribute.outputs[0], set_material_2.inputs[0]
            )
            # group_input_002_1.Radius -> group_2.Value
            _mn_utils_style_sticks.links.new(
                group_input_002_1.outputs[2], group_2.inputs[0]
            )
            # group_input_002_1.Fill Caps -> curve_to_mesh.Fill Caps
            _mn_utils_style_sticks.links.new(
                group_input_002_1.outputs[4], curve_to_mesh.inputs[2]
            )
            # evaluate_on_domain_003.Value -> evaluate_on_domain.Value
            _mn_utils_style_sticks.links.new(
                evaluate_on_domain_003.outputs[0], evaluate_on_domain.inputs[0]
            )
            # evaluate_on_domain.Value -> switch_1.True
            _mn_utils_style_sticks.links.new(
                evaluate_on_domain.outputs[0], switch_1.inputs[2]
            )
            # switch_1.Output -> store_named_attribute.Value
            _mn_utils_style_sticks.links.new(
                switch_1.outputs[0], store_named_attribute.inputs[3]
            )
            # evaluate_on_domain_003.Value -> switch_1.False
            _mn_utils_style_sticks.links.new(
                evaluate_on_domain_003.outputs[0], switch_1.inputs[1]
            )
            # group_input_005.Interpolate Color -> switch_1.Switch
            _mn_utils_style_sticks.links.new(
                group_input_005.outputs[5], switch_1.inputs[0]
            )
            # group_input_5.Atoms -> separate_geometry_1.Geometry
            _mn_utils_style_sticks.links.new(
                group_input_5.outputs[0], separate_geometry_1.inputs[0]
            )
            # separate_geometry_1.Selection -> capture_attribute_003.Geometry
            _mn_utils_style_sticks.links.new(
                separate_geometry_1.outputs[0], capture_attribute_003.inputs[0]
            )
            # group_input_5.Selection -> separate_geometry_1.Selection
            _mn_utils_style_sticks.links.new(
                group_input_5.outputs[1], separate_geometry_1.inputs[1]
            )
            # edge_vertices.Vertex Index 2 -> capture_attribute_003.Vertex Index 2
            _mn_utils_style_sticks.links.new(
                edge_vertices.outputs[1], capture_attribute_003.inputs[2]
            )
            # edge_vertices.Vertex Index 1 -> capture_attribute_003.Vertex Index 1
            _mn_utils_style_sticks.links.new(
                edge_vertices.outputs[0], capture_attribute_003.inputs[1]
            )
            return _mn_utils_style_sticks

        _mn_utils_style_sticks = _mn_utils_style_sticks_node_group()

        # initialize style_sticks node group
        def style_sticks_node_group():
            style_sticks = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Sticks"
            )

            style_sticks.color_tag = "GEOMETRY"
            style_sticks.description = ""

            # style_sticks interface
            # Socket Geometry
            geometry_socket_2 = style_sticks.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_2.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_4 = style_sticks.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_4.attribute_domain = "POINT"
            atoms_socket_4.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_4 = style_sticks.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_4.attribute_domain = "POINT"
            selection_socket_4.hide_value = True
            selection_socket_4.description = "Selection of atoms to apply this style to"

            # Socket Quality
            quality_socket = style_sticks.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket.subtype = "NONE"
            quality_socket.default_value = 2
            quality_socket.min_value = 0
            quality_socket.max_value = 5
            quality_socket.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_1 = style_sticks.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_1.subtype = "NONE"
            radius_socket_1.default_value = 0.20000000298023224
            radius_socket_1.min_value = 0.0
            radius_socket_1.max_value = 1.0
            radius_socket_1.attribute_domain = "POINT"

            # Panel Material
            material_panel_2 = style_sticks.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Color Blur
            color_blur_socket = style_sticks.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_2,
            )
            color_blur_socket.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_3 = style_sticks.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_2,
            )
            shade_smooth_socket_3.attribute_domain = "POINT"
            shade_smooth_socket_3.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_4 = style_sticks.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_2,
            )
            material_socket_4.attribute_domain = "POINT"
            material_socket_4.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_sticks nodes
            # node Group Output
            group_output_6 = style_sticks.nodes.new("NodeGroupOutput")
            group_output_6.name = "Group Output"
            group_output_6.is_active_output = True

            # node Join Geometry
            join_geometry_1 = style_sticks.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_1.name = "Join Geometry"

            # node MN_style_spheres
            mn_style_spheres = style_sticks.nodes.new("GeometryNodeGroup")
            mn_style_spheres.label = "Style Spheres"
            mn_style_spheres.name = "MN_style_spheres"
            mn_style_spheres.node_tree = style_spheres
            # Input_1
            mn_style_spheres.inputs[1].default_value = True
            # Input_2
            mn_style_spheres.inputs[2].default_value = True

            # node Separate Geometry
            separate_geometry_2 = style_sticks.nodes.new("GeometryNodeSeparateGeometry")
            separate_geometry_2.name = "Separate Geometry"
            separate_geometry_2.domain = "POINT"

            # node Reroute
            reroute_1 = style_sticks.nodes.new("NodeReroute")
            reroute_1.name = "Reroute"
            # node Store Named Attribute
            store_named_attribute_1 = style_sticks.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_1.name = "Store Named Attribute"
            store_named_attribute_1.data_type = "FLOAT"
            store_named_attribute_1.domain = "POINT"
            # Selection
            store_named_attribute_1.inputs[1].default_value = True
            # Name
            store_named_attribute_1.inputs[2].default_value = "vdw_radii"
            # Value
            store_named_attribute_1.inputs[3].default_value = 0.009999999776482582

            # node Reroute.001
            reroute_001_1 = style_sticks.nodes.new("NodeReroute")
            reroute_001_1.name = "Reroute.001"
            # node .MN_utils_style_sticks
            _mn_utils_style_sticks_1 = style_sticks.nodes.new("GeometryNodeGroup")
            _mn_utils_style_sticks_1.name = ".MN_utils_style_sticks"
            _mn_utils_style_sticks_1.node_tree = _mn_utils_style_sticks
            # Socket_0
            _mn_utils_style_sticks_1.inputs[1].default_value = True
            # Input_15
            _mn_utils_style_sticks_1.inputs[4].default_value = False

            # node Integer
            integer_1 = style_sticks.nodes.new("FunctionNodeInputInt")
            integer_1.name = "Integer"
            integer_1.integer = 8

            # node Group Input
            group_input_6 = style_sticks.nodes.new("NodeGroupInput")
            group_input_6.name = "Group Input"

            # node Math
            math_3 = style_sticks.nodes.new("ShaderNodeMath")
            math_3.name = "Math"
            math_3.operation = "MULTIPLY"
            math_3.use_clamp = False

            # Set locations
            group_output_6.location = (140.0, 120.0)
            join_geometry_1.location = (-20.0, 120.0)
            mn_style_spheres.location = (-260.0, 200.0)
            separate_geometry_2.location = (-660.0, 140.0)
            reroute_1.location = (-480.0, -60.0)
            store_named_attribute_1.location = (-440.0, 200.0)
            reroute_001_1.location = (-660.0, -40.0)
            _mn_utils_style_sticks_1.location = (-260.0, -120.0)
            integer_1.location = (-640.0, -340.0)
            group_input_6.location = (-860.0, 60.0)
            math_3.location = (-440.0, -220.0)

            # Set dimensions
            group_output_6.width, group_output_6.height = 140.0, 100.0
            join_geometry_1.width, join_geometry_1.height = 140.0, 100.0
            mn_style_spheres.width, mn_style_spheres.height = 200.0, 100.0
            separate_geometry_2.width, separate_geometry_2.height = 140.0, 100.0
            reroute_1.width, reroute_1.height = 16.0, 100.0
            store_named_attribute_1.width, store_named_attribute_1.height = 140.0, 100.0
            reroute_001_1.width, reroute_001_1.height = 16.0, 100.0
            _mn_utils_style_sticks_1.width, _mn_utils_style_sticks_1.height = (
                207.9752197265625,
                100.0,
            )
            integer_1.width, integer_1.height = 140.0, 100.0
            group_input_6.width, group_input_6.height = 140.0, 100.0
            math_3.width, math_3.height = 140.0, 100.0

            # initialize style_sticks links
            # group_input_6.Atoms -> separate_geometry_2.Geometry
            style_sticks.links.new(
                group_input_6.outputs[0], separate_geometry_2.inputs[0]
            )
            # store_named_attribute_1.Geometry -> mn_style_spheres.Atoms
            style_sticks.links.new(
                store_named_attribute_1.outputs[0], mn_style_spheres.inputs[0]
            )
            # group_input_6.Selection -> separate_geometry_2.Selection
            style_sticks.links.new(
                group_input_6.outputs[1], separate_geometry_2.inputs[1]
            )
            # separate_geometry_2.Selection -> _mn_utils_style_sticks_1.Atoms
            style_sticks.links.new(
                separate_geometry_2.outputs[0], _mn_utils_style_sticks_1.inputs[0]
            )
            # _mn_utils_style_sticks_1.Geometry -> join_geometry_1.Geometry
            style_sticks.links.new(
                _mn_utils_style_sticks_1.outputs[0], join_geometry_1.inputs[0]
            )
            # join_geometry_1.Geometry -> group_output_6.Geometry
            style_sticks.links.new(join_geometry_1.outputs[0], group_output_6.inputs[0])
            # separate_geometry_2.Selection -> store_named_attribute_1.Geometry
            style_sticks.links.new(
                separate_geometry_2.outputs[0], store_named_attribute_1.inputs[0]
            )
            # reroute_1.Output -> mn_style_spheres.Sphere Radii
            style_sticks.links.new(reroute_1.outputs[0], mn_style_spheres.inputs[3])
            # reroute_1.Output -> _mn_utils_style_sticks_1.Radius
            style_sticks.links.new(
                reroute_1.outputs[0], _mn_utils_style_sticks_1.inputs[2]
            )
            # group_input_6.Radius -> reroute_1.Input
            style_sticks.links.new(group_input_6.outputs[3], reroute_1.inputs[0])
            # reroute_001_1.Output -> mn_style_spheres.Sphere Subdivisions
            style_sticks.links.new(reroute_001_1.outputs[0], mn_style_spheres.inputs[4])
            # group_input_6.Quality -> reroute_001_1.Input
            style_sticks.links.new(group_input_6.outputs[2], reroute_001_1.inputs[0])
            # reroute_001_1.Output -> math_3.Value
            style_sticks.links.new(reroute_001_1.outputs[0], math_3.inputs[0])
            # math_3.Value -> _mn_utils_style_sticks_1.Resolution
            style_sticks.links.new(
                math_3.outputs[0], _mn_utils_style_sticks_1.inputs[3]
            )
            # integer_1.Integer -> math_3.Value
            style_sticks.links.new(integer_1.outputs[0], math_3.inputs[1])
            # group_input_6.Shade Smooth -> mn_style_spheres.Shade Smooth
            style_sticks.links.new(group_input_6.outputs[5], mn_style_spheres.inputs[5])
            # group_input_6.Material -> mn_style_spheres.Material
            style_sticks.links.new(group_input_6.outputs[6], mn_style_spheres.inputs[6])
            # group_input_6.Material -> _mn_utils_style_sticks_1.Material
            style_sticks.links.new(
                group_input_6.outputs[6], _mn_utils_style_sticks_1.inputs[7]
            )
            # group_input_6.Shade Smooth -> _mn_utils_style_sticks_1.Shade Smooth
            style_sticks.links.new(
                group_input_6.outputs[5], _mn_utils_style_sticks_1.inputs[6]
            )
            # group_input_6.Color Blur -> _mn_utils_style_sticks_1.Interpolate Color
            style_sticks.links.new(
                group_input_6.outputs[4], _mn_utils_style_sticks_1.inputs[5]
            )
            # mn_style_spheres.Geometry -> join_geometry_1.Geometry
            style_sticks.links.new(
                mn_style_spheres.outputs[0], join_geometry_1.inputs[0]
            )
            return style_sticks

        style_sticks = style_sticks_node_group()

        # initialize _mn_constants_atom_name_peptide node group
        def _mn_constants_atom_name_peptide_node_group():
            _mn_constants_atom_name_peptide = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_constants_atom_name_peptide"
            )

            _mn_constants_atom_name_peptide.color_tag = "NONE"
            _mn_constants_atom_name_peptide.description = ""

            # _mn_constants_atom_name_peptide interface
            # Socket Backbone Lower
            backbone_lower_socket = (
                _mn_constants_atom_name_peptide.interface.new_socket(
                    name="Backbone Lower", in_out="OUTPUT", socket_type="NodeSocketInt"
                )
            )
            backbone_lower_socket.subtype = "NONE"
            backbone_lower_socket.default_value = 0
            backbone_lower_socket.min_value = -2147483648
            backbone_lower_socket.max_value = 2147483647
            backbone_lower_socket.attribute_domain = "POINT"

            # Socket Backbone Upper
            backbone_upper_socket = (
                _mn_constants_atom_name_peptide.interface.new_socket(
                    name="Backbone Upper", in_out="OUTPUT", socket_type="NodeSocketInt"
                )
            )
            backbone_upper_socket.subtype = "NONE"
            backbone_upper_socket.default_value = 0
            backbone_upper_socket.min_value = -2147483648
            backbone_upper_socket.max_value = 2147483647
            backbone_upper_socket.attribute_domain = "POINT"

            # Socket Side Chain Lower
            side_chain_lower_socket = (
                _mn_constants_atom_name_peptide.interface.new_socket(
                    name="Side Chain Lower",
                    in_out="OUTPUT",
                    socket_type="NodeSocketInt",
                )
            )
            side_chain_lower_socket.subtype = "NONE"
            side_chain_lower_socket.default_value = 0
            side_chain_lower_socket.min_value = -2147483648
            side_chain_lower_socket.max_value = 2147483647
            side_chain_lower_socket.attribute_domain = "POINT"

            # Socket Side Chain Upper
            side_chain_upper_socket = (
                _mn_constants_atom_name_peptide.interface.new_socket(
                    name="Side Chain Upper",
                    in_out="OUTPUT",
                    socket_type="NodeSocketInt",
                )
            )
            side_chain_upper_socket.subtype = "NONE"
            side_chain_upper_socket.default_value = 0
            side_chain_upper_socket.min_value = -2147483648
            side_chain_upper_socket.max_value = 2147483647
            side_chain_upper_socket.attribute_domain = "POINT"

            # Socket Alpha Carbon
            alpha_carbon_socket = _mn_constants_atom_name_peptide.interface.new_socket(
                name="Alpha Carbon", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            alpha_carbon_socket.subtype = "NONE"
            alpha_carbon_socket.default_value = 0
            alpha_carbon_socket.min_value = -2147483648
            alpha_carbon_socket.max_value = 2147483647
            alpha_carbon_socket.attribute_domain = "POINT"

            # initialize _mn_constants_atom_name_peptide nodes
            # node Group Input
            group_input_7 = _mn_constants_atom_name_peptide.nodes.new("NodeGroupInput")
            group_input_7.name = "Group Input"

            # node Group Output
            group_output_7 = _mn_constants_atom_name_peptide.nodes.new(
                "NodeGroupOutput"
            )
            group_output_7.name = "Group Output"
            group_output_7.is_active_output = True

            # node Integer.001
            integer_001 = _mn_constants_atom_name_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_001.name = "Integer.001"
            integer_001.integer = 49

            # node Integer.004
            integer_004 = _mn_constants_atom_name_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_004.name = "Integer.004"
            integer_004.integer = 2

            # node Integer
            integer_2 = _mn_constants_atom_name_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_2.name = "Integer"
            integer_2.integer = 5

            # node Integer.003
            integer_003 = _mn_constants_atom_name_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_003.name = "Integer.003"
            integer_003.integer = 1

            # node Integer.002
            integer_002 = _mn_constants_atom_name_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_002.name = "Integer.002"
            integer_002.integer = 4

            # Set locations
            group_input_7.location = (-200.0, 0.0)
            group_output_7.location = (260.0, 180.0)
            integer_001.location = (0.0, -50.0)
            integer_004.location = (0.0, -140.0)
            integer_2.location = (0.0, 40.0)
            integer_003.location = (0.0, 240.0)
            integer_002.location = (0.0, 140.0)

            # Set dimensions
            group_input_7.width, group_input_7.height = 140.0, 100.0
            group_output_7.width, group_output_7.height = 140.0, 100.0
            integer_001.width, integer_001.height = 140.0, 100.0
            integer_004.width, integer_004.height = 140.0, 100.0
            integer_2.width, integer_2.height = 140.0, 100.0
            integer_003.width, integer_003.height = 140.0, 100.0
            integer_002.width, integer_002.height = 140.0, 100.0

            # initialize _mn_constants_atom_name_peptide links
            # integer_003.Integer -> group_output_7.Backbone Lower
            _mn_constants_atom_name_peptide.links.new(
                integer_003.outputs[0], group_output_7.inputs[0]
            )
            # integer_002.Integer -> group_output_7.Backbone Upper
            _mn_constants_atom_name_peptide.links.new(
                integer_002.outputs[0], group_output_7.inputs[1]
            )
            # integer_2.Integer -> group_output_7.Side Chain Lower
            _mn_constants_atom_name_peptide.links.new(
                integer_2.outputs[0], group_output_7.inputs[2]
            )
            # integer_001.Integer -> group_output_7.Side Chain Upper
            _mn_constants_atom_name_peptide.links.new(
                integer_001.outputs[0], group_output_7.inputs[3]
            )
            # integer_004.Integer -> group_output_7.Alpha Carbon
            _mn_constants_atom_name_peptide.links.new(
                integer_004.outputs[0], group_output_7.inputs[4]
            )
            return _mn_constants_atom_name_peptide

        _mn_constants_atom_name_peptide = _mn_constants_atom_name_peptide_node_group()

        # initialize _mn_select_peptide node group
        def _mn_select_peptide_node_group():
            _mn_select_peptide = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_peptide"
            )

            _mn_select_peptide.color_tag = "NONE"
            _mn_select_peptide.description = ""

            # _mn_select_peptide interface
            # Socket Is Backbone
            is_backbone_socket = _mn_select_peptide.interface.new_socket(
                name="Is Backbone", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_backbone_socket.attribute_domain = "POINT"

            # Socket Is Side Chain
            is_side_chain_socket = _mn_select_peptide.interface.new_socket(
                name="Is Side Chain", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_side_chain_socket.attribute_domain = "POINT"

            # Socket Is Peptide
            is_peptide_socket = _mn_select_peptide.interface.new_socket(
                name="Is Peptide", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_peptide_socket.attribute_domain = "POINT"

            # Socket Is Alpha Carbon
            is_alpha_carbon_socket = _mn_select_peptide.interface.new_socket(
                name="Is Alpha Carbon", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_alpha_carbon_socket.attribute_domain = "POINT"

            # initialize _mn_select_peptide nodes
            # node Group Input
            group_input_8 = _mn_select_peptide.nodes.new("NodeGroupInput")
            group_input_8.name = "Group Input"

            # node Compare
            compare = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare.name = "Compare"
            compare.data_type = "INT"
            compare.mode = "ELEMENT"
            compare.operation = "GREATER_EQUAL"

            # node Compare.001
            compare_001 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_001.name = "Compare.001"
            compare_001.data_type = "INT"
            compare_001.mode = "ELEMENT"
            compare_001.operation = "LESS_EQUAL"

            # node Boolean Math.001
            boolean_math_001 = _mn_select_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001.name = "Boolean Math.001"
            boolean_math_001.operation = "AND"

            # node Compare.002
            compare_002 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_002.name = "Compare.002"
            compare_002.data_type = "INT"
            compare_002.mode = "ELEMENT"
            compare_002.operation = "GREATER_EQUAL"

            # node Compare.003
            compare_003 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_003.name = "Compare.003"
            compare_003.data_type = "INT"
            compare_003.mode = "ELEMENT"
            compare_003.operation = "LESS_EQUAL"

            # node Boolean Math.002
            boolean_math_002 = _mn_select_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002.name = "Boolean Math.002"
            boolean_math_002.operation = "AND"

            # node Compare.004
            compare_004 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_004.name = "Compare.004"
            compare_004.data_type = "INT"
            compare_004.mode = "ELEMENT"
            compare_004.operation = "GREATER_EQUAL"

            # node Named Attribute
            named_attribute_2 = _mn_select_peptide.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_2.name = "Named Attribute"
            named_attribute_2.data_type = "INT"
            # Name
            named_attribute_2.inputs[0].default_value = "atom_name"

            # node Boolean Math.003
            boolean_math_003 = _mn_select_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003.name = "Boolean Math.003"
            boolean_math_003.operation = "AND"

            # node Group Output
            group_output_8 = _mn_select_peptide.nodes.new("NodeGroupOutput")
            group_output_8.name = "Group Output"
            group_output_8.is_active_output = True

            # node Compare.005
            compare_005 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_005.name = "Compare.005"
            compare_005.data_type = "INT"
            compare_005.mode = "ELEMENT"
            compare_005.operation = "LESS_EQUAL"

            # node Compare.006
            compare_006 = _mn_select_peptide.nodes.new("FunctionNodeCompare")
            compare_006.name = "Compare.006"
            compare_006.data_type = "INT"
            compare_006.mode = "ELEMENT"
            compare_006.operation = "EQUAL"

            # node Group
            group_3 = _mn_select_peptide.nodes.new("GeometryNodeGroup")
            group_3.name = "Group"
            group_3.node_tree = _mn_constants_atom_name_peptide

            # node Boolean Math
            boolean_math = _mn_select_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math.name = "Boolean Math"
            boolean_math.operation = "OR"

            # Set locations
            group_input_8.location = (-460.0, 0.0)
            compare.location = (80.0, 80.0)
            compare_001.location = (80.0, -80.0)
            boolean_math_001.location = (260.0, 80.0)
            compare_002.location = (80.0, -240.0)
            compare_003.location = (80.0, -400.0)
            boolean_math_002.location = (260.0, -240.0)
            compare_004.location = (80.0, -560.0)
            named_attribute_2.location = (-360.0, -480.0)
            boolean_math_003.location = (260.0, -560.0)
            group_output_8.location = (666.1161499023438, -263.7054748535156)
            compare_005.location = (80.0, -720.0)
            compare_006.location = (260.0, -380.0)
            group_3.location = (-411.24090576171875, -312.71807861328125)
            boolean_math.location = (420.0, -240.0)

            # Set dimensions
            group_input_8.width, group_input_8.height = 140.0, 100.0
            compare.width, compare.height = 140.0, 100.0
            compare_001.width, compare_001.height = 140.0, 100.0
            boolean_math_001.width, boolean_math_001.height = 140.0, 100.0
            compare_002.width, compare_002.height = 153.86517333984375, 100.0
            compare_003.width, compare_003.height = 153.86517333984375, 100.0
            boolean_math_002.width, boolean_math_002.height = 140.0, 100.0
            compare_004.width, compare_004.height = 140.0, 100.0
            named_attribute_2.width, named_attribute_2.height = 140.0, 100.0
            boolean_math_003.width, boolean_math_003.height = 140.0, 100.0
            group_output_8.width, group_output_8.height = 140.0, 100.0
            compare_005.width, compare_005.height = 140.0, 100.0
            compare_006.width, compare_006.height = 140.0, 100.0
            group_3.width, group_3.height = 369.1165771484375, 100.0
            boolean_math.width, boolean_math.height = 140.0, 100.0

            # initialize _mn_select_peptide links
            # compare_001.Result -> boolean_math_001.Boolean
            _mn_select_peptide.links.new(
                compare_001.outputs[0], boolean_math_001.inputs[1]
            )
            # group_3.Backbone Lower -> compare.B
            _mn_select_peptide.links.new(group_3.outputs[0], compare.inputs[3])
            # named_attribute_2.Attribute -> compare.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare.inputs[2]
            )
            # compare.Result -> boolean_math_001.Boolean
            _mn_select_peptide.links.new(compare.outputs[0], boolean_math_001.inputs[0])
            # named_attribute_2.Attribute -> compare_001.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_001.inputs[2]
            )
            # group_3.Backbone Upper -> compare_001.B
            _mn_select_peptide.links.new(group_3.outputs[1], compare_001.inputs[3])
            # boolean_math_001.Boolean -> group_output_8.Is Backbone
            _mn_select_peptide.links.new(
                boolean_math_001.outputs[0], group_output_8.inputs[0]
            )
            # compare_003.Result -> boolean_math_002.Boolean
            _mn_select_peptide.links.new(
                compare_003.outputs[0], boolean_math_002.inputs[1]
            )
            # named_attribute_2.Attribute -> compare_002.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_002.inputs[2]
            )
            # compare_002.Result -> boolean_math_002.Boolean
            _mn_select_peptide.links.new(
                compare_002.outputs[0], boolean_math_002.inputs[0]
            )
            # named_attribute_2.Attribute -> compare_003.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_003.inputs[2]
            )
            # group_3.Side Chain Lower -> compare_002.B
            _mn_select_peptide.links.new(group_3.outputs[2], compare_002.inputs[3])
            # group_3.Side Chain Upper -> compare_003.B
            _mn_select_peptide.links.new(group_3.outputs[3], compare_003.inputs[3])
            # compare_005.Result -> boolean_math_003.Boolean
            _mn_select_peptide.links.new(
                compare_005.outputs[0], boolean_math_003.inputs[1]
            )
            # named_attribute_2.Attribute -> compare_004.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_004.inputs[2]
            )
            # compare_004.Result -> boolean_math_003.Boolean
            _mn_select_peptide.links.new(
                compare_004.outputs[0], boolean_math_003.inputs[0]
            )
            # named_attribute_2.Attribute -> compare_005.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_005.inputs[2]
            )
            # group_3.Backbone Lower -> compare_004.B
            _mn_select_peptide.links.new(group_3.outputs[0], compare_004.inputs[3])
            # group_3.Side Chain Upper -> compare_005.B
            _mn_select_peptide.links.new(group_3.outputs[3], compare_005.inputs[3])
            # boolean_math_003.Boolean -> group_output_8.Is Peptide
            _mn_select_peptide.links.new(
                boolean_math_003.outputs[0], group_output_8.inputs[2]
            )
            # named_attribute_2.Attribute -> compare_006.A
            _mn_select_peptide.links.new(
                named_attribute_2.outputs[0], compare_006.inputs[2]
            )
            # group_3.Alpha Carbon -> compare_006.B
            _mn_select_peptide.links.new(group_3.outputs[4], compare_006.inputs[3])
            # compare_006.Result -> group_output_8.Is Alpha Carbon
            _mn_select_peptide.links.new(
                compare_006.outputs[0], group_output_8.inputs[3]
            )
            # boolean_math_002.Boolean -> boolean_math.Boolean
            _mn_select_peptide.links.new(
                boolean_math_002.outputs[0], boolean_math.inputs[0]
            )
            # compare_006.Result -> boolean_math.Boolean
            _mn_select_peptide.links.new(compare_006.outputs[0], boolean_math.inputs[1])
            # boolean_math.Boolean -> group_output_8.Is Side Chain
            _mn_select_peptide.links.new(
                boolean_math.outputs[0], group_output_8.inputs[1]
            )
            return _mn_select_peptide

        _mn_select_peptide = _mn_select_peptide_node_group()

        # initialize fallback_boolean node group
        def fallback_boolean_node_group():
            fallback_boolean = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Fallback Boolean"
            )

            fallback_boolean.color_tag = "INPUT"
            fallback_boolean.description = "Computes the boolean field if the given attribute doesn't exist. If it doesn't exist it just uses the attribute instead"

            # fallback_boolean interface
            # Socket Boolean
            boolean_socket = fallback_boolean.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket.attribute_domain = "POINT"

            # Socket Name
            name_socket = fallback_boolean.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket.attribute_domain = "POINT"

            # Socket Fallback
            fallback_socket = fallback_boolean.interface.new_socket(
                name="Fallback", in_out="INPUT", socket_type="NodeSocketBool"
            )
            fallback_socket.attribute_domain = "POINT"

            # initialize fallback_boolean nodes
            # node Group Output
            group_output_9 = fallback_boolean.nodes.new("NodeGroupOutput")
            group_output_9.name = "Group Output"
            group_output_9.is_active_output = True

            # node Group Input
            group_input_9 = fallback_boolean.nodes.new("NodeGroupInput")
            group_input_9.name = "Group Input"

            # node Named Attribute
            named_attribute_3 = fallback_boolean.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_3.name = "Named Attribute"
            named_attribute_3.data_type = "BOOLEAN"

            # node Switch
            switch_2 = fallback_boolean.nodes.new("GeometryNodeSwitch")
            switch_2.name = "Switch"
            switch_2.input_type = "BOOLEAN"

            # Set locations
            group_output_9.location = (276.6171569824219, 4.738137245178223)
            group_input_9.location = (-280.0, 0.0)
            named_attribute_3.location = (-94.73597717285156, 4.738137245178223)
            switch_2.location = (86.61715698242188, 4.738137245178223)

            # Set dimensions
            group_output_9.width, group_output_9.height = 140.0, 100.0
            group_input_9.width, group_input_9.height = 140.0, 100.0
            named_attribute_3.width, named_attribute_3.height = 140.0, 100.0
            switch_2.width, switch_2.height = 140.0, 100.0

            # initialize fallback_boolean links
            # named_attribute_3.Exists -> switch_2.Switch
            fallback_boolean.links.new(named_attribute_3.outputs[1], switch_2.inputs[0])
            # named_attribute_3.Attribute -> switch_2.True
            fallback_boolean.links.new(named_attribute_3.outputs[0], switch_2.inputs[2])
            # group_input_9.Fallback -> switch_2.False
            fallback_boolean.links.new(group_input_9.outputs[1], switch_2.inputs[1])
            # switch_2.Output -> group_output_9.Boolean
            fallback_boolean.links.new(switch_2.outputs[0], group_output_9.inputs[0])
            # group_input_9.Name -> named_attribute_3.Name
            fallback_boolean.links.new(
                group_input_9.outputs[0], named_attribute_3.inputs[0]
            )
            return fallback_boolean

        fallback_boolean = fallback_boolean_node_group()

        # initialize is_peptide node group
        def is_peptide_node_group():
            is_peptide = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Peptide"
            )

            is_peptide.color_tag = "INPUT"
            is_peptide.description = ""

            # is_peptide interface
            # Socket Selection
            selection_socket_5 = is_peptide.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_5.attribute_domain = "POINT"
            selection_socket_5.description = "True if atoms are part of a peptide"

            # Socket Inverted
            inverted_socket = is_peptide.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket.attribute_domain = "POINT"

            # Socket And
            and_socket = is_peptide.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket.attribute_domain = "POINT"
            and_socket.hide_value = True

            # Socket Or
            or_socket = is_peptide.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket.attribute_domain = "POINT"
            or_socket.hide_value = True

            # initialize is_peptide nodes
            # node Group Input
            group_input_10 = is_peptide.nodes.new("NodeGroupInput")
            group_input_10.name = "Group Input"

            # node Boolean Math.001
            boolean_math_001_1 = is_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_1.name = "Boolean Math.001"
            boolean_math_001_1.operation = "AND"

            # node Group
            group_4 = is_peptide.nodes.new("GeometryNodeGroup")
            group_4.name = "Group"
            group_4.node_tree = _mn_select_peptide

            # node Group Output
            group_output_10 = is_peptide.nodes.new("NodeGroupOutput")
            group_output_10.name = "Group Output"
            group_output_10.is_active_output = True

            # node Group.001
            group_001 = is_peptide.nodes.new("GeometryNodeGroup")
            group_001.name = "Group.001"
            group_001.node_tree = fallback_boolean
            # Socket_2
            group_001.inputs[0].default_value = "is_peptide"

            # node Boolean Math.002
            boolean_math_002_1 = is_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_1.name = "Boolean Math.002"
            boolean_math_002_1.operation = "OR"

            # node Boolean Math
            boolean_math_1 = is_peptide.nodes.new("FunctionNodeBooleanMath")
            boolean_math_1.name = "Boolean Math"
            boolean_math_1.operation = "NOT"

            # Set locations
            group_input_10.location = (-200.0, 0.0)
            boolean_math_001_1.location = (-40.0, 0.0)
            group_4.location = (-340.0, -140.0)
            group_output_10.location = (320.0, 0.0)
            group_001.location = (-40.0, -140.0)
            boolean_math_002_1.location = (140.0, 5.243539333343506)
            boolean_math_1.location = (140.0, -120.0)

            # Set dimensions
            group_input_10.width, group_input_10.height = 140.0, 100.0
            boolean_math_001_1.width, boolean_math_001_1.height = 140.0, 100.0
            group_4.width, group_4.height = 247.90924072265625, 100.0
            group_output_10.width, group_output_10.height = 140.0, 100.0
            group_001.width, group_001.height = 140.0, 100.0
            boolean_math_002_1.width, boolean_math_002_1.height = 140.0, 100.0
            boolean_math_1.width, boolean_math_1.height = 140.0, 100.0

            # initialize is_peptide links
            # boolean_math_002_1.Boolean -> group_output_10.Selection
            is_peptide.links.new(
                boolean_math_002_1.outputs[0], group_output_10.inputs[0]
            )
            # group_input_10.And -> boolean_math_001_1.Boolean
            is_peptide.links.new(
                group_input_10.outputs[0], boolean_math_001_1.inputs[0]
            )
            # group_4.Is Peptide -> group_001.Fallback
            is_peptide.links.new(group_4.outputs[2], group_001.inputs[1])
            # group_001.Boolean -> boolean_math_001_1.Boolean
            is_peptide.links.new(group_001.outputs[0], boolean_math_001_1.inputs[1])
            # boolean_math_001_1.Boolean -> boolean_math_002_1.Boolean
            is_peptide.links.new(
                boolean_math_001_1.outputs[0], boolean_math_002_1.inputs[0]
            )
            # group_input_10.Or -> boolean_math_002_1.Boolean
            is_peptide.links.new(
                group_input_10.outputs[1], boolean_math_002_1.inputs[1]
            )
            # boolean_math_002_1.Boolean -> boolean_math_1.Boolean
            is_peptide.links.new(
                boolean_math_002_1.outputs[0], boolean_math_1.inputs[0]
            )
            # boolean_math_1.Boolean -> group_output_10.Inverted
            is_peptide.links.new(boolean_math_1.outputs[0], group_output_10.inputs[1])
            return is_peptide

        is_peptide = is_peptide_node_group()

        # initialize _mn_constants_atom_name_nucleic node group
        def _mn_constants_atom_name_nucleic_node_group():
            _mn_constants_atom_name_nucleic = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_constants_atom_name_nucleic"
            )

            _mn_constants_atom_name_nucleic.color_tag = "NONE"
            _mn_constants_atom_name_nucleic.description = ""

            # _mn_constants_atom_name_nucleic interface
            # Socket Backbone Lower
            backbone_lower_socket_1 = (
                _mn_constants_atom_name_nucleic.interface.new_socket(
                    name="Backbone Lower", in_out="OUTPUT", socket_type="NodeSocketInt"
                )
            )
            backbone_lower_socket_1.subtype = "NONE"
            backbone_lower_socket_1.default_value = 0
            backbone_lower_socket_1.min_value = -2147483648
            backbone_lower_socket_1.max_value = 2147483647
            backbone_lower_socket_1.attribute_domain = "POINT"

            # Socket Backbone Upper
            backbone_upper_socket_1 = (
                _mn_constants_atom_name_nucleic.interface.new_socket(
                    name="Backbone Upper", in_out="OUTPUT", socket_type="NodeSocketInt"
                )
            )
            backbone_upper_socket_1.subtype = "NONE"
            backbone_upper_socket_1.default_value = 0
            backbone_upper_socket_1.min_value = -2147483648
            backbone_upper_socket_1.max_value = 2147483647
            backbone_upper_socket_1.attribute_domain = "POINT"

            # Socket Side Chain Lower
            side_chain_lower_socket_1 = (
                _mn_constants_atom_name_nucleic.interface.new_socket(
                    name="Side Chain Lower",
                    in_out="OUTPUT",
                    socket_type="NodeSocketInt",
                )
            )
            side_chain_lower_socket_1.subtype = "NONE"
            side_chain_lower_socket_1.default_value = 0
            side_chain_lower_socket_1.min_value = -2147483648
            side_chain_lower_socket_1.max_value = 2147483647
            side_chain_lower_socket_1.attribute_domain = "POINT"

            # Socket Side Chain Upper
            side_chain_upper_socket_1 = (
                _mn_constants_atom_name_nucleic.interface.new_socket(
                    name="Side Chain Upper",
                    in_out="OUTPUT",
                    socket_type="NodeSocketInt",
                )
            )
            side_chain_upper_socket_1.subtype = "NONE"
            side_chain_upper_socket_1.default_value = 0
            side_chain_upper_socket_1.min_value = -2147483648
            side_chain_upper_socket_1.max_value = 2147483647
            side_chain_upper_socket_1.attribute_domain = "POINT"

            # Socket Side Chain Joint Carbon
            side_chain_joint_carbon_socket = (
                _mn_constants_atom_name_nucleic.interface.new_socket(
                    name="Side Chain Joint Carbon",
                    in_out="OUTPUT",
                    socket_type="NodeSocketInt",
                )
            )
            side_chain_joint_carbon_socket.subtype = "NONE"
            side_chain_joint_carbon_socket.default_value = 0
            side_chain_joint_carbon_socket.min_value = -2147483648
            side_chain_joint_carbon_socket.max_value = 2147483647
            side_chain_joint_carbon_socket.attribute_domain = "POINT"

            # initialize _mn_constants_atom_name_nucleic nodes
            # node Group Output
            group_output_11 = _mn_constants_atom_name_nucleic.nodes.new(
                "NodeGroupOutput"
            )
            group_output_11.name = "Group Output"
            group_output_11.is_active_output = True

            # node Group Input
            group_input_11 = _mn_constants_atom_name_nucleic.nodes.new("NodeGroupInput")
            group_input_11.name = "Group Input"

            # node Integer
            integer_3 = _mn_constants_atom_name_nucleic.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_3.name = "Integer"
            integer_3.integer = 61

            # node Integer.002
            integer_002_1 = _mn_constants_atom_name_nucleic.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_002_1.name = "Integer.002"
            integer_002_1.integer = 50

            # node Integer.003
            integer_003_1 = _mn_constants_atom_name_nucleic.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_003_1.name = "Integer.003"
            integer_003_1.integer = 61

            # node Integer.001
            integer_001_1 = _mn_constants_atom_name_nucleic.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_001_1.name = "Integer.001"
            integer_001_1.integer = 77

            # node Integer.004
            integer_004_1 = _mn_constants_atom_name_nucleic.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_004_1.name = "Integer.004"
            integer_004_1.integer = 54

            # Set locations
            group_output_11.location = (190.0, 0.0)
            group_input_11.location = (-200.0, 0.0)
            integer_3.location = (0.0, -100.0)
            integer_002_1.location = (0.0, 100.0)
            integer_003_1.location = (0.0, 0.0)
            integer_001_1.location = (0.0, -200.0)
            integer_004_1.location = (0.0, -300.0)

            # Set dimensions
            group_output_11.width, group_output_11.height = 140.0, 100.0
            group_input_11.width, group_input_11.height = 140.0, 100.0
            integer_3.width, integer_3.height = 140.0, 100.0
            integer_002_1.width, integer_002_1.height = 140.0, 100.0
            integer_003_1.width, integer_003_1.height = 140.0, 100.0
            integer_001_1.width, integer_001_1.height = 140.0, 100.0
            integer_004_1.width, integer_004_1.height = 140.0, 100.0

            # initialize _mn_constants_atom_name_nucleic links
            # integer_3.Integer -> group_output_11.Side Chain Lower
            _mn_constants_atom_name_nucleic.links.new(
                integer_3.outputs[0], group_output_11.inputs[2]
            )
            # integer_001_1.Integer -> group_output_11.Side Chain Upper
            _mn_constants_atom_name_nucleic.links.new(
                integer_001_1.outputs[0], group_output_11.inputs[3]
            )
            # integer_002_1.Integer -> group_output_11.Backbone Lower
            _mn_constants_atom_name_nucleic.links.new(
                integer_002_1.outputs[0], group_output_11.inputs[0]
            )
            # integer_003_1.Integer -> group_output_11.Backbone Upper
            _mn_constants_atom_name_nucleic.links.new(
                integer_003_1.outputs[0], group_output_11.inputs[1]
            )
            # integer_004_1.Integer -> group_output_11.Side Chain Joint Carbon
            _mn_constants_atom_name_nucleic.links.new(
                integer_004_1.outputs[0], group_output_11.inputs[4]
            )
            return _mn_constants_atom_name_nucleic

        _mn_constants_atom_name_nucleic = _mn_constants_atom_name_nucleic_node_group()

        # initialize _mn_select_nucleic node group
        def _mn_select_nucleic_node_group():
            _mn_select_nucleic = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_nucleic"
            )

            _mn_select_nucleic.color_tag = "NONE"
            _mn_select_nucleic.description = ""

            # _mn_select_nucleic interface
            # Socket Is Backbone
            is_backbone_socket_1 = _mn_select_nucleic.interface.new_socket(
                name="Is Backbone", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_backbone_socket_1.attribute_domain = "POINT"
            is_backbone_socket_1.description = "True for atoms that are part of the sugar-phosphate backbone for the nucleotides"

            # Socket Is Side Chain
            is_side_chain_socket_1 = _mn_select_nucleic.interface.new_socket(
                name="Is Side Chain", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_side_chain_socket_1.attribute_domain = "POINT"
            is_side_chain_socket_1.description = (
                "True for atoms that are part of the bases for nucleotides."
            )

            # Socket Is Nucleic
            is_nucleic_socket = _mn_select_nucleic.interface.new_socket(
                name="Is Nucleic", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_nucleic_socket.attribute_domain = "POINT"
            is_nucleic_socket.description = (
                "True if the atoms are part of a nucleic acid"
            )

            # initialize _mn_select_nucleic nodes
            # node Group Input
            group_input_12 = _mn_select_nucleic.nodes.new("NodeGroupInput")
            group_input_12.name = "Group Input"

            # node Compare
            compare_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_1.name = "Compare"
            compare_1.data_type = "INT"
            compare_1.mode = "ELEMENT"
            compare_1.operation = "GREATER_EQUAL"

            # node Compare.001
            compare_001_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_001_1.name = "Compare.001"
            compare_001_1.data_type = "INT"
            compare_001_1.mode = "ELEMENT"
            compare_001_1.operation = "LESS_EQUAL"

            # node Boolean Math.001
            boolean_math_001_2 = _mn_select_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_2.name = "Boolean Math.001"
            boolean_math_001_2.operation = "AND"

            # node Group Output
            group_output_12 = _mn_select_nucleic.nodes.new("NodeGroupOutput")
            group_output_12.name = "Group Output"
            group_output_12.is_active_output = True

            # node Compare.002
            compare_002_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_002_1.name = "Compare.002"
            compare_002_1.data_type = "INT"
            compare_002_1.mode = "ELEMENT"
            compare_002_1.operation = "GREATER_EQUAL"

            # node Compare.003
            compare_003_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_003_1.name = "Compare.003"
            compare_003_1.data_type = "INT"
            compare_003_1.mode = "ELEMENT"
            compare_003_1.operation = "LESS_EQUAL"

            # node Boolean Math.002
            boolean_math_002_2 = _mn_select_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_2.name = "Boolean Math.002"
            boolean_math_002_2.operation = "AND"

            # node Compare.004
            compare_004_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_004_1.name = "Compare.004"
            compare_004_1.data_type = "INT"
            compare_004_1.mode = "ELEMENT"
            compare_004_1.operation = "GREATER_EQUAL"

            # node Compare.005
            compare_005_1 = _mn_select_nucleic.nodes.new("FunctionNodeCompare")
            compare_005_1.name = "Compare.005"
            compare_005_1.data_type = "INT"
            compare_005_1.mode = "ELEMENT"
            compare_005_1.operation = "LESS_EQUAL"

            # node Boolean Math.003
            boolean_math_003_1 = _mn_select_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_1.name = "Boolean Math.003"
            boolean_math_003_1.operation = "AND"

            # node Named Attribute
            named_attribute_4 = _mn_select_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_4.name = "Named Attribute"
            named_attribute_4.data_type = "INT"
            # Name
            named_attribute_4.inputs[0].default_value = "atom_name"

            # node Group
            group_5 = _mn_select_nucleic.nodes.new("GeometryNodeGroup")
            group_5.name = "Group"
            group_5.node_tree = _mn_constants_atom_name_nucleic

            # Set locations
            group_input_12.location = (-460.0, 0.0)
            compare_1.location = (80.0, 80.0)
            compare_001_1.location = (80.0, -80.0)
            boolean_math_001_2.location = (260.0, 80.0)
            group_output_12.location = (580.0, 60.0)
            compare_002_1.location = (80.0, -260.0)
            compare_003_1.location = (80.0, -420.0)
            boolean_math_002_2.location = (260.0, -260.0)
            compare_004_1.location = (80.0, -580.0)
            compare_005_1.location = (80.0, -740.0)
            boolean_math_003_1.location = (260.0, -580.0)
            named_attribute_4.location = (-260.0, -280.0)
            group_5.location = (-480.0, -100.0)

            # Set dimensions
            group_input_12.width, group_input_12.height = 140.0, 100.0
            compare_1.width, compare_1.height = 140.0, 100.0
            compare_001_1.width, compare_001_1.height = 140.0, 100.0
            boolean_math_001_2.width, boolean_math_001_2.height = 140.0, 100.0
            group_output_12.width, group_output_12.height = 140.0, 100.0
            compare_002_1.width, compare_002_1.height = 140.0, 100.0
            compare_003_1.width, compare_003_1.height = 140.0, 100.0
            boolean_math_002_2.width, boolean_math_002_2.height = 140.0, 100.0
            compare_004_1.width, compare_004_1.height = 140.0, 100.0
            compare_005_1.width, compare_005_1.height = 140.0, 100.0
            boolean_math_003_1.width, boolean_math_003_1.height = 140.0, 100.0
            named_attribute_4.width, named_attribute_4.height = 140.0, 100.0
            group_5.width, group_5.height = 365.8858337402344, 100.0

            # initialize _mn_select_nucleic links
            # compare_001_1.Result -> boolean_math_001_2.Boolean
            _mn_select_nucleic.links.new(
                compare_001_1.outputs[0], boolean_math_001_2.inputs[1]
            )
            # named_attribute_4.Attribute -> compare_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_1.inputs[2]
            )
            # compare_1.Result -> boolean_math_001_2.Boolean
            _mn_select_nucleic.links.new(
                compare_1.outputs[0], boolean_math_001_2.inputs[0]
            )
            # named_attribute_4.Attribute -> compare_001_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_001_1.inputs[2]
            )
            # boolean_math_001_2.Boolean -> group_output_12.Is Backbone
            _mn_select_nucleic.links.new(
                boolean_math_001_2.outputs[0], group_output_12.inputs[0]
            )
            # group_5.Backbone Lower -> compare_1.B
            _mn_select_nucleic.links.new(group_5.outputs[0], compare_1.inputs[3])
            # group_5.Backbone Upper -> compare_001_1.B
            _mn_select_nucleic.links.new(group_5.outputs[1], compare_001_1.inputs[3])
            # compare_003_1.Result -> boolean_math_002_2.Boolean
            _mn_select_nucleic.links.new(
                compare_003_1.outputs[0], boolean_math_002_2.inputs[1]
            )
            # compare_002_1.Result -> boolean_math_002_2.Boolean
            _mn_select_nucleic.links.new(
                compare_002_1.outputs[0], boolean_math_002_2.inputs[0]
            )
            # group_5.Side Chain Lower -> compare_002_1.B
            _mn_select_nucleic.links.new(group_5.outputs[2], compare_002_1.inputs[3])
            # group_5.Side Chain Upper -> compare_003_1.B
            _mn_select_nucleic.links.new(group_5.outputs[3], compare_003_1.inputs[3])
            # boolean_math_002_2.Boolean -> group_output_12.Is Side Chain
            _mn_select_nucleic.links.new(
                boolean_math_002_2.outputs[0], group_output_12.inputs[1]
            )
            # named_attribute_4.Attribute -> compare_002_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_002_1.inputs[2]
            )
            # named_attribute_4.Attribute -> compare_003_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_003_1.inputs[2]
            )
            # compare_005_1.Result -> boolean_math_003_1.Boolean
            _mn_select_nucleic.links.new(
                compare_005_1.outputs[0], boolean_math_003_1.inputs[1]
            )
            # compare_004_1.Result -> boolean_math_003_1.Boolean
            _mn_select_nucleic.links.new(
                compare_004_1.outputs[0], boolean_math_003_1.inputs[0]
            )
            # group_5.Backbone Lower -> compare_004_1.B
            _mn_select_nucleic.links.new(group_5.outputs[0], compare_004_1.inputs[3])
            # named_attribute_4.Attribute -> compare_004_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_004_1.inputs[2]
            )
            # group_5.Side Chain Upper -> compare_005_1.B
            _mn_select_nucleic.links.new(group_5.outputs[3], compare_005_1.inputs[3])
            # named_attribute_4.Attribute -> compare_005_1.A
            _mn_select_nucleic.links.new(
                named_attribute_4.outputs[0], compare_005_1.inputs[2]
            )
            # boolean_math_003_1.Boolean -> group_output_12.Is Nucleic
            _mn_select_nucleic.links.new(
                boolean_math_003_1.outputs[0], group_output_12.inputs[2]
            )
            return _mn_select_nucleic

        _mn_select_nucleic = _mn_select_nucleic_node_group()

        # initialize is_nucleic node group
        def is_nucleic_node_group():
            is_nucleic = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Nucleic"
            )

            is_nucleic.color_tag = "INPUT"
            is_nucleic.description = ""

            # is_nucleic interface
            # Socket Selection
            selection_socket_6 = is_nucleic.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_6.attribute_domain = "POINT"
            selection_socket_6.description = "True if atoms are part of a nucleic acid"

            # Socket Inverted
            inverted_socket_1 = is_nucleic.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_1.attribute_domain = "POINT"

            # Socket And
            and_socket_1 = is_nucleic.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_1.attribute_domain = "POINT"
            and_socket_1.hide_value = True

            # Socket Or
            or_socket_1 = is_nucleic.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_1.attribute_domain = "POINT"
            or_socket_1.hide_value = True

            # initialize is_nucleic nodes
            # node Group Input
            group_input_13 = is_nucleic.nodes.new("NodeGroupInput")
            group_input_13.name = "Group Input"

            # node Boolean Math.001
            boolean_math_001_3 = is_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_3.name = "Boolean Math.001"
            boolean_math_001_3.operation = "AND"

            # node Group Output
            group_output_13 = is_nucleic.nodes.new("NodeGroupOutput")
            group_output_13.name = "Group Output"
            group_output_13.is_active_output = True

            # node Group
            group_6 = is_nucleic.nodes.new("GeometryNodeGroup")
            group_6.name = "Group"
            group_6.node_tree = _mn_select_nucleic

            # node Group.001
            group_001_1 = is_nucleic.nodes.new("GeometryNodeGroup")
            group_001_1.name = "Group.001"
            group_001_1.node_tree = fallback_boolean
            # Socket_2
            group_001_1.inputs[0].default_value = "is_nucleic"

            # node Boolean Math.002
            boolean_math_002_3 = is_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_3.name = "Boolean Math.002"
            boolean_math_002_3.operation = "OR"

            # node Boolean Math
            boolean_math_2 = is_nucleic.nodes.new("FunctionNodeBooleanMath")
            boolean_math_2.name = "Boolean Math"
            boolean_math_2.operation = "NOT"

            # Set locations
            group_input_13.location = (-280.0, -40.0)
            boolean_math_001_3.location = (-40.0, 0.0)
            group_output_13.location = (320.0000305175781, 0.0)
            group_6.location = (-620.0, -160.0)
            group_001_1.location = (-340.0, -160.0)
            boolean_math_002_3.location = (140.0, 0.0)
            boolean_math_2.location = (140.0, -140.0)

            # Set dimensions
            group_input_13.width, group_input_13.height = 140.0, 100.0
            boolean_math_001_3.width, boolean_math_001_3.height = 140.0, 100.0
            group_output_13.width, group_output_13.height = 140.0, 100.0
            group_6.width, group_6.height = 247.90924072265625, 100.0
            group_001_1.width, group_001_1.height = 232.0133056640625, 100.0
            boolean_math_002_3.width, boolean_math_002_3.height = 140.0, 100.0
            boolean_math_2.width, boolean_math_2.height = 140.0, 100.0

            # initialize is_nucleic links
            # boolean_math_002_3.Boolean -> group_output_13.Selection
            is_nucleic.links.new(
                boolean_math_002_3.outputs[0], group_output_13.inputs[0]
            )
            # group_input_13.And -> boolean_math_001_3.Boolean
            is_nucleic.links.new(
                group_input_13.outputs[0], boolean_math_001_3.inputs[0]
            )
            # group_6.Is Nucleic -> group_001_1.Fallback
            is_nucleic.links.new(group_6.outputs[2], group_001_1.inputs[1])
            # group_001_1.Boolean -> boolean_math_001_3.Boolean
            is_nucleic.links.new(group_001_1.outputs[0], boolean_math_001_3.inputs[1])
            # boolean_math_001_3.Boolean -> boolean_math_002_3.Boolean
            is_nucleic.links.new(
                boolean_math_001_3.outputs[0], boolean_math_002_3.inputs[0]
            )
            # group_input_13.Or -> boolean_math_002_3.Boolean
            is_nucleic.links.new(
                group_input_13.outputs[1], boolean_math_002_3.inputs[1]
            )
            # boolean_math_002_3.Boolean -> boolean_math_2.Boolean
            is_nucleic.links.new(
                boolean_math_002_3.outputs[0], boolean_math_2.inputs[0]
            )
            # boolean_math_2.Boolean -> group_output_13.Inverted
            is_nucleic.links.new(boolean_math_2.outputs[0], group_output_13.inputs[1])
            return is_nucleic

        is_nucleic = is_nucleic_node_group()

        # initialize separate_polymers node group
        def separate_polymers_node_group():
            separate_polymers = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Separate Polymers"
            )

            separate_polymers.color_tag = "GEOMETRY"
            separate_polymers.description = ""

            separate_polymers.is_modifier = True

            # separate_polymers interface
            # Socket Peptide
            peptide_socket = separate_polymers.interface.new_socket(
                name="Peptide", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            peptide_socket.attribute_domain = "POINT"

            # Socket Nucleic
            nucleic_socket = separate_polymers.interface.new_socket(
                name="Nucleic", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            nucleic_socket.attribute_domain = "POINT"

            # Socket Other
            other_socket = separate_polymers.interface.new_socket(
                name="Other", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            other_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_5 = separate_polymers.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_5.attribute_domain = "POINT"
            atoms_socket_5.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # initialize separate_polymers nodes
            # node Group Input
            group_input_14 = separate_polymers.nodes.new("NodeGroupInput")
            group_input_14.name = "Group Input"

            # node Group Output
            group_output_14 = separate_polymers.nodes.new("NodeGroupOutput")
            group_output_14.name = "Group Output"
            group_output_14.is_active_output = True

            # node Separate Geometry
            separate_geometry_3 = separate_polymers.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_3.name = "Separate Geometry"
            separate_geometry_3.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001 = separate_polymers.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001.name = "Separate Geometry.001"
            separate_geometry_001.domain = "POINT"

            # node Group
            group_7 = separate_polymers.nodes.new("GeometryNodeGroup")
            group_7.name = "Group"
            group_7.node_tree = is_peptide
            # Socket_1
            group_7.inputs[0].default_value = True
            # Socket_3
            group_7.inputs[1].default_value = False

            # node Group.001
            group_001_2 = separate_polymers.nodes.new("GeometryNodeGroup")
            group_001_2.name = "Group.001"
            group_001_2.node_tree = is_nucleic
            # Socket_1
            group_001_2.inputs[0].default_value = True
            # Socket_3
            group_001_2.inputs[1].default_value = False

            # Set locations
            group_input_14.location = (-360.0, 220.0)
            group_output_14.location = (260.0, 80.0)
            separate_geometry_3.location = (-200.0, 100.0)
            separate_geometry_001.location = (0.0, -40.0)
            group_7.location = (-200.0, -60.0)
            group_001_2.location = (0.0, -200.0)

            # Set dimensions
            group_input_14.width, group_input_14.height = 140.0, 100.0
            group_output_14.width, group_output_14.height = 140.0, 100.0
            separate_geometry_3.width, separate_geometry_3.height = 140.0, 100.0
            separate_geometry_001.width, separate_geometry_001.height = 140.0, 100.0
            group_7.width, group_7.height = 140.0, 100.0
            group_001_2.width, group_001_2.height = 140.0, 100.0

            # initialize separate_polymers links
            # group_input_14.Atoms -> separate_geometry_3.Geometry
            separate_polymers.links.new(
                group_input_14.outputs[0], separate_geometry_3.inputs[0]
            )
            # separate_geometry_3.Inverted -> separate_geometry_001.Geometry
            separate_polymers.links.new(
                separate_geometry_3.outputs[1], separate_geometry_001.inputs[0]
            )
            # separate_geometry_3.Selection -> group_output_14.Peptide
            separate_polymers.links.new(
                separate_geometry_3.outputs[0], group_output_14.inputs[0]
            )
            # separate_geometry_001.Selection -> group_output_14.Nucleic
            separate_polymers.links.new(
                separate_geometry_001.outputs[0], group_output_14.inputs[1]
            )
            # separate_geometry_001.Inverted -> group_output_14.Other
            separate_polymers.links.new(
                separate_geometry_001.outputs[1], group_output_14.inputs[2]
            )
            # group_7.Selection -> separate_geometry_3.Selection
            separate_polymers.links.new(
                group_7.outputs[0], separate_geometry_3.inputs[1]
            )
            # group_001_2.Selection -> separate_geometry_001.Selection
            separate_polymers.links.new(
                group_001_2.outputs[0], separate_geometry_001.inputs[1]
            )
            return separate_polymers

        separate_polymers = separate_polymers_node_group()

        # initialize _sampleatomvalue node group
        def _sampleatomvalue_node_group():
            _sampleatomvalue = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".SampleAtomValue"
            )

            _sampleatomvalue.color_tag = "NONE"
            _sampleatomvalue.description = ""

            _sampleatomvalue.is_modifier = True

            # _sampleatomvalue interface
            # Socket Atoms
            atoms_socket_6 = _sampleatomvalue.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_6.attribute_domain = "POINT"

            # Socket Value
            value_socket_1 = _sampleatomvalue.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            value_socket_1.subtype = "NONE"
            value_socket_1.default_value = (0.0, 0.0, 0.0)
            value_socket_1.min_value = -3.4028234663852886e38
            value_socket_1.max_value = 3.4028234663852886e38
            value_socket_1.attribute_domain = "POINT"

            # Socket Value
            value_socket_2 = _sampleatomvalue.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            value_socket_2.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_3 = _sampleatomvalue.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_3.attribute_domain = "POINT"

            # Socket B
            b_socket = _sampleatomvalue.interface.new_socket(
                name="B", in_out="INPUT", socket_type="NodeSocketInt"
            )
            b_socket.subtype = "NONE"
            b_socket.default_value = 57
            b_socket.min_value = -2147483648
            b_socket.max_value = 2147483647
            b_socket.attribute_domain = "POINT"

            # initialize _sampleatomvalue nodes
            # node Group Output
            group_output_15 = _sampleatomvalue.nodes.new("NodeGroupOutput")
            group_output_15.name = "Group Output"
            group_output_15.is_active_output = True

            # node Named Attribute.009
            named_attribute_009 = _sampleatomvalue.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_009.name = "Named Attribute.009"
            named_attribute_009.data_type = "INT"
            # Name
            named_attribute_009.inputs[0].default_value = "atom_name"

            # node Index.005
            index_005 = _sampleatomvalue.nodes.new("GeometryNodeInputIndex")
            index_005.name = "Index.005"

            # node Position.002
            position_002 = _sampleatomvalue.nodes.new("GeometryNodeInputPosition")
            position_002.name = "Position.002"

            # node Compare.003
            compare_003_2 = _sampleatomvalue.nodes.new("FunctionNodeCompare")
            compare_003_2.name = "Compare.003"
            compare_003_2.data_type = "INT"
            compare_003_2.mode = "ELEMENT"
            compare_003_2.operation = "EQUAL"

            # node Group Input
            group_input_15 = _sampleatomvalue.nodes.new("NodeGroupInput")
            group_input_15.name = "Group Input"

            # node Sample Index.009
            sample_index_009 = _sampleatomvalue.nodes.new("GeometryNodeSampleIndex")
            sample_index_009.name = "Sample Index.009"
            sample_index_009.clamp = False
            sample_index_009.data_type = "FLOAT_VECTOR"
            sample_index_009.domain = "POINT"

            # node Named Attribute
            named_attribute_5 = _sampleatomvalue.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_5.name = "Named Attribute"
            named_attribute_5.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_5.inputs[0].default_value = "Color"

            # node Sample Index.010
            sample_index_010 = _sampleatomvalue.nodes.new("GeometryNodeSampleIndex")
            sample_index_010.name = "Sample Index.010"
            sample_index_010.clamp = False
            sample_index_010.data_type = "FLOAT_COLOR"
            sample_index_010.domain = "POINT"

            # node Separate Geometry.002
            separate_geometry_002 = _sampleatomvalue.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002.name = "Separate Geometry.002"
            separate_geometry_002.domain = "POINT"

            # Set locations
            group_output_15.location = (390.0, 0.0)
            named_attribute_009.location = (-200.0, -107.52880859375)
            index_005.location = (40.0, -47.52880859375)
            position_002.location = (40.0, 12.47119140625)
            compare_003_2.location = (40.2109375, -112.47119140625)
            group_input_15.location = (-170.3642578125, -265.140380859375)
            sample_index_009.location = (200.0, 112.47119140625)
            named_attribute_5.location = (40.0, -380.0)
            sample_index_010.location = (200.0, -280.0)
            separate_geometry_002.location = (200.0, -107.52880859375)

            # Set dimensions
            group_output_15.width, group_output_15.height = 140.0, 100.0
            named_attribute_009.width, named_attribute_009.height = (
                206.99917602539062,
                100.0,
            )
            index_005.width, index_005.height = 140.0, 100.0
            position_002.width, position_002.height = 140.0, 100.0
            compare_003_2.width, compare_003_2.height = 140.0, 100.0
            group_input_15.width, group_input_15.height = 140.0, 100.0
            sample_index_009.width, sample_index_009.height = 140.0, 100.0
            named_attribute_5.width, named_attribute_5.height = 140.0, 100.0
            sample_index_010.width, sample_index_010.height = 140.0, 100.0
            separate_geometry_002.width, separate_geometry_002.height = 140.0, 100.0

            # initialize _sampleatomvalue links
            # index_005.Index -> sample_index_009.Index
            _sampleatomvalue.links.new(index_005.outputs[0], sample_index_009.inputs[2])
            # compare_003_2.Result -> separate_geometry_002.Selection
            _sampleatomvalue.links.new(
                compare_003_2.outputs[0], separate_geometry_002.inputs[1]
            )
            # named_attribute_009.Attribute -> compare_003_2.A
            _sampleatomvalue.links.new(
                named_attribute_009.outputs[0], compare_003_2.inputs[2]
            )
            # separate_geometry_002.Selection -> sample_index_009.Geometry
            _sampleatomvalue.links.new(
                separate_geometry_002.outputs[0], sample_index_009.inputs[0]
            )
            # position_002.Position -> sample_index_009.Value
            _sampleatomvalue.links.new(
                position_002.outputs[0], sample_index_009.inputs[1]
            )
            # group_input_15.Geometry -> separate_geometry_002.Geometry
            _sampleatomvalue.links.new(
                group_input_15.outputs[0], separate_geometry_002.inputs[0]
            )
            # group_input_15.B -> compare_003_2.B
            _sampleatomvalue.links.new(
                group_input_15.outputs[1], compare_003_2.inputs[3]
            )
            # sample_index_009.Value -> group_output_15.Value
            _sampleatomvalue.links.new(
                sample_index_009.outputs[0], group_output_15.inputs[1]
            )
            # index_005.Index -> sample_index_010.Index
            _sampleatomvalue.links.new(index_005.outputs[0], sample_index_010.inputs[2])
            # separate_geometry_002.Selection -> sample_index_010.Geometry
            _sampleatomvalue.links.new(
                separate_geometry_002.outputs[0], sample_index_010.inputs[0]
            )
            # named_attribute_5.Attribute -> sample_index_010.Value
            _sampleatomvalue.links.new(
                named_attribute_5.outputs[0], sample_index_010.inputs[1]
            )
            # sample_index_010.Value -> group_output_15.Value
            _sampleatomvalue.links.new(
                sample_index_010.outputs[0], group_output_15.inputs[2]
            )
            # separate_geometry_002.Selection -> group_output_15.Atoms
            _sampleatomvalue.links.new(
                separate_geometry_002.outputs[0], group_output_15.inputs[0]
            )
            return _sampleatomvalue

        _sampleatomvalue = _sampleatomvalue_node_group()

        # initialize mn_select_nucleic_type node group
        def mn_select_nucleic_type_node_group():
            mn_select_nucleic_type = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_select_nucleic_type"
            )

            mn_select_nucleic_type.color_tag = "NONE"
            mn_select_nucleic_type.description = ""

            # mn_select_nucleic_type interface
            # Socket is_purine
            is_purine_socket = mn_select_nucleic_type.interface.new_socket(
                name="is_purine", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_purine_socket.attribute_domain = "POINT"

            # Socket is_pyrimidine
            is_pyrimidine_socket = mn_select_nucleic_type.interface.new_socket(
                name="is_pyrimidine", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_pyrimidine_socket.attribute_domain = "POINT"

            # initialize mn_select_nucleic_type nodes
            # node Group Input
            group_input_16 = mn_select_nucleic_type.nodes.new("NodeGroupInput")
            group_input_16.name = "Group Input"

            # node Reroute.015
            reroute_015 = mn_select_nucleic_type.nodes.new("NodeReroute")
            reroute_015.name = "Reroute.015"
            # node Named Attribute.010
            named_attribute_010 = mn_select_nucleic_type.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_010.name = "Named Attribute.010"
            named_attribute_010.data_type = "INT"
            # Name
            named_attribute_010.inputs[0].default_value = "res_name"

            # node Compare.007
            compare_007 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_007.name = "Compare.007"
            compare_007.data_type = "INT"
            compare_007.mode = "ELEMENT"
            compare_007.operation = "EQUAL"
            # B_INT
            compare_007.inputs[3].default_value = 33

            # node Compare.016
            compare_016 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_016.name = "Compare.016"
            compare_016.data_type = "INT"
            compare_016.mode = "ELEMENT"
            compare_016.operation = "EQUAL"
            # B_INT
            compare_016.inputs[3].default_value = 43

            # node Compare.008
            compare_008 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_008.name = "Compare.008"
            compare_008.data_type = "INT"
            compare_008.mode = "ELEMENT"
            compare_008.operation = "EQUAL"
            # B_INT
            compare_008.inputs[3].default_value = 31

            # node Compare.015
            compare_015 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_015.name = "Compare.015"
            compare_015.data_type = "INT"
            compare_015.mode = "ELEMENT"
            compare_015.operation = "EQUAL"
            # B_INT
            compare_015.inputs[3].default_value = 41

            # node Boolean Math.012
            boolean_math_012 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_012.name = "Boolean Math.012"
            boolean_math_012.operation = "OR"

            # node Boolean Math.013
            boolean_math_013 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_013.name = "Boolean Math.013"
            boolean_math_013.operation = "OR"

            # node Boolean Math.007
            boolean_math_007 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_007.name = "Boolean Math.007"
            boolean_math_007.operation = "OR"

            # node Group Output
            group_output_16 = mn_select_nucleic_type.nodes.new("NodeGroupOutput")
            group_output_16.name = "Group Output"
            group_output_16.is_active_output = True

            # node Compare.017
            compare_017 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_017.name = "Compare.017"
            compare_017.data_type = "INT"
            compare_017.mode = "ELEMENT"
            compare_017.operation = "EQUAL"
            # B_INT
            compare_017.inputs[3].default_value = 42

            # node Compare.010
            compare_010 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_010.name = "Compare.010"
            compare_010.data_type = "INT"
            compare_010.mode = "ELEMENT"
            compare_010.operation = "EQUAL"
            # B_INT
            compare_010.inputs[3].default_value = 30

            # node Compare.018
            compare_018 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_018.name = "Compare.018"
            compare_018.data_type = "INT"
            compare_018.mode = "ELEMENT"
            compare_018.operation = "EQUAL"
            # B_INT
            compare_018.inputs[3].default_value = 40

            # node Boolean Math.014
            boolean_math_014 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_014.name = "Boolean Math.014"
            boolean_math_014.operation = "OR"

            # node Boolean Math.015
            boolean_math_015 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_015.name = "Boolean Math.015"
            boolean_math_015.operation = "OR"

            # node Compare.009
            compare_009 = mn_select_nucleic_type.nodes.new("FunctionNodeCompare")
            compare_009.name = "Compare.009"
            compare_009.data_type = "INT"
            compare_009.mode = "ELEMENT"
            compare_009.operation = "EQUAL"
            # B_INT
            compare_009.inputs[3].default_value = 32

            # node Boolean Math.008
            boolean_math_008 = mn_select_nucleic_type.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_008.name = "Boolean Math.008"
            boolean_math_008.operation = "OR"

            # Set locations
            group_input_16.location = (-570.0, 0.0)
            reroute_015.location = (-150.0, -97.31201171875)
            named_attribute_010.location = (-420.0, -60.0)
            compare_007.location = (-30.0, -90.0)
            compare_016.location = (-30.0, -250.0)
            compare_008.location = (-30.0, 249.9998779296875)
            compare_015.location = (-30.0, 89.9998779296875)
            boolean_math_012.location = (170.0, 249.9998779296875)
            boolean_math_013.location = (150.0, -90.0)
            boolean_math_007.location = (370.0, 249.9998779296875)
            group_output_16.location = (580.0, 240.0)
            compare_017.location = (-40.0, -940.0)
            compare_010.location = (-40.0, -440.0)
            compare_018.location = (-40.0, -600.0)
            boolean_math_014.location = (160.0, -440.0)
            boolean_math_015.location = (140.0, -780.0)
            compare_009.location = (-40.0, -780.0)
            boolean_math_008.location = (360.0, -440.0)

            # Set dimensions
            group_input_16.width, group_input_16.height = 140.0, 100.0
            reroute_015.width, reroute_015.height = 16.0, 100.0
            named_attribute_010.width, named_attribute_010.height = (
                206.99917602539062,
                100.0,
            )
            compare_007.width, compare_007.height = 140.0, 100.0
            compare_016.width, compare_016.height = 140.0, 100.0
            compare_008.width, compare_008.height = 140.0, 100.0
            compare_015.width, compare_015.height = 140.0, 100.0
            boolean_math_012.width, boolean_math_012.height = 140.0, 100.0
            boolean_math_013.width, boolean_math_013.height = 140.0, 100.0
            boolean_math_007.width, boolean_math_007.height = 140.0, 100.0
            group_output_16.width, group_output_16.height = 140.0, 100.0
            compare_017.width, compare_017.height = 140.0, 100.0
            compare_010.width, compare_010.height = 140.0, 100.0
            compare_018.width, compare_018.height = 140.0, 100.0
            boolean_math_014.width, boolean_math_014.height = 140.0, 100.0
            boolean_math_015.width, boolean_math_015.height = 140.0, 100.0
            compare_009.width, compare_009.height = 140.0, 100.0
            boolean_math_008.width, boolean_math_008.height = 140.0, 100.0

            # initialize mn_select_nucleic_type links
            # compare_016.Result -> boolean_math_013.Boolean
            mn_select_nucleic_type.links.new(
                compare_016.outputs[0], boolean_math_013.inputs[1]
            )
            # reroute_015.Output -> compare_016.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_016.inputs[2]
            )
            # boolean_math_012.Boolean -> boolean_math_007.Boolean
            mn_select_nucleic_type.links.new(
                boolean_math_012.outputs[0], boolean_math_007.inputs[0]
            )
            # boolean_math_013.Boolean -> boolean_math_007.Boolean
            mn_select_nucleic_type.links.new(
                boolean_math_013.outputs[0], boolean_math_007.inputs[1]
            )
            # reroute_015.Output -> compare_008.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_008.inputs[2]
            )
            # compare_008.Result -> boolean_math_012.Boolean
            mn_select_nucleic_type.links.new(
                compare_008.outputs[0], boolean_math_012.inputs[0]
            )
            # compare_007.Result -> boolean_math_013.Boolean
            mn_select_nucleic_type.links.new(
                compare_007.outputs[0], boolean_math_013.inputs[0]
            )
            # reroute_015.Output -> compare_007.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_007.inputs[2]
            )
            # reroute_015.Output -> compare_015.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_015.inputs[2]
            )
            # compare_015.Result -> boolean_math_012.Boolean
            mn_select_nucleic_type.links.new(
                compare_015.outputs[0], boolean_math_012.inputs[1]
            )
            # named_attribute_010.Attribute -> reroute_015.Input
            mn_select_nucleic_type.links.new(
                named_attribute_010.outputs[0], reroute_015.inputs[0]
            )
            # boolean_math_007.Boolean -> group_output_16.is_pyrimidine
            mn_select_nucleic_type.links.new(
                boolean_math_007.outputs[0], group_output_16.inputs[1]
            )
            # compare_017.Result -> boolean_math_015.Boolean
            mn_select_nucleic_type.links.new(
                compare_017.outputs[0], boolean_math_015.inputs[1]
            )
            # reroute_015.Output -> compare_017.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_017.inputs[2]
            )
            # boolean_math_014.Boolean -> boolean_math_008.Boolean
            mn_select_nucleic_type.links.new(
                boolean_math_014.outputs[0], boolean_math_008.inputs[0]
            )
            # boolean_math_015.Boolean -> boolean_math_008.Boolean
            mn_select_nucleic_type.links.new(
                boolean_math_015.outputs[0], boolean_math_008.inputs[1]
            )
            # reroute_015.Output -> compare_010.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_010.inputs[2]
            )
            # compare_010.Result -> boolean_math_014.Boolean
            mn_select_nucleic_type.links.new(
                compare_010.outputs[0], boolean_math_014.inputs[0]
            )
            # compare_009.Result -> boolean_math_015.Boolean
            mn_select_nucleic_type.links.new(
                compare_009.outputs[0], boolean_math_015.inputs[0]
            )
            # reroute_015.Output -> compare_009.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_009.inputs[2]
            )
            # reroute_015.Output -> compare_018.A
            mn_select_nucleic_type.links.new(
                reroute_015.outputs[0], compare_018.inputs[2]
            )
            # compare_018.Result -> boolean_math_014.Boolean
            mn_select_nucleic_type.links.new(
                compare_018.outputs[0], boolean_math_014.inputs[1]
            )
            # boolean_math_008.Boolean -> group_output_16.is_purine
            mn_select_nucleic_type.links.new(
                boolean_math_008.outputs[0], group_output_16.inputs[0]
            )
            return mn_select_nucleic_type

        mn_select_nucleic_type = mn_select_nucleic_type_node_group()

        # initialize _base_align node group
        def _base_align_node_group():
            _base_align = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".Base align"
            )

            _base_align.color_tag = "NONE"
            _base_align.description = ""

            # _base_align interface
            # Socket Base Interface
            base_interface_socket = _base_align.interface.new_socket(
                name="Base Interface", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            base_interface_socket.subtype = "NONE"
            base_interface_socket.default_value = (0.0, 0.0, 0.0)
            base_interface_socket.min_value = -3.4028234663852886e38
            base_interface_socket.max_value = 3.4028234663852886e38
            base_interface_socket.attribute_domain = "POINT"

            # Socket Base Pivot
            base_pivot_socket = _base_align.interface.new_socket(
                name="Base Pivot", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            base_pivot_socket.subtype = "NONE"
            base_pivot_socket.default_value = (0.0, 0.0, 0.0)
            base_pivot_socket.min_value = -3.4028234663852886e38
            base_pivot_socket.max_value = 3.4028234663852886e38
            base_pivot_socket.attribute_domain = "POINT"

            # Socket Align Vertical
            align_vertical_socket = _base_align.interface.new_socket(
                name="Align Vertical", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            align_vertical_socket.subtype = "NONE"
            align_vertical_socket.default_value = (0.0, 0.0, 0.0)
            align_vertical_socket.min_value = -3.4028234663852886e38
            align_vertical_socket.max_value = 3.4028234663852886e38
            align_vertical_socket.attribute_domain = "POINT"

            # Socket Align Horizontal
            align_horizontal_socket = _base_align.interface.new_socket(
                name="Align Horizontal", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            align_horizontal_socket.subtype = "NONE"
            align_horizontal_socket.default_value = (0.0, 0.0, 0.0)
            align_horizontal_socket.min_value = -3.4028234663852886e38
            align_horizontal_socket.max_value = 3.4028234663852886e38
            align_horizontal_socket.attribute_domain = "POINT"

            # Socket Input
            input_socket = _base_align.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            input_socket.attribute_domain = "POINT"

            # initialize _base_align nodes
            # node Switch.008
            switch_008 = _base_align.nodes.new("GeometryNodeSwitch")
            switch_008.name = "Switch.008"
            switch_008.input_type = "INT"
            # False
            switch_008.inputs[1].default_value = 65
            # True
            switch_008.inputs[2].default_value = 68

            # node Reroute.018
            reroute_018 = _base_align.nodes.new("NodeReroute")
            reroute_018.name = "Reroute.018"
            # node Switch.009
            switch_009 = _base_align.nodes.new("GeometryNodeSwitch")
            switch_009.name = "Switch.009"
            switch_009.input_type = "INT"
            # False
            switch_009.inputs[1].default_value = 62
            # True
            switch_009.inputs[2].default_value = 64

            # node Reroute.020
            reroute_020 = _base_align.nodes.new("NodeReroute")
            reroute_020.name = "Reroute.020"
            # node Group.007
            group_007 = _base_align.nodes.new("GeometryNodeGroup")
            group_007.name = "Group.007"
            group_007.node_tree = mn_select_nucleic_type

            # node Group Input
            group_input_17 = _base_align.nodes.new("NodeGroupInput")
            group_input_17.name = "Group Input"

            # node Group.009
            group_009 = _base_align.nodes.new("GeometryNodeGroup")
            group_009.name = "Group.009"
            group_009.node_tree = _sampleatomvalue

            # node Group.010
            group_010 = _base_align.nodes.new("GeometryNodeGroup")
            group_010.name = "Group.010"
            group_010.node_tree = _sampleatomvalue

            # node Group.008
            group_008 = _base_align.nodes.new("GeometryNodeGroup")
            group_008.name = "Group.008"
            group_008.node_tree = _sampleatomvalue
            # Input_1
            group_008.inputs[1].default_value = 61

            # node Vector Math.002
            vector_math_002 = _base_align.nodes.new("ShaderNodeVectorMath")
            vector_math_002.name = "Vector Math.002"
            vector_math_002.operation = "SUBTRACT"

            # node Vector Math.004
            vector_math_004 = _base_align.nodes.new("ShaderNodeVectorMath")
            vector_math_004.name = "Vector Math.004"
            vector_math_004.operation = "SUBTRACT"

            # node Group Output
            group_output_17 = _base_align.nodes.new("NodeGroupOutput")
            group_output_17.name = "Group Output"
            group_output_17.is_active_output = True

            # Set locations
            switch_008.location = (-30.387451171875, 0.0)
            reroute_018.location = (-150.387451171875, -200.0)
            switch_009.location = (-30.387451171875, -180.0)
            reroute_020.location = (-180.0, 80.0)
            group_007.location = (-433.26495361328125, -188.3114776611328)
            group_input_17.location = (-400.0, 120.0)
            group_009.location = (160.0, -200.0)
            group_010.location = (160.0, 40.0)
            group_008.location = (160.0, 280.0)
            vector_math_002.location = (400.0, -60.0)
            vector_math_004.location = (400.0, 100.0)
            group_output_17.location = (700.0, 140.0)

            # Set dimensions
            switch_008.width, switch_008.height = 145.0830078125, 100.0
            reroute_018.width, reroute_018.height = 16.0, 100.0
            switch_009.width, switch_009.height = 145.0830078125, 100.0
            reroute_020.width, reroute_020.height = 16.0, 100.0
            group_007.width, group_007.height = 221.22412109375, 100.0
            group_input_17.width, group_input_17.height = 140.0, 100.0
            group_009.width, group_009.height = 140.0, 100.0
            group_010.width, group_010.height = 140.0, 100.0
            group_008.width, group_008.height = 140.0, 100.0
            vector_math_002.width, vector_math_002.height = 140.0, 100.0
            vector_math_004.width, vector_math_004.height = 140.0, 100.0
            group_output_17.width, group_output_17.height = 140.0, 100.0

            # initialize _base_align links
            # switch_008.Output -> group_010.B
            _base_align.links.new(switch_008.outputs[0], group_010.inputs[1])
            # reroute_018.Output -> group_010.Geometry
            _base_align.links.new(reroute_018.outputs[0], group_010.inputs[0])
            # group_009.Value -> vector_math_002.Vector
            _base_align.links.new(group_009.outputs[1], vector_math_002.inputs[1])
            # group_007.is_pyrimidine -> switch_008.Switch
            _base_align.links.new(group_007.outputs[1], switch_008.inputs[0])
            # group_007.is_pyrimidine -> switch_009.Switch
            _base_align.links.new(group_007.outputs[1], switch_009.inputs[0])
            # reroute_018.Output -> group_009.Geometry
            _base_align.links.new(reroute_018.outputs[0], group_009.inputs[0])
            # reroute_020.Output -> reroute_018.Input
            _base_align.links.new(reroute_020.outputs[0], reroute_018.inputs[0])
            # switch_009.Output -> group_009.B
            _base_align.links.new(switch_009.outputs[0], group_009.inputs[1])
            # group_008.Value -> vector_math_004.Vector
            _base_align.links.new(group_008.outputs[1], vector_math_004.inputs[1])
            # reroute_020.Output -> group_008.Geometry
            _base_align.links.new(reroute_020.outputs[0], group_008.inputs[0])
            # group_009.Value -> vector_math_004.Vector
            _base_align.links.new(group_009.outputs[1], vector_math_004.inputs[0])
            # group_010.Value -> vector_math_002.Vector
            _base_align.links.new(group_010.outputs[1], vector_math_002.inputs[0])
            # group_input_17.Input -> reroute_020.Input
            _base_align.links.new(group_input_17.outputs[0], reroute_020.inputs[0])
            # group_009.Value -> group_output_17.Base Interface
            _base_align.links.new(group_009.outputs[1], group_output_17.inputs[0])
            # group_008.Value -> group_output_17.Base Pivot
            _base_align.links.new(group_008.outputs[1], group_output_17.inputs[1])
            # vector_math_004.Vector -> group_output_17.Align Vertical
            _base_align.links.new(vector_math_004.outputs[0], group_output_17.inputs[2])
            # vector_math_002.Vector -> group_output_17.Align Horizontal
            _base_align.links.new(vector_math_002.outputs[0], group_output_17.inputs[3])
            return _base_align

        _base_align = _base_align_node_group()

        # initialize group_pick node group
        def group_pick_node_group():
            group_pick = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Group Pick"
            )

            group_pick.color_tag = "INPUT"
            group_pick.description = ""

            # group_pick interface
            # Socket Is Valid
            is_valid_socket = group_pick.interface.new_socket(
                name="Is Valid", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_valid_socket.attribute_domain = "POINT"
            is_valid_socket.description = "Whether the pick is valid. Pick is only valid if a single item is picked in the Group ID"

            # Socket Index
            index_socket = group_pick.interface.new_socket(
                name="Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_socket.subtype = "NONE"
            index_socket.default_value = 0
            index_socket.min_value = 0
            index_socket.max_value = 2147483647
            index_socket.attribute_domain = "POINT"
            index_socket.description = (
                "Index of picked item. Returns -1 if not a valid pick."
            )

            # Socket Pick
            pick_socket = group_pick.interface.new_socket(
                name="Pick", in_out="INPUT", socket_type="NodeSocketBool"
            )
            pick_socket.attribute_domain = "POINT"
            pick_socket.hide_value = True
            pick_socket.description = "True for the item to pick from the group. If number of picks is 0 or more than 1, not a valid pick"

            # Socket Group ID
            group_id_socket = group_pick.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket.subtype = "NONE"
            group_id_socket.default_value = 0
            group_id_socket.min_value = -2147483648
            group_id_socket.max_value = 2147483647
            group_id_socket.attribute_domain = "POINT"
            group_id_socket.description = "Group ID inside which to pick the item"

            # initialize group_pick nodes
            # node Group Output
            group_output_18 = group_pick.nodes.new("NodeGroupOutput")
            group_output_18.name = "Group Output"
            group_output_18.is_active_output = True

            # node Group Input
            group_input_18 = group_pick.nodes.new("NodeGroupInput")
            group_input_18.name = "Group Input"

            # node Switch
            switch_3 = group_pick.nodes.new("GeometryNodeSwitch")
            switch_3.name = "Switch"
            switch_3.input_type = "INT"
            # False
            switch_3.inputs[1].default_value = 0

            # node Index
            index = group_pick.nodes.new("GeometryNodeInputIndex")
            index.name = "Index"

            # node Accumulate Field
            accumulate_field = group_pick.nodes.new("GeometryNodeAccumulateField")
            accumulate_field.name = "Accumulate Field"
            accumulate_field.data_type = "INT"
            accumulate_field.domain = "POINT"

            # node Accumulate Field.002
            accumulate_field_002 = group_pick.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_002.name = "Accumulate Field.002"
            accumulate_field_002.data_type = "INT"
            accumulate_field_002.domain = "POINT"

            # node Switch.001
            switch_001_1 = group_pick.nodes.new("GeometryNodeSwitch")
            switch_001_1.name = "Switch.001"
            switch_001_1.input_type = "INT"
            # False
            switch_001_1.inputs[1].default_value = -1

            # node Compare.003
            compare_003_3 = group_pick.nodes.new("FunctionNodeCompare")
            compare_003_3.name = "Compare.003"
            compare_003_3.data_type = "INT"
            compare_003_3.mode = "ELEMENT"
            compare_003_3.operation = "EQUAL"
            # B_INT
            compare_003_3.inputs[3].default_value = 1

            # node Reroute.001
            reroute_001_2 = group_pick.nodes.new("NodeReroute")
            reroute_001_2.name = "Reroute.001"
            # node Reroute.002
            reroute_002_1 = group_pick.nodes.new("NodeReroute")
            reroute_002_1.name = "Reroute.002"

            # Set locations
            group_output_18.location = (462.9173889160156, 0.0)
            group_input_18.location = (-472.9173889160156, 0.0)
            switch_3.location = (-120.0, -20.0)
            index.location = (-480.0, -120.0)
            accumulate_field.location = (60.0, -20.0)
            accumulate_field_002.location = (-120.0, 180.0)
            switch_001_1.location = (240.0, -20.0)
            compare_003_3.location = (60.0, 180.0)
            reroute_001_2.location = (-260.0, -100.0)
            reroute_002_1.location = (-260.0, -60.0)

            # Set dimensions
            group_output_18.width, group_output_18.height = 140.0, 100.0
            group_input_18.width, group_input_18.height = 140.0, 100.0
            switch_3.width, switch_3.height = 140.0, 100.0
            index.width, index.height = 140.0, 100.0
            accumulate_field.width, accumulate_field.height = 140.0, 100.0
            accumulate_field_002.width, accumulate_field_002.height = 140.0, 100.0
            switch_001_1.width, switch_001_1.height = 140.0, 100.0
            compare_003_3.width, compare_003_3.height = 138.9921875, 100.0
            reroute_001_2.width, reroute_001_2.height = 16.0, 100.0
            reroute_002_1.width, reroute_002_1.height = 16.0, 100.0

            # initialize group_pick links
            # switch_3.Output -> accumulate_field.Value
            group_pick.links.new(switch_3.outputs[0], accumulate_field.inputs[0])
            # compare_003_3.Result -> switch_001_1.Switch
            group_pick.links.new(compare_003_3.outputs[0], switch_001_1.inputs[0])
            # accumulate_field.Total -> switch_001_1.True
            group_pick.links.new(accumulate_field.outputs[2], switch_001_1.inputs[2])
            # reroute_001_2.Output -> accumulate_field.Group ID
            group_pick.links.new(reroute_001_2.outputs[0], accumulate_field.inputs[1])
            # reroute_001_2.Output -> accumulate_field_002.Group ID
            group_pick.links.new(
                reroute_001_2.outputs[0], accumulate_field_002.inputs[1]
            )
            # reroute_002_1.Output -> switch_3.Switch
            group_pick.links.new(reroute_002_1.outputs[0], switch_3.inputs[0])
            # reroute_002_1.Output -> accumulate_field_002.Value
            group_pick.links.new(
                reroute_002_1.outputs[0], accumulate_field_002.inputs[0]
            )
            # index.Index -> switch_3.True
            group_pick.links.new(index.outputs[0], switch_3.inputs[2])
            # accumulate_field_002.Total -> compare_003_3.A
            group_pick.links.new(
                accumulate_field_002.outputs[2], compare_003_3.inputs[2]
            )
            # group_input_18.Group ID -> reroute_001_2.Input
            group_pick.links.new(group_input_18.outputs[1], reroute_001_2.inputs[0])
            # group_input_18.Pick -> reroute_002_1.Input
            group_pick.links.new(group_input_18.outputs[0], reroute_002_1.inputs[0])
            # switch_001_1.Output -> group_output_18.Index
            group_pick.links.new(switch_001_1.outputs[0], group_output_18.inputs[1])
            # compare_003_3.Result -> group_output_18.Is Valid
            group_pick.links.new(compare_003_3.outputs[0], group_output_18.inputs[0])
            return group_pick

        group_pick = group_pick_node_group()

        # initialize group_pick_vector node group
        def group_pick_vector_node_group():
            group_pick_vector = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Group Pick Vector"
            )

            group_pick_vector.color_tag = "INPUT"
            group_pick_vector.description = ""

            # group_pick_vector interface
            # Socket Is Valid
            is_valid_socket_1 = group_pick_vector.interface.new_socket(
                name="Is Valid", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_valid_socket_1.attribute_domain = "POINT"
            is_valid_socket_1.description = "The pick for this group is valid"

            # Socket Index
            index_socket_1 = group_pick_vector.interface.new_socket(
                name="Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_socket_1.subtype = "NONE"
            index_socket_1.default_value = 0
            index_socket_1.min_value = -2147483648
            index_socket_1.max_value = 2147483647
            index_socket_1.attribute_domain = "POINT"
            index_socket_1.description = "Picked Index for the Group"

            # Socket Vector
            vector_socket = group_pick_vector.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket.subtype = "NONE"
            vector_socket.default_value = (0.0, 0.0, 0.0)
            vector_socket.min_value = -3.4028234663852886e38
            vector_socket.max_value = 3.4028234663852886e38
            vector_socket.attribute_domain = "POINT"
            vector_socket.description = "Picked vector for the group"

            # Socket Pick
            pick_socket_1 = group_pick_vector.interface.new_socket(
                name="Pick", in_out="INPUT", socket_type="NodeSocketBool"
            )
            pick_socket_1.attribute_domain = "POINT"
            pick_socket_1.hide_value = True

            # Socket Group ID
            group_id_socket_1 = group_pick_vector.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_1.subtype = "NONE"
            group_id_socket_1.default_value = 0
            group_id_socket_1.min_value = -2147483648
            group_id_socket_1.max_value = 2147483647
            group_id_socket_1.attribute_domain = "POINT"

            # Socket Position
            position_socket = group_pick_vector.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket.subtype = "NONE"
            position_socket.default_value = (0.0, 0.0, 0.0)
            position_socket.min_value = -3.4028234663852886e38
            position_socket.max_value = 3.4028234663852886e38
            position_socket.attribute_domain = "POINT"
            position_socket.description = (
                "Vector field to pick vlaue for, defaults to Position"
            )

            # initialize group_pick_vector nodes
            # node Group Output
            group_output_19 = group_pick_vector.nodes.new("NodeGroupOutput")
            group_output_19.name = "Group Output"
            group_output_19.is_active_output = True

            # node Group Input
            group_input_19 = group_pick_vector.nodes.new("NodeGroupInput")
            group_input_19.name = "Group Input"

            # node Evaluate at Index.001
            evaluate_at_index_001 = group_pick_vector.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001.name = "Evaluate at Index.001"
            evaluate_at_index_001.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001.domain = "POINT"

            # node Switch.002
            switch_002 = group_pick_vector.nodes.new("GeometryNodeSwitch")
            switch_002.name = "Switch.002"
            switch_002.input_type = "VECTOR"
            # False
            switch_002.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Group
            group_8 = group_pick_vector.nodes.new("GeometryNodeGroup")
            group_8.name = "Group"
            group_8.node_tree = group_pick

            # Set locations
            group_output_19.location = (-40.0, -20.0)
            group_input_19.location = (-740.0, -80.0)
            evaluate_at_index_001.location = (-380.0, -180.0)
            switch_002.location = (-220.0, -60.0)
            group_8.location = (-560.0, -20.0)

            # Set dimensions
            group_output_19.width, group_output_19.height = 140.0, 100.0
            group_input_19.width, group_input_19.height = 140.0, 100.0
            evaluate_at_index_001.width, evaluate_at_index_001.height = (
                132.09918212890625,
                100.0,
            )
            switch_002.width, switch_002.height = 140.0, 100.0
            group_8.width, group_8.height = 140.0, 100.0

            # initialize group_pick_vector links
            # group_8.Is Valid -> switch_002.Switch
            group_pick_vector.links.new(group_8.outputs[0], switch_002.inputs[0])
            # group_8.Index -> evaluate_at_index_001.Index
            group_pick_vector.links.new(
                group_8.outputs[1], evaluate_at_index_001.inputs[0]
            )
            # evaluate_at_index_001.Value -> switch_002.True
            group_pick_vector.links.new(
                evaluate_at_index_001.outputs[0], switch_002.inputs[2]
            )
            # group_8.Index -> group_output_19.Index
            group_pick_vector.links.new(group_8.outputs[1], group_output_19.inputs[1])
            # group_8.Is Valid -> group_output_19.Is Valid
            group_pick_vector.links.new(group_8.outputs[0], group_output_19.inputs[0])
            # switch_002.Output -> group_output_19.Vector
            group_pick_vector.links.new(
                switch_002.outputs[0], group_output_19.inputs[2]
            )
            # group_input_19.Group ID -> group_8.Group ID
            group_pick_vector.links.new(group_input_19.outputs[1], group_8.inputs[1])
            # group_input_19.Pick -> group_8.Pick
            group_pick_vector.links.new(group_input_19.outputs[0], group_8.inputs[0])
            # group_input_19.Position -> evaluate_at_index_001.Value
            group_pick_vector.links.new(
                group_input_19.outputs[2], evaluate_at_index_001.inputs[1]
            )
            return group_pick_vector

        group_pick_vector = group_pick_vector_node_group()

        # initialize offset_integer node group
        def offset_integer_node_group():
            offset_integer = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Offset Integer"
            )

            offset_integer.color_tag = "CONVERTER"
            offset_integer.description = ""

            # offset_integer interface
            # Socket Value
            value_socket_3 = offset_integer.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            value_socket_3.subtype = "NONE"
            value_socket_3.default_value = 0
            value_socket_3.min_value = -2147483648
            value_socket_3.max_value = 2147483647
            value_socket_3.attribute_domain = "POINT"

            # Socket Index
            index_socket_2 = offset_integer.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_2.subtype = "NONE"
            index_socket_2.default_value = 0
            index_socket_2.min_value = 0
            index_socket_2.max_value = 2147483647
            index_socket_2.attribute_domain = "POINT"

            # Socket Value
            value_socket_4 = offset_integer.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketInt"
            )
            value_socket_4.subtype = "NONE"
            value_socket_4.default_value = 0
            value_socket_4.min_value = -2147483648
            value_socket_4.max_value = 2147483647
            value_socket_4.attribute_domain = "POINT"
            value_socket_4.hide_value = True

            # Socket Offset
            offset_socket = offset_integer.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket.subtype = "NONE"
            offset_socket.default_value = 0
            offset_socket.min_value = -2147483648
            offset_socket.max_value = 2147483647
            offset_socket.attribute_domain = "POINT"

            # initialize offset_integer nodes
            # node Group Output
            group_output_20 = offset_integer.nodes.new("NodeGroupOutput")
            group_output_20.name = "Group Output"
            group_output_20.is_active_output = True

            # node Group Input
            group_input_20 = offset_integer.nodes.new("NodeGroupInput")
            group_input_20.name = "Group Input"

            # node Evaluate at Index
            evaluate_at_index = offset_integer.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index.name = "Evaluate at Index"
            evaluate_at_index.data_type = "INT"
            evaluate_at_index.domain = "POINT"

            # node Math
            math_4 = offset_integer.nodes.new("ShaderNodeMath")
            math_4.name = "Math"
            math_4.operation = "ADD"
            math_4.use_clamp = False

            # Set locations
            group_output_20.location = (190.0, 0.0)
            group_input_20.location = (-412.72760009765625, 0.2001800537109375)
            evaluate_at_index.location = (0.0, 0.0)
            math_4.location = (-217.90158081054688, 69.93922424316406)

            # Set dimensions
            group_output_20.width, group_output_20.height = 140.0, 100.0
            group_input_20.width, group_input_20.height = 140.0, 100.0
            evaluate_at_index.width, evaluate_at_index.height = 140.0, 100.0
            math_4.width, math_4.height = 140.0, 100.0

            # initialize offset_integer links
            # evaluate_at_index.Value -> group_output_20.Value
            offset_integer.links.new(
                evaluate_at_index.outputs[0], group_output_20.inputs[0]
            )
            # group_input_20.Index -> math_4.Value
            offset_integer.links.new(group_input_20.outputs[0], math_4.inputs[0])
            # group_input_20.Offset -> math_4.Value
            offset_integer.links.new(group_input_20.outputs[2], math_4.inputs[1])
            # math_4.Value -> evaluate_at_index.Index
            offset_integer.links.new(math_4.outputs[0], evaluate_at_index.inputs[0])
            # group_input_20.Value -> evaluate_at_index.Value
            offset_integer.links.new(
                group_input_20.outputs[1], evaluate_at_index.inputs[1]
            )
            return offset_integer

        offset_integer = offset_integer_node_group()

        # initialize res_group_id node group
        def res_group_id_node_group():
            res_group_id = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Res Group ID"
            )

            res_group_id.color_tag = "INPUT"
            res_group_id.description = ""

            # res_group_id interface
            # Socket Unique Group ID
            unique_group_id_socket = res_group_id.interface.new_socket(
                name="Unique Group ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            unique_group_id_socket.subtype = "NONE"
            unique_group_id_socket.default_value = 0
            unique_group_id_socket.min_value = -2147483648
            unique_group_id_socket.max_value = 2147483647
            unique_group_id_socket.attribute_domain = "POINT"
            unique_group_id_socket.description = "A unique Group ID for eash residue"

            # initialize res_group_id nodes
            # node Group Output
            group_output_21 = res_group_id.nodes.new("NodeGroupOutput")
            group_output_21.name = "Group Output"
            group_output_21.is_active_output = True

            # node Group Input
            group_input_21 = res_group_id.nodes.new("NodeGroupInput")
            group_input_21.name = "Group Input"

            # node Named Attribute.001
            named_attribute_001 = res_group_id.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001.name = "Named Attribute.001"
            named_attribute_001.data_type = "INT"
            # Name
            named_attribute_001.inputs[0].default_value = "res_id"

            # node Named Attribute.002
            named_attribute_002_1 = res_group_id.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_1.name = "Named Attribute.002"
            named_attribute_002_1.data_type = "INT"
            # Name
            named_attribute_002_1.inputs[0].default_value = "atom_name"

            # node Compare.002
            compare_002_2 = res_group_id.nodes.new("FunctionNodeCompare")
            compare_002_2.name = "Compare.002"
            compare_002_2.data_type = "INT"
            compare_002_2.mode = "ELEMENT"
            compare_002_2.operation = "EQUAL"
            # B_INT
            compare_002_2.inputs[3].default_value = 1

            # node Compare.001
            compare_001_2 = res_group_id.nodes.new("FunctionNodeCompare")
            compare_001_2.name = "Compare.001"
            compare_001_2.data_type = "INT"
            compare_001_2.mode = "ELEMENT"
            compare_001_2.operation = "NOT_EQUAL"

            # node Boolean Math
            boolean_math_3 = res_group_id.nodes.new("FunctionNodeBooleanMath")
            boolean_math_3.name = "Boolean Math"
            boolean_math_3.operation = "OR"

            # node Accumulate Field.001
            accumulate_field_001_1 = res_group_id.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_1.name = "Accumulate Field.001"
            accumulate_field_001_1.data_type = "INT"
            accumulate_field_001_1.domain = "POINT"
            # Group Index
            accumulate_field_001_1.inputs[1].default_value = 0

            # node Group.001
            group_001_3 = res_group_id.nodes.new("GeometryNodeGroup")
            group_001_3.name = "Group.001"
            group_001_3.node_tree = offset_integer
            # Socket_1
            group_001_3.inputs[0].default_value = 0
            # Socket_2
            group_001_3.inputs[2].default_value = -1

            # node Math
            math_5 = res_group_id.nodes.new("ShaderNodeMath")
            math_5.name = "Math"
            math_5.operation = "SUBTRACT"
            math_5.use_clamp = False
            # Value_001
            math_5.inputs[1].default_value = 1.0

            # node Frame
            frame_2 = res_group_id.nodes.new("NodeFrame")
            frame_2.name = "Frame"
            frame_2.label_size = 20
            frame_2.shrink = True

            # node Reroute
            reroute_2 = res_group_id.nodes.new("NodeReroute")
            reroute_2.label = (
                "subtracting 1 from the leading, but things don't work right"
            )
            reroute_2.name = "Reroute"
            # node Reroute.001
            reroute_001_3 = res_group_id.nodes.new("NodeReroute")
            reroute_001_3.name = "Reroute.001"
            # node Reroute.002
            reroute_002_2 = res_group_id.nodes.new("NodeReroute")
            reroute_002_2.label = (
                "In theory we can just use the trailing value instead of"
            )
            reroute_002_2.name = "Reroute.002"
            # node Reroute.003
            reroute_003 = res_group_id.nodes.new("NodeReroute")
            reroute_003.name = "Reroute.003"

            # Set parents
            math_5.parent = frame_2
            reroute_2.parent = frame_2
            reroute_001_3.parent = frame_2
            reroute_002_2.parent = frame_2
            reroute_003.parent = frame_2

            # Set locations
            group_output_21.location = (900.0, 160.0)
            group_input_21.location = (-420.0, 160.0)
            named_attribute_001.location = (-240.0, 0.0)
            named_attribute_002_1.location = (-250.0, 160.0)
            compare_002_2.location = (-70.0, 160.0)
            compare_001_2.location = (-70.0, 0.0)
            boolean_math_3.location = (90.0, 160.0)
            accumulate_field_001_1.location = (250.0, 160.0)
            group_001_3.location = (-70.0, -160.0)
            math_5.location = (519.2361450195312, 166.28671264648438)
            frame_2.location = (95.0, -20.0)
            reroute_2.location = (554.4125366210938, 257.9646911621094)
            reroute_001_3.location = (739.2361450195312, 306.2867126464844)
            reroute_002_2.location = (551.13134765625, 297.3444519042969)
            reroute_003.location = (379.23614501953125, 306.2867126464844)

            # Set dimensions
            group_output_21.width, group_output_21.height = 140.0, 100.0
            group_input_21.width, group_input_21.height = 140.0, 100.0
            named_attribute_001.width, named_attribute_001.height = 140.0, 100.0
            named_attribute_002_1.width, named_attribute_002_1.height = 140.0, 100.0
            compare_002_2.width, compare_002_2.height = 140.0, 100.0
            compare_001_2.width, compare_001_2.height = 140.0, 100.0
            boolean_math_3.width, boolean_math_3.height = 140.0, 100.0
            accumulate_field_001_1.width, accumulate_field_001_1.height = 140.0, 100.0
            group_001_3.width, group_001_3.height = 140.0, 100.0
            math_5.width, math_5.height = 140.0, 100.0
            frame_2.width, frame_2.height = 436.0, 356.2867126464844
            reroute_2.width, reroute_2.height = 16.0, 100.0
            reroute_001_3.width, reroute_001_3.height = 16.0, 100.0
            reroute_002_2.width, reroute_002_2.height = 16.0, 100.0
            reroute_003.width, reroute_003.height = 16.0, 100.0

            # initialize res_group_id links
            # compare_002_2.Result -> boolean_math_3.Boolean
            res_group_id.links.new(compare_002_2.outputs[0], boolean_math_3.inputs[0])
            # named_attribute_001.Attribute -> compare_001_2.A
            res_group_id.links.new(
                named_attribute_001.outputs[0], compare_001_2.inputs[2]
            )
            # named_attribute_001.Attribute -> group_001_3.Value
            res_group_id.links.new(
                named_attribute_001.outputs[0], group_001_3.inputs[1]
            )
            # compare_001_2.Result -> boolean_math_3.Boolean
            res_group_id.links.new(compare_001_2.outputs[0], boolean_math_3.inputs[1])
            # named_attribute_002_1.Attribute -> compare_002_2.A
            res_group_id.links.new(
                named_attribute_002_1.outputs[0], compare_002_2.inputs[2]
            )
            # group_001_3.Value -> compare_001_2.B
            res_group_id.links.new(group_001_3.outputs[0], compare_001_2.inputs[3])
            # accumulate_field_001_1.Leading -> math_5.Value
            res_group_id.links.new(accumulate_field_001_1.outputs[0], math_5.inputs[0])
            # math_5.Value -> group_output_21.Unique Group ID
            res_group_id.links.new(math_5.outputs[0], group_output_21.inputs[0])
            # boolean_math_3.Boolean -> accumulate_field_001_1.Value
            res_group_id.links.new(
                boolean_math_3.outputs[0], accumulate_field_001_1.inputs[0]
            )
            return res_group_id

        res_group_id = res_group_id_node_group()

        # initialize residue_mask node group
        def residue_mask_node_group():
            residue_mask = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Residue Mask"
            )

            residue_mask.color_tag = "INPUT"
            residue_mask.description = ""

            # residue_mask interface
            # Socket Is Valid
            is_valid_socket_2 = residue_mask.interface.new_socket(
                name="Is Valid", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_valid_socket_2.attribute_domain = "POINT"
            is_valid_socket_2.description = "Group contains only one occurrance of the selected atom. None or more than one returns False"

            # Socket Index
            index_socket_3 = residue_mask.interface.new_socket(
                name="Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_socket_3.subtype = "NONE"
            index_socket_3.default_value = 0
            index_socket_3.min_value = -2147483648
            index_socket_3.max_value = 2147483647
            index_socket_3.attribute_domain = "POINT"
            index_socket_3.description = "Index for the group's atom with specified name, returns -1 if not valid"

            # Socket Position
            position_socket_1 = residue_mask.interface.new_socket(
                name="Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            position_socket_1.subtype = "NONE"
            position_socket_1.default_value = (0.0, 0.0, 0.0)
            position_socket_1.min_value = -3.4028234663852886e38
            position_socket_1.max_value = 3.4028234663852886e38
            position_socket_1.attribute_domain = "POINT"
            position_socket_1.description = "Position of the picked point in the group, returns (0, 0, 0) if not valid"

            # Socket Group ID
            group_id_socket_2 = residue_mask.interface.new_socket(
                name="Group ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_2.subtype = "NONE"
            group_id_socket_2.default_value = 0
            group_id_socket_2.min_value = -2147483648
            group_id_socket_2.max_value = 2147483647
            group_id_socket_2.attribute_domain = "POINT"

            # Socket atom_name
            atom_name_socket = residue_mask.interface.new_socket(
                name="atom_name", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atom_name_socket.subtype = "NONE"
            atom_name_socket.default_value = 1
            atom_name_socket.min_value = 2
            atom_name_socket.max_value = 2147483647
            atom_name_socket.attribute_domain = "POINT"
            atom_name_socket.description = "Atom to pick from the group"

            # Socket Use Fallback
            use_fallback_socket = residue_mask.interface.new_socket(
                name="Use Fallback", in_out="INPUT", socket_type="NodeSocketBool"
            )
            use_fallback_socket.attribute_domain = "POINT"
            use_fallback_socket.description = "Uses a calculated Unique Group ID as a fallback. Disabling can increase performance if pre-computing a Group ID for multiple nodes"

            # Socket Group ID
            group_id_socket_3 = residue_mask.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_3.subtype = "NONE"
            group_id_socket_3.default_value = 0
            group_id_socket_3.min_value = -2147483648
            group_id_socket_3.max_value = 2147483647
            group_id_socket_3.attribute_domain = "POINT"

            # initialize residue_mask nodes
            # node Compare
            compare_2 = residue_mask.nodes.new("FunctionNodeCompare")
            compare_2.name = "Compare"
            compare_2.data_type = "INT"
            compare_2.mode = "ELEMENT"
            compare_2.operation = "EQUAL"

            # node Group Input
            group_input_22 = residue_mask.nodes.new("NodeGroupInput")
            group_input_22.name = "Group Input"

            # node Named Attribute
            named_attribute_6 = residue_mask.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_6.name = "Named Attribute"
            named_attribute_6.data_type = "INT"
            # Name
            named_attribute_6.inputs[0].default_value = "atom_name"

            # node Group Output
            group_output_22 = residue_mask.nodes.new("NodeGroupOutput")
            group_output_22.name = "Group Output"
            group_output_22.is_active_output = True

            # node Group
            group_9 = residue_mask.nodes.new("GeometryNodeGroup")
            group_9.name = "Group"
            group_9.node_tree = group_pick_vector
            # Socket_5
            group_9.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group.002
            group_002 = residue_mask.nodes.new("GeometryNodeGroup")
            group_002.name = "Group.002"
            group_002.node_tree = res_group_id

            # node Switch
            switch_4 = residue_mask.nodes.new("GeometryNodeSwitch")
            switch_4.name = "Switch"
            switch_4.input_type = "INT"

            # Set locations
            compare_2.location = (40.0, 340.0)
            group_input_22.location = (-140.0, 200.0)
            named_attribute_6.location = (-140.0, 340.0)
            group_output_22.location = (420.0, 340.0)
            group_9.location = (220.0, 340.0)
            group_002.location = (-140.0, 60.0)
            switch_4.location = (40.0, 180.0)

            # Set dimensions
            compare_2.width, compare_2.height = 140.0, 100.0
            group_input_22.width, group_input_22.height = 140.0, 100.0
            named_attribute_6.width, named_attribute_6.height = 140.0, 100.0
            group_output_22.width, group_output_22.height = 140.0, 100.0
            group_9.width, group_9.height = 164.60528564453125, 100.0
            group_002.width, group_002.height = 140.0, 100.0
            switch_4.width, switch_4.height = 140.0, 100.0

            # initialize residue_mask links
            # named_attribute_6.Attribute -> compare_2.A
            residue_mask.links.new(named_attribute_6.outputs[0], compare_2.inputs[2])
            # group_input_22.atom_name -> compare_2.B
            residue_mask.links.new(group_input_22.outputs[0], compare_2.inputs[3])
            # group_9.Index -> group_output_22.Index
            residue_mask.links.new(group_9.outputs[1], group_output_22.inputs[1])
            # group_9.Vector -> group_output_22.Position
            residue_mask.links.new(group_9.outputs[2], group_output_22.inputs[2])
            # group_9.Is Valid -> group_output_22.Is Valid
            residue_mask.links.new(group_9.outputs[0], group_output_22.inputs[0])
            # compare_2.Result -> group_9.Pick
            residue_mask.links.new(compare_2.outputs[0], group_9.inputs[0])
            # group_input_22.Use Fallback -> switch_4.Switch
            residue_mask.links.new(group_input_22.outputs[1], switch_4.inputs[0])
            # group_input_22.Group ID -> switch_4.False
            residue_mask.links.new(group_input_22.outputs[2], switch_4.inputs[1])
            # switch_4.Output -> group_9.Group ID
            residue_mask.links.new(switch_4.outputs[0], group_9.inputs[1])
            # group_002.Unique Group ID -> switch_4.True
            residue_mask.links.new(group_002.outputs[0], switch_4.inputs[2])
            # switch_4.Output -> group_output_22.Group ID
            residue_mask.links.new(switch_4.outputs[0], group_output_22.inputs[3])
            return residue_mask

        residue_mask = residue_mask_node_group()

        # initialize _mn_utils_style_ribbon_nucleic node group
        def _mn_utils_style_ribbon_nucleic_node_group():
            _mn_utils_style_ribbon_nucleic = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_ribbon_nucleic"
            )

            _mn_utils_style_ribbon_nucleic.color_tag = "GEOMETRY"
            _mn_utils_style_ribbon_nucleic.description = ""

            _mn_utils_style_ribbon_nucleic.is_modifier = True

            # _mn_utils_style_ribbon_nucleic interface
            # Socket Ribbon + Bases
            ribbon___bases_socket = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Ribbon + Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ribbon___bases_socket.attribute_domain = "POINT"

            # Socket Ribbon Curve
            ribbon_curve_socket = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Ribbon Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ribbon_curve_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_7 = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_7.attribute_domain = "POINT"
            atoms_socket_7.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_7 = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_7.attribute_domain = "POINT"
            selection_socket_7.hide_value = True
            selection_socket_7.description = "Selection of atoms to apply this node to"

            # Socket Material
            material_socket_5 = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_5.attribute_domain = "POINT"
            material_socket_5.description = (
                "Material to apply to the resulting geometry"
            )

            # Socket Intepolate Color
            intepolate_color_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Intepolate Color",
                    in_out="INPUT",
                    socket_type="NodeSocketBool",
                )
            )
            intepolate_color_socket.attribute_domain = "POINT"

            # Panel Backbone
            backbone_panel = _mn_utils_style_ribbon_nucleic.interface.new_panel(
                "Backbone"
            )
            # Socket Backbone Subdivisions
            backbone_subdivisions_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Backbone Subdivisions",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                    parent=backbone_panel,
                )
            )
            backbone_subdivisions_socket.subtype = "NONE"
            backbone_subdivisions_socket.default_value = 3
            backbone_subdivisions_socket.min_value = 1
            backbone_subdivisions_socket.max_value = 10
            backbone_subdivisions_socket.attribute_domain = "POINT"

            # Socket Backbone Resolution
            backbone_resolution_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Backbone Resolution",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                    parent=backbone_panel,
                )
            )
            backbone_resolution_socket.subtype = "NONE"
            backbone_resolution_socket.default_value = 8
            backbone_resolution_socket.min_value = 3
            backbone_resolution_socket.max_value = 50
            backbone_resolution_socket.attribute_domain = "POINT"

            # Socket Backbone Radius
            backbone_radius_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Backbone Radius",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                    parent=backbone_panel,
                )
            )
            backbone_radius_socket.subtype = "DISTANCE"
            backbone_radius_socket.default_value = 2.0
            backbone_radius_socket.min_value = 0.0
            backbone_radius_socket.max_value = 3.4028234663852886e38
            backbone_radius_socket.attribute_domain = "POINT"

            # Socket Backbone Shade Smooth
            backbone_shade_smooth_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Backbone Shade Smooth",
                    in_out="INPUT",
                    socket_type="NodeSocketBool",
                    parent=backbone_panel,
                )
            )
            backbone_shade_smooth_socket.attribute_domain = "POINT"

            # Panel Base
            base_panel = _mn_utils_style_ribbon_nucleic.interface.new_panel("Base")
            # Socket Base Radius
            base_radius_socket = _mn_utils_style_ribbon_nucleic.interface.new_socket(
                name="Base Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=base_panel,
            )
            base_radius_socket.subtype = "DISTANCE"
            base_radius_socket.default_value = 0.20000000298023224
            base_radius_socket.min_value = 0.0
            base_radius_socket.max_value = 3.4028234663852886e38
            base_radius_socket.attribute_domain = "POINT"

            # Socket Base Resolution
            base_resolution_socket = (
                _mn_utils_style_ribbon_nucleic.interface.new_socket(
                    name="Base Resolution",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                    parent=base_panel,
                )
            )
            base_resolution_socket.subtype = "NONE"
            base_resolution_socket.default_value = 6
            base_resolution_socket.min_value = 3
            base_resolution_socket.max_value = 512
            base_resolution_socket.attribute_domain = "POINT"

            # initialize _mn_utils_style_ribbon_nucleic nodes
            # node Frame.002
            frame_002_1 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_002_1.label = (
                "Transfer attributes to new curve / mesh from alpha carbons"
            )
            frame_002_1.name = "Frame.002"
            frame_002_1.label_size = 20
            frame_002_1.shrink = True

            # node Frame
            frame_3 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_3.label = "Delete between chains and distance too large"
            frame_3.name = "Frame"
            frame_3.label_size = 20
            frame_3.shrink = True

            # node Frame.001
            frame_001_1 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_001_1.label = "Create New mesh line through all CA"
            frame_001_1.name = "Frame.001"
            frame_001_1.label_size = 20
            frame_001_1.shrink = True

            # node Frame.006
            frame_006 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_006.label = "Slightly Extend Curve Ends"
            frame_006.name = "Frame.006"
            frame_006.label_size = 20
            frame_006.shrink = True

            # node Frame.004
            frame_004 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_004.label = "Convert Mesh Backbone to Curve"
            frame_004.name = "Frame.004"
            frame_004.label_size = 20
            frame_004.shrink = True

            # node Frame.005
            frame_005 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_005.label = "Instance simple base cylinder"
            frame_005.name = "Frame.005"
            frame_005.label_size = 20
            frame_005.shrink = True

            # node Frame.007
            frame_007 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_007.label = "Align Base"
            frame_007.name = "Frame.007"
            frame_007.label_size = 20
            frame_007.shrink = True

            # node Frame.003
            frame_003_1 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeFrame")
            frame_003_1.label = "Create mesh from curve"
            frame_003_1.name = "Frame.003"
            frame_003_1.label_size = 20
            frame_003_1.shrink = True

            # node Sample Index
            sample_index = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index.name = "Sample Index"
            sample_index.hide = True
            sample_index.clamp = True
            sample_index.data_type = "INT"
            sample_index.domain = "POINT"

            # node Named Attribute.002
            named_attribute_002_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_2.label = "chain_id"
            named_attribute_002_2.name = "Named Attribute.002"
            named_attribute_002_2.hide = True
            named_attribute_002_2.data_type = "INT"
            # Name
            named_attribute_002_2.inputs[0].default_value = "chain_id"

            # node Sample Index.004
            sample_index_004 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_004.name = "Sample Index.004"
            sample_index_004.hide = True
            sample_index_004.clamp = True
            sample_index_004.data_type = "INT"
            sample_index_004.domain = "POINT"

            # node Named Attribute.004
            named_attribute_004 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004.label = "res_id"
            named_attribute_004.name = "Named Attribute.004"
            named_attribute_004.hide = True
            named_attribute_004.data_type = "INT"
            # Name
            named_attribute_004.inputs[0].default_value = "res_id"

            # node Sample Index.001
            sample_index_001_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_1.name = "Sample Index.001"
            sample_index_001_1.hide = True
            sample_index_001_1.clamp = True
            sample_index_001_1.data_type = "FLOAT_COLOR"
            sample_index_001_1.domain = "POINT"

            # node Named Attribute
            named_attribute_7 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_7.label = "Color"
            named_attribute_7.name = "Named Attribute"
            named_attribute_7.hide = True
            named_attribute_7.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_7.inputs[0].default_value = "Color"

            # node Reroute.003
            reroute_003_1 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_003_1.name = "Reroute.003"
            # node Sample Index.003
            sample_index_003 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_003.name = "Sample Index.003"
            sample_index_003.hide = True
            sample_index_003.clamp = True
            sample_index_003.data_type = "INT"
            sample_index_003.domain = "POINT"

            # node Named Attribute.003
            named_attribute_003 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003.label = "res_name"
            named_attribute_003.name = "Named Attribute.003"
            named_attribute_003.hide = True
            named_attribute_003.data_type = "INT"
            # Name
            named_attribute_003.inputs[0].default_value = "res_name"

            # node Index.003
            index_003 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputIndex"
            )
            index_003.name = "Index.003"

            # node Named Attribute.005
            named_attribute_005 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_005.label = "b_factor"
            named_attribute_005.name = "Named Attribute.005"
            named_attribute_005.hide = True
            named_attribute_005.data_type = "FLOAT"
            # Name
            named_attribute_005.inputs[0].default_value = "b_factor"

            # node Sample Index.005
            sample_index_005 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_005.name = "Sample Index.005"
            sample_index_005.hide = True
            sample_index_005.clamp = True
            sample_index_005.data_type = "FLOAT"
            sample_index_005.domain = "POINT"

            # node Reroute.001
            reroute_001_4 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_001_4.name = "Reroute.001"
            # node Reroute.010
            reroute_010 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_010.name = "Reroute.010"
            # node Sample Index.008
            sample_index_008 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_008.name = "Sample Index.008"
            sample_index_008.hide = True
            sample_index_008.clamp = True
            sample_index_008.data_type = "INT"
            sample_index_008.domain = "POINT"

            # node Named Attribute.006
            named_attribute_006 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_006.label = "chain_id"
            named_attribute_006.name = "Named Attribute.006"
            named_attribute_006.hide = True
            named_attribute_006.data_type = "INT"
            # Name
            named_attribute_006.inputs[0].default_value = "chain_id"

            # node Index.004
            index_004 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputIndex"
            )
            index_004.name = "Index.004"

            # node Reroute.002
            reroute_002_3 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_002_3.name = "Reroute.002"
            # node Edge Vertices
            edge_vertices_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_1.name = "Edge Vertices"

            # node Field at Index
            field_at_index = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index.name = "Field at Index"
            field_at_index.data_type = "INT"
            field_at_index.domain = "POINT"

            # node Field at Index.001
            field_at_index_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_001.name = "Field at Index.001"
            field_at_index_001.data_type = "INT"
            field_at_index_001.domain = "POINT"

            # node Vector Math
            vector_math = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math.name = "Vector Math"
            vector_math.operation = "DISTANCE"

            # node Compare.001
            compare_001_3 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_3.name = "Compare.001"
            compare_001_3.data_type = "FLOAT"
            compare_001_3.mode = "ELEMENT"
            compare_001_3.operation = "GREATER_THAN"
            # B
            compare_001_3.inputs[1].default_value = 0.10000000149011612

            # node Compare
            compare_3 = _mn_utils_style_ribbon_nucleic.nodes.new("FunctionNodeCompare")
            compare_3.name = "Compare"
            compare_3.data_type = "INT"
            compare_3.mode = "ELEMENT"
            compare_3.operation = "NOT_EQUAL"

            # node Boolean Math
            boolean_math_4 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_4.name = "Boolean Math"
            boolean_math_4.operation = "OR"

            # node Reroute.009
            reroute_009 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_009.name = "Reroute.009"
            # node Reroute.012
            reroute_012 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_012.name = "Reroute.012"
            # node Mesh Line
            mesh_line = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeMeshLine")
            mesh_line.name = "Mesh Line"
            mesh_line.hide = True
            mesh_line.count_mode = "TOTAL"
            mesh_line.mode = "END_POINTS"
            # Start Location
            mesh_line.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Offset
            mesh_line.inputs[3].default_value = (0.0, 0.0, 1.0)

            # node Set Position
            set_position = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position.name = "Set Position"
            set_position.hide = True
            # Selection
            set_position.inputs[1].default_value = True
            # Offset
            set_position.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Domain Size
            domain_size_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_1.name = "Domain Size"
            domain_size_1.hide = True
            domain_size_1.component = "MESH"
            domain_size_1.outputs[1].hide = True
            domain_size_1.outputs[2].hide = True
            domain_size_1.outputs[3].hide = True
            domain_size_1.outputs[4].hide = True
            domain_size_1.outputs[5].hide = True

            # node Delete Geometry
            delete_geometry = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry.name = "Delete Geometry"
            delete_geometry.domain = "EDGE"
            delete_geometry.mode = "ALL"

            # node Sample Index.009
            sample_index_009_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_009_1.name = "Sample Index.009"
            sample_index_009_1.hide = True
            sample_index_009_1.clamp = True
            sample_index_009_1.data_type = "BOOLEAN"
            sample_index_009_1.domain = "POINT"

            # node Group Input.006
            group_input_006 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeGroupInput")
            group_input_006.name = "Group Input.006"
            group_input_006.outputs[0].hide = True
            group_input_006.outputs[1].hide = True
            group_input_006.outputs[2].hide = True
            group_input_006.outputs[3].hide = True
            group_input_006.outputs[4].hide = True
            group_input_006.outputs[5].hide = True
            group_input_006.outputs[8].hide = True
            group_input_006.outputs[9].hide = True
            group_input_006.outputs[10].hide = True

            # node Sample Index.007
            sample_index_007 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_007.name = "Sample Index.007"
            sample_index_007.hide = True
            sample_index_007.clamp = True
            sample_index_007.data_type = "FLOAT"
            sample_index_007.domain = "POINT"

            # node Group Output
            group_output_23 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupOutput"
            )
            group_output_23.name = "Group Output"
            group_output_23.is_active_output = True

            # node Offset Point in Curve
            offset_point_in_curve = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeOffsetPointInCurve"
            )
            offset_point_in_curve.name = "Offset Point in Curve"
            # Point Index
            offset_point_in_curve.inputs[0].default_value = 0

            # node Evaluate at Index
            evaluate_at_index_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_1.name = "Evaluate at Index"
            evaluate_at_index_1.data_type = "FLOAT_VECTOR"
            evaluate_at_index_1.domain = "POINT"

            # node Position.002
            position_002_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_1.name = "Position.002"

            # node Vector Math.002
            vector_math_002_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_002_1.name = "Vector Math.002"
            vector_math_002_1.operation = "SUBTRACT"

            # node Vector Math.004
            vector_math_004_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_1.name = "Vector Math.004"
            vector_math_004_1.operation = "SCALE"
            # Scale
            vector_math_004_1.inputs[3].default_value = -0.5

            # node Endpoint Selection
            endpoint_selection = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection.name = "Endpoint Selection"
            # Start Size
            endpoint_selection.inputs[0].default_value = 1
            # End Size
            endpoint_selection.inputs[1].default_value = 1

            # node Switch
            switch_5 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeSwitch")
            switch_5.name = "Switch"
            switch_5.input_type = "INT"
            # False
            switch_5.inputs[1].default_value = -1
            # True
            switch_5.inputs[2].default_value = 1

            # node Endpoint Selection.001
            endpoint_selection_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_001.name = "Endpoint Selection.001"
            # Start Size
            endpoint_selection_001.inputs[0].default_value = 1
            # End Size
            endpoint_selection_001.inputs[1].default_value = 0

            # node Set Position.001
            set_position_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001.name = "Set Position.001"
            # Position
            set_position_001.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Store Named Attribute.001
            store_named_attribute_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001.name = "Store Named Attribute.001"
            store_named_attribute_001.data_type = "INT"
            store_named_attribute_001.domain = "POINT"
            # Selection
            store_named_attribute_001.inputs[1].default_value = True
            # Name
            store_named_attribute_001.inputs[2].default_value = "chain_id"

            # node Store Named Attribute.002
            store_named_attribute_002 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002.name = "Store Named Attribute.002"
            store_named_attribute_002.data_type = "INT"
            store_named_attribute_002.domain = "POINT"
            # Selection
            store_named_attribute_002.inputs[1].default_value = True
            # Name
            store_named_attribute_002.inputs[2].default_value = "res_id"

            # node Store Named Attribute.003
            store_named_attribute_003 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003.name = "Store Named Attribute.003"
            store_named_attribute_003.data_type = "INT"
            store_named_attribute_003.domain = "POINT"
            # Selection
            store_named_attribute_003.inputs[1].default_value = True
            # Name
            store_named_attribute_003.inputs[2].default_value = "res_name"

            # node Store Named Attribute.004
            store_named_attribute_004 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004.name = "Store Named Attribute.004"
            store_named_attribute_004.data_type = "FLOAT"
            store_named_attribute_004.domain = "POINT"
            # Selection
            store_named_attribute_004.inputs[1].default_value = True
            # Name
            store_named_attribute_004.inputs[2].default_value = "b_factor"

            # node Capture Attribute
            capture_attribute_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_1.name = "Capture Attribute"
            capture_attribute_1.active_index = 0
            capture_attribute_1.capture_items.clear()
            capture_attribute_1.capture_items.new("FLOAT", "Value")
            capture_attribute_1.capture_items["Value"].data_type = "BOOLEAN"
            capture_attribute_1.domain = "POINT"

            # node Set Handle Type
            set_handle_type = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type.name = "Set Handle Type"
            set_handle_type.handle_type = "AUTO"
            set_handle_type.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type.inputs[1].default_value = True

            # node Set Spline Type
            set_spline_type = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type.name = "Set Spline Type"
            set_spline_type.spline_type = "BEZIER"
            # Selection
            set_spline_type.inputs[1].default_value = True

            # node Group Input.004
            group_input_004_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupInput"
            )
            group_input_004_1.name = "Group Input.004"
            group_input_004_1.outputs[0].hide = True
            group_input_004_1.outputs[1].hide = True
            group_input_004_1.outputs[2].hide = True
            group_input_004_1.outputs[3].hide = True
            group_input_004_1.outputs[5].hide = True
            group_input_004_1.outputs[6].hide = True
            group_input_004_1.outputs[7].hide = True
            group_input_004_1.outputs[8].hide = True
            group_input_004_1.outputs[9].hide = True
            group_input_004_1.outputs[10].hide = True

            # node Mesh to Curve
            mesh_to_curve_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeMeshToCurve"
            )
            mesh_to_curve_1.name = "Mesh to Curve"
            # Selection
            mesh_to_curve_1.inputs[1].default_value = True

            # node Set Spline Resolution
            set_spline_resolution = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution.name = "Set Spline Resolution"
            # Selection
            set_spline_resolution.inputs[1].default_value = True

            # node Store Named Attribute
            store_named_attribute_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_2.name = "Store Named Attribute"
            store_named_attribute_2.data_type = "FLOAT_COLOR"
            store_named_attribute_2.domain = "POINT"
            # Selection
            store_named_attribute_2.inputs[1].default_value = True
            # Name
            store_named_attribute_2.inputs[2].default_value = "Color"

            # node Store Named Attribute.007
            store_named_attribute_007 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_007.name = "Store Named Attribute.007"
            store_named_attribute_007.data_type = "FLOAT_VECTOR"
            store_named_attribute_007.domain = "POINT"
            # Selection
            store_named_attribute_007.inputs[1].default_value = True
            # Name
            store_named_attribute_007.inputs[2].default_value = "vec_horizontal"

            # node Store Named Attribute.008
            store_named_attribute_008 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_008.name = "Store Named Attribute.008"
            store_named_attribute_008.data_type = "FLOAT_VECTOR"
            store_named_attribute_008.domain = "POINT"
            # Selection
            store_named_attribute_008.inputs[1].default_value = True
            # Name
            store_named_attribute_008.inputs[2].default_value = "vec_vertical"

            # node Store Named Attribute.009
            store_named_attribute_009 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_009.name = "Store Named Attribute.009"
            store_named_attribute_009.data_type = "FLOAT_VECTOR"
            store_named_attribute_009.domain = "POINT"
            # Selection
            store_named_attribute_009.inputs[1].default_value = True
            # Name
            store_named_attribute_009.inputs[2].default_value = "atom_interface"

            # node Store Named Attribute.010
            store_named_attribute_010 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_010.name = "Store Named Attribute.010"
            store_named_attribute_010.data_type = "FLOAT_VECTOR"
            store_named_attribute_010.domain = "POINT"
            # Selection
            store_named_attribute_010.inputs[1].default_value = True
            # Name
            store_named_attribute_010.inputs[2].default_value = "atom_pivot"

            # node Combine XYZ
            combine_xyz = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz.name = "Combine XYZ"
            # X
            combine_xyz.inputs[0].default_value = 0.0
            # Y
            combine_xyz.inputs[1].default_value = 0.0

            # node Math
            math_6 = _mn_utils_style_ribbon_nucleic.nodes.new("ShaderNodeMath")
            math_6.name = "Math"
            math_6.operation = "DIVIDE"
            math_6.use_clamp = False
            # Value_001
            math_6.inputs[1].default_value = 2.0

            # node Cylinder
            cylinder = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeMeshCylinder"
            )
            cylinder.name = "Cylinder"
            cylinder.fill_type = "NGON"
            # Side Segments
            cylinder.inputs[1].default_value = 1
            # Fill Segments
            cylinder.inputs[2].default_value = 1

            # node Value
            value_1 = _mn_utils_style_ribbon_nucleic.nodes.new("ShaderNodeValue")
            value_1.name = "Value"

            value_1.outputs[0].default_value = 1.0
            # node Group Input.005
            group_input_005_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupInput"
            )
            group_input_005_1.name = "Group Input.005"
            group_input_005_1.outputs[0].hide = True
            group_input_005_1.outputs[1].hide = True
            group_input_005_1.outputs[2].hide = True
            group_input_005_1.outputs[3].hide = True
            group_input_005_1.outputs[4].hide = True
            group_input_005_1.outputs[5].hide = True
            group_input_005_1.outputs[6].hide = True
            group_input_005_1.outputs[7].hide = True
            group_input_005_1.outputs[10].hide = True

            # node Store Named Attribute.006
            store_named_attribute_006 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_006.name = "Store Named Attribute.006"
            store_named_attribute_006.data_type = "FLOAT_VECTOR"
            store_named_attribute_006.domain = "CORNER"
            # Selection
            store_named_attribute_006.inputs[1].default_value = True
            # Name
            store_named_attribute_006.inputs[2].default_value = "uv_map"

            # node Position.001
            position_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001.name = "Position.001"

            # node Store Named Attribute.005
            store_named_attribute_005 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005.name = "Store Named Attribute.005"
            store_named_attribute_005.data_type = "FLOAT_COLOR"
            store_named_attribute_005.domain = "POINT"
            # Selection
            store_named_attribute_005.inputs[1].default_value = True
            # Name
            store_named_attribute_005.inputs[2].default_value = "Color"

            # node Separate Geometry
            separate_geometry_4 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_4.name = "Separate Geometry"
            separate_geometry_4.domain = "POINT"

            # node Group Input
            group_input_23 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeGroupInput")
            group_input_23.name = "Group Input"
            group_input_23.outputs[3].hide = True

            # node Group.004
            group_004 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            group_004.name = "Group.004"
            group_004.node_tree = _sampleatomvalue
            # Input_1
            group_004.inputs[1].default_value = 67

            # node Reroute.006
            reroute_006 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_006.name = "Reroute.006"
            # node Reroute.011
            reroute_011 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_011.name = "Reroute.011"
            # node Group.006
            group_006 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            group_006.name = "Group.006"
            group_006.node_tree = _base_align

            # node Transform
            transform = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeTransform"
            )
            transform.name = "Transform"
            transform.mode = "COMPONENTS"
            # Rotation
            transform.inputs[2].default_value = (0.0, 0.0, 0.7853981852531433)
            # Scale
            transform.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Instance on Points
            instance_on_points_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_1.name = "Instance on Points"
            # Selection
            instance_on_points_1.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_1.inputs[3].default_value = False
            # Instance Index
            instance_on_points_1.inputs[4].default_value = 0

            # node Group.003
            group_003 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            group_003.name = "Group.003"
            group_003.node_tree = _sampleatomvalue
            # Input_1
            group_003.inputs[1].default_value = 55

            # node Combine XYZ.001
            combine_xyz_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_001.name = "Combine XYZ.001"
            # X
            combine_xyz_001.inputs[0].default_value = 0.019999999552965164
            # Y
            combine_xyz_001.inputs[1].default_value = 0.10000000149011612

            # node Vector Math.003
            vector_math_003 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003.name = "Vector Math.003"
            vector_math_003.operation = "LENGTH"

            # node Vector Math.001
            vector_math_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001.name = "Vector Math.001"
            vector_math_001.operation = "SUBTRACT"

            # node Align Euler to Vector.001
            align_euler_to_vector_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_001.name = "Align Euler to Vector.001"
            align_euler_to_vector_001.axis = "Y"
            align_euler_to_vector_001.pivot_axis = "Z"
            # Factor
            align_euler_to_vector_001.inputs[1].default_value = 1.0

            # node Align Euler to Vector
            align_euler_to_vector = _mn_utils_style_ribbon_nucleic.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector.name = "Align Euler to Vector"
            align_euler_to_vector.axis = "Z"
            align_euler_to_vector.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector.inputs[1].default_value = 1.0

            # node Named Attribute.007
            named_attribute_007 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_007.name = "Named Attribute.007"
            named_attribute_007.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_007.inputs[0].default_value = "vec_horizontal"

            # node Named Attribute.008
            named_attribute_008 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_008.name = "Named Attribute.008"
            named_attribute_008.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_008.inputs[0].default_value = "atom_interface"

            # node Capture Attribute.001
            capture_attribute_001_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_1.name = "Capture Attribute.001"
            capture_attribute_001_1.active_index = 0
            capture_attribute_001_1.capture_items.clear()
            capture_attribute_001_1.capture_items.new("FLOAT", "Value")
            capture_attribute_001_1.capture_items["Value"].data_type = "INT"
            capture_attribute_001_1.domain = "POINT"

            # node Index
            index_1 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeInputIndex")
            index_1.name = "Index"

            # node Named Attribute.009
            named_attribute_009_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_009_1.name = "Named Attribute.009"
            named_attribute_009_1.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_009_1.inputs[0].default_value = "Color"

            # node Sample Index.002
            sample_index_002 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002.name = "Sample Index.002"
            sample_index_002.clamp = False
            sample_index_002.data_type = "FLOAT_COLOR"
            sample_index_002.domain = "POINT"

            # node Reroute.004
            reroute_004 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_004.name = "Reroute.004"
            # node Set Shade Smooth
            set_shade_smooth_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_2.name = "Set Shade Smooth"
            set_shade_smooth_2.domain = "FACE"
            # Selection
            set_shade_smooth_2.inputs[1].default_value = True

            # node Reroute.007
            reroute_007 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_007.name = "Reroute.007"
            # node Curve Circle
            curve_circle_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_1.name = "Curve Circle"
            curve_circle_1.hide = True
            curve_circle_1.mode = "RADIUS"
            # Radius
            curve_circle_1.inputs[4].default_value = 0.009999999776482582

            # node Group Input.003
            group_input_003_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupInput"
            )
            group_input_003_2.name = "Group Input.003"
            group_input_003_2.outputs[0].hide = True
            group_input_003_2.outputs[1].hide = True
            group_input_003_2.outputs[2].hide = True
            group_input_003_2.outputs[3].hide = True
            group_input_003_2.outputs[4].hide = True
            group_input_003_2.outputs[6].hide = True
            group_input_003_2.outputs[7].hide = True
            group_input_003_2.outputs[8].hide = True
            group_input_003_2.outputs[9].hide = True
            group_input_003_2.outputs[10].hide = True

            # node Set Material
            set_material_3 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_3.name = "Set Material"
            # Selection
            set_material_3.inputs[1].default_value = True

            # node Reroute.005
            reroute_005 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_005.name = "Reroute.005"
            # node Reroute.008
            reroute_008 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_008.name = "Reroute.008"
            # node Curve to Mesh
            curve_to_mesh_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeCurveToMesh"
            )
            curve_to_mesh_1.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_1.inputs[2].default_value = True

            # node Set Curve Radius
            set_curve_radius_1 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_1.name = "Set Curve Radius"
            # Selection
            set_curve_radius_1.inputs[1].default_value = True

            # node Group Input.002
            group_input_002_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupInput"
            )
            group_input_002_2.name = "Group Input.002"
            group_input_002_2.outputs[0].hide = True
            group_input_002_2.outputs[1].hide = True
            group_input_002_2.outputs[3].hide = True
            group_input_002_2.outputs[4].hide = True
            group_input_002_2.outputs[5].hide = True
            group_input_002_2.outputs[6].hide = True
            group_input_002_2.outputs[7].hide = True
            group_input_002_2.outputs[8].hide = True
            group_input_002_2.outputs[9].hide = True
            group_input_002_2.outputs[10].hide = True

            # node Join Geometry.001
            join_geometry_001 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001.name = "Join Geometry.001"
            join_geometry_001.hide = True

            # node Reroute.013
            reroute_013 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_013.name = "Reroute.013"
            # node Store Named Attribute.011
            store_named_attribute_011 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_011.name = "Store Named Attribute.011"
            store_named_attribute_011.data_type = "FLOAT_COLOR"
            store_named_attribute_011.domain = "FACE"
            # Selection
            store_named_attribute_011.inputs[1].default_value = True
            # Name
            store_named_attribute_011.inputs[2].default_value = "Color"

            # node Switch.001
            switch_001_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_001_2.name = "Switch.001"
            switch_001_2.input_type = "GEOMETRY"

            # node Group Input.001
            group_input_001_2 = _mn_utils_style_ribbon_nucleic.nodes.new(
                "NodeGroupInput"
            )
            group_input_001_2.name = "Group Input.001"
            group_input_001_2.outputs[0].hide = True
            group_input_001_2.outputs[1].hide = True
            group_input_001_2.outputs[2].hide = True
            group_input_001_2.outputs[4].hide = True
            group_input_001_2.outputs[5].hide = True
            group_input_001_2.outputs[6].hide = True
            group_input_001_2.outputs[7].hide = True
            group_input_001_2.outputs[8].hide = True
            group_input_001_2.outputs[9].hide = True
            group_input_001_2.outputs[10].hide = True

            # node Group
            group_10 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            group_10.name = "Group"
            group_10.node_tree = residue_mask
            # Socket_1
            group_10.inputs[0].default_value = 1
            # Socket_5
            group_10.inputs[1].default_value = True
            # Socket_4
            group_10.inputs[2].default_value = 0

            # node Is Nucleic
            is_nucleic_1 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            is_nucleic_1.label = "Is Nucleic"
            is_nucleic_1.name = "Is Nucleic"
            is_nucleic_1.node_tree = is_nucleic
            # Socket_3
            is_nucleic_1.inputs[1].default_value = False

            # node Group.005
            group_005 = _mn_utils_style_ribbon_nucleic.nodes.new("GeometryNodeGroup")
            group_005.name = "Group.005"
            group_005.node_tree = _sampleatomvalue
            # Input_1
            group_005.inputs[1].default_value = 57

            # node Reroute
            reroute_3 = _mn_utils_style_ribbon_nucleic.nodes.new("NodeReroute")
            reroute_3.name = "Reroute"
            # node Mix
            mix = _mn_utils_style_ribbon_nucleic.nodes.new("ShaderNodeMix")
            mix.name = "Mix"
            mix.blend_type = "MIX"
            mix.clamp_factor = True
            mix.clamp_result = False
            mix.data_type = "VECTOR"
            mix.factor_mode = "UNIFORM"
            # Factor_Float
            mix.inputs[0].default_value = 1.0

            # Set parents
            sample_index.parent = frame_002_1
            named_attribute_002_2.parent = frame_002_1
            sample_index_004.parent = frame_002_1
            named_attribute_004.parent = frame_002_1
            sample_index_001_1.parent = frame_002_1
            named_attribute_7.parent = frame_002_1
            reroute_003_1.parent = frame_002_1
            sample_index_003.parent = frame_002_1
            named_attribute_003.parent = frame_002_1
            index_003.parent = frame_002_1
            named_attribute_005.parent = frame_002_1
            sample_index_005.parent = frame_002_1
            reroute_001_4.parent = frame_002_1
            sample_index_008.parent = frame_3
            named_attribute_006.parent = frame_3
            index_004.parent = frame_3
            reroute_002_3.parent = frame_3
            edge_vertices_1.parent = frame_3
            field_at_index.parent = frame_3
            field_at_index_001.parent = frame_3
            vector_math.parent = frame_3
            compare_001_3.parent = frame_3
            compare_3.parent = frame_3
            boolean_math_4.parent = frame_3
            mesh_line.parent = frame_001_1
            set_position.parent = frame_001_1
            domain_size_1.parent = frame_001_1
            delete_geometry.parent = frame_3
            offset_point_in_curve.parent = frame_006
            evaluate_at_index_1.parent = frame_006
            position_002_1.parent = frame_006
            vector_math_002_1.parent = frame_006
            vector_math_004_1.parent = frame_006
            endpoint_selection.parent = frame_006
            switch_5.parent = frame_006
            endpoint_selection_001.parent = frame_006
            set_position_001.parent = frame_006
            set_handle_type.parent = frame_004
            set_spline_type.parent = frame_004
            group_input_004_1.parent = frame_004
            mesh_to_curve_1.parent = frame_004
            set_spline_resolution.parent = frame_004
            combine_xyz.parent = frame_005
            math_6.parent = frame_005
            cylinder.parent = frame_005
            value_1.parent = frame_005
            group_input_005_1.parent = frame_005
            store_named_attribute_006.parent = frame_005
            position_001.parent = frame_007
            transform.parent = frame_005
            instance_on_points_1.parent = frame_005
            combine_xyz_001.parent = frame_007
            vector_math_003.parent = frame_007
            vector_math_001.parent = frame_007
            align_euler_to_vector_001.parent = frame_007
            align_euler_to_vector.parent = frame_007
            named_attribute_007.parent = frame_007
            named_attribute_008.parent = frame_007
            reroute_004.parent = frame_003_1
            set_shade_smooth_2.parent = frame_003_1
            reroute_007.parent = frame_003_1
            curve_circle_1.parent = frame_003_1
            group_input_003_2.parent = frame_003_1
            reroute_005.parent = frame_003_1
            reroute_008.parent = frame_003_1
            curve_to_mesh_1.parent = frame_003_1
            set_curve_radius_1.parent = frame_003_1
            group_input_002_2.parent = frame_003_1
            join_geometry_001.parent = frame_003_1
            reroute_013.parent = frame_003_1

            # Set locations
            frame_002_1.location = (1158.6292724609375, -29.90658187866211)
            frame_3.location = (-740.1123657226562, 293.3905944824219)
            frame_001_1.location = (-721.0, 75.0)
            frame_006.location = (252.1446533203125, -22.4365234375)
            frame_004.location = (-210.0, 260.0)
            frame_005.location = (397.0, 475.0)
            frame_007.location = (2083.0, 37.0)
            frame_003_1.location = (58.0, -11.0)
            sample_index.location = (-660.0, 820.0)
            named_attribute_002_2.location = (-660.0, 780.0)
            sample_index_004.location = (-660.0, 880.0)
            named_attribute_004.location = (-660.0, 920.0)
            sample_index_001_1.location = (-664.6292724609375, 689.9065551757812)
            named_attribute_7.location = (-664.6292724609375, 729.9065551757812)
            reroute_003_1.location = (-784.6292724609375, 869.9065551757812)
            sample_index_003.location = (-660.0, 980.0)
            named_attribute_003.location = (-660.0, 1020.0)
            index_003.location = (-964.6292724609375, 909.9065551757812)
            named_attribute_005.location = (-664.6292724609375, 1109.9066162109375)
            sample_index_005.location = (-664.6292724609375, 1069.9066162109375)
            reroute_001_4.location = (-804.6292724609375, 969.9065551757812)
            reroute_010.location = (-6.0, 640.0)
            sample_index_008.location = (-259.96295166015625, -143.635009765625)
            named_attribute_006.location = (-439.96295166015625, -143.635009765625)
            index_004.location = (-439.96295166015625, -183.635009765625)
            reroute_002_3.location = (-100.0, -140.0)
            edge_vertices_1.location = (-220.0, -220.0)
            field_at_index.location = (0.0, 0.0)
            field_at_index_001.location = (0.0, -160.0)
            vector_math.location = (0.0, -320.0)
            compare_001_3.location = (160.0, -160.0)
            compare_3.location = (160.0, 0.0)
            boolean_math_4.location = (320.0, 0.0)
            reroute_009.location = (-1531.0, 160.0)
            reroute_012.location = (-1691.0, 640.0)
            mesh_line.location = (-690.0, 385.0)
            set_position.location = (-690.0, 345.0)
            domain_size_1.location = (-690.0, 425.0)
            delete_geometry.location = (320.0, 220.0)
            sample_index_009_1.location = (500.0, 1180.0)
            group_input_006.location = (280.0, 1260.0)
            sample_index_007.location = (500.0, 1240.0)
            group_output_23.location = (4000.0, 540.0)
            offset_point_in_curve.location = (1740.0, 1060.0)
            evaluate_at_index_1.location = (1900.0, 1060.0)
            position_002_1.location = (1740.0, 940.0)
            vector_math_002_1.location = (2060.0, 1060.0)
            vector_math_004_1.location = (1900.0, 900.0)
            endpoint_selection.location = (2067.57958984375, 912.9168701171875)
            switch_5.location = (1580.0, 1060.0)
            endpoint_selection_001.location = (1420.0, 1060.0)
            set_position_001.location = (2240.0, 1060.0)
            store_named_attribute_001.location = (1280.0, 620.0)
            store_named_attribute_002.location = (1440.0, 620.0)
            store_named_attribute_003.location = (1600.0, 620.0)
            store_named_attribute_004.location = (1760.0, 620.0)
            capture_attribute_1.location = (1940.0, 620.0)
            set_handle_type.location = (840.0, 260.0)
            set_spline_type.location = (670.0, 260.0)
            group_input_004_1.location = (1010.0, 120.0)
            mesh_to_curve_1.location = (510.0, 260.0)
            set_spline_resolution.location = (1010.0, 260.0)
            store_named_attribute_2.location = (1120.0, 620.0)
            store_named_attribute_007.location = (360.0, 40.0)
            store_named_attribute_008.location = (180.0, 40.0)
            store_named_attribute_009.location = (20.0, 40.0)
            store_named_attribute_010.location = (-140.0, 40.0)
            combine_xyz.location = (114.9571533203125, -1317.4541015625)
            math_6.location = (114.9571533203125, -1457.4541015625)
            cylinder.location = (-45.042877197265625, -1237.4541015625)
            value_1.location = (-59.143829345703125, -1534.919921875)
            group_input_005_1.location = (-246.84564208984375, -1389.357421875)
            store_named_attribute_006.location = (120.856201171875, -1094.919921875)
            position_001.location = (-1639.0, -1617.0)
            store_named_attribute_005.location = (540.0, 40.0)
            separate_geometry_4.location = (-2960.0, 0.0)
            group_input_23.location = (-3360.0, -60.0)
            group_004.location = (340.0, -200.0)
            reroute_006.location = (-260.0, -380.0)
            reroute_011.location = (240.0, -380.0)
            group_006.location = (-220.0, -180.0)
            transform.location = (314.9571533203125, -1217.4541015625)
            instance_on_points_1.location = (827.0, -1386.0)
            group_003.location = (-2100.0, 660.0)
            combine_xyz_001.location = (-1123.0, -1517.0)
            vector_math_003.location = (-1283.0, -1517.0)
            vector_math_001.location = (-1443.0, -1517.0)
            align_euler_to_vector_001.location = (-1123.0, -1297.0)
            align_euler_to_vector.location = (-1283.0, -1297.0)
            named_attribute_007.location = (-1678.014892578125, -1337.0)
            named_attribute_008.location = (-1679.2340087890625, -1477.0)
            capture_attribute_001_1.location = (2806.529052734375, 1155.515625)
            index_1.location = (2800.0, 960.0)
            named_attribute_009_1.location = (3040.0, 1000.0)
            sample_index_002.location = (3040.0, 1220.0)
            reroute_004.location = (2300.0, 400.0)
            set_shade_smooth_2.location = (2885.609130859375, 590.6487426757812)
            reroute_007.location = (2846.0, 400.0)
            curve_circle_1.location = (2546.0, 500.0)
            group_input_003_2.location = (2546.0, 460.0)
            set_material_3.location = (3380.0, 660.0)
            reroute_005.location = (3462.0, 231.0)
            reroute_008.location = (2862.0, 231.0)
            curve_to_mesh_1.location = (2722.0, 591.0)
            set_curve_radius_1.location = (2162.0, 631.0)
            group_input_002_2.location = (3322.0, 531.0)
            join_geometry_001.location = (3122.0, 551.0)
            reroute_013.location = (3074.18017578125, 548.1685791015625)
            store_named_attribute_011.location = (2940.4248046875, 856.4732666015625)
            switch_001_2.location = (3100.0, 860.0)
            group_input_001_2.location = (3100.0, 940.0)
            group_10.location = (-2840.0, 520.0)
            is_nucleic_1.location = (-3180.0, -120.0)
            group_005.location = (-2100.0, 480.0)
            reroute_3.location = (-2180.0, 540.0)
            mix.location = (-1827.638427734375, 608.8980102539062)

            # Set dimensions
            frame_002_1.width, frame_002_1.height = 504.5, 520.0000610351562
            frame_3.width, frame_3.height = 960.0, 734.0
            frame_001_1.width, frame_001_1.height = 200.0, 180.0
            frame_006.width, frame_006.height = 1020.0001220703125, 354.0
            frame_004.width, frame_004.height = 700.0, 262.0
            frame_005.width, frame_005.height = 1274.0, 590.0
            frame_007.width, frame_007.height = 756.0, 440.0
            frame_003_1.width, frame_003_1.height = 1364.0, 474.0
            sample_index.width, sample_index.height = 140.0, 100.0
            named_attribute_002_2.width, named_attribute_002_2.height = 140.0, 100.0
            sample_index_004.width, sample_index_004.height = 140.0, 100.0
            named_attribute_004.width, named_attribute_004.height = 140.0, 100.0
            sample_index_001_1.width, sample_index_001_1.height = 140.0, 100.0
            named_attribute_7.width, named_attribute_7.height = 140.0, 100.0
            reroute_003_1.width, reroute_003_1.height = 16.0, 100.0
            sample_index_003.width, sample_index_003.height = 140.0, 100.0
            named_attribute_003.width, named_attribute_003.height = 140.0, 100.0
            index_003.width, index_003.height = 140.0, 100.0
            named_attribute_005.width, named_attribute_005.height = 140.0, 100.0
            sample_index_005.width, sample_index_005.height = 140.0, 100.0
            reroute_001_4.width, reroute_001_4.height = 16.0, 100.0
            reroute_010.width, reroute_010.height = 16.0, 100.0
            sample_index_008.width, sample_index_008.height = 140.0, 100.0
            named_attribute_006.width, named_attribute_006.height = 140.0, 100.0
            index_004.width, index_004.height = 140.0, 100.0
            reroute_002_3.width, reroute_002_3.height = 16.0, 100.0
            edge_vertices_1.width, edge_vertices_1.height = 140.0, 100.0
            field_at_index.width, field_at_index.height = 140.0, 100.0
            field_at_index_001.width, field_at_index_001.height = 140.0, 100.0
            vector_math.width, vector_math.height = 140.0, 100.0
            compare_001_3.width, compare_001_3.height = 140.0, 100.0
            compare_3.width, compare_3.height = 140.0, 100.0
            boolean_math_4.width, boolean_math_4.height = 140.0, 100.0
            reroute_009.width, reroute_009.height = 16.0, 100.0
            reroute_012.width, reroute_012.height = 16.0, 100.0
            mesh_line.width, mesh_line.height = 140.0, 100.0
            set_position.width, set_position.height = 140.0, 100.0
            domain_size_1.width, domain_size_1.height = 140.0, 100.0
            delete_geometry.width, delete_geometry.height = 140.0, 100.0
            sample_index_009_1.width, sample_index_009_1.height = 140.0, 100.0
            group_input_006.width, group_input_006.height = 140.0, 100.0
            sample_index_007.width, sample_index_007.height = 140.0, 100.0
            group_output_23.width, group_output_23.height = 140.0, 100.0
            offset_point_in_curve.width, offset_point_in_curve.height = 140.0, 100.0
            evaluate_at_index_1.width, evaluate_at_index_1.height = 140.0, 100.0
            position_002_1.width, position_002_1.height = 140.0, 100.0
            vector_math_002_1.width, vector_math_002_1.height = 140.0, 100.0
            vector_math_004_1.width, vector_math_004_1.height = 140.0, 100.0
            endpoint_selection.width, endpoint_selection.height = 140.0, 100.0
            switch_5.width, switch_5.height = 140.0, 100.0
            endpoint_selection_001.width, endpoint_selection_001.height = 140.0, 100.0
            set_position_001.width, set_position_001.height = 140.0, 100.0
            store_named_attribute_001.width, store_named_attribute_001.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002.width, store_named_attribute_002.height = (
                140.0,
                100.0,
            )
            store_named_attribute_003.width, store_named_attribute_003.height = (
                140.0,
                100.0,
            )
            store_named_attribute_004.width, store_named_attribute_004.height = (
                140.0,
                100.0,
            )
            capture_attribute_1.width, capture_attribute_1.height = 140.0, 100.0
            set_handle_type.width, set_handle_type.height = 140.0, 100.0
            set_spline_type.width, set_spline_type.height = 140.0, 100.0
            group_input_004_1.width, group_input_004_1.height = 140.0, 100.0
            mesh_to_curve_1.width, mesh_to_curve_1.height = 140.0, 100.0
            set_spline_resolution.width, set_spline_resolution.height = 140.0, 100.0
            store_named_attribute_2.width, store_named_attribute_2.height = 140.0, 100.0
            store_named_attribute_007.width, store_named_attribute_007.height = (
                140.0,
                100.0,
            )
            store_named_attribute_008.width, store_named_attribute_008.height = (
                140.0,
                100.0,
            )
            store_named_attribute_009.width, store_named_attribute_009.height = (
                140.0,
                100.0,
            )
            store_named_attribute_010.width, store_named_attribute_010.height = (
                140.0,
                100.0,
            )
            combine_xyz.width, combine_xyz.height = 140.0, 100.0
            math_6.width, math_6.height = 140.0, 100.0
            cylinder.width, cylinder.height = 140.0, 100.0
            value_1.width, value_1.height = 140.0, 100.0
            group_input_005_1.width, group_input_005_1.height = 140.0, 100.0
            store_named_attribute_006.width, store_named_attribute_006.height = (
                140.0,
                100.0,
            )
            position_001.width, position_001.height = 140.0, 100.0
            store_named_attribute_005.width, store_named_attribute_005.height = (
                140.0,
                100.0,
            )
            separate_geometry_4.width, separate_geometry_4.height = 140.0, 100.0
            group_input_23.width, group_input_23.height = 140.0, 100.0
            group_004.width, group_004.height = 176.54052734375, 100.0
            reroute_006.width, reroute_006.height = 16.0, 100.0
            reroute_011.width, reroute_011.height = 16.0, 100.0
            group_006.width, group_006.height = 223.4932861328125, 100.0
            transform.width, transform.height = 140.0, 100.0
            instance_on_points_1.width, instance_on_points_1.height = 140.0, 100.0
            group_003.width, group_003.height = 219.859375, 100.0
            combine_xyz_001.width, combine_xyz_001.height = 140.0, 100.0
            vector_math_003.width, vector_math_003.height = 140.0, 100.0
            vector_math_001.width, vector_math_001.height = 140.0, 100.0
            align_euler_to_vector_001.width, align_euler_to_vector_001.height = (
                140.0,
                100.0,
            )
            align_euler_to_vector.width, align_euler_to_vector.height = 140.0, 100.0
            named_attribute_007.width, named_attribute_007.height = (
                179.014892578125,
                100.0,
            )
            named_attribute_008.width, named_attribute_008.height = (
                180.2340087890625,
                100.0,
            )
            capture_attribute_001_1.width, capture_attribute_001_1.height = 140.0, 100.0
            index_1.width, index_1.height = 140.0, 100.0
            named_attribute_009_1.width, named_attribute_009_1.height = 140.0, 100.0
            sample_index_002.width, sample_index_002.height = 140.0, 100.0
            reroute_004.width, reroute_004.height = 16.0, 100.0
            set_shade_smooth_2.width, set_shade_smooth_2.height = 140.0, 100.0
            reroute_007.width, reroute_007.height = 16.0, 100.0
            curve_circle_1.width, curve_circle_1.height = 140.0, 100.0
            group_input_003_2.width, group_input_003_2.height = 140.0, 100.0
            set_material_3.width, set_material_3.height = 140.0, 100.0
            reroute_005.width, reroute_005.height = 16.0, 100.0
            reroute_008.width, reroute_008.height = 16.0, 100.0
            curve_to_mesh_1.width, curve_to_mesh_1.height = 140.0, 100.0
            set_curve_radius_1.width, set_curve_radius_1.height = 140.0, 100.0
            group_input_002_2.width, group_input_002_2.height = 140.0, 100.0
            join_geometry_001.width, join_geometry_001.height = 140.0, 100.0
            reroute_013.width, reroute_013.height = 16.0, 100.0
            store_named_attribute_011.width, store_named_attribute_011.height = (
                140.0,
                100.0,
            )
            switch_001_2.width, switch_001_2.height = 140.0, 100.0
            group_input_001_2.width, group_input_001_2.height = 140.0, 100.0
            group_10.width, group_10.height = 140.0, 100.0
            is_nucleic_1.width, is_nucleic_1.height = 180.0, 100.0
            group_005.width, group_005.height = 219.859375, 100.0
            reroute_3.width, reroute_3.height = 16.0, 100.0
            mix.width, mix.height = 140.0, 100.0

            # initialize _mn_utils_style_ribbon_nucleic links
            # mesh_line.Mesh -> set_position.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                mesh_line.outputs[0], set_position.inputs[0]
            )
            # reroute_012.Output -> domain_size_1.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_012.outputs[0], domain_size_1.inputs[0]
            )
            # domain_size_1.Point Count -> mesh_line.Count
            _mn_utils_style_ribbon_nucleic.links.new(
                domain_size_1.outputs[0], mesh_line.inputs[0]
            )
            # set_position.Geometry -> delete_geometry.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_position.outputs[0], delete_geometry.inputs[0]
            )
            # named_attribute_002_2.Attribute -> sample_index.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_002_2.outputs[0], sample_index.inputs[1]
            )
            # edge_vertices_1.Vertex Index 1 -> field_at_index.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                edge_vertices_1.outputs[0], field_at_index.inputs[0]
            )
            # reroute_002_3.Output -> field_at_index.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_002_3.outputs[0], field_at_index.inputs[1]
            )
            # reroute_002_3.Output -> field_at_index_001.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_002_3.outputs[0], field_at_index_001.inputs[1]
            )
            # edge_vertices_1.Vertex Index 2 -> field_at_index_001.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                edge_vertices_1.outputs[1], field_at_index_001.inputs[0]
            )
            # field_at_index.Value -> compare_3.A
            _mn_utils_style_ribbon_nucleic.links.new(
                field_at_index.outputs[0], compare_3.inputs[2]
            )
            # field_at_index_001.Value -> compare_3.B
            _mn_utils_style_ribbon_nucleic.links.new(
                field_at_index_001.outputs[0], compare_3.inputs[3]
            )
            # edge_vertices_1.Position 1 -> vector_math.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                edge_vertices_1.outputs[2], vector_math.inputs[0]
            )
            # edge_vertices_1.Position 2 -> vector_math.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                edge_vertices_1.outputs[3], vector_math.inputs[1]
            )
            # compare_3.Result -> boolean_math_4.Boolean
            _mn_utils_style_ribbon_nucleic.links.new(
                compare_3.outputs[0], boolean_math_4.inputs[0]
            )
            # boolean_math_4.Boolean -> delete_geometry.Selection
            _mn_utils_style_ribbon_nucleic.links.new(
                boolean_math_4.outputs[0], delete_geometry.inputs[1]
            )
            # vector_math.Value -> compare_001_3.A
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math.outputs[1], compare_001_3.inputs[0]
            )
            # compare_001_3.Result -> boolean_math_4.Boolean
            _mn_utils_style_ribbon_nucleic.links.new(
                compare_001_3.outputs[0], boolean_math_4.inputs[1]
            )
            # store_named_attribute_007.Geometry -> mesh_to_curve_1.Mesh
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_007.outputs[0], mesh_to_curve_1.inputs[0]
            )
            # mesh_to_curve_1.Curve -> set_spline_type.Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                mesh_to_curve_1.outputs[0], set_spline_type.inputs[0]
            )
            # set_handle_type.Curve -> set_spline_resolution.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_handle_type.outputs[0], set_spline_resolution.inputs[0]
            )
            # curve_circle_1.Curve -> curve_to_mesh_1.Profile Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                curve_circle_1.outputs[0], curve_to_mesh_1.inputs[1]
            )
            # reroute_001_4.Output -> sample_index_001_1.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_001_1.inputs[0]
            )
            # named_attribute_7.Attribute -> sample_index_001_1.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_7.outputs[0], sample_index_001_1.inputs[1]
            )
            # join_geometry_001.Geometry -> set_material_3.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                join_geometry_001.outputs[0], set_material_3.inputs[0]
            )
            # group_input_002_2.Material -> set_material_3.Material
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_002_2.outputs[2], set_material_3.inputs[2]
            )
            # set_spline_type.Curve -> set_handle_type.Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                set_spline_type.outputs[0], set_handle_type.inputs[0]
            )
            # reroute_003_1.Output -> sample_index_001_1.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_001_1.inputs[2]
            )
            # set_spline_resolution.Geometry -> store_named_attribute_2.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_spline_resolution.outputs[0], store_named_attribute_2.inputs[0]
            )
            # sample_index_001_1.Value -> store_named_attribute_2.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_001_1.outputs[0], store_named_attribute_2.inputs[3]
            )
            # store_named_attribute_2.Geometry -> store_named_attribute_001.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_2.outputs[0], store_named_attribute_001.inputs[0]
            )
            # store_named_attribute_001.Geometry -> store_named_attribute_002.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_001.outputs[0],
                store_named_attribute_002.inputs[0],
            )
            # store_named_attribute_002.Geometry -> store_named_attribute_003.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_002.outputs[0],
                store_named_attribute_003.inputs[0],
            )
            # sample_index.Value -> store_named_attribute_001.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index.outputs[0], store_named_attribute_001.inputs[3]
            )
            # reroute_001_4.Output -> sample_index_003.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_003.inputs[0]
            )
            # named_attribute_003.Attribute -> sample_index_003.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_003.outputs[0], sample_index_003.inputs[1]
            )
            # reroute_003_1.Output -> sample_index_003.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_003.inputs[2]
            )
            # sample_index_003.Value -> store_named_attribute_003.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_003.outputs[0], store_named_attribute_003.inputs[3]
            )
            # reroute_001_4.Output -> sample_index_004.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_004.inputs[0]
            )
            # named_attribute_004.Attribute -> sample_index_004.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_004.outputs[0], sample_index_004.inputs[1]
            )
            # reroute_003_1.Output -> sample_index_004.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_004.inputs[2]
            )
            # sample_index_004.Value -> store_named_attribute_002.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_004.outputs[0], store_named_attribute_002.inputs[3]
            )
            # reroute_010.Output -> reroute_001_4.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_010.outputs[0], reroute_001_4.inputs[0]
            )
            # index_003.Index -> reroute_003_1.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                index_003.outputs[0], reroute_003_1.inputs[0]
            )
            # reroute_003_1.Output -> sample_index.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index.inputs[2]
            )
            # store_named_attribute_003.Geometry -> store_named_attribute_004.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_003.outputs[0],
                store_named_attribute_004.inputs[0],
            )
            # reroute_001_4.Output -> sample_index_005.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_005.inputs[0]
            )
            # reroute_003_1.Output -> sample_index_005.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_005.inputs[2]
            )
            # named_attribute_005.Attribute -> sample_index_005.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_005.outputs[0], sample_index_005.inputs[1]
            )
            # sample_index_005.Value -> store_named_attribute_004.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_005.outputs[0], store_named_attribute_004.inputs[3]
            )
            # store_named_attribute_004.Geometry -> capture_attribute_1.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_004.outputs[0], capture_attribute_1.inputs[0]
            )
            # capture_attribute_1.Geometry -> set_curve_radius_1.Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                capture_attribute_1.outputs[0], set_curve_radius_1.inputs[0]
            )
            # reroute_007.Output -> set_shade_smooth_2.Shade Smooth
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_007.outputs[0], set_shade_smooth_2.inputs[2]
            )
            # capture_attribute_1.Value -> reroute_004.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                capture_attribute_1.outputs[1], reroute_004.inputs[0]
            )
            # reroute_004.Output -> reroute_007.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_004.outputs[0], reroute_007.inputs[0]
            )
            # reroute_001_4.Output -> sample_index.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index.inputs[0]
            )
            # named_attribute_006.Attribute -> sample_index_008.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_006.outputs[0], sample_index_008.inputs[1]
            )
            # reroute_009.Output -> sample_index_008.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_009.outputs[0], sample_index_008.inputs[0]
            )
            # index_004.Index -> sample_index_008.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                index_004.outputs[0], sample_index_008.inputs[2]
            )
            # sample_index_008.Value -> reroute_002_3.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_008.outputs[0], reroute_002_3.inputs[0]
            )
            # reroute_012.Output -> reroute_009.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_012.outputs[0], reroute_009.inputs[0]
            )
            # reroute_012.Output -> reroute_010.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_012.outputs[0], reroute_010.inputs[0]
            )
            # curve_to_mesh_1.Mesh -> set_shade_smooth_2.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                curve_to_mesh_1.outputs[0], set_shade_smooth_2.inputs[0]
            )
            # group_003.Atoms -> reroute_012.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                group_003.outputs[0], reroute_012.inputs[0]
            )
            # store_named_attribute_006.Geometry -> transform.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_006.outputs[0], transform.inputs[0]
            )
            # combine_xyz.Vector -> transform.Translation
            _mn_utils_style_ribbon_nucleic.links.new(
                combine_xyz.outputs[0], transform.inputs[1]
            )
            # value_1.Value -> math_6.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                value_1.outputs[0], math_6.inputs[0]
            )
            # value_1.Value -> cylinder.Depth
            _mn_utils_style_ribbon_nucleic.links.new(
                value_1.outputs[0], cylinder.inputs[4]
            )
            # math_6.Value -> combine_xyz.Z
            _mn_utils_style_ribbon_nucleic.links.new(
                math_6.outputs[0], combine_xyz.inputs[2]
            )
            # align_euler_to_vector_001.Rotation -> instance_on_points_1.Rotation
            _mn_utils_style_ribbon_nucleic.links.new(
                align_euler_to_vector_001.outputs[0], instance_on_points_1.inputs[5]
            )
            # combine_xyz_001.Vector -> instance_on_points_1.Scale
            _mn_utils_style_ribbon_nucleic.links.new(
                combine_xyz_001.outputs[0], instance_on_points_1.inputs[6]
            )
            # set_material_3.Geometry -> group_output_23.Ribbon + Bases
            _mn_utils_style_ribbon_nucleic.links.new(
                set_material_3.outputs[0], group_output_23.inputs[0]
            )
            # store_named_attribute_005.Geometry -> instance_on_points_1.Points
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_005.outputs[0], instance_on_points_1.inputs[0]
            )
            # reroute_013.Output -> join_geometry_001.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_013.outputs[0], join_geometry_001.inputs[0]
            )
            # group_input_005_1.Base Radius -> cylinder.Radius
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_005_1.outputs[8], cylinder.inputs[3]
            )
            # group_input_005_1.Base Resolution -> cylinder.Vertices
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_005_1.outputs[9], cylinder.inputs[0]
            )
            # reroute_005.Output -> group_output_23.Ribbon Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_005.outputs[0], group_output_23.inputs[1]
            )
            # transform.Geometry -> instance_on_points_1.Instance
            _mn_utils_style_ribbon_nucleic.links.new(
                transform.outputs[0], instance_on_points_1.inputs[2]
            )
            # cylinder.Mesh -> store_named_attribute_006.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                cylinder.outputs[0], store_named_attribute_006.inputs[0]
            )
            # cylinder.UV Map -> store_named_attribute_006.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                cylinder.outputs[4], store_named_attribute_006.inputs[3]
            )
            # group_input_23.Atoms -> separate_geometry_4.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_23.outputs[0], separate_geometry_4.inputs[0]
            )
            # reroute_3.Output -> group_003.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_3.outputs[0], group_003.inputs[0]
            )
            # group_004.Value -> store_named_attribute_005.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_004.outputs[2], store_named_attribute_005.inputs[3]
            )
            # group_input_003_2.Backbone Resolution -> curve_circle_1.Resolution
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_003_2.outputs[5], curve_circle_1.inputs[0]
            )
            # position_001.Position -> vector_math_001.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                position_001.outputs[0], vector_math_001.inputs[1]
            )
            # set_curve_radius_1.Curve -> set_position_001.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_curve_radius_1.outputs[0], set_position_001.inputs[0]
            )
            # position_002_1.Position -> evaluate_at_index_1.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                position_002_1.outputs[0], evaluate_at_index_1.inputs[1]
            )
            # offset_point_in_curve.Point Index -> evaluate_at_index_1.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                offset_point_in_curve.outputs[1], evaluate_at_index_1.inputs[0]
            )
            # evaluate_at_index_1.Value -> vector_math_002_1.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                evaluate_at_index_1.outputs[0], vector_math_002_1.inputs[0]
            )
            # position_002_1.Position -> vector_math_002_1.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                position_002_1.outputs[0], vector_math_002_1.inputs[1]
            )
            # vector_math_002_1.Vector -> vector_math_004_1.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math_002_1.outputs[0], vector_math_004_1.inputs[0]
            )
            # vector_math_004_1.Vector -> set_position_001.Offset
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math_004_1.outputs[0], set_position_001.inputs[3]
            )
            # endpoint_selection.Selection -> set_position_001.Selection
            _mn_utils_style_ribbon_nucleic.links.new(
                endpoint_selection.outputs[0], set_position_001.inputs[1]
            )
            # endpoint_selection_001.Selection -> switch_5.Switch
            _mn_utils_style_ribbon_nucleic.links.new(
                endpoint_selection_001.outputs[0], switch_5.inputs[0]
            )
            # switch_5.Output -> offset_point_in_curve.Offset
            _mn_utils_style_ribbon_nucleic.links.new(
                switch_5.outputs[0], offset_point_in_curve.inputs[1]
            )
            # store_named_attribute_007.Geometry -> store_named_attribute_005.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_007.outputs[0],
                store_named_attribute_005.inputs[0],
            )
            # group_input_004_1.Backbone Subdivisions -> set_spline_resolution.Resolution
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_004_1.outputs[4], set_spline_resolution.inputs[2]
            )
            # reroute_001_4.Output -> sample_index_009_1.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_009_1.inputs[0]
            )
            # reroute_003_1.Output -> sample_index_009_1.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_009_1.inputs[2]
            )
            # group_input_006.Backbone Shade Smooth -> sample_index_009_1.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_006.outputs[7], sample_index_009_1.inputs[1]
            )
            # sample_index_009_1.Value -> capture_attribute_1.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_009_1.outputs[0], capture_attribute_1.inputs[1]
            )
            # group_input_006.Backbone Radius -> sample_index_007.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_006.outputs[6], sample_index_007.inputs[1]
            )
            # reroute_003_1.Output -> sample_index_007.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_003_1.outputs[0], sample_index_007.inputs[2]
            )
            # reroute_001_4.Output -> sample_index_007.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_001_4.outputs[0], sample_index_007.inputs[0]
            )
            # sample_index_007.Value -> set_curve_radius_1.Radius
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_007.outputs[0], set_curve_radius_1.inputs[2]
            )
            # reroute_008.Output -> reroute_005.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_008.outputs[0], reroute_005.inputs[0]
            )
            # set_curve_radius_1.Curve -> reroute_008.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                set_curve_radius_1.outputs[0], reroute_008.inputs[0]
            )
            # store_named_attribute_008.Geometry -> store_named_attribute_007.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_008.outputs[0],
                store_named_attribute_007.inputs[0],
            )
            # reroute_006.Output -> group_006.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_006.outputs[0], group_006.inputs[0]
            )
            # store_named_attribute_009.Geometry -> store_named_attribute_008.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_009.outputs[0],
                store_named_attribute_008.inputs[0],
            )
            # group_006.Align Vertical -> store_named_attribute_008.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_006.outputs[2], store_named_attribute_008.inputs[3]
            )
            # group_006.Align Horizontal -> store_named_attribute_007.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_006.outputs[3], store_named_attribute_007.inputs[3]
            )
            # vector_math_001.Vector -> vector_math_003.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math_001.outputs[0], vector_math_003.inputs[0]
            )
            # vector_math_003.Value -> combine_xyz_001.Z
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math_003.outputs[1], combine_xyz_001.inputs[2]
            )
            # store_named_attribute_010.Geometry -> store_named_attribute_009.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_010.outputs[0],
                store_named_attribute_009.inputs[0],
            )
            # group_006.Base Interface -> store_named_attribute_009.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_006.outputs[0], store_named_attribute_009.inputs[3]
            )
            # delete_geometry.Geometry -> store_named_attribute_010.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                delete_geometry.outputs[0], store_named_attribute_010.inputs[0]
            )
            # group_006.Base Pivot -> store_named_attribute_010.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                group_006.outputs[1], store_named_attribute_010.inputs[3]
            )
            # named_attribute_008.Attribute -> vector_math_001.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_008.outputs[0], vector_math_001.inputs[0]
            )
            # separate_geometry_4.Selection -> reroute_006.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                separate_geometry_4.outputs[0], reroute_006.inputs[0]
            )
            # reroute_011.Output -> group_004.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_011.outputs[0], group_004.inputs[0]
            )
            # reroute_006.Output -> reroute_011.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_006.outputs[0], reroute_011.inputs[0]
            )
            # align_euler_to_vector.Rotation -> align_euler_to_vector_001.Rotation
            _mn_utils_style_ribbon_nucleic.links.new(
                align_euler_to_vector.outputs[0], align_euler_to_vector_001.inputs[0]
            )
            # vector_math_001.Vector -> align_euler_to_vector.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                vector_math_001.outputs[0], align_euler_to_vector.inputs[2]
            )
            # named_attribute_007.Attribute -> align_euler_to_vector_001.Vector
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_007.outputs[0], align_euler_to_vector_001.inputs[2]
            )
            # set_position_001.Geometry -> capture_attribute_001_1.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_position_001.outputs[0], capture_attribute_001_1.inputs[0]
            )
            # index_1.Index -> capture_attribute_001_1.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                index_1.outputs[0], capture_attribute_001_1.inputs[1]
            )
            # capture_attribute_001_1.Geometry -> curve_to_mesh_1.Curve
            _mn_utils_style_ribbon_nucleic.links.new(
                capture_attribute_001_1.outputs[0], curve_to_mesh_1.inputs[0]
            )
            # set_shade_smooth_2.Geometry -> store_named_attribute_011.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                set_shade_smooth_2.outputs[0], store_named_attribute_011.inputs[0]
            )
            # capture_attribute_001_1.Value -> sample_index_002.Index
            _mn_utils_style_ribbon_nucleic.links.new(
                capture_attribute_001_1.outputs[1], sample_index_002.inputs[2]
            )
            # capture_attribute_001_1.Geometry -> sample_index_002.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                capture_attribute_001_1.outputs[0], sample_index_002.inputs[0]
            )
            # named_attribute_009_1.Attribute -> sample_index_002.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                named_attribute_009_1.outputs[0], sample_index_002.inputs[1]
            )
            # sample_index_002.Value -> store_named_attribute_011.Value
            _mn_utils_style_ribbon_nucleic.links.new(
                sample_index_002.outputs[0], store_named_attribute_011.inputs[3]
            )
            # store_named_attribute_011.Geometry -> switch_001_2.False
            _mn_utils_style_ribbon_nucleic.links.new(
                store_named_attribute_011.outputs[0], switch_001_2.inputs[1]
            )
            # set_shade_smooth_2.Geometry -> switch_001_2.True
            _mn_utils_style_ribbon_nucleic.links.new(
                set_shade_smooth_2.outputs[0], switch_001_2.inputs[2]
            )
            # switch_001_2.Output -> reroute_013.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                switch_001_2.outputs[0], reroute_013.inputs[0]
            )
            # group_input_001_2.Intepolate Color -> switch_001_2.Switch
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_001_2.outputs[3], switch_001_2.inputs[0]
            )
            # group_input_23.Selection -> is_nucleic_1.And
            _mn_utils_style_ribbon_nucleic.links.new(
                group_input_23.outputs[1], is_nucleic_1.inputs[0]
            )
            # is_nucleic_1.Selection -> separate_geometry_4.Selection
            _mn_utils_style_ribbon_nucleic.links.new(
                is_nucleic_1.outputs[0], separate_geometry_4.inputs[1]
            )
            # reroute_3.Output -> group_005.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                reroute_3.outputs[0], group_005.inputs[0]
            )
            # separate_geometry_4.Selection -> reroute_3.Input
            _mn_utils_style_ribbon_nucleic.links.new(
                separate_geometry_4.outputs[0], reroute_3.inputs[0]
            )
            # group_003.Value -> mix.A
            _mn_utils_style_ribbon_nucleic.links.new(
                group_003.outputs[1], mix.inputs[4]
            )
            # group_005.Value -> mix.B
            _mn_utils_style_ribbon_nucleic.links.new(
                group_005.outputs[1], mix.inputs[5]
            )
            # mix.Result -> set_position.Position
            _mn_utils_style_ribbon_nucleic.links.new(
                mix.outputs[1], set_position.inputs[2]
            )
            # instance_on_points_1.Instances -> join_geometry_001.Geometry
            _mn_utils_style_ribbon_nucleic.links.new(
                instance_on_points_1.outputs[0], join_geometry_001.inputs[0]
            )
            return _mn_utils_style_ribbon_nucleic

        _mn_utils_style_ribbon_nucleic = _mn_utils_style_ribbon_nucleic_node_group()

        # initialize _field_offset node group
        def _field_offset_node_group():
            _field_offset = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".field_offset"
            )

            _field_offset.color_tag = "NONE"
            _field_offset.description = ""

            # _field_offset interface
            # Socket Field
            field_socket = _field_offset.interface.new_socket(
                name="Field", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            field_socket.subtype = "NONE"
            field_socket.default_value = (0.0, 0.0, 0.0)
            field_socket.min_value = -3.4028234663852886e38
            field_socket.max_value = 3.4028234663852886e38
            field_socket.attribute_domain = "POINT"

            # Socket Value
            value_socket_5 = _field_offset.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            value_socket_5.attribute_domain = "POINT"

            # Socket Field
            field_socket_1 = _field_offset.interface.new_socket(
                name="Field", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            field_socket_1.subtype = "NONE"
            field_socket_1.default_value = 0
            field_socket_1.min_value = -2147483648
            field_socket_1.max_value = 2147483647
            field_socket_1.attribute_domain = "POINT"

            # Socket Field
            field_socket_2 = _field_offset.interface.new_socket(
                name="Field", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            field_socket_2.subtype = "NONE"
            field_socket_2.default_value = 0.0
            field_socket_2.min_value = -3.4028234663852886e38
            field_socket_2.max_value = 3.4028234663852886e38
            field_socket_2.attribute_domain = "POINT"

            # Socket Field
            field_socket_3 = _field_offset.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketVector"
            )
            field_socket_3.subtype = "NONE"
            field_socket_3.default_value = (0.0, 0.0, 0.0)
            field_socket_3.min_value = -3.4028234663852886e38
            field_socket_3.max_value = 3.4028234663852886e38
            field_socket_3.attribute_domain = "POINT"
            field_socket_3.hide_value = True

            # Socket Value
            value_socket_6 = _field_offset.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketBool"
            )
            value_socket_6.attribute_domain = "POINT"
            value_socket_6.hide_value = True

            # Socket Field
            field_socket_4 = _field_offset.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketInt"
            )
            field_socket_4.subtype = "NONE"
            field_socket_4.default_value = 0
            field_socket_4.min_value = -2147483648
            field_socket_4.max_value = 2147483647
            field_socket_4.attribute_domain = "POINT"
            field_socket_4.hide_value = True

            # Socket Field
            field_socket_5 = _field_offset.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            field_socket_5.subtype = "NONE"
            field_socket_5.default_value = 0.0
            field_socket_5.min_value = -3.4028234663852886e38
            field_socket_5.max_value = 3.4028234663852886e38
            field_socket_5.attribute_domain = "POINT"
            field_socket_5.hide_value = True

            # Socket Offset
            offset_socket_1 = _field_offset.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_1.subtype = "NONE"
            offset_socket_1.default_value = 0
            offset_socket_1.min_value = -2147483648
            offset_socket_1.max_value = 2147483647
            offset_socket_1.attribute_domain = "POINT"

            # initialize _field_offset nodes
            # node Group Output
            group_output_24 = _field_offset.nodes.new("NodeGroupOutput")
            group_output_24.name = "Group Output"
            group_output_24.is_active_output = True

            # node Math.001
            math_001_2 = _field_offset.nodes.new("ShaderNodeMath")
            math_001_2.name = "Math.001"
            math_001_2.operation = "ADD"
            math_001_2.use_clamp = False

            # node Evaluate at Index
            evaluate_at_index_2 = _field_offset.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_2.name = "Evaluate at Index"
            evaluate_at_index_2.data_type = "FLOAT_VECTOR"
            evaluate_at_index_2.domain = "POINT"

            # node Group Input
            group_input_24 = _field_offset.nodes.new("NodeGroupInput")
            group_input_24.name = "Group Input"

            # node Evaluate at Index.001
            evaluate_at_index_001_1 = _field_offset.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_1.name = "Evaluate at Index.001"
            evaluate_at_index_001_1.data_type = "BOOLEAN"
            evaluate_at_index_001_1.domain = "POINT"

            # node Index
            index_2 = _field_offset.nodes.new("GeometryNodeInputIndex")
            index_2.name = "Index"

            # node Evaluate at Index.002
            evaluate_at_index_002 = _field_offset.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_002.name = "Evaluate at Index.002"
            evaluate_at_index_002.data_type = "INT"
            evaluate_at_index_002.domain = "POINT"

            # node Evaluate at Index.003
            evaluate_at_index_003 = _field_offset.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_003.name = "Evaluate at Index.003"
            evaluate_at_index_003.data_type = "FLOAT"
            evaluate_at_index_003.domain = "POINT"

            # Set locations
            group_output_24.location = (407.6440124511719, 0.0)
            math_001_2.location = (0.5235366821289062, 15.3753662109375)
            evaluate_at_index_2.location = (217.64404296875, 102.376708984375)
            group_input_24.location = (-417.64404296875, 0.0)
            evaluate_at_index_001_1.location = (220.0, -60.0)
            index_2.location = (-260.0, -40.0)
            evaluate_at_index_002.location = (220.0, -220.0)
            evaluate_at_index_003.location = (220.0, -380.0)

            # Set dimensions
            group_output_24.width, group_output_24.height = 140.0, 100.0
            math_001_2.width, math_001_2.height = 140.0, 100.0
            evaluate_at_index_2.width, evaluate_at_index_2.height = 140.0, 100.0
            group_input_24.width, group_input_24.height = 140.0, 100.0
            evaluate_at_index_001_1.width, evaluate_at_index_001_1.height = 140.0, 100.0
            index_2.width, index_2.height = 140.0, 100.0
            evaluate_at_index_002.width, evaluate_at_index_002.height = 140.0, 100.0
            evaluate_at_index_003.width, evaluate_at_index_003.height = 140.0, 100.0

            # initialize _field_offset links
            # index_2.Index -> math_001_2.Value
            _field_offset.links.new(index_2.outputs[0], math_001_2.inputs[0])
            # math_001_2.Value -> evaluate_at_index_2.Index
            _field_offset.links.new(
                math_001_2.outputs[0], evaluate_at_index_2.inputs[0]
            )
            # group_input_24.Field -> evaluate_at_index_2.Value
            _field_offset.links.new(
                group_input_24.outputs[0], evaluate_at_index_2.inputs[1]
            )
            # group_input_24.Offset -> math_001_2.Value
            _field_offset.links.new(group_input_24.outputs[4], math_001_2.inputs[1])
            # evaluate_at_index_2.Value -> group_output_24.Field
            _field_offset.links.new(
                evaluate_at_index_2.outputs[0], group_output_24.inputs[0]
            )
            # math_001_2.Value -> evaluate_at_index_001_1.Index
            _field_offset.links.new(
                math_001_2.outputs[0], evaluate_at_index_001_1.inputs[0]
            )
            # group_input_24.Value -> evaluate_at_index_001_1.Value
            _field_offset.links.new(
                group_input_24.outputs[1], evaluate_at_index_001_1.inputs[1]
            )
            # evaluate_at_index_001_1.Value -> group_output_24.Value
            _field_offset.links.new(
                evaluate_at_index_001_1.outputs[0], group_output_24.inputs[1]
            )
            # math_001_2.Value -> evaluate_at_index_002.Index
            _field_offset.links.new(
                math_001_2.outputs[0], evaluate_at_index_002.inputs[0]
            )
            # group_input_24.Field -> evaluate_at_index_002.Value
            _field_offset.links.new(
                group_input_24.outputs[2], evaluate_at_index_002.inputs[1]
            )
            # evaluate_at_index_002.Value -> group_output_24.Field
            _field_offset.links.new(
                evaluate_at_index_002.outputs[0], group_output_24.inputs[2]
            )
            # math_001_2.Value -> evaluate_at_index_003.Index
            _field_offset.links.new(
                math_001_2.outputs[0], evaluate_at_index_003.inputs[0]
            )
            # group_input_24.Field -> evaluate_at_index_003.Value
            _field_offset.links.new(
                group_input_24.outputs[3], evaluate_at_index_003.inputs[1]
            )
            # evaluate_at_index_003.Value -> group_output_24.Field
            _field_offset.links.new(
                evaluate_at_index_003.outputs[0], group_output_24.inputs[3]
            )
            return _field_offset

        _field_offset = _field_offset_node_group()

        # initialize _mn_select_sec_struct_id node group
        def _mn_select_sec_struct_id_node_group():
            _mn_select_sec_struct_id = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_sec_struct_id"
            )

            _mn_select_sec_struct_id.color_tag = "NONE"
            _mn_select_sec_struct_id.description = ""

            # _mn_select_sec_struct_id interface
            # Socket Selection
            selection_socket_8 = _mn_select_sec_struct_id.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_8.attribute_domain = "POINT"
            selection_socket_8.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_2 = _mn_select_sec_struct_id.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_2.attribute_domain = "POINT"

            # Socket And
            and_socket_2 = _mn_select_sec_struct_id.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_2.attribute_domain = "POINT"
            and_socket_2.hide_value = True

            # Socket Or
            or_socket_2 = _mn_select_sec_struct_id.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_2.attribute_domain = "POINT"
            or_socket_2.hide_value = True

            # Socket id
            id_socket = _mn_select_sec_struct_id.interface.new_socket(
                name="id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            id_socket.subtype = "NONE"
            id_socket.default_value = 1
            id_socket.min_value = -2147483648
            id_socket.max_value = 2147483647
            id_socket.attribute_domain = "POINT"
            id_socket.description = "Secondary structure component to select"

            # initialize _mn_select_sec_struct_id nodes
            # node Named Attribute.002
            named_attribute_002_3 = _mn_select_sec_struct_id.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_3.name = "Named Attribute.002"
            named_attribute_002_3.data_type = "INT"
            # Name
            named_attribute_002_3.inputs[0].default_value = "sec_struct"

            # node Boolean Math
            boolean_math_5 = _mn_select_sec_struct_id.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_5.name = "Boolean Math"
            boolean_math_5.operation = "AND"

            # node Group Output
            group_output_25 = _mn_select_sec_struct_id.nodes.new("NodeGroupOutput")
            group_output_25.name = "Group Output"
            group_output_25.is_active_output = True

            # node Compare.012
            compare_012 = _mn_select_sec_struct_id.nodes.new("FunctionNodeCompare")
            compare_012.name = "Compare.012"
            compare_012.data_type = "INT"
            compare_012.mode = "ELEMENT"
            compare_012.operation = "EQUAL"

            # node Group Input
            group_input_25 = _mn_select_sec_struct_id.nodes.new("NodeGroupInput")
            group_input_25.name = "Group Input"

            # node Boolean Math.001
            boolean_math_001_4 = _mn_select_sec_struct_id.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_4.name = "Boolean Math.001"
            boolean_math_001_4.operation = "OR"

            # node Boolean Math.002
            boolean_math_002_4 = _mn_select_sec_struct_id.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_4.name = "Boolean Math.002"
            boolean_math_002_4.operation = "NOT"

            # Set locations
            named_attribute_002_3.location = (80.0, 0.0)
            boolean_math_5.location = (400.0, 200.0)
            group_output_25.location = (760.0, 200.0)
            compare_012.location = (240.0, 100.0)
            group_input_25.location = (80.0, 100.0)
            boolean_math_001_4.location = (579.9999389648438, 196.54164123535156)
            boolean_math_002_4.location = (580.0, 60.0)

            # Set dimensions
            named_attribute_002_3.width, named_attribute_002_3.height = 140.0, 100.0
            boolean_math_5.width, boolean_math_5.height = 140.0, 100.0
            group_output_25.width, group_output_25.height = 140.0, 100.0
            compare_012.width, compare_012.height = 140.0, 100.0
            group_input_25.width, group_input_25.height = 140.0, 100.0
            boolean_math_001_4.width, boolean_math_001_4.height = 140.0, 100.0
            boolean_math_002_4.width, boolean_math_002_4.height = 140.0, 100.0

            # initialize _mn_select_sec_struct_id links
            # boolean_math_001_4.Boolean -> group_output_25.Selection
            _mn_select_sec_struct_id.links.new(
                boolean_math_001_4.outputs[0], group_output_25.inputs[0]
            )
            # compare_012.Result -> boolean_math_5.Boolean
            _mn_select_sec_struct_id.links.new(
                compare_012.outputs[0], boolean_math_5.inputs[1]
            )
            # group_input_25.id -> compare_012.A
            _mn_select_sec_struct_id.links.new(
                group_input_25.outputs[2], compare_012.inputs[2]
            )
            # group_input_25.And -> boolean_math_5.Boolean
            _mn_select_sec_struct_id.links.new(
                group_input_25.outputs[0], boolean_math_5.inputs[0]
            )
            # named_attribute_002_3.Attribute -> compare_012.B
            _mn_select_sec_struct_id.links.new(
                named_attribute_002_3.outputs[0], compare_012.inputs[3]
            )
            # boolean_math_5.Boolean -> boolean_math_001_4.Boolean
            _mn_select_sec_struct_id.links.new(
                boolean_math_5.outputs[0], boolean_math_001_4.inputs[0]
            )
            # group_input_25.Or -> boolean_math_001_4.Boolean
            _mn_select_sec_struct_id.links.new(
                group_input_25.outputs[1], boolean_math_001_4.inputs[1]
            )
            # boolean_math_001_4.Boolean -> boolean_math_002_4.Boolean
            _mn_select_sec_struct_id.links.new(
                boolean_math_001_4.outputs[0], boolean_math_002_4.inputs[0]
            )
            # boolean_math_002_4.Boolean -> group_output_25.Inverted
            _mn_select_sec_struct_id.links.new(
                boolean_math_002_4.outputs[0], group_output_25.inputs[1]
            )
            return _mn_select_sec_struct_id

        _mn_select_sec_struct_id = _mn_select_sec_struct_id_node_group()

        # initialize is_sheet node group
        def is_sheet_node_group():
            is_sheet = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Sheet"
            )

            is_sheet.color_tag = "INPUT"
            is_sheet.description = ""

            # is_sheet interface
            # Socket Selection
            selection_socket_9 = is_sheet.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_9.attribute_domain = "POINT"
            selection_socket_9.description = "Selected atoms form part of a sheet"

            # Socket Inverted
            inverted_socket_3 = is_sheet.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_3.attribute_domain = "POINT"

            # Socket And
            and_socket_3 = is_sheet.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_3.attribute_domain = "POINT"
            and_socket_3.hide_value = True

            # Socket Or
            or_socket_3 = is_sheet.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_3.attribute_domain = "POINT"
            or_socket_3.hide_value = True

            # initialize is_sheet nodes
            # node Group Output
            group_output_26 = is_sheet.nodes.new("NodeGroupOutput")
            group_output_26.name = "Group Output"
            group_output_26.is_active_output = True

            # node Group Input
            group_input_26 = is_sheet.nodes.new("NodeGroupInput")
            group_input_26.name = "Group Input"

            # node MN_select_sec_struct.002
            mn_select_sec_struct_002 = is_sheet.nodes.new("GeometryNodeGroup")
            mn_select_sec_struct_002.label = "Select Sec Struct"
            mn_select_sec_struct_002.name = "MN_select_sec_struct.002"
            mn_select_sec_struct_002.node_tree = _mn_select_sec_struct_id
            # Socket_1
            mn_select_sec_struct_002.inputs[2].default_value = 2

            # Set locations
            group_output_26.location = (267.00146484375, 0.0)
            group_input_26.location = (-220.0, -80.0)
            mn_select_sec_struct_002.location = (0.0, 0.0)

            # Set dimensions
            group_output_26.width, group_output_26.height = 140.0, 100.0
            group_input_26.width, group_input_26.height = 140.0, 100.0
            mn_select_sec_struct_002.width, mn_select_sec_struct_002.height = (
                217.00146484375,
                100.0,
            )

            # initialize is_sheet links
            # mn_select_sec_struct_002.Selection -> group_output_26.Selection
            is_sheet.links.new(
                mn_select_sec_struct_002.outputs[0], group_output_26.inputs[0]
            )
            # group_input_26.And -> mn_select_sec_struct_002.And
            is_sheet.links.new(
                group_input_26.outputs[0], mn_select_sec_struct_002.inputs[0]
            )
            # group_input_26.Or -> mn_select_sec_struct_002.Or
            is_sheet.links.new(
                group_input_26.outputs[1], mn_select_sec_struct_002.inputs[1]
            )
            # mn_select_sec_struct_002.Inverted -> group_output_26.Inverted
            is_sheet.links.new(
                mn_select_sec_struct_002.outputs[1], group_output_26.inputs[1]
            )
            return is_sheet

        is_sheet = is_sheet_node_group()

        # initialize is_loop node group
        def is_loop_node_group():
            is_loop = bpy.data.node_groups.new(type="GeometryNodeTree", name="Is Loop")

            is_loop.color_tag = "INPUT"
            is_loop.description = ""

            # is_loop interface
            # Socket Selection
            selection_socket_10 = is_loop.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_10.attribute_domain = "POINT"
            selection_socket_10.description = "Selected atoms form part of a loop, and not part of any secondary structure"

            # Socket Inverted
            inverted_socket_4 = is_loop.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_4.attribute_domain = "POINT"

            # Socket And
            and_socket_4 = is_loop.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_4.attribute_domain = "POINT"
            and_socket_4.hide_value = True

            # Socket Or
            or_socket_4 = is_loop.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_4.attribute_domain = "POINT"
            or_socket_4.hide_value = True

            # initialize is_loop nodes
            # node Group Output
            group_output_27 = is_loop.nodes.new("NodeGroupOutput")
            group_output_27.name = "Group Output"
            group_output_27.is_active_output = True

            # node Group Input
            group_input_27 = is_loop.nodes.new("NodeGroupInput")
            group_input_27.name = "Group Input"

            # node MN_select_sec_struct.002
            mn_select_sec_struct_002_1 = is_loop.nodes.new("GeometryNodeGroup")
            mn_select_sec_struct_002_1.label = "Select Sec Struct"
            mn_select_sec_struct_002_1.name = "MN_select_sec_struct.002"
            mn_select_sec_struct_002_1.node_tree = _mn_select_sec_struct_id
            # Socket_1
            mn_select_sec_struct_002_1.inputs[2].default_value = 3

            # Set locations
            group_output_27.location = (267.00146484375, 0.0)
            group_input_27.location = (-200.0, 0.0)
            mn_select_sec_struct_002_1.location = (0.0, 0.0)

            # Set dimensions
            group_output_27.width, group_output_27.height = 140.0, 100.0
            group_input_27.width, group_input_27.height = 140.0, 100.0
            mn_select_sec_struct_002_1.width, mn_select_sec_struct_002_1.height = (
                217.00146484375,
                100.0,
            )

            # initialize is_loop links
            # mn_select_sec_struct_002_1.Selection -> group_output_27.Selection
            is_loop.links.new(
                mn_select_sec_struct_002_1.outputs[0], group_output_27.inputs[0]
            )
            # group_input_27.And -> mn_select_sec_struct_002_1.And
            is_loop.links.new(
                group_input_27.outputs[0], mn_select_sec_struct_002_1.inputs[0]
            )
            # group_input_27.Or -> mn_select_sec_struct_002_1.Or
            is_loop.links.new(
                group_input_27.outputs[1], mn_select_sec_struct_002_1.inputs[1]
            )
            # mn_select_sec_struct_002_1.Inverted -> group_output_27.Inverted
            is_loop.links.new(
                mn_select_sec_struct_002_1.outputs[1], group_output_27.inputs[1]
            )
            return is_loop

        is_loop = is_loop_node_group()

        # initialize is_helix node group
        def is_helix_node_group():
            is_helix = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Helix"
            )

            is_helix.color_tag = "INPUT"
            is_helix.description = ""

            # is_helix interface
            # Socket Selection
            selection_socket_11 = is_helix.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_11.attribute_domain = "POINT"
            selection_socket_11.description = "Selected atoms form part of an helix"

            # Socket Inverted
            inverted_socket_5 = is_helix.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_5.attribute_domain = "POINT"

            # Socket And
            and_socket_5 = is_helix.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_5.attribute_domain = "POINT"
            and_socket_5.hide_value = True

            # Socket Or
            or_socket_5 = is_helix.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_5.attribute_domain = "POINT"
            or_socket_5.hide_value = True

            # initialize is_helix nodes
            # node Group Output
            group_output_28 = is_helix.nodes.new("NodeGroupOutput")
            group_output_28.name = "Group Output"
            group_output_28.is_active_output = True

            # node Group Input
            group_input_28 = is_helix.nodes.new("NodeGroupInput")
            group_input_28.name = "Group Input"

            # node MN_select_sec_struct.002
            mn_select_sec_struct_002_2 = is_helix.nodes.new("GeometryNodeGroup")
            mn_select_sec_struct_002_2.label = "Select Sec Struct"
            mn_select_sec_struct_002_2.name = "MN_select_sec_struct.002"
            mn_select_sec_struct_002_2.node_tree = _mn_select_sec_struct_id
            # Socket_1
            mn_select_sec_struct_002_2.inputs[2].default_value = 1

            # Set locations
            group_output_28.location = (267.00146484375, 0.0)
            group_input_28.location = (-200.0, 0.0)
            mn_select_sec_struct_002_2.location = (0.0, 0.0)

            # Set dimensions
            group_output_28.width, group_output_28.height = 140.0, 100.0
            group_input_28.width, group_input_28.height = 140.0, 100.0
            mn_select_sec_struct_002_2.width, mn_select_sec_struct_002_2.height = (
                217.00146484375,
                100.0,
            )

            # initialize is_helix links
            # mn_select_sec_struct_002_2.Selection -> group_output_28.Selection
            is_helix.links.new(
                mn_select_sec_struct_002_2.outputs[0], group_output_28.inputs[0]
            )
            # group_input_28.And -> mn_select_sec_struct_002_2.And
            is_helix.links.new(
                group_input_28.outputs[0], mn_select_sec_struct_002_2.inputs[0]
            )
            # group_input_28.Or -> mn_select_sec_struct_002_2.Or
            is_helix.links.new(
                group_input_28.outputs[1], mn_select_sec_struct_002_2.inputs[1]
            )
            # mn_select_sec_struct_002_2.Inverted -> group_output_28.Inverted
            is_helix.links.new(
                mn_select_sec_struct_002_2.outputs[1], group_output_28.inputs[1]
            )
            return is_helix

        is_helix = is_helix_node_group()

        # initialize _mn_select_sec_struct node group
        def _mn_select_sec_struct_node_group():
            _mn_select_sec_struct = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_sec_struct"
            )

            _mn_select_sec_struct.color_tag = "NONE"
            _mn_select_sec_struct.description = ""

            # _mn_select_sec_struct interface
            # Socket Is Helix
            is_helix_socket = _mn_select_sec_struct.interface.new_socket(
                name="Is Helix", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_helix_socket.attribute_domain = "POINT"

            # Socket Is Sheet
            is_sheet_socket = _mn_select_sec_struct.interface.new_socket(
                name="Is Sheet", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_sheet_socket.attribute_domain = "POINT"

            # Socket Is Structured
            is_structured_socket = _mn_select_sec_struct.interface.new_socket(
                name="Is Structured", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_structured_socket.attribute_domain = "POINT"

            # Socket Is Loop
            is_loop_socket = _mn_select_sec_struct.interface.new_socket(
                name="Is Loop", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_loop_socket.attribute_domain = "POINT"

            # Socket And
            and_socket_6 = _mn_select_sec_struct.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_6.attribute_domain = "POINT"
            and_socket_6.hide_value = True

            # initialize _mn_select_sec_struct nodes
            # node Group.001
            group_001_4 = _mn_select_sec_struct.nodes.new("GeometryNodeGroup")
            group_001_4.name = "Group.001"
            group_001_4.node_tree = is_sheet
            # Socket_3
            group_001_4.inputs[1].default_value = False

            # node Group.002
            group_002_1 = _mn_select_sec_struct.nodes.new("GeometryNodeGroup")
            group_002_1.name = "Group.002"
            group_002_1.node_tree = is_loop
            # Socket_3
            group_002_1.inputs[1].default_value = False

            # node Group
            group_11 = _mn_select_sec_struct.nodes.new("GeometryNodeGroup")
            group_11.name = "Group"
            group_11.node_tree = is_helix
            # Socket_3
            group_11.inputs[1].default_value = False

            # node Boolean Math.001
            boolean_math_001_5 = _mn_select_sec_struct.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_5.name = "Boolean Math.001"
            boolean_math_001_5.hide = True
            boolean_math_001_5.operation = "NOT"

            # node Group Output
            group_output_29 = _mn_select_sec_struct.nodes.new("NodeGroupOutput")
            group_output_29.name = "Group Output"
            group_output_29.is_active_output = True

            # node Group Input
            group_input_29 = _mn_select_sec_struct.nodes.new("NodeGroupInput")
            group_input_29.name = "Group Input"
            group_input_29.outputs[1].hide = True

            # Set locations
            group_001_4.location = (120.0, -60.0)
            group_002_1.location = (120.0, -180.0)
            group_11.location = (120.0, 60.0)
            boolean_math_001_5.location = (300.0, -140.0)
            group_output_29.location = (540.0, -60.0)
            group_input_29.location = (-160.0, -40.0)

            # Set dimensions
            group_001_4.width, group_001_4.height = 140.0, 100.0
            group_002_1.width, group_002_1.height = 140.0, 100.0
            group_11.width, group_11.height = 140.0, 100.0
            boolean_math_001_5.width, boolean_math_001_5.height = 140.0, 100.0
            group_output_29.width, group_output_29.height = 140.0, 100.0
            group_input_29.width, group_input_29.height = 140.0, 100.0

            # initialize _mn_select_sec_struct links
            # group_002_1.Selection -> group_output_29.Is Loop
            _mn_select_sec_struct.links.new(
                group_002_1.outputs[0], group_output_29.inputs[3]
            )
            # group_002_1.Selection -> boolean_math_001_5.Boolean
            _mn_select_sec_struct.links.new(
                group_002_1.outputs[0], boolean_math_001_5.inputs[0]
            )
            # boolean_math_001_5.Boolean -> group_output_29.Is Structured
            _mn_select_sec_struct.links.new(
                boolean_math_001_5.outputs[0], group_output_29.inputs[2]
            )
            # group_11.Selection -> group_output_29.Is Helix
            _mn_select_sec_struct.links.new(
                group_11.outputs[0], group_output_29.inputs[0]
            )
            # group_001_4.Selection -> group_output_29.Is Sheet
            _mn_select_sec_struct.links.new(
                group_001_4.outputs[0], group_output_29.inputs[1]
            )
            # group_input_29.And -> group_11.And
            _mn_select_sec_struct.links.new(
                group_input_29.outputs[0], group_11.inputs[0]
            )
            # group_input_29.And -> group_001_4.And
            _mn_select_sec_struct.links.new(
                group_input_29.outputs[0], group_001_4.inputs[0]
            )
            # group_input_29.And -> group_002_1.And
            _mn_select_sec_struct.links.new(
                group_input_29.outputs[0], group_002_1.inputs[0]
            )
            return _mn_select_sec_struct

        _mn_select_sec_struct = _mn_select_sec_struct_node_group()

        # initialize _field_offset_vec node group
        def _field_offset_vec_node_group():
            _field_offset_vec = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".field_offset_vec"
            )

            _field_offset_vec.color_tag = "NONE"
            _field_offset_vec.description = ""

            # _field_offset_vec interface
            # Socket Field
            field_socket_6 = _field_offset_vec.interface.new_socket(
                name="Field", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            field_socket_6.subtype = "NONE"
            field_socket_6.default_value = (0.0, 0.0, 0.0)
            field_socket_6.min_value = -3.4028234663852886e38
            field_socket_6.max_value = 3.4028234663852886e38
            field_socket_6.attribute_domain = "POINT"

            # Socket Field
            field_socket_7 = _field_offset_vec.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketVector"
            )
            field_socket_7.subtype = "NONE"
            field_socket_7.default_value = (0.0, 0.0, 0.0)
            field_socket_7.min_value = -3.4028234663852886e38
            field_socket_7.max_value = 3.4028234663852886e38
            field_socket_7.attribute_domain = "POINT"
            field_socket_7.hide_value = True

            # Socket Offset
            offset_socket_2 = _field_offset_vec.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_2.subtype = "NONE"
            offset_socket_2.default_value = 0
            offset_socket_2.min_value = -2147483648
            offset_socket_2.max_value = 2147483647
            offset_socket_2.attribute_domain = "POINT"

            # initialize _field_offset_vec nodes
            # node Group Input
            group_input_30 = _field_offset_vec.nodes.new("NodeGroupInput")
            group_input_30.name = "Group Input"

            # node Evaluate at Index
            evaluate_at_index_3 = _field_offset_vec.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_3.name = "Evaluate at Index"
            evaluate_at_index_3.data_type = "FLOAT_VECTOR"
            evaluate_at_index_3.domain = "POINT"

            # node Group Output
            group_output_30 = _field_offset_vec.nodes.new("NodeGroupOutput")
            group_output_30.name = "Group Output"
            group_output_30.is_active_output = True

            # node Math.001
            math_001_3 = _field_offset_vec.nodes.new("ShaderNodeMath")
            math_001_3.name = "Math.001"
            math_001_3.operation = "ADD"
            math_001_3.use_clamp = False

            # node Index
            index_3 = _field_offset_vec.nodes.new("GeometryNodeInputIndex")
            index_3.name = "Index"

            # Set locations
            group_input_30.location = (-417.64404296875, 0.0)
            evaluate_at_index_3.location = (-220.0, 100.0)
            group_output_30.location = (20.0, 20.0)
            math_001_3.location = (-220.0, -80.0)
            index_3.location = (-400.0, -180.0)

            # Set dimensions
            group_input_30.width, group_input_30.height = 140.0, 100.0
            evaluate_at_index_3.width, evaluate_at_index_3.height = 140.0, 100.0
            group_output_30.width, group_output_30.height = 140.0, 100.0
            math_001_3.width, math_001_3.height = 140.0, 100.0
            index_3.width, index_3.height = 140.0, 100.0

            # initialize _field_offset_vec links
            # math_001_3.Value -> evaluate_at_index_3.Index
            _field_offset_vec.links.new(
                math_001_3.outputs[0], evaluate_at_index_3.inputs[0]
            )
            # group_input_30.Field -> evaluate_at_index_3.Value
            _field_offset_vec.links.new(
                group_input_30.outputs[0], evaluate_at_index_3.inputs[1]
            )
            # group_input_30.Offset -> math_001_3.Value
            _field_offset_vec.links.new(group_input_30.outputs[1], math_001_3.inputs[0])
            # evaluate_at_index_3.Value -> group_output_30.Field
            _field_offset_vec.links.new(
                evaluate_at_index_3.outputs[0], group_output_30.inputs[0]
            )
            # index_3.Index -> math_001_3.Value
            _field_offset_vec.links.new(index_3.outputs[0], math_001_3.inputs[1])
            return _field_offset_vec

        _field_offset_vec = _field_offset_vec_node_group()

        # initialize _sec_struct_counter node group
        def _sec_struct_counter_node_group():
            _sec_struct_counter = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".sec_struct_counter"
            )

            _sec_struct_counter.color_tag = "NONE"
            _sec_struct_counter.description = ""

            # _sec_struct_counter interface
            # Socket Leading
            leading_socket = _sec_struct_counter.interface.new_socket(
                name="Leading", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            leading_socket.subtype = "NONE"
            leading_socket.default_value = 0
            leading_socket.min_value = -2147483648
            leading_socket.max_value = 2147483647
            leading_socket.attribute_domain = "POINT"

            # Socket Trailing
            trailing_socket = _sec_struct_counter.interface.new_socket(
                name="Trailing", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            trailing_socket.subtype = "NONE"
            trailing_socket.default_value = 0
            trailing_socket.min_value = -2147483648
            trailing_socket.max_value = 2147483647
            trailing_socket.attribute_domain = "POINT"

            # Socket Total
            total_socket = _sec_struct_counter.interface.new_socket(
                name="Total", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            total_socket.subtype = "NONE"
            total_socket.default_value = 0
            total_socket.min_value = -2147483648
            total_socket.max_value = 2147483647
            total_socket.attribute_domain = "POINT"

            # Socket Border
            border_socket = _sec_struct_counter.interface.new_socket(
                name="Border", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            border_socket.attribute_domain = "POINT"

            # initialize _sec_struct_counter nodes
            # node Group Input
            group_input_31 = _sec_struct_counter.nodes.new("NodeGroupInput")
            group_input_31.name = "Group Input"

            # node Reroute.005
            reroute_005_1 = _sec_struct_counter.nodes.new("NodeReroute")
            reroute_005_1.name = "Reroute.005"
            # node Named Attribute.001
            named_attribute_001_1 = _sec_struct_counter.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_1.name = "Named Attribute.001"
            named_attribute_001_1.data_type = "INT"
            # Name
            named_attribute_001_1.inputs[0].default_value = "sec_struct"

            # node Group.004
            group_004_1 = _sec_struct_counter.nodes.new("GeometryNodeGroup")
            group_004_1.name = "Group.004"
            group_004_1.node_tree = _field_offset
            # Input_0
            group_004_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_3
            group_004_1.inputs[1].default_value = False
            # Input_7
            group_004_1.inputs[3].default_value = 0.0
            # Input_1
            group_004_1.inputs[4].default_value = -1

            # node Compare.009
            compare_009_1 = _sec_struct_counter.nodes.new("FunctionNodeCompare")
            compare_009_1.name = "Compare.009"
            compare_009_1.data_type = "INT"
            compare_009_1.mode = "ELEMENT"
            compare_009_1.operation = "NOT_EQUAL"

            # node Accumulate Field.004
            accumulate_field_004 = _sec_struct_counter.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_004.name = "Accumulate Field.004"
            accumulate_field_004.data_type = "INT"
            accumulate_field_004.domain = "POINT"
            # Group Index
            accumulate_field_004.inputs[1].default_value = 0

            # node Compare.010
            compare_010_1 = _sec_struct_counter.nodes.new("FunctionNodeCompare")
            compare_010_1.name = "Compare.010"
            compare_010_1.data_type = "INT"
            compare_010_1.mode = "ELEMENT"
            compare_010_1.operation = "NOT_EQUAL"

            # node Reroute
            reroute_4 = _sec_struct_counter.nodes.new("NodeReroute")
            reroute_4.name = "Reroute"
            # node Boolean Math
            boolean_math_6 = _sec_struct_counter.nodes.new("FunctionNodeBooleanMath")
            boolean_math_6.name = "Boolean Math"
            boolean_math_6.operation = "OR"
            # Boolean_001
            boolean_math_6.inputs[1].default_value = False

            # node Group Output
            group_output_31 = _sec_struct_counter.nodes.new("NodeGroupOutput")
            group_output_31.name = "Group Output"
            group_output_31.is_active_output = True

            # node Group.003
            group_003_1 = _sec_struct_counter.nodes.new("GeometryNodeGroup")
            group_003_1.name = "Group.003"
            group_003_1.node_tree = _field_offset
            # Input_0
            group_003_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_3
            group_003_1.inputs[1].default_value = False
            # Input_7
            group_003_1.inputs[3].default_value = 0.0
            # Input_1
            group_003_1.inputs[4].default_value = 1

            # Set locations
            group_input_31.location = (-500.1279296875, 0.0)
            reroute_005_1.location = (-119.8720703125, -60.0)
            named_attribute_001_1.location = (-300.0, 120.0)
            group_004_1.location = (-20.0, -220.0)
            compare_009_1.location = (140.1279296875, 60.0)
            accumulate_field_004.location = (460.0, 40.0)
            compare_010_1.location = (140.0, -140.0)
            reroute_4.location = (320.0, -60.0)
            boolean_math_6.location = (300.0, -140.0)
            group_output_31.location = (796.4706420898438, 27.943008422851562)
            group_003_1.location = (-19.8720703125, 60.0)

            # Set dimensions
            group_input_31.width, group_input_31.height = 140.0, 100.0
            reroute_005_1.width, reroute_005_1.height = 16.0, 100.0
            named_attribute_001_1.width, named_attribute_001_1.height = 140.0, 100.0
            group_004_1.width, group_004_1.height = 140.0, 100.0
            compare_009_1.width, compare_009_1.height = 140.0, 100.0
            accumulate_field_004.width, accumulate_field_004.height = 140.0, 100.0
            compare_010_1.width, compare_010_1.height = 140.0, 100.0
            reroute_4.width, reroute_4.height = 16.0, 100.0
            boolean_math_6.width, boolean_math_6.height = 140.0, 100.0
            group_output_31.width, group_output_31.height = 140.0, 100.0
            group_003_1.width, group_003_1.height = 140.0, 100.0

            # initialize _sec_struct_counter links
            # reroute_4.Output -> accumulate_field_004.Value
            _sec_struct_counter.links.new(
                reroute_4.outputs[0], accumulate_field_004.inputs[0]
            )
            # reroute_005_1.Output -> group_003_1.Field
            _sec_struct_counter.links.new(
                reroute_005_1.outputs[0], group_003_1.inputs[2]
            )
            # reroute_005_1.Output -> compare_009_1.A
            _sec_struct_counter.links.new(
                reroute_005_1.outputs[0], compare_009_1.inputs[2]
            )
            # named_attribute_001_1.Attribute -> reroute_005_1.Input
            _sec_struct_counter.links.new(
                named_attribute_001_1.outputs[0], reroute_005_1.inputs[0]
            )
            # group_003_1.Field -> compare_009_1.B
            _sec_struct_counter.links.new(
                group_003_1.outputs[2], compare_009_1.inputs[3]
            )
            # accumulate_field_004.Trailing -> group_output_31.Trailing
            _sec_struct_counter.links.new(
                accumulate_field_004.outputs[1], group_output_31.inputs[1]
            )
            # accumulate_field_004.Leading -> group_output_31.Leading
            _sec_struct_counter.links.new(
                accumulate_field_004.outputs[0], group_output_31.inputs[0]
            )
            # accumulate_field_004.Total -> group_output_31.Total
            _sec_struct_counter.links.new(
                accumulate_field_004.outputs[2], group_output_31.inputs[2]
            )
            # reroute_4.Output -> group_output_31.Border
            _sec_struct_counter.links.new(
                reroute_4.outputs[0], group_output_31.inputs[3]
            )
            # reroute_005_1.Output -> group_004_1.Field
            _sec_struct_counter.links.new(
                reroute_005_1.outputs[0], group_004_1.inputs[2]
            )
            # reroute_005_1.Output -> compare_010_1.A
            _sec_struct_counter.links.new(
                reroute_005_1.outputs[0], compare_010_1.inputs[2]
            )
            # group_004_1.Field -> compare_010_1.B
            _sec_struct_counter.links.new(
                group_004_1.outputs[2], compare_010_1.inputs[3]
            )
            # compare_009_1.Result -> reroute_4.Input
            _sec_struct_counter.links.new(compare_009_1.outputs[0], reroute_4.inputs[0])
            # compare_010_1.Result -> boolean_math_6.Boolean
            _sec_struct_counter.links.new(
                compare_010_1.outputs[0], boolean_math_6.inputs[0]
            )
            return _sec_struct_counter

        _sec_struct_counter = _sec_struct_counter_node_group()

        # initialize _bs_smooth node group
        def _bs_smooth_node_group():
            _bs_smooth = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".bs_smooth"
            )

            _bs_smooth.color_tag = "NONE"
            _bs_smooth.description = ""

            _bs_smooth.is_modifier = True

            # _bs_smooth interface
            # Socket Geometry
            geometry_socket_4 = _bs_smooth.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_4.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_5 = _bs_smooth.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_5.attribute_domain = "POINT"

            # Socket Factor
            factor_socket = _bs_smooth.interface.new_socket(
                name="Factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            factor_socket.subtype = "FACTOR"
            factor_socket.default_value = 1.0
            factor_socket.min_value = 0.0
            factor_socket.max_value = 1.0
            factor_socket.attribute_domain = "POINT"

            # Socket Iterations
            iterations_socket = _bs_smooth.interface.new_socket(
                name="Iterations", in_out="INPUT", socket_type="NodeSocketInt"
            )
            iterations_socket.subtype = "NONE"
            iterations_socket.default_value = 2
            iterations_socket.min_value = 0
            iterations_socket.max_value = 2147483647
            iterations_socket.attribute_domain = "POINT"

            # initialize _bs_smooth nodes
            # node Group Output
            group_output_32 = _bs_smooth.nodes.new("NodeGroupOutput")
            group_output_32.name = "Group Output"
            group_output_32.is_active_output = True

            # node Set Position
            set_position_1 = _bs_smooth.nodes.new("GeometryNodeSetPosition")
            set_position_1.name = "Set Position"
            # Offset
            set_position_1.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Mix.002
            mix_002 = _bs_smooth.nodes.new("ShaderNodeMix")
            mix_002.name = "Mix.002"
            mix_002.blend_type = "MIX"
            mix_002.clamp_factor = True
            mix_002.clamp_result = False
            mix_002.data_type = "VECTOR"
            mix_002.factor_mode = "UNIFORM"

            # node Position.001
            position_001_1 = _bs_smooth.nodes.new("GeometryNodeInputPosition")
            position_001_1.name = "Position.001"

            # node Blur Attribute
            blur_attribute = _bs_smooth.nodes.new("GeometryNodeBlurAttribute")
            blur_attribute.name = "Blur Attribute"
            blur_attribute.data_type = "FLOAT_VECTOR"

            # node Group Input
            group_input_32 = _bs_smooth.nodes.new("NodeGroupInput")
            group_input_32.name = "Group Input"

            # node Boolean Math.004
            boolean_math_004 = _bs_smooth.nodes.new("FunctionNodeBooleanMath")
            boolean_math_004.name = "Boolean Math.004"
            boolean_math_004.operation = "NOT"

            # node Boolean Math.002
            boolean_math_002_5 = _bs_smooth.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_5.name = "Boolean Math.002"
            boolean_math_002_5.operation = "AND"

            # node Group
            group_12 = _bs_smooth.nodes.new("GeometryNodeGroup")
            group_12.name = "Group"
            group_12.node_tree = _sec_struct_counter

            # node Endpoint Selection.004
            endpoint_selection_004 = _bs_smooth.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_004.name = "Endpoint Selection.004"
            # Start Size
            endpoint_selection_004.inputs[0].default_value = 1
            # End Size
            endpoint_selection_004.inputs[1].default_value = 1

            # node Boolean Math
            boolean_math_7 = _bs_smooth.nodes.new("FunctionNodeBooleanMath")
            boolean_math_7.name = "Boolean Math"
            boolean_math_7.operation = "NOT"

            # node Group.021
            group_021 = _bs_smooth.nodes.new("GeometryNodeGroup")
            group_021.name = "Group.021"
            group_021.node_tree = _mn_select_sec_struct
            group_021.outputs[0].hide = True
            group_021.outputs[2].hide = True
            group_021.outputs[3].hide = True
            # Socket_1
            group_021.inputs[0].default_value = True

            # Set locations
            group_output_32.location = (591.18408203125, 0.0)
            set_position_1.location = (401.18408203125, 199.23532104492188)
            mix_002.location = (218.81591796875, 80.76467895507812)
            position_001_1.location = (-61.18408203125, -39.235321044921875)
            blur_attribute.location = (-58.81591796875, -120.76467895507812)
            group_input_32.location = (-615.6842041015625, 115.17381286621094)
            boolean_math_004.location = (-380.0, -160.0)
            boolean_math_002_5.location = (39.807212829589844, 161.80430603027344)
            group_12.location = (-620.0, -40.0)
            endpoint_selection_004.location = (-620.0, -280.0)
            boolean_math_7.location = (-120.0, 140.0)
            group_021.location = (40.0, 260.0)

            # Set dimensions
            group_output_32.width, group_output_32.height = 140.0, 100.0
            set_position_1.width, set_position_1.height = 140.0, 100.0
            mix_002.width, mix_002.height = 140.0, 100.0
            position_001_1.width, position_001_1.height = 140.0, 100.0
            blur_attribute.width, blur_attribute.height = 140.0, 100.0
            group_input_32.width, group_input_32.height = 140.0, 100.0
            boolean_math_004.width, boolean_math_004.height = 140.0, 100.0
            boolean_math_002_5.width, boolean_math_002_5.height = 140.0, 100.0
            group_12.width, group_12.height = 140.0, 100.0
            endpoint_selection_004.width, endpoint_selection_004.height = 140.0, 100.0
            boolean_math_7.width, boolean_math_7.height = 140.0, 100.0
            group_021.width, group_021.height = 140.0, 100.0

            # initialize _bs_smooth links
            # boolean_math_004.Boolean -> blur_attribute.Weight
            _bs_smooth.links.new(boolean_math_004.outputs[0], blur_attribute.inputs[2])
            # blur_attribute.Value -> mix_002.B
            _bs_smooth.links.new(blur_attribute.outputs[0], mix_002.inputs[5])
            # position_001_1.Position -> blur_attribute.Value
            _bs_smooth.links.new(position_001_1.outputs[0], blur_attribute.inputs[0])
            # mix_002.Result -> set_position_1.Position
            _bs_smooth.links.new(mix_002.outputs[1], set_position_1.inputs[2])
            # position_001_1.Position -> mix_002.A
            _bs_smooth.links.new(position_001_1.outputs[0], mix_002.inputs[4])
            # group_021.Is Sheet -> boolean_math_002_5.Boolean
            _bs_smooth.links.new(group_021.outputs[1], boolean_math_002_5.inputs[0])
            # group_input_32.Geometry -> set_position_1.Geometry
            _bs_smooth.links.new(group_input_32.outputs[0], set_position_1.inputs[0])
            # group_input_32.Factor -> mix_002.Factor
            _bs_smooth.links.new(group_input_32.outputs[1], mix_002.inputs[0])
            # set_position_1.Geometry -> group_output_32.Geometry
            _bs_smooth.links.new(set_position_1.outputs[0], group_output_32.inputs[0])
            # group_input_32.Iterations -> blur_attribute.Iterations
            _bs_smooth.links.new(group_input_32.outputs[2], blur_attribute.inputs[1])
            # group_12.Border -> boolean_math_7.Boolean
            _bs_smooth.links.new(group_12.outputs[3], boolean_math_7.inputs[0])
            # boolean_math_002_5.Boolean -> set_position_1.Selection
            _bs_smooth.links.new(
                boolean_math_002_5.outputs[0], set_position_1.inputs[1]
            )
            # boolean_math_7.Boolean -> boolean_math_002_5.Boolean
            _bs_smooth.links.new(
                boolean_math_7.outputs[0], boolean_math_002_5.inputs[1]
            )
            # group_12.Border -> boolean_math_004.Boolean
            _bs_smooth.links.new(group_12.outputs[3], boolean_math_004.inputs[0])
            return _bs_smooth

        _bs_smooth = _bs_smooth_node_group()

        # initialize _expand_selection node group
        def _expand_selection_node_group():
            _expand_selection = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".expand_selection"
            )

            _expand_selection.color_tag = "NONE"
            _expand_selection.description = ""

            # _expand_selection interface
            # Socket Boolean
            boolean_socket_1 = _expand_selection.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_1.attribute_domain = "POINT"

            # Socket Input
            input_socket_1 = _expand_selection.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketBool"
            )
            input_socket_1.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_3 = _expand_selection.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_3.subtype = "NONE"
            offset_socket_3.default_value = 1
            offset_socket_3.min_value = -2147483648
            offset_socket_3.max_value = 2147483647
            offset_socket_3.attribute_domain = "POINT"

            # initialize _expand_selection nodes
            # node Group Output
            group_output_33 = _expand_selection.nodes.new("NodeGroupOutput")
            group_output_33.name = "Group Output"
            group_output_33.is_active_output = True

            # node Boolean Math
            boolean_math_8 = _expand_selection.nodes.new("FunctionNodeBooleanMath")
            boolean_math_8.name = "Boolean Math"
            boolean_math_8.operation = "OR"

            # node Boolean Math.001
            boolean_math_001_6 = _expand_selection.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_6.name = "Boolean Math.001"
            boolean_math_001_6.operation = "OR"

            # node Group.025
            group_025 = _expand_selection.nodes.new("GeometryNodeGroup")
            group_025.name = "Group.025"
            group_025.node_tree = _field_offset
            # Input_0
            group_025.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_025.inputs[2].default_value = 0
            # Input_7
            group_025.inputs[3].default_value = 0.0

            # node Group Input
            group_input_33 = _expand_selection.nodes.new("NodeGroupInput")
            group_input_33.name = "Group Input"

            # node Math
            math_7 = _expand_selection.nodes.new("ShaderNodeMath")
            math_7.name = "Math"
            math_7.operation = "MULTIPLY"
            math_7.use_clamp = False
            # Value_001
            math_7.inputs[1].default_value = -1.0

            # node Group.024
            group_024 = _expand_selection.nodes.new("GeometryNodeGroup")
            group_024.name = "Group.024"
            group_024.node_tree = _field_offset
            # Input_0
            group_024.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_024.inputs[2].default_value = 0
            # Input_7
            group_024.inputs[3].default_value = 0.0

            # Set locations
            group_output_33.location = (420.0, 0.0)
            boolean_math_8.location = (-50.0, 0.0)
            boolean_math_001_6.location = (230.0, 60.0)
            group_025.location = (-230.0, -140.0)
            group_input_33.location = (-637.21630859375, 234.8535614013672)
            math_7.location = (-640.0, 120.0)
            group_024.location = (-230.0, 140.0)

            # Set dimensions
            group_output_33.width, group_output_33.height = 140.0, 100.0
            boolean_math_8.width, boolean_math_8.height = 140.0, 100.0
            boolean_math_001_6.width, boolean_math_001_6.height = 140.0, 100.0
            group_025.width, group_025.height = 140.0, 100.0
            group_input_33.width, group_input_33.height = 140.0, 100.0
            math_7.width, math_7.height = 140.0, 100.0
            group_024.width, group_024.height = 140.0, 100.0

            # initialize _expand_selection links
            # group_025.Value -> boolean_math_8.Boolean
            _expand_selection.links.new(group_025.outputs[1], boolean_math_8.inputs[1])
            # group_input_33.Input -> group_025.Value
            _expand_selection.links.new(group_input_33.outputs[0], group_025.inputs[1])
            # group_input_33.Input -> group_024.Value
            _expand_selection.links.new(group_input_33.outputs[0], group_024.inputs[1])
            # group_024.Value -> boolean_math_8.Boolean
            _expand_selection.links.new(group_024.outputs[1], boolean_math_8.inputs[0])
            # boolean_math_8.Boolean -> boolean_math_001_6.Boolean
            _expand_selection.links.new(
                boolean_math_8.outputs[0], boolean_math_001_6.inputs[1]
            )
            # group_input_33.Input -> boolean_math_001_6.Boolean
            _expand_selection.links.new(
                group_input_33.outputs[0], boolean_math_001_6.inputs[0]
            )
            # boolean_math_001_6.Boolean -> group_output_33.Boolean
            _expand_selection.links.new(
                boolean_math_001_6.outputs[0], group_output_33.inputs[0]
            )
            # group_input_33.Offset -> group_024.Offset
            _expand_selection.links.new(group_input_33.outputs[1], group_024.inputs[4])
            # group_input_33.Offset -> math_7.Value
            _expand_selection.links.new(group_input_33.outputs[1], math_7.inputs[0])
            # math_7.Value -> group_025.Offset
            _expand_selection.links.new(math_7.outputs[0], group_025.inputs[4])
            return _expand_selection

        _expand_selection = _expand_selection_node_group()

        # initialize is_alpha_carbon node group
        def is_alpha_carbon_node_group():
            is_alpha_carbon = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Alpha Carbon"
            )

            is_alpha_carbon.color_tag = "INPUT"
            is_alpha_carbon.description = ""

            # is_alpha_carbon interface
            # Socket Selection
            selection_socket_12 = is_alpha_carbon.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_12.attribute_domain = "POINT"
            selection_socket_12.description = (
                "True if atom is an alpha carbon of an amino acid"
            )

            # Socket Inverted
            inverted_socket_6 = is_alpha_carbon.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_6.attribute_domain = "POINT"

            # Socket And
            and_socket_7 = is_alpha_carbon.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_7.attribute_domain = "POINT"
            and_socket_7.hide_value = True

            # Socket Or
            or_socket_6 = is_alpha_carbon.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_6.attribute_domain = "POINT"
            or_socket_6.hide_value = True

            # initialize is_alpha_carbon nodes
            # node Group Output
            group_output_34 = is_alpha_carbon.nodes.new("NodeGroupOutput")
            group_output_34.name = "Group Output"
            group_output_34.is_active_output = True

            # node Group Input
            group_input_34 = is_alpha_carbon.nodes.new("NodeGroupInput")
            group_input_34.name = "Group Input"

            # node Boolean Math.001
            boolean_math_001_7 = is_alpha_carbon.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_7.name = "Boolean Math.001"
            boolean_math_001_7.operation = "AND"

            # node Group.001
            group_001_5 = is_alpha_carbon.nodes.new("GeometryNodeGroup")
            group_001_5.name = "Group.001"
            group_001_5.node_tree = fallback_boolean
            # Socket_2
            group_001_5.inputs[0].default_value = "is_alpha_carbon"

            # node Group.002
            group_002_2 = is_alpha_carbon.nodes.new("GeometryNodeGroup")
            group_002_2.name = "Group.002"
            group_002_2.node_tree = _mn_select_peptide
            group_002_2.outputs[0].hide = True
            group_002_2.outputs[1].hide = True
            group_002_2.outputs[2].hide = True

            # node Boolean Math.002
            boolean_math_002_6 = is_alpha_carbon.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_6.name = "Boolean Math.002"
            boolean_math_002_6.operation = "OR"

            # node Boolean Math
            boolean_math_9 = is_alpha_carbon.nodes.new("FunctionNodeBooleanMath")
            boolean_math_9.name = "Boolean Math"
            boolean_math_9.operation = "NOT"

            # Set locations
            group_output_34.location = (520.0, 0.0)
            group_input_34.location = (-200.0, 0.0)
            boolean_math_001_7.location = (160.0, 0.0)
            group_001_5.location = (-88.33343505859375, -180.0)
            group_002_2.location = (-290.4490661621094, -180.0)
            boolean_math_002_6.location = (340.0, 0.0)
            boolean_math_9.location = (340.0, -140.0)

            # Set dimensions
            group_output_34.width, group_output_34.height = 140.0, 100.0
            group_input_34.width, group_input_34.height = 140.0, 100.0
            boolean_math_001_7.width, boolean_math_001_7.height = 140.0, 100.0
            group_001_5.width, group_001_5.height = 208.33343505859375, 100.0
            group_002_2.width, group_002_2.height = 170.44906616210938, 100.0
            boolean_math_002_6.width, boolean_math_002_6.height = 140.0, 100.0
            boolean_math_9.width, boolean_math_9.height = 140.0, 100.0

            # initialize is_alpha_carbon links
            # group_input_34.And -> boolean_math_001_7.Boolean
            is_alpha_carbon.links.new(
                group_input_34.outputs[0], boolean_math_001_7.inputs[0]
            )
            # boolean_math_002_6.Boolean -> group_output_34.Selection
            is_alpha_carbon.links.new(
                boolean_math_002_6.outputs[0], group_output_34.inputs[0]
            )
            # group_001_5.Boolean -> boolean_math_001_7.Boolean
            is_alpha_carbon.links.new(
                group_001_5.outputs[0], boolean_math_001_7.inputs[1]
            )
            # group_002_2.Is Alpha Carbon -> group_001_5.Fallback
            is_alpha_carbon.links.new(group_002_2.outputs[3], group_001_5.inputs[1])
            # boolean_math_001_7.Boolean -> boolean_math_002_6.Boolean
            is_alpha_carbon.links.new(
                boolean_math_001_7.outputs[0], boolean_math_002_6.inputs[0]
            )
            # group_input_34.Or -> boolean_math_002_6.Boolean
            is_alpha_carbon.links.new(
                group_input_34.outputs[1], boolean_math_002_6.inputs[1]
            )
            # boolean_math_002_6.Boolean -> boolean_math_9.Boolean
            is_alpha_carbon.links.new(
                boolean_math_002_6.outputs[0], boolean_math_9.inputs[0]
            )
            # boolean_math_9.Boolean -> group_output_34.Inverted
            is_alpha_carbon.links.new(
                boolean_math_9.outputs[0], group_output_34.inputs[1]
            )
            return is_alpha_carbon

        is_alpha_carbon = is_alpha_carbon_node_group()

        # initialize _mn_topo_assign_backbone node group
        def _mn_topo_assign_backbone_node_group():
            _mn_topo_assign_backbone = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_topo_assign_backbone"
            )

            _mn_topo_assign_backbone.color_tag = "NONE"
            _mn_topo_assign_backbone.description = ""

            # _mn_topo_assign_backbone interface
            # Socket Atoms
            atoms_socket_8 = _mn_topo_assign_backbone.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_8.attribute_domain = "POINT"

            # Socket Unique Group ID
            unique_group_id_socket_1 = _mn_topo_assign_backbone.interface.new_socket(
                name="Unique Group ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            unique_group_id_socket_1.subtype = "NONE"
            unique_group_id_socket_1.default_value = 0
            unique_group_id_socket_1.min_value = -2147483648
            unique_group_id_socket_1.max_value = 2147483647
            unique_group_id_socket_1.attribute_domain = "POINT"

            # Socket CA Atoms
            ca_atoms_socket = _mn_topo_assign_backbone.interface.new_socket(
                name="CA Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ca_atoms_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_9 = _mn_topo_assign_backbone.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_9.attribute_domain = "POINT"

            # initialize _mn_topo_assign_backbone nodes
            # node Group Output
            group_output_35 = _mn_topo_assign_backbone.nodes.new("NodeGroupOutput")
            group_output_35.name = "Group Output"
            group_output_35.is_active_output = True

            # node Group Input
            group_input_35 = _mn_topo_assign_backbone.nodes.new("NodeGroupInput")
            group_input_35.name = "Group Input"

            # node Store Named Attribute.002
            store_named_attribute_002_1 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_1.name = "Store Named Attribute.002"
            store_named_attribute_002_1.data_type = "FLOAT_VECTOR"
            store_named_attribute_002_1.domain = "POINT"
            # Name
            store_named_attribute_002_1.inputs[2].default_value = "backbone_N"

            # node Store Named Attribute.003
            store_named_attribute_003_1 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_1.name = "Store Named Attribute.003"
            store_named_attribute_003_1.data_type = "FLOAT_VECTOR"
            store_named_attribute_003_1.domain = "POINT"
            # Name
            store_named_attribute_003_1.inputs[2].default_value = "backbone_C"

            # node Store Named Attribute.004
            store_named_attribute_004_1 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_1.name = "Store Named Attribute.004"
            store_named_attribute_004_1.data_type = "FLOAT_VECTOR"
            store_named_attribute_004_1.domain = "POINT"
            # Name
            store_named_attribute_004_1.inputs[2].default_value = "backbone_CA"

            # node Store Named Attribute.005
            store_named_attribute_005_1 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005_1.name = "Store Named Attribute.005"
            store_named_attribute_005_1.data_type = "FLOAT_VECTOR"
            store_named_attribute_005_1.domain = "POINT"
            # Name
            store_named_attribute_005_1.inputs[2].default_value = "backbone_O"

            # node MN_topo_point_mask.005
            mn_topo_point_mask_005 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeGroup"
            )
            mn_topo_point_mask_005.label = "Topology Point Mask"
            mn_topo_point_mask_005.name = "MN_topo_point_mask.005"
            mn_topo_point_mask_005.node_tree = residue_mask
            # Socket_1
            mn_topo_point_mask_005.inputs[0].default_value = 3
            # Socket_5
            mn_topo_point_mask_005.inputs[1].default_value = False

            # node MN_topo_point_mask.006
            mn_topo_point_mask_006 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeGroup"
            )
            mn_topo_point_mask_006.label = "Topology Point Mask"
            mn_topo_point_mask_006.name = "MN_topo_point_mask.006"
            mn_topo_point_mask_006.node_tree = residue_mask
            # Socket_1
            mn_topo_point_mask_006.inputs[0].default_value = 2
            # Socket_5
            mn_topo_point_mask_006.inputs[1].default_value = False

            # node MN_topo_point_mask.007
            mn_topo_point_mask_007 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeGroup"
            )
            mn_topo_point_mask_007.label = "Topology Point Mask"
            mn_topo_point_mask_007.name = "MN_topo_point_mask.007"
            mn_topo_point_mask_007.node_tree = residue_mask
            # Socket_1
            mn_topo_point_mask_007.inputs[0].default_value = 4
            # Socket_5
            mn_topo_point_mask_007.inputs[1].default_value = False

            # node MN_topo_point_mask.004
            mn_topo_point_mask_004 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeGroup"
            )
            mn_topo_point_mask_004.label = "Topology Point Mask"
            mn_topo_point_mask_004.name = "MN_topo_point_mask.004"
            mn_topo_point_mask_004.node_tree = residue_mask
            # Socket_1
            mn_topo_point_mask_004.inputs[0].default_value = 1
            # Socket_5
            mn_topo_point_mask_004.inputs[1].default_value = False

            # node Capture Attribute
            capture_attribute_2 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_2.name = "Capture Attribute"
            capture_attribute_2.active_index = 0
            capture_attribute_2.capture_items.clear()
            capture_attribute_2.capture_items.new("FLOAT", "Unique Group ID")
            capture_attribute_2.capture_items["Unique Group ID"].data_type = "INT"
            capture_attribute_2.domain = "POINT"

            # node Group
            group_13 = _mn_topo_assign_backbone.nodes.new("GeometryNodeGroup")
            group_13.name = "Group"
            group_13.node_tree = res_group_id

            # node Reroute
            reroute_5 = _mn_topo_assign_backbone.nodes.new("NodeReroute")
            reroute_5.name = "Reroute"
            # node Reroute.001
            reroute_001_5 = _mn_topo_assign_backbone.nodes.new("NodeReroute")
            reroute_001_5.name = "Reroute.001"
            # node Reroute.002
            reroute_002_4 = _mn_topo_assign_backbone.nodes.new("NodeReroute")
            reroute_002_4.name = "Reroute.002"
            # node Reroute.003
            reroute_003_2 = _mn_topo_assign_backbone.nodes.new("NodeReroute")
            reroute_003_2.name = "Reroute.003"
            # node Separate Geometry
            separate_geometry_5 = _mn_topo_assign_backbone.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_5.name = "Separate Geometry"
            separate_geometry_5.domain = "POINT"

            # node Group.001
            group_001_6 = _mn_topo_assign_backbone.nodes.new("GeometryNodeGroup")
            group_001_6.name = "Group.001"
            group_001_6.node_tree = is_alpha_carbon
            # Socket_1
            group_001_6.inputs[0].default_value = True
            # Socket_3
            group_001_6.inputs[1].default_value = False

            # Set locations
            group_output_35.location = (720.0, 100.0)
            group_input_35.location = (-1200.0, 100.0)
            store_named_attribute_002_1.location = (-400.0, 100.0)
            store_named_attribute_003_1.location = (60.0, 100.0)
            store_named_attribute_004_1.location = (-180.0, 100.0)
            store_named_attribute_005_1.location = (300.0, 100.0)
            mn_topo_point_mask_005.location = (60.0, -120.0)
            mn_topo_point_mask_006.location = (-180.0, -120.0)
            mn_topo_point_mask_007.location = (300.0, -120.0)
            mn_topo_point_mask_004.location = (-400.0, -120.0)
            capture_attribute_2.location = (-1020.0, 100.0)
            group_13.location = (-1200.0, 0.0)
            reroute_5.location = (-440.0, -340.0)
            reroute_001_5.location = (-200.0, -340.0)
            reroute_002_4.location = (40.0, -340.0)
            reroute_003_2.location = (280.0, -340.0)
            separate_geometry_5.location = (540.0, 20.0)
            group_001_6.location = (540.0, -160.0)

            # Set dimensions
            group_output_35.width, group_output_35.height = 140.0, 100.0
            group_input_35.width, group_input_35.height = 140.0, 100.0
            store_named_attribute_002_1.width, store_named_attribute_002_1.height = (
                172.44415283203125,
                100.0,
            )
            store_named_attribute_003_1.width, store_named_attribute_003_1.height = (
                169.44052124023438,
                100.0,
            )
            store_named_attribute_004_1.width, store_named_attribute_004_1.height = (
                184.14559936523438,
                100.0,
            )
            store_named_attribute_005_1.width, store_named_attribute_005_1.height = (
                169.42654418945312,
                100.0,
            )
            mn_topo_point_mask_005.width, mn_topo_point_mask_005.height = (
                172.76019287109375,
                100.0,
            )
            mn_topo_point_mask_006.width, mn_topo_point_mask_006.height = (
                185.9674072265625,
                100.0,
            )
            mn_topo_point_mask_007.width, mn_topo_point_mask_007.height = (
                168.1260986328125,
                100.0,
            )
            mn_topo_point_mask_004.width, mn_topo_point_mask_004.height = (
                178.538330078125,
                100.0,
            )
            capture_attribute_2.width, capture_attribute_2.height = 140.0, 100.0
            group_13.width, group_13.height = 140.0, 100.0
            reroute_5.width, reroute_5.height = 16.0, 100.0
            reroute_001_5.width, reroute_001_5.height = 16.0, 100.0
            reroute_002_4.width, reroute_002_4.height = 16.0, 100.0
            reroute_003_2.width, reroute_003_2.height = 16.0, 100.0
            separate_geometry_5.width, separate_geometry_5.height = 140.0, 100.0
            group_001_6.width, group_001_6.height = 140.0, 100.0

            # initialize _mn_topo_assign_backbone links
            # mn_topo_point_mask_007.Is Valid -> store_named_attribute_005_1.Selection
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_007.outputs[0], store_named_attribute_005_1.inputs[1]
            )
            # mn_topo_point_mask_006.Position -> store_named_attribute_004_1.Value
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_006.outputs[2], store_named_attribute_004_1.inputs[3]
            )
            # mn_topo_point_mask_005.Position -> store_named_attribute_003_1.Value
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_005.outputs[2], store_named_attribute_003_1.inputs[3]
            )
            # store_named_attribute_004_1.Geometry -> store_named_attribute_003_1.Geometry
            _mn_topo_assign_backbone.links.new(
                store_named_attribute_004_1.outputs[0],
                store_named_attribute_003_1.inputs[0],
            )
            # store_named_attribute_003_1.Geometry -> store_named_attribute_005_1.Geometry
            _mn_topo_assign_backbone.links.new(
                store_named_attribute_003_1.outputs[0],
                store_named_attribute_005_1.inputs[0],
            )
            # store_named_attribute_002_1.Geometry -> store_named_attribute_004_1.Geometry
            _mn_topo_assign_backbone.links.new(
                store_named_attribute_002_1.outputs[0],
                store_named_attribute_004_1.inputs[0],
            )
            # mn_topo_point_mask_007.Position -> store_named_attribute_005_1.Value
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_007.outputs[2], store_named_attribute_005_1.inputs[3]
            )
            # mn_topo_point_mask_006.Is Valid -> store_named_attribute_004_1.Selection
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_006.outputs[0], store_named_attribute_004_1.inputs[1]
            )
            # mn_topo_point_mask_005.Is Valid -> store_named_attribute_003_1.Selection
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_005.outputs[0], store_named_attribute_003_1.inputs[1]
            )
            # capture_attribute_2.Geometry -> store_named_attribute_002_1.Geometry
            _mn_topo_assign_backbone.links.new(
                capture_attribute_2.outputs[0], store_named_attribute_002_1.inputs[0]
            )
            # store_named_attribute_005_1.Geometry -> group_output_35.Atoms
            _mn_topo_assign_backbone.links.new(
                store_named_attribute_005_1.outputs[0], group_output_35.inputs[0]
            )
            # group_input_35.Atoms -> capture_attribute_2.Geometry
            _mn_topo_assign_backbone.links.new(
                group_input_35.outputs[0], capture_attribute_2.inputs[0]
            )
            # group_13.Unique Group ID -> capture_attribute_2.Unique Group ID
            _mn_topo_assign_backbone.links.new(
                group_13.outputs[0], capture_attribute_2.inputs[1]
            )
            # reroute_001_5.Output -> mn_topo_point_mask_006.Group ID
            _mn_topo_assign_backbone.links.new(
                reroute_001_5.outputs[0], mn_topo_point_mask_006.inputs[2]
            )
            # capture_attribute_2.Unique Group ID -> reroute_5.Input
            _mn_topo_assign_backbone.links.new(
                capture_attribute_2.outputs[1], reroute_5.inputs[0]
            )
            # reroute_5.Output -> reroute_001_5.Input
            _mn_topo_assign_backbone.links.new(
                reroute_5.outputs[0], reroute_001_5.inputs[0]
            )
            # reroute_002_4.Output -> mn_topo_point_mask_005.Group ID
            _mn_topo_assign_backbone.links.new(
                reroute_002_4.outputs[0], mn_topo_point_mask_005.inputs[2]
            )
            # reroute_001_5.Output -> reroute_002_4.Input
            _mn_topo_assign_backbone.links.new(
                reroute_001_5.outputs[0], reroute_002_4.inputs[0]
            )
            # reroute_003_2.Output -> mn_topo_point_mask_007.Group ID
            _mn_topo_assign_backbone.links.new(
                reroute_003_2.outputs[0], mn_topo_point_mask_007.inputs[2]
            )
            # reroute_002_4.Output -> reroute_003_2.Input
            _mn_topo_assign_backbone.links.new(
                reroute_002_4.outputs[0], reroute_003_2.inputs[0]
            )
            # capture_attribute_2.Unique Group ID -> group_output_35.Unique Group ID
            _mn_topo_assign_backbone.links.new(
                capture_attribute_2.outputs[1], group_output_35.inputs[1]
            )
            # mn_topo_point_mask_004.Is Valid -> store_named_attribute_002_1.Selection
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_004.outputs[0], store_named_attribute_002_1.inputs[1]
            )
            # mn_topo_point_mask_004.Position -> store_named_attribute_002_1.Value
            _mn_topo_assign_backbone.links.new(
                mn_topo_point_mask_004.outputs[2], store_named_attribute_002_1.inputs[3]
            )
            # store_named_attribute_005_1.Geometry -> separate_geometry_5.Geometry
            _mn_topo_assign_backbone.links.new(
                store_named_attribute_005_1.outputs[0], separate_geometry_5.inputs[0]
            )
            # separate_geometry_5.Selection -> group_output_35.CA Atoms
            _mn_topo_assign_backbone.links.new(
                separate_geometry_5.outputs[0], group_output_35.inputs[2]
            )
            # group_001_6.Selection -> separate_geometry_5.Selection
            _mn_topo_assign_backbone.links.new(
                group_001_6.outputs[0], separate_geometry_5.inputs[1]
            )
            # reroute_5.Output -> mn_topo_point_mask_004.Group ID
            _mn_topo_assign_backbone.links.new(
                reroute_5.outputs[0], mn_topo_point_mask_004.inputs[2]
            )
            return _mn_topo_assign_backbone

        _mn_topo_assign_backbone = _mn_topo_assign_backbone_node_group()

        # initialize _is_odd node group
        def _is_odd_node_group():
            _is_odd = bpy.data.node_groups.new(type="GeometryNodeTree", name=".is_odd")

            _is_odd.color_tag = "NONE"
            _is_odd.description = ""

            # _is_odd interface
            # Socket is_even
            is_even_socket = _is_odd.interface.new_socket(
                name="is_even", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_even_socket.attribute_domain = "POINT"

            # Socket is_odd
            is_odd_socket = _is_odd.interface.new_socket(
                name="is_odd", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_odd_socket.attribute_domain = "POINT"

            # Socket Value
            value_socket_7 = _is_odd.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketInt"
            )
            value_socket_7.subtype = "NONE"
            value_socket_7.default_value = 0
            value_socket_7.min_value = -2147483648
            value_socket_7.max_value = 2147483647
            value_socket_7.attribute_domain = "POINT"

            # initialize _is_odd nodes
            # node Group Input
            group_input_36 = _is_odd.nodes.new("NodeGroupInput")
            group_input_36.name = "Group Input"

            # node Group Output
            group_output_36 = _is_odd.nodes.new("NodeGroupOutput")
            group_output_36.name = "Group Output"
            group_output_36.is_active_output = True

            # node Boolean Math
            boolean_math_10 = _is_odd.nodes.new("FunctionNodeBooleanMath")
            boolean_math_10.name = "Boolean Math"
            boolean_math_10.operation = "NOT"

            # node Compare.011
            compare_011 = _is_odd.nodes.new("FunctionNodeCompare")
            compare_011.name = "Compare.011"
            compare_011.data_type = "FLOAT"
            compare_011.mode = "ELEMENT"
            compare_011.operation = "EQUAL"
            # B
            compare_011.inputs[1].default_value = 0.0
            # Epsilon
            compare_011.inputs[12].default_value = 0.0010000000474974513

            # node Math.008
            math_008 = _is_odd.nodes.new("ShaderNodeMath")
            math_008.name = "Math.008"
            math_008.operation = "FLOORED_MODULO"
            math_008.use_clamp = False
            # Value_001
            math_008.inputs[1].default_value = 2.0

            # Set locations
            group_input_36.location = (-300.0, 80.0)
            group_output_36.location = (240.0, 120.0)
            boolean_math_10.location = (240.0, 20.0)
            compare_011.location = (60.0, 120.0)
            math_008.location = (-100.0, 120.0)

            # Set dimensions
            group_input_36.width, group_input_36.height = 140.0, 100.0
            group_output_36.width, group_output_36.height = 140.0, 100.0
            boolean_math_10.width, boolean_math_10.height = 140.0, 100.0
            compare_011.width, compare_011.height = 140.0, 100.0
            math_008.width, math_008.height = 140.0, 100.0

            # initialize _is_odd links
            # group_input_36.Value -> math_008.Value
            _is_odd.links.new(group_input_36.outputs[0], math_008.inputs[0])
            # compare_011.Result -> group_output_36.is_even
            _is_odd.links.new(compare_011.outputs[0], group_output_36.inputs[0])
            # compare_011.Result -> boolean_math_10.Boolean
            _is_odd.links.new(compare_011.outputs[0], boolean_math_10.inputs[0])
            # boolean_math_10.Boolean -> group_output_36.is_odd
            _is_odd.links.new(boolean_math_10.outputs[0], group_output_36.inputs[1])
            # math_008.Value -> compare_011.A
            _is_odd.links.new(math_008.outputs[0], compare_011.inputs[0])
            return _is_odd

        _is_odd = _is_odd_node_group()

        # initialize _mn_cartoon_bs_alternate_axis node group
        def _mn_cartoon_bs_alternate_axis_node_group():
            _mn_cartoon_bs_alternate_axis = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_cartoon_bs_alternate_axis"
            )

            _mn_cartoon_bs_alternate_axis.color_tag = "NONE"
            _mn_cartoon_bs_alternate_axis.description = ""

            # _mn_cartoon_bs_alternate_axis interface
            # Socket Z Vector for Euler
            z_vector_for_euler_socket = (
                _mn_cartoon_bs_alternate_axis.interface.new_socket(
                    name="Z Vector for Euler",
                    in_out="OUTPUT",
                    socket_type="NodeSocketVector",
                )
            )
            z_vector_for_euler_socket.subtype = "NONE"
            z_vector_for_euler_socket.default_value = (0.0, 0.0, 0.0)
            z_vector_for_euler_socket.min_value = -3.4028234663852886e38
            z_vector_for_euler_socket.max_value = 3.4028234663852886e38
            z_vector_for_euler_socket.attribute_domain = "POINT"

            # Socket X Vector for Euler
            x_vector_for_euler_socket = (
                _mn_cartoon_bs_alternate_axis.interface.new_socket(
                    name="X Vector for Euler",
                    in_out="OUTPUT",
                    socket_type="NodeSocketVector",
                )
            )
            x_vector_for_euler_socket.subtype = "NONE"
            x_vector_for_euler_socket.default_value = (0.0, 0.0, 0.0)
            x_vector_for_euler_socket.min_value = -3.4028234663852886e38
            x_vector_for_euler_socket.max_value = 3.4028234663852886e38
            x_vector_for_euler_socket.attribute_domain = "POINT"

            # Socket N
            n_socket = _mn_cartoon_bs_alternate_axis.interface.new_socket(
                name="N", in_out="INPUT", socket_type="NodeSocketVector"
            )
            n_socket.subtype = "NONE"
            n_socket.default_value = (0.0, 0.0, 0.0)
            n_socket.min_value = -3.4028234663852886e38
            n_socket.max_value = 3.4028234663852886e38
            n_socket.attribute_domain = "POINT"

            # Socket C
            c_socket = _mn_cartoon_bs_alternate_axis.interface.new_socket(
                name="C", in_out="INPUT", socket_type="NodeSocketVector"
            )
            c_socket.subtype = "NONE"
            c_socket.default_value = (0.0, 0.0, 0.0)
            c_socket.min_value = -3.4028234663852886e38
            c_socket.max_value = 3.4028234663852886e38
            c_socket.attribute_domain = "POINT"

            # Socket O
            o_socket = _mn_cartoon_bs_alternate_axis.interface.new_socket(
                name="O", in_out="INPUT", socket_type="NodeSocketVector"
            )
            o_socket.subtype = "NONE"
            o_socket.default_value = (0.0, 0.0, 0.0)
            o_socket.min_value = -3.4028234663852886e38
            o_socket.max_value = 3.4028234663852886e38
            o_socket.attribute_domain = "POINT"

            # initialize _mn_cartoon_bs_alternate_axis nodes
            # node Frame
            frame_4 = _mn_cartoon_bs_alternate_axis.nodes.new("NodeFrame")
            frame_4.label = "Only the last AA in an AH is selected"
            frame_4.name = "Frame"
            frame_4.label_size = 20
            frame_4.shrink = True

            # node Vector Math.005
            vector_math_005 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_005.name = "Vector Math.005"
            vector_math_005.operation = "SCALE"

            # node Blur Attribute.001
            blur_attribute_001 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_001.name = "Blur Attribute.001"
            blur_attribute_001.data_type = "FLOAT_VECTOR"
            # Iterations
            blur_attribute_001.inputs[1].default_value = 3
            # Weight
            blur_attribute_001.inputs[2].default_value = 1.0

            # node Switch.002
            switch_002_1 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeSwitch")
            switch_002_1.name = "Switch.002"
            switch_002_1.input_type = "VECTOR"

            # node Group Output
            group_output_37 = _mn_cartoon_bs_alternate_axis.nodes.new("NodeGroupOutput")
            group_output_37.name = "Group Output"
            group_output_37.is_active_output = True

            # node Index.001
            index_001 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "GeometryNodeInputIndex"
            )
            index_001.name = "Index.001"

            # node Boolean Math.010
            boolean_math_010 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_010.name = "Boolean Math.010"
            boolean_math_010.operation = "AND"

            # node Reroute.001
            reroute_001_6 = _mn_cartoon_bs_alternate_axis.nodes.new("NodeReroute")
            reroute_001_6.name = "Reroute.001"
            # node Vector Math.004
            vector_math_004_2 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_2.label = "N -> C"
            vector_math_004_2.name = "Vector Math.004"
            vector_math_004_2.operation = "SUBTRACT"

            # node Group Input
            group_input_37 = _mn_cartoon_bs_alternate_axis.nodes.new("NodeGroupInput")
            group_input_37.name = "Group Input"

            # node Vector Math
            vector_math_1 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_1.label = "C --> O"
            vector_math_1.name = "Vector Math"
            vector_math_1.operation = "SUBTRACT"

            # node Integer
            integer_4 = _mn_cartoon_bs_alternate_axis.nodes.new("FunctionNodeInputInt")
            integer_4.name = "Integer"
            integer_4.integer = -1

            # node Compare
            compare_4 = _mn_cartoon_bs_alternate_axis.nodes.new("FunctionNodeCompare")
            compare_4.name = "Compare"
            compare_4.data_type = "INT"
            compare_4.mode = "ELEMENT"
            compare_4.operation = "GREATER_THAN"

            # node Group.014
            group_014_1 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeGroup")
            group_014_1.name = "Group.014"
            group_014_1.node_tree = _sec_struct_counter

            # node Boolean Math
            boolean_math_11 = _mn_cartoon_bs_alternate_axis.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_11.name = "Boolean Math"
            boolean_math_11.operation = "AND"

            # node Switch
            switch_6 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeSwitch")
            switch_6.name = "Switch"
            switch_6.input_type = "VECTOR"

            # node Group.012
            group_012 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeGroup")
            group_012.name = "Group.012"
            group_012.node_tree = _mn_select_sec_struct
            group_012.outputs[1].hide = True
            group_012.outputs[2].hide = True
            group_012.outputs[3].hide = True
            # Socket_1
            group_012.inputs[0].default_value = True

            # node Switch.008
            switch_008_1 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeSwitch")
            switch_008_1.name = "Switch.008"
            switch_008_1.input_type = "INT"
            # False
            switch_008_1.inputs[1].default_value = 1
            # True
            switch_008_1.inputs[2].default_value = -1

            # node Group
            group_14 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeGroup")
            group_14.name = "Group"
            group_14.node_tree = _field_offset
            group_14.inputs[1].hide = True
            group_14.inputs[2].hide = True
            group_14.inputs[3].hide = True
            group_14.outputs[1].hide = True
            group_14.outputs[2].hide = True
            group_14.outputs[3].hide = True
            # Input_3
            group_14.inputs[1].default_value = False
            # Input_5
            group_14.inputs[2].default_value = 0
            # Input_7
            group_14.inputs[3].default_value = 0.0

            # node Group.011
            group_011 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeGroup")
            group_011.name = "Group.011"
            group_011.node_tree = _mn_select_sec_struct
            # Socket_1
            group_011.inputs[0].default_value = True

            # node Group.005
            group_005_1 = _mn_cartoon_bs_alternate_axis.nodes.new("GeometryNodeGroup")
            group_005_1.name = "Group.005"
            group_005_1.node_tree = _is_odd

            # Set parents
            compare_4.parent = frame_4
            group_014_1.parent = frame_4
            boolean_math_11.parent = frame_4
            group_012.parent = frame_4

            # Set locations
            frame_4.location = (-86.11199951171875, 65.14605712890625)
            vector_math_005.location = (60.0, 440.0)
            blur_attribute_001.location = (220.0, 400.0)
            switch_002_1.location = (220.0, 580.0)
            group_output_37.location = (400.0, 580.0)
            index_001.location = (-381.36767578125, 1.1884498596191406)
            boolean_math_010.location = (-41.36767578125, 101.18844604492188)
            reroute_001_6.location = (-897.6007080078125, 360.3312683105469)
            vector_math_004_2.location = (-817.6007080078125, 540.3312377929688)
            group_input_37.location = (-1077.6007080078125, 420.3312683105469)
            vector_math_1.location = (-817.6007080078125, 400.3312683105469)
            integer_4.location = (-822.031982421875, 264.41668701171875)
            compare_4.location = (-526.031982421875, 831.0416870117188)
            group_014_1.location = (-854.4696655273438, 787.1783447265625)
            boolean_math_11.location = (-366.0320129394531, 831.0416870117188)
            switch_6.location = (-189.45494079589844, 480.51531982421875)
            group_012.location = (-666.031982421875, 651.0416870117188)
            switch_008_1.location = (120.0, 100.0)
            group_14.location = (-622.031982421875, 344.41668701171875)
            group_011.location = (-361.36767578125, 161.18844604492188)
            group_005_1.location = (-221.36767578125, 1.1884498596191406)

            # Set dimensions
            frame_4.width, frame_4.height = 688.7999877929688, 326.0
            vector_math_005.width, vector_math_005.height = 140.0, 100.0
            blur_attribute_001.width, blur_attribute_001.height = 140.0, 100.0
            switch_002_1.width, switch_002_1.height = 140.0, 100.0
            group_output_37.width, group_output_37.height = 140.0, 100.0
            index_001.width, index_001.height = 140.0, 100.0
            boolean_math_010.width, boolean_math_010.height = 140.0, 100.0
            reroute_001_6.width, reroute_001_6.height = 16.0, 100.0
            vector_math_004_2.width, vector_math_004_2.height = 140.0, 100.0
            group_input_37.width, group_input_37.height = 140.0, 100.0
            vector_math_1.width, vector_math_1.height = 140.0, 100.0
            integer_4.width, integer_4.height = 140.0, 100.0
            compare_4.width, compare_4.height = 140.0, 100.0
            group_014_1.width, group_014_1.height = 140.0, 100.0
            boolean_math_11.width, boolean_math_11.height = 140.0, 100.0
            switch_6.width, switch_6.height = 140.0, 100.0
            group_012.width, group_012.height = 277.2730712890625, 100.0
            switch_008_1.width, switch_008_1.height = 140.0, 100.0
            group_14.width, group_14.height = 196.1611328125, 100.0
            group_011.width, group_011.height = 277.2730712890625, 100.0
            group_005_1.width, group_005_1.height = 140.0, 100.0

            # initialize _mn_cartoon_bs_alternate_axis links
            # vector_math_005.Vector -> switch_002_1.False
            _mn_cartoon_bs_alternate_axis.links.new(
                vector_math_005.outputs[0], switch_002_1.inputs[1]
            )
            # blur_attribute_001.Value -> switch_002_1.True
            _mn_cartoon_bs_alternate_axis.links.new(
                blur_attribute_001.outputs[0], switch_002_1.inputs[2]
            )
            # group_011.Is Sheet -> switch_002_1.Switch
            _mn_cartoon_bs_alternate_axis.links.new(
                group_011.outputs[1], switch_002_1.inputs[0]
            )
            # group_input_37.C -> reroute_001_6.Input
            _mn_cartoon_bs_alternate_axis.links.new(
                group_input_37.outputs[1], reroute_001_6.inputs[0]
            )
            # boolean_math_010.Boolean -> switch_008_1.Switch
            _mn_cartoon_bs_alternate_axis.links.new(
                boolean_math_010.outputs[0], switch_008_1.inputs[0]
            )
            # group_005_1.is_even -> boolean_math_010.Boolean
            _mn_cartoon_bs_alternate_axis.links.new(
                group_005_1.outputs[0], boolean_math_010.inputs[1]
            )
            # index_001.Index -> group_005_1.Value
            _mn_cartoon_bs_alternate_axis.links.new(
                index_001.outputs[0], group_005_1.inputs[0]
            )
            # reroute_001_6.Output -> vector_math_1.Vector
            _mn_cartoon_bs_alternate_axis.links.new(
                reroute_001_6.outputs[0], vector_math_1.inputs[0]
            )
            # group_011.Is Sheet -> boolean_math_010.Boolean
            _mn_cartoon_bs_alternate_axis.links.new(
                group_011.outputs[1], boolean_math_010.inputs[0]
            )
            # reroute_001_6.Output -> vector_math_004_2.Vector
            _mn_cartoon_bs_alternate_axis.links.new(
                reroute_001_6.outputs[0], vector_math_004_2.inputs[1]
            )
            # vector_math_005.Vector -> blur_attribute_001.Value
            _mn_cartoon_bs_alternate_axis.links.new(
                vector_math_005.outputs[0], blur_attribute_001.inputs[0]
            )
            # switch_008_1.Output -> vector_math_005.Scale
            _mn_cartoon_bs_alternate_axis.links.new(
                switch_008_1.outputs[0], vector_math_005.inputs[3]
            )
            # group_input_37.O -> vector_math_1.Vector
            _mn_cartoon_bs_alternate_axis.links.new(
                group_input_37.outputs[2], vector_math_1.inputs[1]
            )
            # switch_002_1.Output -> group_output_37.Z Vector for Euler
            _mn_cartoon_bs_alternate_axis.links.new(
                switch_002_1.outputs[0], group_output_37.inputs[0]
            )
            # vector_math_004_2.Vector -> group_output_37.X Vector for Euler
            _mn_cartoon_bs_alternate_axis.links.new(
                vector_math_004_2.outputs[0], group_output_37.inputs[1]
            )
            # group_input_37.N -> vector_math_004_2.Vector
            _mn_cartoon_bs_alternate_axis.links.new(
                group_input_37.outputs[0], vector_math_004_2.inputs[0]
            )
            # switch_6.Output -> vector_math_005.Vector
            _mn_cartoon_bs_alternate_axis.links.new(
                switch_6.outputs[0], vector_math_005.inputs[0]
            )
            # group_014_1.Leading -> compare_4.A
            _mn_cartoon_bs_alternate_axis.links.new(
                group_014_1.outputs[0], compare_4.inputs[2]
            )
            # group_014_1.Trailing -> compare_4.B
            _mn_cartoon_bs_alternate_axis.links.new(
                group_014_1.outputs[1], compare_4.inputs[3]
            )
            # compare_4.Result -> boolean_math_11.Boolean
            _mn_cartoon_bs_alternate_axis.links.new(
                compare_4.outputs[0], boolean_math_11.inputs[0]
            )
            # group_012.Is Helix -> boolean_math_11.Boolean
            _mn_cartoon_bs_alternate_axis.links.new(
                group_012.outputs[0], boolean_math_11.inputs[1]
            )
            # vector_math_1.Vector -> switch_6.False
            _mn_cartoon_bs_alternate_axis.links.new(
                vector_math_1.outputs[0], switch_6.inputs[1]
            )
            # vector_math_1.Vector -> group_14.Field
            _mn_cartoon_bs_alternate_axis.links.new(
                vector_math_1.outputs[0], group_14.inputs[0]
            )
            # group_14.Field -> switch_6.True
            _mn_cartoon_bs_alternate_axis.links.new(
                group_14.outputs[0], switch_6.inputs[2]
            )
            # integer_4.Integer -> group_14.Offset
            _mn_cartoon_bs_alternate_axis.links.new(
                integer_4.outputs[0], group_14.inputs[4]
            )
            # boolean_math_11.Boolean -> switch_6.Switch
            _mn_cartoon_bs_alternate_axis.links.new(
                boolean_math_11.outputs[0], switch_6.inputs[0]
            )
            return _mn_cartoon_bs_alternate_axis

        _mn_cartoon_bs_alternate_axis = _mn_cartoon_bs_alternate_axis_node_group()

        # initialize _atoms_to_curves node group
        def _atoms_to_curves_node_group():
            _atoms_to_curves = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".atoms_to_curves"
            )

            _atoms_to_curves.color_tag = "NONE"
            _atoms_to_curves.description = ""

            _atoms_to_curves.is_modifier = True

            # _atoms_to_curves interface
            # Socket CA Mesh Line
            ca_mesh_line_socket = _atoms_to_curves.interface.new_socket(
                name="CA Mesh Line", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ca_mesh_line_socket.attribute_domain = "POINT"

            # Socket CA Splines
            ca_splines_socket = _atoms_to_curves.interface.new_socket(
                name="CA Splines", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ca_splines_socket.attribute_domain = "POINT"

            # Socket AH Splines
            ah_splines_socket = _atoms_to_curves.interface.new_socket(
                name="AH Splines", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ah_splines_socket.attribute_domain = "POINT"

            # Socket AH Mesh Line
            ah_mesh_line_socket = _atoms_to_curves.interface.new_socket(
                name="AH Mesh Line", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            ah_mesh_line_socket.attribute_domain = "POINT"

            # Socket BS Splines
            bs_splines_socket = _atoms_to_curves.interface.new_socket(
                name="BS Splines", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bs_splines_socket.attribute_domain = "POINT"

            # Socket BS Mesh Line
            bs_mesh_line_socket = _atoms_to_curves.interface.new_socket(
                name="BS Mesh Line", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bs_mesh_line_socket.attribute_domain = "POINT"

            # Socket Loop Splines
            loop_splines_socket = _atoms_to_curves.interface.new_socket(
                name="Loop Splines", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            loop_splines_socket.attribute_domain = "POINT"

            # Socket Loop Mesh Line
            loop_mesh_line_socket = _atoms_to_curves.interface.new_socket(
                name="Loop Mesh Line", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            loop_mesh_line_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_10 = _atoms_to_curves.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_10.attribute_domain = "POINT"
            atoms_socket_10.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_13 = _atoms_to_curves.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_13.attribute_domain = "POINT"
            selection_socket_13.hide_value = True
            selection_socket_13.description = "Selection of atoms to apply this node to"

            # Socket BS Smoothing
            bs_smoothing_socket = _atoms_to_curves.interface.new_socket(
                name="BS Smoothing", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            bs_smoothing_socket.subtype = "FACTOR"
            bs_smoothing_socket.default_value = 1.0
            bs_smoothing_socket.min_value = 0.0
            bs_smoothing_socket.max_value = 1.0
            bs_smoothing_socket.attribute_domain = "POINT"

            # initialize _atoms_to_curves nodes
            # node Frame.006
            frame_006_1 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_006_1.label = "Break mesh where chain_id mismatch or distance cutoff"
            frame_006_1.name = "Frame.006"
            frame_006_1.label_size = 20
            frame_006_1.shrink = True

            # node Frame.007
            frame_007_1 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_007_1.label = "Get immediate + and -- AA CA positions"
            frame_007_1.name = "Frame.007"
            frame_007_1.label_size = 20
            frame_007_1.shrink = True

            # node Frame.008
            frame_008 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_008.label = "Calculate guide vectors for orientations"
            frame_008.name = "Frame.008"
            frame_008.label_size = 20
            frame_008.shrink = True

            # node Frame
            frame_5 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_5.label = (
                "Catch where it changes straight from AH to BS, could be better"
            )
            frame_5.name = "Frame"
            frame_5.label_size = 20
            frame_5.shrink = True

            # node Frame.001
            frame_001_2 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_001_2.label = "Split by Secondary Structure"
            frame_001_2.name = "Frame.001"
            frame_001_2.label_size = 20
            frame_001_2.shrink = True

            # node Frame.002
            frame_002_2 = _atoms_to_curves.nodes.new("NodeFrame")
            frame_002_2.label = "Turn backboen points to curves"
            frame_002_2.name = "Frame.002"
            frame_002_2.label_size = 20
            frame_002_2.shrink = True

            # node Compare.001
            compare_001_4 = _atoms_to_curves.nodes.new("FunctionNodeCompare")
            compare_001_4.name = "Compare.001"
            compare_001_4.data_type = "INT"
            compare_001_4.mode = "ELEMENT"
            compare_001_4.operation = "NOT_EQUAL"

            # node Named Attribute.011
            named_attribute_011 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_011.name = "Named Attribute.011"
            named_attribute_011.data_type = "INT"
            # Name
            named_attribute_011.inputs[0].default_value = "chain_id"

            # node Evaluate at Index
            evaluate_at_index_4 = _atoms_to_curves.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_4.name = "Evaluate at Index"
            evaluate_at_index_4.data_type = "INT"
            evaluate_at_index_4.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_2 = _atoms_to_curves.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_2.name = "Evaluate at Index.001"
            evaluate_at_index_001_2.data_type = "INT"
            evaluate_at_index_001_2.domain = "POINT"

            # node Reroute.021
            reroute_021 = _atoms_to_curves.nodes.new("NodeReroute")
            reroute_021.name = "Reroute.021"
            # node Edge Vertices
            edge_vertices_2 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_2.name = "Edge Vertices"

            # node Vector Math
            vector_math_2 = _atoms_to_curves.nodes.new("ShaderNodeVectorMath")
            vector_math_2.name = "Vector Math"
            vector_math_2.operation = "DISTANCE"

            # node Compare
            compare_5 = _atoms_to_curves.nodes.new("FunctionNodeCompare")
            compare_5.name = "Compare"
            compare_5.data_type = "FLOAT"
            compare_5.mode = "ELEMENT"
            compare_5.operation = "GREATER_THAN"

            # node Math.001
            math_001_4 = _atoms_to_curves.nodes.new("ShaderNodeMath")
            math_001_4.name = "Math.001"
            math_001_4.operation = "DIVIDE"
            math_001_4.use_clamp = False
            # Value
            math_001_4.inputs[0].default_value = 60.0
            # Value_001
            math_001_4.inputs[1].default_value = 1000.0

            # node Boolean Math.001
            boolean_math_001_8 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_8.name = "Boolean Math.001"
            boolean_math_001_8.operation = "OR"

            # node Delete Geometry
            delete_geometry_1 = _atoms_to_curves.nodes.new("GeometryNodeDeleteGeometry")
            delete_geometry_1.name = "Delete Geometry"
            delete_geometry_1.domain = "EDGE"
            delete_geometry_1.mode = "ALL"

            # node Store Named Attribute.001
            store_named_attribute_001_1 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_1.name = "Store Named Attribute.001"
            store_named_attribute_001_1.data_type = "FLOAT_VECTOR"
            store_named_attribute_001_1.domain = "POINT"
            # Selection
            store_named_attribute_001_1.inputs[1].default_value = True
            # Name
            store_named_attribute_001_1.inputs[2].default_value = "reverse"

            # node Store Named Attribute
            store_named_attribute_3 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_3.name = "Store Named Attribute"
            store_named_attribute_3.data_type = "FLOAT_VECTOR"
            store_named_attribute_3.domain = "POINT"
            # Selection
            store_named_attribute_3.inputs[1].default_value = True
            # Name
            store_named_attribute_3.inputs[2].default_value = "forward"

            # node Position.002
            position_002_2 = _atoms_to_curves.nodes.new("GeometryNodeInputPosition")
            position_002_2.name = "Position.002"

            # node Store Named Attribute.015
            store_named_attribute_015 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_015.name = "Store Named Attribute.015"
            store_named_attribute_015.data_type = "FLOAT_VECTOR"
            store_named_attribute_015.domain = "POINT"
            # Selection
            store_named_attribute_015.inputs[1].default_value = True
            # Name
            store_named_attribute_015.inputs[2].default_value = "guide_Z"

            # node Store Named Attribute.016
            store_named_attribute_016 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_016.name = "Store Named Attribute.016"
            store_named_attribute_016.data_type = "FLOAT_VECTOR"
            store_named_attribute_016.domain = "POINT"
            # Selection
            store_named_attribute_016.inputs[1].default_value = True
            # Name
            store_named_attribute_016.inputs[2].default_value = "guide_X"

            # node Store Named Attribute.017
            store_named_attribute_017 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_017.name = "Store Named Attribute.017"
            store_named_attribute_017.mute = True
            store_named_attribute_017.data_type = "FLOAT_VECTOR"
            store_named_attribute_017.domain = "POINT"
            # Selection
            store_named_attribute_017.inputs[1].default_value = True
            # Name
            store_named_attribute_017.inputs[2].default_value = "guide_Y"
            # Value
            store_named_attribute_017.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Named Attribute.012
            named_attribute_012 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_012.name = "Named Attribute.012"
            named_attribute_012.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_012.inputs[0].default_value = "backbone_N"

            # node Named Attribute.013
            named_attribute_013 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_013.name = "Named Attribute.013"
            named_attribute_013.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_013.inputs[0].default_value = "backbone_O"

            # node Named Attribute.014
            named_attribute_014 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_014.name = "Named Attribute.014"
            named_attribute_014.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_014.inputs[0].default_value = "backbone_C"

            # node Group.022
            group_022 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_022.name = "Group.022"
            group_022.node_tree = _field_offset
            # Input_0
            group_022.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_022.inputs[2].default_value = 0
            # Input_7
            group_022.inputs[3].default_value = 0.0
            # Input_1
            group_022.inputs[4].default_value = -1

            # node Group.035
            group_035 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_035.name = "Group.035"
            group_035.node_tree = _field_offset
            # Input_0
            group_035.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_035.inputs[2].default_value = 0
            # Input_7
            group_035.inputs[3].default_value = 0.0
            # Input_1
            group_035.inputs[4].default_value = 1

            # node Boolean Math.005
            boolean_math_005 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_005.name = "Boolean Math.005"
            boolean_math_005.operation = "AND"

            # node Boolean Math.009
            boolean_math_009 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_009.name = "Boolean Math.009"
            boolean_math_009.operation = "OR"

            # node Boolean Math.007
            boolean_math_007_1 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_007_1.name = "Boolean Math.007"
            boolean_math_007_1.operation = "AND"

            # node Group.036
            group_036 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_036.name = "Group.036"
            group_036.node_tree = _field_offset
            # Input_0
            group_036.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_036.inputs[2].default_value = 0
            # Input_7
            group_036.inputs[3].default_value = 0.0
            # Input_1
            group_036.inputs[4].default_value = -1

            # node Boolean Math.010
            boolean_math_010_1 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_010_1.name = "Boolean Math.010"
            boolean_math_010_1.operation = "AND"

            # node Boolean Math.006
            boolean_math_006 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_006.name = "Boolean Math.006"
            boolean_math_006.operation = "OR"

            # node Boolean Math.008
            boolean_math_008_1 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_008_1.name = "Boolean Math.008"
            boolean_math_008_1.operation = "AND"

            # node Boolean Math.011
            boolean_math_011 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_011.name = "Boolean Math.011"
            boolean_math_011.operation = "OR"

            # node Group.034
            group_034 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_034.name = "Group.034"
            group_034.node_tree = _field_offset
            # Input_0
            group_034.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_5
            group_034.inputs[2].default_value = 0
            # Input_7
            group_034.inputs[3].default_value = 0.0
            # Input_1
            group_034.inputs[4].default_value = 1

            # node Group.024
            group_024_1 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_024_1.name = "Group.024"
            group_024_1.node_tree = _mn_select_sec_struct
            # Socket_1
            group_024_1.inputs[0].default_value = True

            # node Boolean Math.004
            boolean_math_004_1 = _atoms_to_curves.nodes.new("FunctionNodeBooleanMath")
            boolean_math_004_1.name = "Boolean Math.004"
            boolean_math_004_1.operation = "OR"

            # node Mesh to Curve.004
            mesh_to_curve_004 = _atoms_to_curves.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_004.name = "Mesh to Curve.004"
            # Selection
            mesh_to_curve_004.inputs[1].default_value = True

            # node Mesh to Curve.003
            mesh_to_curve_003 = _atoms_to_curves.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_003.name = "Mesh to Curve.003"
            # Selection
            mesh_to_curve_003.inputs[1].default_value = True

            # node Mesh to Curve.001
            mesh_to_curve_001 = _atoms_to_curves.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_001.name = "Mesh to Curve.001"
            # Selection
            mesh_to_curve_001.inputs[1].default_value = True

            # node Mesh to Curve
            mesh_to_curve_2 = _atoms_to_curves.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_2.name = "Mesh to Curve"
            # Selection
            mesh_to_curve_2.inputs[1].default_value = True

            # node Reroute.023
            reroute_023 = _atoms_to_curves.nodes.new("NodeReroute")
            reroute_023.name = "Reroute.023"
            # node Reroute.002
            reroute_002_5 = _atoms_to_curves.nodes.new("NodeReroute")
            reroute_002_5.name = "Reroute.002"
            # node Separate Geometry.006
            separate_geometry_006 = _atoms_to_curves.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_006.name = "Separate Geometry.006"
            separate_geometry_006.domain = "POINT"
            separate_geometry_006.outputs[1].hide = True

            # node Separate Geometry.007
            separate_geometry_007 = _atoms_to_curves.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_007.name = "Separate Geometry.007"
            separate_geometry_007.domain = "POINT"
            separate_geometry_007.outputs[1].hide = True

            # node Separate Geometry.008
            separate_geometry_008 = _atoms_to_curves.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_008.name = "Separate Geometry.008"
            separate_geometry_008.domain = "POINT"
            separate_geometry_008.outputs[1].hide = True

            # node Group Input.001
            group_input_001_3 = _atoms_to_curves.nodes.new("NodeGroupInput")
            group_input_001_3.name = "Group Input.001"

            # node Group Output
            group_output_38 = _atoms_to_curves.nodes.new("NodeGroupOutput")
            group_output_38.name = "Group Output"
            group_output_38.is_active_output = True

            # node Group.012
            group_012_1 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_012_1.name = "Group.012"
            group_012_1.node_tree = _field_offset_vec
            # Input_1
            group_012_1.inputs[1].default_value = -1

            # node Group.013
            group_013 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_013.name = "Group.013"
            group_013.node_tree = _field_offset_vec
            # Input_1
            group_013.inputs[1].default_value = 1

            # node Group
            group_15 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_15.name = "Group"
            group_15.node_tree = _bs_smooth
            # Input_3
            group_15.inputs[2].default_value = 3

            # node Group.023
            group_023 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_023.name = "Group.023"
            group_023.node_tree = _expand_selection
            # Input_2
            group_023.inputs[1].default_value = 1

            # node Group.037
            group_037 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_037.name = "Group.037"
            group_037.node_tree = _mn_select_sec_struct
            # Socket_1
            group_037.inputs[0].default_value = True

            # node Group Input
            group_input_38 = _atoms_to_curves.nodes.new("NodeGroupInput")
            group_input_38.name = "Group Input"

            # node Store Named Attribute.019
            store_named_attribute_019 = _atoms_to_curves.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_019.name = "Store Named Attribute.019"
            store_named_attribute_019.data_type = "INT"
            store_named_attribute_019.domain = "POINT"
            # Selection
            store_named_attribute_019.inputs[1].default_value = True
            # Name
            store_named_attribute_019.inputs[2].default_value = "idx"

            # node Index.002
            index_002 = _atoms_to_curves.nodes.new("GeometryNodeInputIndex")
            index_002.name = "Index.002"

            # node Separate Geometry.003
            separate_geometry_003 = _atoms_to_curves.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003.name = "Separate Geometry.003"
            separate_geometry_003.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001_1 = _atoms_to_curves.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_1.name = "Separate Geometry.001"
            separate_geometry_001_1.domain = "POINT"

            # node Mesh to Points
            mesh_to_points_1 = _atoms_to_curves.nodes.new("GeometryNodeMeshToPoints")
            mesh_to_points_1.name = "Mesh to Points"
            mesh_to_points_1.mode = "VERTICES"
            # Selection
            mesh_to_points_1.inputs[1].default_value = True
            # Position
            mesh_to_points_1.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Radius
            mesh_to_points_1.inputs[3].default_value = 0.05000000074505806

            # node Points to Curves
            points_to_curves = _atoms_to_curves.nodes.new("GeometryNodePointsToCurves")
            points_to_curves.name = "Points to Curves"
            # Weight
            points_to_curves.inputs[2].default_value = 0.0

            # node Curve to Mesh
            curve_to_mesh_2 = _atoms_to_curves.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_2.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_2.inputs[2].default_value = False

            # node Named Attribute.018
            named_attribute_018 = _atoms_to_curves.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_018.name = "Named Attribute.018"
            named_attribute_018.data_type = "INT"
            # Name
            named_attribute_018.inputs[0].default_value = "chain_id"

            # node Group.001
            group_001_7 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_001_7.name = "Group.001"
            group_001_7.node_tree = is_alpha_carbon
            # Socket_1
            group_001_7.inputs[0].default_value = True
            # Socket_3
            group_001_7.inputs[1].default_value = False

            # node Group.006
            group_006_1 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_006_1.name = "Group.006"
            group_006_1.node_tree = _mn_topo_assign_backbone

            # node Group.008
            group_008_1 = _atoms_to_curves.nodes.new("GeometryNodeGroup")
            group_008_1.name = "Group.008"
            group_008_1.node_tree = _mn_cartoon_bs_alternate_axis

            # Set parents
            compare_001_4.parent = frame_006_1
            named_attribute_011.parent = frame_006_1
            evaluate_at_index_4.parent = frame_006_1
            evaluate_at_index_001_2.parent = frame_006_1
            reroute_021.parent = frame_006_1
            edge_vertices_2.parent = frame_006_1
            vector_math_2.parent = frame_006_1
            compare_5.parent = frame_006_1
            math_001_4.parent = frame_006_1
            boolean_math_001_8.parent = frame_006_1
            delete_geometry_1.parent = frame_006_1
            store_named_attribute_001_1.parent = frame_007_1
            store_named_attribute_3.parent = frame_007_1
            position_002_2.parent = frame_007_1
            store_named_attribute_015.parent = frame_008
            store_named_attribute_016.parent = frame_008
            store_named_attribute_017.parent = frame_008
            named_attribute_012.parent = frame_008
            named_attribute_013.parent = frame_008
            named_attribute_014.parent = frame_008
            group_022.parent = frame_5
            group_035.parent = frame_5
            boolean_math_005.parent = frame_5
            boolean_math_009.parent = frame_5
            boolean_math_007_1.parent = frame_5
            group_036.parent = frame_5
            boolean_math_010_1.parent = frame_5
            boolean_math_006.parent = frame_5
            boolean_math_008_1.parent = frame_5
            boolean_math_011.parent = frame_5
            group_034.parent = frame_5
            group_024_1.parent = frame_5
            mesh_to_curve_004.parent = frame_001_2
            mesh_to_curve_003.parent = frame_001_2
            mesh_to_curve_001.parent = frame_001_2
            mesh_to_curve_2.parent = frame_001_2
            reroute_023.parent = frame_001_2
            reroute_002_5.parent = frame_001_2
            separate_geometry_006.parent = frame_001_2
            separate_geometry_007.parent = frame_001_2
            separate_geometry_008.parent = frame_001_2
            group_012_1.parent = frame_007_1
            group_013.parent = frame_007_1
            separate_geometry_003.parent = frame_002_2
            separate_geometry_001_1.parent = frame_002_2
            mesh_to_points_1.parent = frame_002_2
            points_to_curves.parent = frame_002_2
            curve_to_mesh_2.parent = frame_002_2
            named_attribute_018.parent = frame_002_2
            group_001_7.parent = frame_002_2
            group_006_1.parent = frame_002_2
            group_008_1.parent = frame_008

            # Set locations
            frame_006_1.location = (-26.0, 380.0)
            frame_007_1.location = (-168.0, 46.0)
            frame_008.location = (-166.0, 3.0)
            frame_5.location = (6042.0, 80.0)
            frame_001_2.location = (458.0, -8.0)
            frame_002_2.location = (0.0, 0.0)
            compare_001_4.location = (-1907.6533203125, 300.176513671875)
            named_attribute_011.location = (-2304.4140625, 25.7803955078125)
            evaluate_at_index_4.location = (-2067.6533203125, 300.176513671875)
            evaluate_at_index_001_2.location = (-2067.6533203125, 120.176513671875)
            reroute_021.location = (-2087.6533203125, 100.176513671875)
            edge_vertices_2.location = (-2304.4140625, 165.7803955078125)
            vector_math_2.location = (-2064.4140625, -54.2196044921875)
            compare_5.location = (-1904.4140625, -54.2196044921875)
            math_001_4.location = (-2064.4140625, -194.2196044921875)
            boolean_math_001_8.location = (-1740.0, 300.0)
            delete_geometry_1.location = (-1740.0, 480.0)
            store_named_attribute_001_1.location = (-1062.2197265625, 834.4013671875)
            store_named_attribute_3.location = (-1222.2197265625, 834.4013671875)
            position_002_2.location = (-1222.2197265625, 474.4012451171875)
            store_named_attribute_015.location = (-563.97314453125, 856.68115234375)
            store_named_attribute_016.location = (-383.97314453125, 856.68115234375)
            store_named_attribute_017.location = (-203.97314453125, 856.68115234375)
            named_attribute_012.location = (-743.97314453125, 616.68115234375)
            named_attribute_013.location = (-743.97314453125, 336.68115234375)
            named_attribute_014.location = (-743.97314453125, 476.68115234375)
            group_022.location = (-5080.0, -580.0)
            group_035.location = (-5080.0, -860.0)
            boolean_math_005.location = (-4840.0, -660.0)
            boolean_math_009.location = (-4620.0, -660.0)
            boolean_math_007_1.location = (-4800.0, -60.0)
            group_036.location = (-5040.0, -180.0)
            boolean_math_010_1.location = (-4800.0, -220.0)
            boolean_math_006.location = (-4360.0, -320.0)
            boolean_math_008_1.location = (-4840.0, -820.0)
            boolean_math_011.location = (-4580.0, -100.0)
            group_034.location = (-5040.0, 100.0)
            group_024_1.location = (-5532.35107421875, -374.12896728515625)
            boolean_math_004_1.location = (1120.0, 520.0)
            mesh_to_curve_004.location = (1200.0, 940.0)
            mesh_to_curve_003.location = (1200.0, 820.0)
            mesh_to_curve_001.location = (1200.0, 700.0)
            mesh_to_curve_2.location = (1200.0, 580.0)
            reroute_023.location = (1260.0, 980.0)
            reroute_002_5.location = (960.0, 860.0)
            separate_geometry_006.location = (1040.0, 820.0)
            separate_geometry_007.location = (1040.0, 700.0)
            separate_geometry_008.location = (1040.0, 580.0)
            group_input_001_3.location = (-180.0, 720.0)
            group_output_38.location = (2120.0, 920.0)
            group_012_1.location = (-1222.2197265625, 614.4013671875)
            group_013.location = (-1062.2197265625, 614.4013671875)
            group_15.location = (60.0, 840.0)
            group_023.location = (960.0, 520.0)
            group_037.location = (880.0, 760.0)
            group_input_38.location = (-4220.0, 700.0)
            store_named_attribute_019.location = (-2860.0, 820.0)
            index_002.location = (-2860.0, 620.0)
            separate_geometry_003.location = (-3780.0, 780.0)
            separate_geometry_001_1.location = (-3600.0, 780.0)
            mesh_to_points_1.location = (-3420.0, 780.0)
            points_to_curves.location = (-3260.0, 780.0)
            curve_to_mesh_2.location = (-3100.0, 780.0)
            named_attribute_018.location = (-3420.0, 600.0)
            group_001_7.location = (-3780.0, 620.0)
            group_006_1.location = (-4020.0, 780.0)
            group_008_1.location = (-543.97314453125, 596.68115234375)

            # Set dimensions
            frame_006_1.width, frame_006_1.height = 764.5, 893.0
            frame_007_1.width, frame_007_1.height = 360.0, 480.0
            frame_008.width, frame_008.height = 740.0, 712.0
            frame_5.width, frame_5.height = 1372.5, 1282.0
            frame_001_2.width, frame_001_2.height = 444.0, 573.0
            frame_002_2.width, frame_002_2.height = 1120.0, 372.0
            compare_001_4.width, compare_001_4.height = 140.0, 100.0
            named_attribute_011.width, named_attribute_011.height = 140.0, 100.0
            evaluate_at_index_4.width, evaluate_at_index_4.height = 140.0, 100.0
            evaluate_at_index_001_2.width, evaluate_at_index_001_2.height = 140.0, 100.0
            reroute_021.width, reroute_021.height = 16.0, 100.0
            edge_vertices_2.width, edge_vertices_2.height = 140.0, 100.0
            vector_math_2.width, vector_math_2.height = 140.0, 100.0
            compare_5.width, compare_5.height = 140.0, 100.0
            math_001_4.width, math_001_4.height = 140.0, 100.0
            boolean_math_001_8.width, boolean_math_001_8.height = 140.0, 100.0
            delete_geometry_1.width, delete_geometry_1.height = 140.0, 100.0
            store_named_attribute_001_1.width, store_named_attribute_001_1.height = (
                140.0,
                100.0,
            )
            store_named_attribute_3.width, store_named_attribute_3.height = 140.0, 100.0
            position_002_2.width, position_002_2.height = 140.0, 100.0
            store_named_attribute_015.width, store_named_attribute_015.height = (
                140.0,
                100.0,
            )
            store_named_attribute_016.width, store_named_attribute_016.height = (
                140.0,
                100.0,
            )
            store_named_attribute_017.width, store_named_attribute_017.height = (
                140.0,
                100.0,
            )
            named_attribute_012.width, named_attribute_012.height = 140.0, 100.0
            named_attribute_013.width, named_attribute_013.height = 140.0, 100.0
            named_attribute_014.width, named_attribute_014.height = 140.0, 100.0
            group_022.width, group_022.height = 140.0, 100.0
            group_035.width, group_035.height = 140.0, 100.0
            boolean_math_005.width, boolean_math_005.height = 140.0, 100.0
            boolean_math_009.width, boolean_math_009.height = 140.0, 100.0
            boolean_math_007_1.width, boolean_math_007_1.height = 140.0, 100.0
            group_036.width, group_036.height = 140.0, 100.0
            boolean_math_010_1.width, boolean_math_010_1.height = 140.0, 100.0
            boolean_math_006.width, boolean_math_006.height = 140.0, 100.0
            boolean_math_008_1.width, boolean_math_008_1.height = 140.0, 100.0
            boolean_math_011.width, boolean_math_011.height = 140.0, 100.0
            group_034.width, group_034.height = 140.0, 100.0
            group_024_1.width, group_024_1.height = 158.9053955078125, 100.0
            boolean_math_004_1.width, boolean_math_004_1.height = 140.0, 100.0
            mesh_to_curve_004.width, mesh_to_curve_004.height = 140.0, 100.0
            mesh_to_curve_003.width, mesh_to_curve_003.height = 140.0, 100.0
            mesh_to_curve_001.width, mesh_to_curve_001.height = 140.0, 100.0
            mesh_to_curve_2.width, mesh_to_curve_2.height = 140.0, 100.0
            reroute_023.width, reroute_023.height = 16.0, 100.0
            reroute_002_5.width, reroute_002_5.height = 16.0, 100.0
            separate_geometry_006.width, separate_geometry_006.height = 140.0, 100.0
            separate_geometry_007.width, separate_geometry_007.height = 140.0, 100.0
            separate_geometry_008.width, separate_geometry_008.height = 140.0, 100.0
            group_input_001_3.width, group_input_001_3.height = 140.0, 100.0
            group_output_38.width, group_output_38.height = 140.0, 100.0
            group_012_1.width, group_012_1.height = 140.0, 100.0
            group_013.width, group_013.height = 140.0, 100.0
            group_15.width, group_15.height = 374.382080078125, 100.0
            group_023.width, group_023.height = 140.0, 100.0
            group_037.width, group_037.height = 233.448486328125, 100.0
            group_input_38.width, group_input_38.height = 140.0, 100.0
            store_named_attribute_019.width, store_named_attribute_019.height = (
                140.0,
                100.0,
            )
            index_002.width, index_002.height = 140.0, 100.0
            separate_geometry_003.width, separate_geometry_003.height = 140.0, 100.0
            separate_geometry_001_1.width, separate_geometry_001_1.height = 140.0, 100.0
            mesh_to_points_1.width, mesh_to_points_1.height = 140.0, 100.0
            points_to_curves.width, points_to_curves.height = 140.0, 100.0
            curve_to_mesh_2.width, curve_to_mesh_2.height = 140.0, 100.0
            named_attribute_018.width, named_attribute_018.height = 140.0, 100.0
            group_001_7.width, group_001_7.height = 140.0, 100.0
            group_006_1.width, group_006_1.height = 206.7611083984375, 100.0
            group_008_1.width, group_008_1.height = 318.43975830078125, 100.0

            # initialize _atoms_to_curves links
            # group_023.Boolean -> boolean_math_004_1.Boolean
            _atoms_to_curves.links.new(
                group_023.outputs[0], boolean_math_004_1.inputs[0]
            )
            # group_024_1.Is Helix -> boolean_math_010_1.Boolean
            _atoms_to_curves.links.new(
                group_024_1.outputs[0], boolean_math_010_1.inputs[1]
            )
            # group_024_1.Is Sheet -> group_036.Value
            _atoms_to_curves.links.new(group_024_1.outputs[1], group_036.inputs[1])
            # group_024_1.Is Sheet -> boolean_math_005.Boolean
            _atoms_to_curves.links.new(
                group_024_1.outputs[1], boolean_math_005.inputs[0]
            )
            # group_034.Value -> boolean_math_007_1.Boolean
            _atoms_to_curves.links.new(
                group_034.outputs[1], boolean_math_007_1.inputs[0]
            )
            # group_024_1.Is Sheet -> group_034.Value
            _atoms_to_curves.links.new(group_024_1.outputs[1], group_034.inputs[1])
            # boolean_math_008_1.Boolean -> boolean_math_009.Boolean
            _atoms_to_curves.links.new(
                boolean_math_008_1.outputs[0], boolean_math_009.inputs[1]
            )
            # position_002_2.Position -> group_013.Field
            _atoms_to_curves.links.new(position_002_2.outputs[0], group_013.inputs[0])
            # position_002_2.Position -> group_012_1.Field
            _atoms_to_curves.links.new(position_002_2.outputs[0], group_012_1.inputs[0])
            # group_012_1.Field -> store_named_attribute_3.Value
            _atoms_to_curves.links.new(
                group_012_1.outputs[0], store_named_attribute_3.inputs[3]
            )
            # group_037.Is Helix -> separate_geometry_006.Selection
            _atoms_to_curves.links.new(
                group_037.outputs[0], separate_geometry_006.inputs[1]
            )
            # group_024_1.Is Helix -> group_035.Value
            _atoms_to_curves.links.new(group_024_1.outputs[0], group_035.inputs[1])
            # boolean_math_006.Boolean -> boolean_math_004_1.Boolean
            _atoms_to_curves.links.new(
                boolean_math_006.outputs[0], boolean_math_004_1.inputs[1]
            )
            # group_024_1.Is Sheet -> boolean_math_008_1.Boolean
            _atoms_to_curves.links.new(
                group_024_1.outputs[1], boolean_math_008_1.inputs[0]
            )
            # separate_geometry_008.Selection -> mesh_to_curve_2.Mesh
            _atoms_to_curves.links.new(
                separate_geometry_008.outputs[0], mesh_to_curve_2.inputs[0]
            )
            # boolean_math_007_1.Boolean -> boolean_math_011.Boolean
            _atoms_to_curves.links.new(
                boolean_math_007_1.outputs[0], boolean_math_011.inputs[0]
            )
            # group_022.Value -> boolean_math_005.Boolean
            _atoms_to_curves.links.new(group_022.outputs[1], boolean_math_005.inputs[1])
            # store_named_attribute_3.Geometry -> store_named_attribute_001_1.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_3.outputs[0],
                store_named_attribute_001_1.inputs[0],
            )
            # group_024_1.Is Helix -> group_022.Value
            _atoms_to_curves.links.new(group_024_1.outputs[0], group_022.inputs[1])
            # boolean_math_009.Boolean -> boolean_math_006.Boolean
            _atoms_to_curves.links.new(
                boolean_math_009.outputs[0], boolean_math_006.inputs[1]
            )
            # reroute_002_5.Output -> separate_geometry_006.Geometry
            _atoms_to_curves.links.new(
                reroute_002_5.outputs[0], separate_geometry_006.inputs[0]
            )
            # separate_geometry_006.Selection -> mesh_to_curve_003.Mesh
            _atoms_to_curves.links.new(
                separate_geometry_006.outputs[0], mesh_to_curve_003.inputs[0]
            )
            # group_013.Field -> store_named_attribute_001_1.Value
            _atoms_to_curves.links.new(
                group_013.outputs[0], store_named_attribute_001_1.inputs[3]
            )
            # group_035.Value -> boolean_math_008_1.Boolean
            _atoms_to_curves.links.new(
                group_035.outputs[1], boolean_math_008_1.inputs[1]
            )
            # group_024_1.Is Helix -> boolean_math_007_1.Boolean
            _atoms_to_curves.links.new(
                group_024_1.outputs[0], boolean_math_007_1.inputs[1]
            )
            # group_036.Value -> boolean_math_010_1.Boolean
            _atoms_to_curves.links.new(
                group_036.outputs[1], boolean_math_010_1.inputs[0]
            )
            # separate_geometry_007.Selection -> mesh_to_curve_001.Mesh
            _atoms_to_curves.links.new(
                separate_geometry_007.outputs[0], mesh_to_curve_001.inputs[0]
            )
            # boolean_math_010_1.Boolean -> boolean_math_011.Boolean
            _atoms_to_curves.links.new(
                boolean_math_010_1.outputs[0], boolean_math_011.inputs[1]
            )
            # boolean_math_005.Boolean -> boolean_math_009.Boolean
            _atoms_to_curves.links.new(
                boolean_math_005.outputs[0], boolean_math_009.inputs[0]
            )
            # boolean_math_011.Boolean -> boolean_math_006.Boolean
            _atoms_to_curves.links.new(
                boolean_math_011.outputs[0], boolean_math_006.inputs[0]
            )
            # reroute_023.Output -> group_output_38.CA Mesh Line
            _atoms_to_curves.links.new(
                reroute_023.outputs[0], group_output_38.inputs[0]
            )
            # mesh_to_curve_001.Curve -> group_output_38.BS Splines
            _atoms_to_curves.links.new(
                mesh_to_curve_001.outputs[0], group_output_38.inputs[4]
            )
            # mesh_to_curve_2.Curve -> group_output_38.Loop Splines
            _atoms_to_curves.links.new(
                mesh_to_curve_2.outputs[0], group_output_38.inputs[6]
            )
            # mesh_to_curve_003.Curve -> group_output_38.AH Splines
            _atoms_to_curves.links.new(
                mesh_to_curve_003.outputs[0], group_output_38.inputs[2]
            )
            # reroute_002_5.Output -> mesh_to_curve_004.Mesh
            _atoms_to_curves.links.new(
                reroute_002_5.outputs[0], mesh_to_curve_004.inputs[0]
            )
            # mesh_to_curve_004.Curve -> group_output_38.CA Splines
            _atoms_to_curves.links.new(
                mesh_to_curve_004.outputs[0], group_output_38.inputs[1]
            )
            # edge_vertices_2.Vertex Index 2 -> evaluate_at_index_001_2.Index
            _atoms_to_curves.links.new(
                edge_vertices_2.outputs[1], evaluate_at_index_001_2.inputs[0]
            )
            # edge_vertices_2.Vertex Index 1 -> evaluate_at_index_4.Index
            _atoms_to_curves.links.new(
                edge_vertices_2.outputs[0], evaluate_at_index_4.inputs[0]
            )
            # reroute_021.Output -> evaluate_at_index_001_2.Value
            _atoms_to_curves.links.new(
                reroute_021.outputs[0], evaluate_at_index_001_2.inputs[1]
            )
            # evaluate_at_index_001_2.Value -> compare_001_4.B
            _atoms_to_curves.links.new(
                evaluate_at_index_001_2.outputs[0], compare_001_4.inputs[3]
            )
            # evaluate_at_index_4.Value -> compare_001_4.A
            _atoms_to_curves.links.new(
                evaluate_at_index_4.outputs[0], compare_001_4.inputs[2]
            )
            # reroute_021.Output -> evaluate_at_index_4.Value
            _atoms_to_curves.links.new(
                reroute_021.outputs[0], evaluate_at_index_4.inputs[1]
            )
            # named_attribute_011.Attribute -> reroute_021.Input
            _atoms_to_curves.links.new(
                named_attribute_011.outputs[0], reroute_021.inputs[0]
            )
            # compare_001_4.Result -> boolean_math_001_8.Boolean
            _atoms_to_curves.links.new(
                compare_001_4.outputs[0], boolean_math_001_8.inputs[0]
            )
            # boolean_math_001_8.Boolean -> delete_geometry_1.Selection
            _atoms_to_curves.links.new(
                boolean_math_001_8.outputs[0], delete_geometry_1.inputs[1]
            )
            # edge_vertices_2.Position 1 -> vector_math_2.Vector
            _atoms_to_curves.links.new(
                edge_vertices_2.outputs[2], vector_math_2.inputs[0]
            )
            # edge_vertices_2.Position 2 -> vector_math_2.Vector
            _atoms_to_curves.links.new(
                edge_vertices_2.outputs[3], vector_math_2.inputs[1]
            )
            # vector_math_2.Value -> compare_5.A
            _atoms_to_curves.links.new(vector_math_2.outputs[1], compare_5.inputs[0])
            # compare_5.Result -> boolean_math_001_8.Boolean
            _atoms_to_curves.links.new(
                compare_5.outputs[0], boolean_math_001_8.inputs[1]
            )
            # math_001_4.Value -> compare_5.B
            _atoms_to_curves.links.new(math_001_4.outputs[0], compare_5.inputs[1])
            # store_named_attribute_019.Geometry -> delete_geometry_1.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_019.outputs[0], delete_geometry_1.inputs[0]
            )
            # named_attribute_012.Attribute -> group_008_1.N
            _atoms_to_curves.links.new(
                named_attribute_012.outputs[0], group_008_1.inputs[0]
            )
            # named_attribute_014.Attribute -> group_008_1.C
            _atoms_to_curves.links.new(
                named_attribute_014.outputs[0], group_008_1.inputs[1]
            )
            # named_attribute_013.Attribute -> group_008_1.O
            _atoms_to_curves.links.new(
                named_attribute_013.outputs[0], group_008_1.inputs[2]
            )
            # store_named_attribute_015.Geometry -> store_named_attribute_016.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_015.outputs[0],
                store_named_attribute_016.inputs[0],
            )
            # group_008_1.Z Vector for Euler -> store_named_attribute_015.Value
            _atoms_to_curves.links.new(
                group_008_1.outputs[0], store_named_attribute_015.inputs[3]
            )
            # group_008_1.X Vector for Euler -> store_named_attribute_016.Value
            _atoms_to_curves.links.new(
                group_008_1.outputs[1], store_named_attribute_016.inputs[3]
            )
            # store_named_attribute_016.Geometry -> store_named_attribute_017.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_016.outputs[0],
                store_named_attribute_017.inputs[0],
            )
            # store_named_attribute_001_1.Geometry -> store_named_attribute_015.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_001_1.outputs[0],
                store_named_attribute_015.inputs[0],
            )
            # group_15.Geometry -> reroute_002_5.Input
            _atoms_to_curves.links.new(group_15.outputs[0], reroute_002_5.inputs[0])
            # reroute_002_5.Output -> reroute_023.Input
            _atoms_to_curves.links.new(reroute_002_5.outputs[0], reroute_023.inputs[0])
            # reroute_002_5.Output -> separate_geometry_007.Geometry
            _atoms_to_curves.links.new(
                reroute_002_5.outputs[0], separate_geometry_007.inputs[0]
            )
            # reroute_002_5.Output -> separate_geometry_008.Geometry
            _atoms_to_curves.links.new(
                reroute_002_5.outputs[0], separate_geometry_008.inputs[0]
            )
            # boolean_math_004_1.Boolean -> separate_geometry_008.Selection
            _atoms_to_curves.links.new(
                boolean_math_004_1.outputs[0], separate_geometry_008.inputs[1]
            )
            # group_037.Is Sheet -> separate_geometry_007.Selection
            _atoms_to_curves.links.new(
                group_037.outputs[1], separate_geometry_007.inputs[1]
            )
            # group_037.Is Loop -> group_023.Input
            _atoms_to_curves.links.new(group_037.outputs[3], group_023.inputs[0])
            # separate_geometry_006.Selection -> group_output_38.AH Mesh Line
            _atoms_to_curves.links.new(
                separate_geometry_006.outputs[0], group_output_38.inputs[3]
            )
            # separate_geometry_007.Selection -> group_output_38.BS Mesh Line
            _atoms_to_curves.links.new(
                separate_geometry_007.outputs[0], group_output_38.inputs[5]
            )
            # separate_geometry_008.Selection -> group_output_38.Loop Mesh Line
            _atoms_to_curves.links.new(
                separate_geometry_008.outputs[0], group_output_38.inputs[7]
            )
            # store_named_attribute_017.Geometry -> group_15.Geometry
            _atoms_to_curves.links.new(
                store_named_attribute_017.outputs[0], group_15.inputs[0]
            )
            # group_input_001_3.BS Smoothing -> group_15.Factor
            _atoms_to_curves.links.new(group_input_001_3.outputs[2], group_15.inputs[1])
            # index_002.Index -> store_named_attribute_019.Value
            _atoms_to_curves.links.new(
                index_002.outputs[0], store_named_attribute_019.inputs[3]
            )
            # group_input_38.Atoms -> group_006_1.Atoms
            _atoms_to_curves.links.new(group_input_38.outputs[0], group_006_1.inputs[0])
            # separate_geometry_003.Selection -> separate_geometry_001_1.Geometry
            _atoms_to_curves.links.new(
                separate_geometry_003.outputs[0], separate_geometry_001_1.inputs[0]
            )
            # separate_geometry_001_1.Selection -> mesh_to_points_1.Mesh
            _atoms_to_curves.links.new(
                separate_geometry_001_1.outputs[0], mesh_to_points_1.inputs[0]
            )
            # mesh_to_points_1.Points -> points_to_curves.Points
            _atoms_to_curves.links.new(
                mesh_to_points_1.outputs[0], points_to_curves.inputs[0]
            )
            # named_attribute_018.Attribute -> points_to_curves.Curve Group ID
            _atoms_to_curves.links.new(
                named_attribute_018.outputs[0], points_to_curves.inputs[1]
            )
            # points_to_curves.Curves -> curve_to_mesh_2.Curve
            _atoms_to_curves.links.new(
                points_to_curves.outputs[0], curve_to_mesh_2.inputs[0]
            )
            # delete_geometry_1.Geometry -> store_named_attribute_3.Geometry
            _atoms_to_curves.links.new(
                delete_geometry_1.outputs[0], store_named_attribute_3.inputs[0]
            )
            # group_006_1.Atoms -> separate_geometry_003.Geometry
            _atoms_to_curves.links.new(
                group_006_1.outputs[0], separate_geometry_003.inputs[0]
            )
            # group_input_38.Selection -> separate_geometry_003.Selection
            _atoms_to_curves.links.new(
                group_input_38.outputs[1], separate_geometry_003.inputs[1]
            )
            # curve_to_mesh_2.Mesh -> store_named_attribute_019.Geometry
            _atoms_to_curves.links.new(
                curve_to_mesh_2.outputs[0], store_named_attribute_019.inputs[0]
            )
            # group_001_7.Selection -> separate_geometry_001_1.Selection
            _atoms_to_curves.links.new(
                group_001_7.outputs[0], separate_geometry_001_1.inputs[1]
            )
            return _atoms_to_curves

        _atoms_to_curves = _atoms_to_curves_node_group()

        # initialize _mn_utils_style_ribbon_peptide node group
        def _mn_utils_style_ribbon_peptide_node_group():
            _mn_utils_style_ribbon_peptide = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_ribbon_peptide"
            )

            _mn_utils_style_ribbon_peptide.color_tag = "GEOMETRY"
            _mn_utils_style_ribbon_peptide.description = ""

            _mn_utils_style_ribbon_peptide.is_modifier = True

            # _mn_utils_style_ribbon_peptide interface
            # Socket Geometry
            geometry_socket_6 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_6.attribute_domain = "POINT"

            # Socket Curve
            curve_socket = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket.attribute_domain = "POINT"

            # Socket UVs
            uvs_socket = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="UVs", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            uvs_socket.subtype = "NONE"
            uvs_socket.default_value = (0.0, 0.0, 0.0)
            uvs_socket.min_value = -3.4028234663852886e38
            uvs_socket.max_value = 3.4028234663852886e38
            uvs_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_11 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_11.attribute_domain = "POINT"
            atoms_socket_11.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_14 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_14.attribute_domain = "POINT"
            selection_socket_14.hide_value = True
            selection_socket_14.description = "Selection of atoms to apply this node to"

            # Socket Quality
            quality_socket_1 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_1.subtype = "NONE"
            quality_socket_1.default_value = 3
            quality_socket_1.min_value = 0
            quality_socket_1.max_value = 6
            quality_socket_1.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_2 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_2.subtype = "NONE"
            radius_socket_2.default_value = 1.600000023841858
            radius_socket_2.min_value = 0.0
            radius_socket_2.max_value = 3.4028234663852886e38
            radius_socket_2.attribute_domain = "POINT"

            # Socket BS Smoothing
            bs_smoothing_socket_1 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="BS Smoothing", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            bs_smoothing_socket_1.subtype = "FACTOR"
            bs_smoothing_socket_1.default_value = 0.5
            bs_smoothing_socket_1.min_value = 0.0
            bs_smoothing_socket_1.max_value = 1.0
            bs_smoothing_socket_1.attribute_domain = "POINT"

            # Socket Interpolate Color
            interpolate_color_socket_1 = (
                _mn_utils_style_ribbon_peptide.interface.new_socket(
                    name="Interpolate Color",
                    in_out="INPUT",
                    socket_type="NodeSocketBool",
                )
            )
            interpolate_color_socket_1.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_4 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_4.attribute_domain = "POINT"
            shade_smooth_socket_4.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_6 = _mn_utils_style_ribbon_peptide.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_6.attribute_domain = "POINT"
            material_socket_6.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize _mn_utils_style_ribbon_peptide nodes
            # node Frame.003
            frame_003_2 = _mn_utils_style_ribbon_peptide.nodes.new("NodeFrame")
            frame_003_2.label = "Create mesh from curve"
            frame_003_2.name = "Frame.003"
            frame_003_2.label_size = 20
            frame_003_2.shrink = True

            # node Frame
            frame_6 = _mn_utils_style_ribbon_peptide.nodes.new("NodeFrame")
            frame_6.label = "Calculate UVs"
            frame_6.name = "Frame"
            frame_6.label_size = 20
            frame_6.shrink = True

            # node Boolean Math.001
            boolean_math_001_9 = _mn_utils_style_ribbon_peptide.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_9.name = "Boolean Math.001"
            boolean_math_001_9.operation = "AND"

            # node Named Attribute.001
            named_attribute_001_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_2.name = "Named Attribute.001"
            named_attribute_001_2.data_type = "BOOLEAN"
            # Name
            named_attribute_001_2.inputs[0].default_value = "is_alpha_carbon"

            # node Group Input.001
            group_input_001_4 = _mn_utils_style_ribbon_peptide.nodes.new(
                "NodeGroupInput"
            )
            group_input_001_4.name = "Group Input.001"
            group_input_001_4.outputs[0].hide = True
            group_input_001_4.outputs[1].hide = True
            group_input_001_4.outputs[2].hide = True
            group_input_001_4.outputs[5].hide = True
            group_input_001_4.outputs[7].hide = True
            group_input_001_4.outputs[8].hide = True

            # node Set Material
            set_material_4 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_4.name = "Set Material"
            # Selection
            set_material_4.inputs[1].default_value = True

            # node Group Input.002
            group_input_002_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "NodeGroupInput"
            )
            group_input_002_3.name = "Group Input.002"
            group_input_002_3.outputs[0].hide = True
            group_input_002_3.outputs[1].hide = True
            group_input_002_3.outputs[2].hide = True
            group_input_002_3.outputs[3].hide = True
            group_input_002_3.outputs[5].hide = True
            group_input_002_3.outputs[6].hide = True
            group_input_002_3.outputs[8].hide = True

            # node Sample Index.007
            sample_index_007_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_007_1.name = "Sample Index.007"
            sample_index_007_1.clamp = True
            sample_index_007_1.data_type = "BOOLEAN"
            sample_index_007_1.domain = "POINT"

            # node Reroute
            reroute_6 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_6.name = "Reroute"
            # node Group Output
            group_output_39 = _mn_utils_style_ribbon_peptide.nodes.new(
                "NodeGroupOutput"
            )
            group_output_39.name = "Group Output"
            group_output_39.is_active_output = True

            # node Group Input
            group_input_39 = _mn_utils_style_ribbon_peptide.nodes.new("NodeGroupInput")
            group_input_39.name = "Group Input"
            group_input_39.outputs[2].hide = True
            group_input_39.outputs[3].hide = True
            group_input_39.outputs[5].hide = True
            group_input_39.outputs[6].hide = True
            group_input_39.outputs[7].hide = True
            group_input_39.outputs[8].hide = True

            # node Separate Geometry
            separate_geometry_6 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_6.name = "Separate Geometry"
            separate_geometry_6.domain = "POINT"

            # node Capture Attribute
            capture_attribute_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_3.name = "Capture Attribute"
            capture_attribute_3.active_index = 0
            capture_attribute_3.capture_items.clear()
            capture_attribute_3.capture_items.new("FLOAT", "Value")
            capture_attribute_3.capture_items["Value"].data_type = "BOOLEAN"
            capture_attribute_3.domain = "POINT"

            # node Sample Index.006
            sample_index_006 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_006.name = "Sample Index.006"
            sample_index_006.clamp = True
            sample_index_006.data_type = "FLOAT"
            sample_index_006.domain = "POINT"

            # node Set Spline Type.002
            set_spline_type_002 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_002.name = "Set Spline Type.002"
            set_spline_type_002.spline_type = "BEZIER"
            # Selection
            set_spline_type_002.inputs[1].default_value = True

            # node Reroute.005
            reroute_005_2 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_005_2.name = "Reroute.005"
            # node Capture Attribute.005
            capture_attribute_005 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_005.name = "Capture Attribute.005"
            capture_attribute_005.active_index = 0
            capture_attribute_005.capture_items.clear()
            capture_attribute_005.capture_items.new("FLOAT", "Value")
            capture_attribute_005.capture_items["Value"].data_type = "INT"
            capture_attribute_005.domain = "POINT"

            # node Curve Circle
            curve_circle_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_2.name = "Curve Circle"
            curve_circle_2.mode = "RADIUS"
            # Radius
            curve_circle_2.inputs[4].default_value = 0.009999999776482582

            # node Capture Attribute.001
            capture_attribute_001_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_2.name = "Capture Attribute.001"
            capture_attribute_001_2.active_index = 0
            capture_attribute_001_2.capture_items.clear()
            capture_attribute_001_2.capture_items.new("FLOAT", "Value")
            capture_attribute_001_2.capture_items["Value"].data_type = "FLOAT"
            capture_attribute_001_2.domain = "POINT"

            # node Spline Parameter.001
            spline_parameter_001 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSplineParameter"
            )
            spline_parameter_001.name = "Spline Parameter.001"
            spline_parameter_001.outputs[0].hide = True
            spline_parameter_001.outputs[2].hide = True

            # node Reroute.003
            reroute_003_3 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_003_3.name = "Reroute.003"
            # node Spline Parameter
            spline_parameter = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSplineParameter"
            )
            spline_parameter.name = "Spline Parameter"
            spline_parameter.outputs[1].hide = True
            spline_parameter.outputs[2].hide = True

            # node Reroute.004
            reroute_004_1 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_004_1.name = "Reroute.004"
            # node Index.004
            index_004_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeInputIndex"
            )
            index_004_1.name = "Index.004"

            # node Reroute.001
            reroute_001_7 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_001_7.name = "Reroute.001"
            # node Set Handle Type.001
            set_handle_type_001 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_001.name = "Set Handle Type.001"
            set_handle_type_001.handle_type = "AUTO"
            set_handle_type_001.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_001.inputs[1].default_value = True

            # node Set Spline Resolution.001
            set_spline_resolution_001 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_001.name = "Set Spline Resolution.001"
            # Selection
            set_spline_resolution_001.inputs[1].default_value = True

            # node Set Shade Smooth
            set_shade_smooth_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_3.name = "Set Shade Smooth"
            set_shade_smooth_3.domain = "FACE"
            # Selection
            set_shade_smooth_3.inputs[1].default_value = True

            # node Math
            math_8 = _mn_utils_style_ribbon_peptide.nodes.new("ShaderNodeMath")
            math_8.name = "Math"
            math_8.operation = "WRAP"
            math_8.use_clamp = False
            # Value_001
            math_8.inputs[1].default_value = 1.0
            # Value_002
            math_8.inputs[2].default_value = 0.0

            # node Combine XYZ
            combine_xyz_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_1.name = "Combine XYZ"
            # Z
            combine_xyz_1.inputs[2].default_value = 0.0

            # node Switch
            switch_7 = _mn_utils_style_ribbon_peptide.nodes.new("GeometryNodeSwitch")
            switch_7.name = "Switch"
            switch_7.input_type = "FLOAT"
            # True
            switch_7.inputs[2].default_value = 1.0

            # node Evaluate on Domain.001
            evaluate_on_domain_001 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_001.name = "Evaluate on Domain.001"
            evaluate_on_domain_001.data_type = "FLOAT"
            evaluate_on_domain_001.domain = "CORNER"

            # node Compare.004
            compare_004_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "FunctionNodeCompare"
            )
            compare_004_2.label = "x == 0"
            compare_004_2.name = "Compare.004"
            compare_004_2.hide = True
            compare_004_2.data_type = "FLOAT"
            compare_004_2.mode = "ELEMENT"
            compare_004_2.operation = "EQUAL"
            # B
            compare_004_2.inputs[1].default_value = 0.0
            # Epsilon
            compare_004_2.inputs[12].default_value = 0.0010000000474974513

            # node Boolean Math.004
            boolean_math_004_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_2.name = "Boolean Math.004"
            boolean_math_004_2.operation = "AND"

            # node Evaluate on Domain.003
            evaluate_on_domain_003_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_003_1.name = "Evaluate on Domain.003"
            evaluate_on_domain_003_1.data_type = "BOOLEAN"
            evaluate_on_domain_003_1.domain = "CORNER"

            # node Evaluate on Domain
            evaluate_on_domain_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_1.name = "Evaluate on Domain"
            evaluate_on_domain_1.data_type = "FLOAT"
            evaluate_on_domain_1.domain = "CORNER"

            # node Compare.005
            compare_005_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "FunctionNodeCompare"
            )
            compare_005_2.name = "Compare.005"
            compare_005_2.data_type = "INT"
            compare_005_2.mode = "ELEMENT"
            compare_005_2.operation = "GREATER_THAN"
            # B_INT
            compare_005_2.inputs[3].default_value = 1

            # node Reroute.002
            reroute_002_6 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_002_6.name = "Reroute.002"
            # node Evaluate on Domain.002
            evaluate_on_domain_002 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_002.name = "Evaluate on Domain.002"
            evaluate_on_domain_002.data_type = "INT"
            evaluate_on_domain_002.domain = "FACE"

            # node Evaluate on Domain.004
            evaluate_on_domain_004 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_004.name = "Evaluate on Domain.004"
            evaluate_on_domain_004.data_type = "FLOAT_VECTOR"
            evaluate_on_domain_004.domain = "CORNER"

            # node Index
            index_4 = _mn_utils_style_ribbon_peptide.nodes.new("GeometryNodeInputIndex")
            index_4.name = "Index"

            # node Group Input.004
            group_input_004_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "NodeGroupInput"
            )
            group_input_004_2.name = "Group Input.004"
            group_input_004_2.outputs[0].hide = True
            group_input_004_2.outputs[1].hide = True
            group_input_004_2.outputs[3].hide = True
            group_input_004_2.outputs[4].hide = True
            group_input_004_2.outputs[5].hide = True
            group_input_004_2.outputs[6].hide = True
            group_input_004_2.outputs[7].hide = True
            group_input_004_2.outputs[8].hide = True

            # node Integer
            integer_5 = _mn_utils_style_ribbon_peptide.nodes.new("FunctionNodeInputInt")
            integer_5.name = "Integer"
            integer_5.integer = 2

            # node Integer.001
            integer_001_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "FunctionNodeInputInt"
            )
            integer_001_2.name = "Integer.001"
            integer_001_2.integer = 3

            # node Math.002
            math_002_1 = _mn_utils_style_ribbon_peptide.nodes.new("ShaderNodeMath")
            math_002_1.name = "Math.002"
            math_002_1.operation = "MULTIPLY"
            math_002_1.use_clamp = False

            # node Math.001
            math_001_5 = _mn_utils_style_ribbon_peptide.nodes.new("ShaderNodeMath")
            math_001_5.name = "Math.001"
            math_001_5.operation = "MULTIPLY"
            math_001_5.use_clamp = False

            # node Reroute.006
            reroute_006_1 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_006_1.name = "Reroute.006"
            # node Remove Named Attribute
            remove_named_attribute = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeRemoveAttribute"
            )
            remove_named_attribute.name = "Remove Named Attribute"
            remove_named_attribute.pattern_mode = "EXACT"
            # Name
            remove_named_attribute.inputs[1].default_value = "idx"

            # node Store Named Attribute
            store_named_attribute_4 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_4.name = "Store Named Attribute"
            store_named_attribute_4.data_type = "FLOAT_COLOR"
            store_named_attribute_4.domain = "FACE"
            # Selection
            store_named_attribute_4.inputs[1].default_value = True
            # Name
            store_named_attribute_4.inputs[2].default_value = "Color"

            # node Set Curve Radius
            set_curve_radius_2 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_2.name = "Set Curve Radius"
            # Selection
            set_curve_radius_2.inputs[1].default_value = True

            # node Capture Attribute.002
            capture_attribute_002 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_002.name = "Capture Attribute.002"
            capture_attribute_002.active_index = 0
            capture_attribute_002.capture_items.clear()
            capture_attribute_002.capture_items.new("FLOAT", "Value")
            capture_attribute_002.capture_items["Value"].data_type = "FLOAT"
            capture_attribute_002.domain = "POINT"

            # node Named Attribute.003
            named_attribute_003_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_1.name = "Named Attribute.003"
            named_attribute_003_1.data_type = "INT"
            # Name
            named_attribute_003_1.inputs[0].default_value = "idx"

            # node Named Attribute.002
            named_attribute_002_4 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_4.name = "Named Attribute.002"
            named_attribute_002_4.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_002_4.inputs[0].default_value = "Color"

            # node Reroute.007
            reroute_007_1 = _mn_utils_style_ribbon_peptide.nodes.new("NodeReroute")
            reroute_007_1.name = "Reroute.007"
            # node Sample Index
            sample_index_1 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_1.name = "Sample Index"
            sample_index_1.clamp = False
            sample_index_1.data_type = "FLOAT_COLOR"
            sample_index_1.domain = "POINT"

            # node Curve to Mesh
            curve_to_mesh_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeCurveToMesh"
            )
            curve_to_mesh_3.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_3.inputs[2].default_value = True

            # node Group Input.003
            group_input_003_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "NodeGroupInput"
            )
            group_input_003_3.name = "Group Input.003"
            group_input_003_3.outputs[0].hide = True
            group_input_003_3.outputs[1].hide = True
            group_input_003_3.outputs[2].hide = True
            group_input_003_3.outputs[3].hide = True
            group_input_003_3.outputs[4].hide = True
            group_input_003_3.outputs[6].hide = True
            group_input_003_3.outputs[7].hide = True
            group_input_003_3.outputs[8].hide = True

            # node Switch.001
            switch_001_3 = _mn_utils_style_ribbon_peptide.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_001_3.name = "Switch.001"
            switch_001_3.input_type = "GEOMETRY"

            # node Group.001
            group_001_8 = _mn_utils_style_ribbon_peptide.nodes.new("GeometryNodeGroup")
            group_001_8.name = "Group.001"
            group_001_8.node_tree = _atoms_to_curves

            # Set parents
            capture_attribute_3.parent = frame_003_2
            sample_index_006.parent = frame_003_2
            set_spline_type_002.parent = frame_003_2
            reroute_005_2.parent = frame_003_2
            capture_attribute_005.parent = frame_003_2
            curve_circle_2.parent = frame_003_2
            capture_attribute_001_2.parent = frame_003_2
            spline_parameter_001.parent = frame_003_2
            reroute_003_3.parent = frame_003_2
            spline_parameter.parent = frame_003_2
            reroute_004_1.parent = frame_003_2
            index_004_1.parent = frame_003_2
            reroute_001_7.parent = frame_003_2
            set_handle_type_001.parent = frame_003_2
            set_spline_resolution_001.parent = frame_003_2
            set_shade_smooth_3.parent = frame_003_2
            math_8.parent = frame_6
            combine_xyz_1.parent = frame_6
            switch_7.parent = frame_6
            evaluate_on_domain_001.parent = frame_6
            compare_004_2.parent = frame_6
            boolean_math_004_2.parent = frame_6
            evaluate_on_domain_003_1.parent = frame_6
            evaluate_on_domain_1.parent = frame_6
            compare_005_2.parent = frame_6
            reroute_002_6.parent = frame_6
            evaluate_on_domain_002.parent = frame_6
            evaluate_on_domain_004.parent = frame_6
            group_input_004_2.parent = frame_003_2
            integer_5.parent = frame_003_2
            integer_001_2.parent = frame_003_2
            math_002_1.parent = frame_003_2
            math_001_5.parent = frame_003_2
            store_named_attribute_4.parent = frame_003_2
            set_curve_radius_2.parent = frame_003_2
            capture_attribute_002.parent = frame_003_2
            curve_to_mesh_3.parent = frame_003_2

            # Set locations
            frame_003_2.location = (-3860.39306640625, -98.4256591796875)
            frame_6.location = (650.0, 56.0)
            boolean_math_001_9.location = (-3202.000244140625, 100.0)
            named_attribute_001_2.location = (-3262.000244140625, -40.0)
            group_input_001_4.location = (-3042.000244140625, 40.0)
            set_material_4.location = (-420.0, 660.0)
            group_input_002_3.location = (-420.0, 520.0)
            sample_index_007_1.location = (-2862.000244140625, 340.0)
            reroute_6.location = (-2920.000244140625, 120.0)
            group_output_39.location = (80.0, 660.0)
            group_input_39.location = (-3540.000244140625, 260.0)
            separate_geometry_6.location = (-3202.000244140625, 260.0)
            capture_attribute_3.location = (1169.39306640625, 637.4256591796875)
            sample_index_006.location = (1839.39306640625, 137.4256591796875)
            set_spline_type_002.location = (1640.023193359375, 783.5709228515625)
            reroute_005_2.location = (2820.39306640625, 818.4256591796875)
            capture_attribute_005.location = (2580.39306640625, 518.4256591796875)
            curve_circle_2.location = (2400.39306640625, 518.4256591796875)
            capture_attribute_001_2.location = (2740.39306640625, 518.4256591796875)
            spline_parameter_001.location = (2160.39306640625, 598.4256591796875)
            reroute_003_3.location = (2380.39306640625, 218.4256591796875)
            spline_parameter.location = (2740.39306640625, 318.4256591796875)
            reroute_004_1.location = (2740.39306640625, -21.5743408203125)
            index_004_1.location = (2580.39306640625, 318.4256591796875)
            reroute_001_7.location = (3080.39306640625, 578.4256591796875)
            set_handle_type_001.location = (1800.39306640625, 798.4256591796875)
            set_spline_resolution_001.location = (1960.39306640625, 798.4256591796875)
            set_shade_smooth_3.location = (3220.39306640625, 758.4256591796875)
            math_8.location = (-505.4921875, 263.67041015625)
            combine_xyz_1.location = (-340.0, 260.0)
            switch_7.location = (-500.0, 80.0)
            evaluate_on_domain_001.location = (-680.0, 180.0)
            compare_004_2.location = (-680.0, 20.0)
            boolean_math_004_2.location = (-680.0, -20.0)
            evaluate_on_domain_003_1.location = (-840.0, -100.0)
            evaluate_on_domain_1.location = (-680.0, -160.0)
            compare_005_2.location = (-840.0, -240.0)
            reroute_002_6.location = (-700.0, -20.0)
            evaluate_on_domain_002.location = (-1000.0, -240.0)
            evaluate_on_domain_004.location = (-180.0, 260.0)
            index_4.location = (-3040.000244140625, -80.0)
            group_input_004_2.location = (1532.344970703125, 489.52349853515625)
            integer_5.location = (1540.39306640625, 398.4256591796875)
            integer_001_2.location = (1540.39306640625, 298.4256591796875)
            math_002_1.location = (1760.39306640625, 438.4256591796875)
            math_001_5.location = (1760.39306640625, 598.4256591796875)
            reroute_006_1.location = (-280.0, 720.0)
            remove_named_attribute.location = (-240.0, 660.0)
            store_named_attribute_4.location = (3000.39306640625, 775.1707763671875)
            set_curve_radius_2.location = (2340.39306640625, 818.4256591796875)
            capture_attribute_002.location = (2160.39306640625, 818.4256591796875)
            named_attribute_003_1.location = (-1120.0, 940.0)
            named_attribute_002_4.location = (-1280.0, 940.0)
            reroute_007_1.location = (-2720.0, 1020.0)
            sample_index_1.location = (-1120.0, 1160.0)
            curve_to_mesh_3.location = (2780.392822265625, 758.4256591796875)
            group_input_003_3.location = (-860.0, 940.0)
            switch_001_3.location = (-860.0, 860.0)
            group_001_8.location = (-3322.000244140625, 580.0)

            # Set dimensions
            frame_003_2.width, frame_003_2.height = 2251.0, 952.0
            frame_6.width, frame_6.height = 1020.0, 722.0
            boolean_math_001_9.width, boolean_math_001_9.height = 140.0, 100.0
            named_attribute_001_2.width, named_attribute_001_2.height = (
                206.99917602539062,
                100.0,
            )
            group_input_001_4.width, group_input_001_4.height = 140.0, 100.0
            set_material_4.width, set_material_4.height = 140.0, 100.0
            group_input_002_3.width, group_input_002_3.height = 140.0, 100.0
            sample_index_007_1.width, sample_index_007_1.height = 140.0, 100.0
            reroute_6.width, reroute_6.height = 16.0, 100.0
            group_output_39.width, group_output_39.height = 140.0, 100.0
            group_input_39.width, group_input_39.height = 140.0, 100.0
            separate_geometry_6.width, separate_geometry_6.height = 140.0, 100.0
            capture_attribute_3.width, capture_attribute_3.height = 140.0, 100.0
            sample_index_006.width, sample_index_006.height = 140.0, 100.0
            set_spline_type_002.width, set_spline_type_002.height = 140.0, 100.0
            reroute_005_2.width, reroute_005_2.height = 16.0, 100.0
            capture_attribute_005.width, capture_attribute_005.height = 140.0, 100.0
            curve_circle_2.width, curve_circle_2.height = 140.0, 100.0
            capture_attribute_001_2.width, capture_attribute_001_2.height = 140.0, 100.0
            spline_parameter_001.width, spline_parameter_001.height = 140.0, 100.0
            reroute_003_3.width, reroute_003_3.height = 16.0, 100.0
            spline_parameter.width, spline_parameter.height = 140.0, 100.0
            reroute_004_1.width, reroute_004_1.height = 16.0, 100.0
            index_004_1.width, index_004_1.height = 140.0, 100.0
            reroute_001_7.width, reroute_001_7.height = 16.0, 100.0
            set_handle_type_001.width, set_handle_type_001.height = 140.0, 100.0
            set_spline_resolution_001.width, set_spline_resolution_001.height = (
                140.0,
                100.0,
            )
            set_shade_smooth_3.width, set_shade_smooth_3.height = 140.0, 100.0
            math_8.width, math_8.height = 140.0, 100.0
            combine_xyz_1.width, combine_xyz_1.height = 140.0, 100.0
            switch_7.width, switch_7.height = 140.0, 100.0
            evaluate_on_domain_001.width, evaluate_on_domain_001.height = 140.0, 100.0
            compare_004_2.width, compare_004_2.height = 140.0, 100.0
            boolean_math_004_2.width, boolean_math_004_2.height = 140.0, 100.0
            evaluate_on_domain_003_1.width, evaluate_on_domain_003_1.height = (
                140.0,
                100.0,
            )
            evaluate_on_domain_1.width, evaluate_on_domain_1.height = 140.0, 100.0
            compare_005_2.width, compare_005_2.height = 140.0, 100.0
            reroute_002_6.width, reroute_002_6.height = 16.0, 100.0
            evaluate_on_domain_002.width, evaluate_on_domain_002.height = 140.0, 100.0
            evaluate_on_domain_004.width, evaluate_on_domain_004.height = 140.0, 100.0
            index_4.width, index_4.height = 140.0, 100.0
            group_input_004_2.width, group_input_004_2.height = 140.0, 100.0
            integer_5.width, integer_5.height = 140.0, 100.0
            integer_001_2.width, integer_001_2.height = 140.0, 100.0
            math_002_1.width, math_002_1.height = 140.0, 100.0
            math_001_5.width, math_001_5.height = 140.0, 100.0
            reroute_006_1.width, reroute_006_1.height = 16.0, 100.0
            remove_named_attribute.width, remove_named_attribute.height = 170.0, 100.0
            store_named_attribute_4.width, store_named_attribute_4.height = 140.0, 100.0
            set_curve_radius_2.width, set_curve_radius_2.height = 140.0, 100.0
            capture_attribute_002.width, capture_attribute_002.height = 140.0, 100.0
            named_attribute_003_1.width, named_attribute_003_1.height = 140.0, 100.0
            named_attribute_002_4.width, named_attribute_002_4.height = 140.0, 100.0
            reroute_007_1.width, reroute_007_1.height = 16.0, 100.0
            sample_index_1.width, sample_index_1.height = 140.0, 100.0
            curve_to_mesh_3.width, curve_to_mesh_3.height = 140.0, 100.0
            group_input_003_3.width, group_input_003_3.height = 140.0, 100.0
            switch_001_3.width, switch_001_3.height = 140.0, 100.0
            group_001_8.width, group_001_8.height = 261.9332275390625, 100.0

            # initialize _mn_utils_style_ribbon_peptide links
            # set_curve_radius_2.Curve -> curve_to_mesh_3.Curve
            _mn_utils_style_ribbon_peptide.links.new(
                set_curve_radius_2.outputs[0], curve_to_mesh_3.inputs[0]
            )
            # named_attribute_001_2.Attribute -> boolean_math_001_9.Boolean
            _mn_utils_style_ribbon_peptide.links.new(
                named_attribute_001_2.outputs[0], boolean_math_001_9.inputs[1]
            )
            # boolean_math_001_9.Boolean -> separate_geometry_6.Selection
            _mn_utils_style_ribbon_peptide.links.new(
                boolean_math_001_9.outputs[0], separate_geometry_6.inputs[1]
            )
            # group_input_39.Selection -> boolean_math_001_9.Boolean
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_39.outputs[1], boolean_math_001_9.inputs[0]
            )
            # group_input_002_3.Material -> set_material_4.Material
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_002_3.outputs[7], set_material_4.inputs[2]
            )
            # group_input_39.Atoms -> separate_geometry_6.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_39.outputs[0], separate_geometry_6.inputs[0]
            )
            # reroute_005_2.Output -> reroute_006_1.Input
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_005_2.outputs[0], reroute_006_1.inputs[0]
            )
            # set_curve_radius_2.Curve -> reroute_005_2.Input
            _mn_utils_style_ribbon_peptide.links.new(
                set_curve_radius_2.outputs[0], reroute_005_2.inputs[0]
            )
            # reroute_6.Output -> sample_index_006.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_6.outputs[0], sample_index_006.inputs[0]
            )
            # sample_index_006.Value -> set_curve_radius_2.Radius
            _mn_utils_style_ribbon_peptide.links.new(
                sample_index_006.outputs[0], set_curve_radius_2.inputs[2]
            )
            # group_input_001_4.Radius -> sample_index_006.Value
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_001_4.outputs[3], sample_index_006.inputs[1]
            )
            # index_4.Index -> sample_index_006.Index
            _mn_utils_style_ribbon_peptide.links.new(
                index_4.outputs[0], sample_index_006.inputs[2]
            )
            # reroute_6.Output -> sample_index_007_1.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_6.outputs[0], sample_index_007_1.inputs[0]
            )
            # group_input_001_4.Shade Smooth -> sample_index_007_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_001_4.outputs[6], sample_index_007_1.inputs[1]
            )
            # sample_index_007_1.Value -> capture_attribute_3.Value
            _mn_utils_style_ribbon_peptide.links.new(
                sample_index_007_1.outputs[0], capture_attribute_3.inputs[1]
            )
            # reroute_001_7.Output -> set_shade_smooth_3.Shade Smooth
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_001_7.outputs[0], set_shade_smooth_3.inputs[2]
            )
            # group_input_39.Selection -> group_001_8.Selection
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_39.outputs[1], group_001_8.inputs[1]
            )
            # group_input_39.Atoms -> group_001_8.Atoms
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_39.outputs[0], group_001_8.inputs[0]
            )
            # group_001_8.CA Splines -> capture_attribute_3.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                group_001_8.outputs[1], capture_attribute_3.inputs[0]
            )
            # capture_attribute_002.Geometry -> set_curve_radius_2.Curve
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_002.outputs[0], set_curve_radius_2.inputs[0]
            )
            # capture_attribute_3.Geometry -> set_spline_type_002.Curve
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_3.outputs[0], set_spline_type_002.inputs[0]
            )
            # set_spline_type_002.Curve -> set_handle_type_001.Curve
            _mn_utils_style_ribbon_peptide.links.new(
                set_spline_type_002.outputs[0], set_handle_type_001.inputs[0]
            )
            # set_handle_type_001.Curve -> set_spline_resolution_001.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                set_handle_type_001.outputs[0], set_spline_resolution_001.inputs[0]
            )
            # index_4.Index -> sample_index_007_1.Index
            _mn_utils_style_ribbon_peptide.links.new(
                index_4.outputs[0], sample_index_007_1.inputs[2]
            )
            # separate_geometry_6.Selection -> reroute_6.Input
            _mn_utils_style_ribbon_peptide.links.new(
                separate_geometry_6.outputs[0], reroute_6.inputs[0]
            )
            # capture_attribute_3.Value -> reroute_001_7.Input
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_3.outputs[1], reroute_001_7.inputs[0]
            )
            # spline_parameter.Factor -> capture_attribute_001_2.Value
            _mn_utils_style_ribbon_peptide.links.new(
                spline_parameter.outputs[0], capture_attribute_001_2.inputs[1]
            )
            # math_8.Value -> combine_xyz_1.X
            _mn_utils_style_ribbon_peptide.links.new(
                math_8.outputs[0], combine_xyz_1.inputs[0]
            )
            # capture_attribute_001_2.Geometry -> curve_to_mesh_3.Profile Curve
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_001_2.outputs[0], curve_to_mesh_3.inputs[1]
            )
            # curve_circle_2.Curve -> capture_attribute_005.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                curve_circle_2.outputs[0], capture_attribute_005.inputs[0]
            )
            # capture_attribute_005.Geometry -> capture_attribute_001_2.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_005.outputs[0], capture_attribute_001_2.inputs[0]
            )
            # index_004_1.Index -> capture_attribute_005.Value
            _mn_utils_style_ribbon_peptide.links.new(
                index_004_1.outputs[0], capture_attribute_005.inputs[1]
            )
            # reroute_004_1.Output -> evaluate_on_domain_002.Value
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_004_1.outputs[0], evaluate_on_domain_002.inputs[0]
            )
            # evaluate_on_domain_002.Value -> compare_005_2.A
            _mn_utils_style_ribbon_peptide.links.new(
                evaluate_on_domain_002.outputs[0], compare_005_2.inputs[2]
            )
            # compare_005_2.Result -> evaluate_on_domain_003_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                compare_005_2.outputs[0], evaluate_on_domain_003_1.inputs[0]
            )
            # evaluate_on_domain_1.Value -> switch_7.False
            _mn_utils_style_ribbon_peptide.links.new(
                evaluate_on_domain_1.outputs[0], switch_7.inputs[1]
            )
            # evaluate_on_domain_003_1.Value -> boolean_math_004_2.Boolean
            _mn_utils_style_ribbon_peptide.links.new(
                evaluate_on_domain_003_1.outputs[0], boolean_math_004_2.inputs[1]
            )
            # reroute_002_6.Output -> evaluate_on_domain_001.Value
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_002_6.outputs[0], evaluate_on_domain_001.inputs[0]
            )
            # evaluate_on_domain_001.Value -> compare_004_2.A
            _mn_utils_style_ribbon_peptide.links.new(
                evaluate_on_domain_001.outputs[0], compare_004_2.inputs[0]
            )
            # boolean_math_004_2.Boolean -> switch_7.Switch
            _mn_utils_style_ribbon_peptide.links.new(
                boolean_math_004_2.outputs[0], switch_7.inputs[0]
            )
            # reroute_002_6.Output -> evaluate_on_domain_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_002_6.outputs[0], evaluate_on_domain_1.inputs[0]
            )
            # switch_7.Output -> combine_xyz_1.Y
            _mn_utils_style_ribbon_peptide.links.new(
                switch_7.outputs[0], combine_xyz_1.inputs[1]
            )
            # set_spline_resolution_001.Geometry -> capture_attribute_002.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                set_spline_resolution_001.outputs[0], capture_attribute_002.inputs[0]
            )
            # reroute_003_3.Output -> math_8.Value
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_003_3.outputs[0], math_8.inputs[0]
            )
            # compare_004_2.Result -> boolean_math_004_2.Boolean
            _mn_utils_style_ribbon_peptide.links.new(
                compare_004_2.outputs[0], boolean_math_004_2.inputs[0]
            )
            # spline_parameter_001.Length -> capture_attribute_002.Value
            _mn_utils_style_ribbon_peptide.links.new(
                spline_parameter_001.outputs[1], capture_attribute_002.inputs[1]
            )
            # group_input_39.BS Smoothing -> group_001_8.BS Smoothing
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_39.outputs[4], group_001_8.inputs[2]
            )
            # combine_xyz_1.Vector -> evaluate_on_domain_004.Value
            _mn_utils_style_ribbon_peptide.links.new(
                combine_xyz_1.outputs[0], evaluate_on_domain_004.inputs[0]
            )
            # evaluate_on_domain_004.Value -> group_output_39.UVs
            _mn_utils_style_ribbon_peptide.links.new(
                evaluate_on_domain_004.outputs[0], group_output_39.inputs[2]
            )
            # capture_attribute_001_2.Value -> reroute_002_6.Input
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_001_2.outputs[1], reroute_002_6.inputs[0]
            )
            # capture_attribute_002.Value -> reroute_003_3.Input
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_002.outputs[1], reroute_003_3.inputs[0]
            )
            # capture_attribute_005.Value -> reroute_004_1.Input
            _mn_utils_style_ribbon_peptide.links.new(
                capture_attribute_005.outputs[1], reroute_004_1.inputs[0]
            )
            # set_shade_smooth_3.Geometry -> set_material_4.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                set_shade_smooth_3.outputs[0], set_material_4.inputs[0]
            )
            # group_input_004_2.Quality -> math_001_5.Value
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_004_2.outputs[2], math_001_5.inputs[0]
            )
            # integer_5.Integer -> math_001_5.Value
            _mn_utils_style_ribbon_peptide.links.new(
                integer_5.outputs[0], math_001_5.inputs[1]
            )
            # math_001_5.Value -> set_spline_resolution_001.Resolution
            _mn_utils_style_ribbon_peptide.links.new(
                math_001_5.outputs[0], set_spline_resolution_001.inputs[2]
            )
            # integer_001_2.Integer -> math_002_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                integer_001_2.outputs[0], math_002_1.inputs[1]
            )
            # group_input_004_2.Quality -> math_002_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_004_2.outputs[2], math_002_1.inputs[0]
            )
            # math_002_1.Value -> curve_circle_2.Resolution
            _mn_utils_style_ribbon_peptide.links.new(
                math_002_1.outputs[0], curve_circle_2.inputs[0]
            )
            # reroute_006_1.Output -> group_output_39.Curve
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_006_1.outputs[0], group_output_39.inputs[1]
            )
            # set_material_4.Geometry -> remove_named_attribute.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                set_material_4.outputs[0], remove_named_attribute.inputs[0]
            )
            # remove_named_attribute.Geometry -> group_output_39.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                remove_named_attribute.outputs[0], group_output_39.inputs[0]
            )
            # curve_to_mesh_3.Mesh -> store_named_attribute_4.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                curve_to_mesh_3.outputs[0], store_named_attribute_4.inputs[0]
            )
            # reroute_007_1.Output -> sample_index_1.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                reroute_007_1.outputs[0], sample_index_1.inputs[0]
            )
            # named_attribute_002_4.Attribute -> sample_index_1.Value
            _mn_utils_style_ribbon_peptide.links.new(
                named_attribute_002_4.outputs[0], sample_index_1.inputs[1]
            )
            # named_attribute_003_1.Attribute -> sample_index_1.Index
            _mn_utils_style_ribbon_peptide.links.new(
                named_attribute_003_1.outputs[0], sample_index_1.inputs[2]
            )
            # sample_index_1.Value -> store_named_attribute_4.Value
            _mn_utils_style_ribbon_peptide.links.new(
                sample_index_1.outputs[0], store_named_attribute_4.inputs[3]
            )
            # group_001_8.CA Mesh Line -> reroute_007_1.Input
            _mn_utils_style_ribbon_peptide.links.new(
                group_001_8.outputs[0], reroute_007_1.inputs[0]
            )
            # store_named_attribute_4.Geometry -> switch_001_3.False
            _mn_utils_style_ribbon_peptide.links.new(
                store_named_attribute_4.outputs[0], switch_001_3.inputs[1]
            )
            # curve_to_mesh_3.Mesh -> switch_001_3.True
            _mn_utils_style_ribbon_peptide.links.new(
                curve_to_mesh_3.outputs[0], switch_001_3.inputs[2]
            )
            # switch_001_3.Output -> set_shade_smooth_3.Geometry
            _mn_utils_style_ribbon_peptide.links.new(
                switch_001_3.outputs[0], set_shade_smooth_3.inputs[0]
            )
            # group_input_003_3.Interpolate Color -> switch_001_3.Switch
            _mn_utils_style_ribbon_peptide.links.new(
                group_input_003_3.outputs[5], switch_001_3.inputs[0]
            )
            return _mn_utils_style_ribbon_peptide

        _mn_utils_style_ribbon_peptide = _mn_utils_style_ribbon_peptide_node_group()

        # initialize style_ribbon node group
        def style_ribbon_node_group():
            style_ribbon = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Ribbon"
            )

            style_ribbon.color_tag = "GEOMETRY"
            style_ribbon.description = ""

            # style_ribbon interface
            # Socket Geometry
            geometry_socket_7 = style_ribbon.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_7.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_12 = style_ribbon.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_12.attribute_domain = "POINT"
            atoms_socket_12.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_15 = style_ribbon.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_15.attribute_domain = "POINT"
            selection_socket_15.hide_value = True
            selection_socket_15.description = (
                "Selection of atoms to apply this style to"
            )

            # Socket Quality
            quality_socket_2 = style_ribbon.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_2.subtype = "NONE"
            quality_socket_2.default_value = 3
            quality_socket_2.min_value = 0
            quality_socket_2.max_value = 6
            quality_socket_2.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_3 = style_ribbon.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_3.subtype = "NONE"
            radius_socket_3.default_value = 1.600000023841858
            radius_socket_3.min_value = 0.0
            radius_socket_3.max_value = 3.4028234663852886e38
            radius_socket_3.attribute_domain = "POINT"

            # Socket Smoothing
            smoothing_socket = style_ribbon.interface.new_socket(
                name="Smoothing", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            smoothing_socket.subtype = "FACTOR"
            smoothing_socket.default_value = 0.5
            smoothing_socket.min_value = 0.0
            smoothing_socket.max_value = 1.0
            smoothing_socket.attribute_domain = "POINT"
            smoothing_socket.description = (
                "Smoothen the sheet ribbons such as beta-sheets"
            )

            # Panel Material
            material_panel_3 = style_ribbon.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Color Blur
            color_blur_socket_1 = style_ribbon.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_3,
            )
            color_blur_socket_1.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_5 = style_ribbon.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_3,
            )
            shade_smooth_socket_5.attribute_domain = "POINT"
            shade_smooth_socket_5.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_7 = style_ribbon.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_3,
            )
            material_socket_7.attribute_domain = "POINT"
            material_socket_7.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_ribbon nodes
            # node Group Output
            group_output_40 = style_ribbon.nodes.new("NodeGroupOutput")
            group_output_40.name = "Group Output"
            group_output_40.is_active_output = True

            # node Join Geometry
            join_geometry_2 = style_ribbon.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_2.name = "Join Geometry"

            # node Math
            math_9 = style_ribbon.nodes.new("ShaderNodeMath")
            math_9.name = "Math"
            math_9.operation = "MULTIPLY"
            math_9.use_clamp = False
            # Value_001
            math_9.inputs[1].default_value = 2.0

            # node Math.001
            math_001_6 = style_ribbon.nodes.new("ShaderNodeMath")
            math_001_6.name = "Math.001"
            math_001_6.operation = "MULTIPLY"
            math_001_6.use_clamp = False
            # Value_001
            math_001_6.inputs[1].default_value = 4.0

            # node Group Input.001
            group_input_001_5 = style_ribbon.nodes.new("NodeGroupInput")
            group_input_001_5.name = "Group Input.001"

            # node Group
            group_16 = style_ribbon.nodes.new("GeometryNodeGroup")
            group_16.label = "Separate Polymers"
            group_16.name = "Group"
            group_16.node_tree = separate_polymers

            # node Domain Size
            domain_size_2 = style_ribbon.nodes.new("GeometryNodeAttributeDomainSize")
            domain_size_2.name = "Domain Size"
            domain_size_2.component = "MESH"
            domain_size_2.outputs[1].hide = True
            domain_size_2.outputs[2].hide = True
            domain_size_2.outputs[3].hide = True
            domain_size_2.outputs[4].hide = True
            domain_size_2.outputs[5].hide = True

            # node Compare
            compare_6 = style_ribbon.nodes.new("FunctionNodeCompare")
            compare_6.name = "Compare"
            compare_6.data_type = "INT"
            compare_6.mode = "ELEMENT"
            compare_6.operation = "GREATER_THAN"
            # B_INT
            compare_6.inputs[3].default_value = 0

            # node Switch
            switch_8 = style_ribbon.nodes.new("GeometryNodeSwitch")
            switch_8.name = "Switch"
            switch_8.input_type = "GEOMETRY"

            # node Group.069
            group_069 = style_ribbon.nodes.new("GeometryNodeGroup")
            group_069.name = "Group.069"
            group_069.node_tree = _mn_utils_style_ribbon_nucleic
            # Input_28
            group_069.inputs[8].default_value = 0.20000000298023224
            # Input_29
            group_069.inputs[9].default_value = 4

            # node Group.027
            group_027 = style_ribbon.nodes.new("GeometryNodeGroup")
            group_027.name = "Group.027"
            group_027.node_tree = _mn_utils_style_ribbon_peptide

            # Set locations
            group_output_40.location = (412.468017578125, 118.74327087402344)
            join_geometry_2.location = (238.50283813476562, 96.20518493652344)
            math_9.location = (-340.0, -300.0)
            math_001_6.location = (-340.0, -480.0)
            group_input_001_5.location = (-660.0, -40.0)
            group_16.location = (-428.8030700683594, 129.53338623046875)
            domain_size_2.location = (-400.0, 340.0)
            compare_6.location = (-240.0, 340.0)
            switch_8.location = (0.0, 340.0)
            group_069.location = (-80.0, -140.0)
            group_027.location = (-80.0, 180.0)

            # Set dimensions
            group_output_40.width, group_output_40.height = 140.0, 100.0
            join_geometry_2.width, join_geometry_2.height = 140.0, 100.0
            math_9.width, math_9.height = 140.0, 100.0
            math_001_6.width, math_001_6.height = 140.0, 100.0
            group_input_001_5.width, group_input_001_5.height = 140.0, 100.0
            group_16.width, group_16.height = 200.0, 100.0
            domain_size_2.width, domain_size_2.height = 140.0, 100.0
            compare_6.width, compare_6.height = 140.0, 100.0
            switch_8.width, switch_8.height = 140.0, 100.0
            group_069.width, group_069.height = 221.1802978515625, 100.0
            group_027.width, group_027.height = 215.02288818359375, 100.0

            # initialize style_ribbon links
            # group_16.Peptide -> group_027.Atoms
            style_ribbon.links.new(group_16.outputs[0], group_027.inputs[0])
            # group_16.Nucleic -> group_069.Atoms
            style_ribbon.links.new(group_16.outputs[1], group_069.inputs[0])
            # group_069.Ribbon + Bases -> join_geometry_2.Geometry
            style_ribbon.links.new(group_069.outputs[0], join_geometry_2.inputs[0])
            # group_input_001_5.Selection -> group_027.Selection
            style_ribbon.links.new(group_input_001_5.outputs[1], group_027.inputs[1])
            # group_input_001_5.Selection -> group_069.Selection
            style_ribbon.links.new(group_input_001_5.outputs[1], group_069.inputs[1])
            # group_input_001_5.Quality -> group_027.Quality
            style_ribbon.links.new(group_input_001_5.outputs[2], group_027.inputs[2])
            # group_input_001_5.Radius -> group_027.Radius
            style_ribbon.links.new(group_input_001_5.outputs[3], group_027.inputs[3])
            # group_input_001_5.Shade Smooth -> group_027.Shade Smooth
            style_ribbon.links.new(group_input_001_5.outputs[6], group_027.inputs[6])
            # group_input_001_5.Material -> group_027.Material
            style_ribbon.links.new(group_input_001_5.outputs[7], group_027.inputs[7])
            # group_input_001_5.Smoothing -> group_027.BS Smoothing
            style_ribbon.links.new(group_input_001_5.outputs[4], group_027.inputs[4])
            # group_input_001_5.Radius -> group_069.Backbone Radius
            style_ribbon.links.new(group_input_001_5.outputs[3], group_069.inputs[6])
            # group_input_001_5.Material -> group_069.Material
            style_ribbon.links.new(group_input_001_5.outputs[7], group_069.inputs[2])
            # group_input_001_5.Shade Smooth -> group_069.Backbone Shade Smooth
            style_ribbon.links.new(group_input_001_5.outputs[6], group_069.inputs[7])
            # join_geometry_2.Geometry -> group_output_40.Geometry
            style_ribbon.links.new(
                join_geometry_2.outputs[0], group_output_40.inputs[0]
            )
            # group_input_001_5.Quality -> math_9.Value
            style_ribbon.links.new(group_input_001_5.outputs[2], math_9.inputs[0])
            # math_9.Value -> group_069.Backbone Subdivisions
            style_ribbon.links.new(math_9.outputs[0], group_069.inputs[4])
            # group_input_001_5.Quality -> math_001_6.Value
            style_ribbon.links.new(group_input_001_5.outputs[2], math_001_6.inputs[0])
            # math_001_6.Value -> group_069.Backbone Resolution
            style_ribbon.links.new(math_001_6.outputs[0], group_069.inputs[5])
            # group_input_001_5.Atoms -> group_16.Atoms
            style_ribbon.links.new(group_input_001_5.outputs[0], group_16.inputs[0])
            # group_16.Peptide -> domain_size_2.Geometry
            style_ribbon.links.new(group_16.outputs[0], domain_size_2.inputs[0])
            # domain_size_2.Point Count -> compare_6.A
            style_ribbon.links.new(domain_size_2.outputs[0], compare_6.inputs[2])
            # compare_6.Result -> switch_8.Switch
            style_ribbon.links.new(compare_6.outputs[0], switch_8.inputs[0])
            # group_027.Geometry -> switch_8.True
            style_ribbon.links.new(group_027.outputs[0], switch_8.inputs[2])
            # group_input_001_5.Color Blur -> group_027.Interpolate Color
            style_ribbon.links.new(group_input_001_5.outputs[5], group_027.inputs[5])
            # group_input_001_5.Color Blur -> group_069.Intepolate Color
            style_ribbon.links.new(group_input_001_5.outputs[5], group_069.inputs[3])
            # switch_8.Output -> join_geometry_2.Geometry
            style_ribbon.links.new(switch_8.outputs[0], join_geometry_2.inputs[0])
            return style_ribbon

        style_ribbon = style_ribbon_node_group()

        # initialize select_atomic_number node group
        def select_atomic_number_node_group():
            select_atomic_number = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Atomic Number"
            )

            select_atomic_number.color_tag = "INPUT"
            select_atomic_number.description = ""

            # select_atomic_number interface
            # Socket Selection
            selection_socket_16 = select_atomic_number.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_16.attribute_domain = "POINT"
            selection_socket_16.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_7 = select_atomic_number.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_7.attribute_domain = "POINT"
            inverted_socket_7.description = "The inverse of the calculated selection"

            # Socket And
            and_socket_8 = select_atomic_number.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_8.attribute_domain = "POINT"
            and_socket_8.hide_value = True

            # Socket Or
            or_socket_7 = select_atomic_number.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_7.attribute_domain = "POINT"
            or_socket_7.hide_value = True

            # Socket atomic_number
            atomic_number_socket = select_atomic_number.interface.new_socket(
                name="atomic_number", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atomic_number_socket.subtype = "NONE"
            atomic_number_socket.default_value = 6
            atomic_number_socket.min_value = 1
            atomic_number_socket.max_value = 140
            atomic_number_socket.attribute_domain = "POINT"
            atomic_number_socket.description = (
                "Create a selection based on the inputted atomic number."
            )

            # initialize select_atomic_number nodes
            # node Named Attribute
            named_attribute_8 = select_atomic_number.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_8.name = "Named Attribute"
            named_attribute_8.data_type = "INT"
            # Name
            named_attribute_8.inputs[0].default_value = "atomic_number"

            # node Compare
            compare_7 = select_atomic_number.nodes.new("FunctionNodeCompare")
            compare_7.name = "Compare"
            compare_7.data_type = "INT"
            compare_7.mode = "ELEMENT"
            compare_7.operation = "EQUAL"

            # node Boolean Math
            boolean_math_12 = select_atomic_number.nodes.new("FunctionNodeBooleanMath")
            boolean_math_12.name = "Boolean Math"
            boolean_math_12.operation = "NOT"

            # node Group Output
            group_output_41 = select_atomic_number.nodes.new("NodeGroupOutput")
            group_output_41.name = "Group Output"
            group_output_41.is_active_output = True

            # node Group Input
            group_input_40 = select_atomic_number.nodes.new("NodeGroupInput")
            group_input_40.name = "Group Input"
            group_input_40.outputs[0].hide = True

            # node Reroute
            reroute_7 = select_atomic_number.nodes.new("NodeReroute")
            reroute_7.name = "Reroute"
            # node Boolean Math.001
            boolean_math_001_10 = select_atomic_number.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_10.name = "Boolean Math.001"
            boolean_math_001_10.operation = "AND"

            # node Group Input.001
            group_input_001_6 = select_atomic_number.nodes.new("NodeGroupInput")
            group_input_001_6.name = "Group Input.001"
            group_input_001_6.outputs[1].hide = True
            group_input_001_6.outputs[2].hide = True
            group_input_001_6.outputs[3].hide = True

            # node Boolean Math.002
            boolean_math_002_7 = select_atomic_number.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_7.name = "Boolean Math.002"
            boolean_math_002_7.operation = "OR"

            # Set locations
            named_attribute_8.location = (-548.0000610351562, 0.0)
            compare_7.location = (-388.0, 0.0)
            boolean_math_12.location = (148.0, -60.0)
            group_output_41.location = (347.9999694824219, 0.0)
            group_input_40.location = (-548.0000610351562, -140.0)
            reroute_7.location = (148.0, -60.0)
            boolean_math_001_10.location = (-220.0, 0.0)
            group_input_001_6.location = (-400.0, 80.0)
            boolean_math_002_7.location = (-40.0, 0.0)

            # Set dimensions
            named_attribute_8.width, named_attribute_8.height = 140.0, 100.0
            compare_7.width, compare_7.height = 140.0, 100.0
            boolean_math_12.width, boolean_math_12.height = 140.0, 100.0
            group_output_41.width, group_output_41.height = 140.0, 100.0
            group_input_40.width, group_input_40.height = 140.0, 100.0
            reroute_7.width, reroute_7.height = 16.0, 100.0
            boolean_math_001_10.width, boolean_math_001_10.height = 140.0, 100.0
            group_input_001_6.width, group_input_001_6.height = 140.0, 100.0
            boolean_math_002_7.width, boolean_math_002_7.height = 140.0, 100.0

            # initialize select_atomic_number links
            # named_attribute_8.Attribute -> compare_7.A
            select_atomic_number.links.new(
                named_attribute_8.outputs[0], compare_7.inputs[2]
            )
            # reroute_7.Output -> boolean_math_12.Boolean
            select_atomic_number.links.new(
                reroute_7.outputs[0], boolean_math_12.inputs[0]
            )
            # group_input_40.atomic_number -> compare_7.B
            select_atomic_number.links.new(
                group_input_40.outputs[2], compare_7.inputs[3]
            )
            # reroute_7.Output -> group_output_41.Selection
            select_atomic_number.links.new(
                reroute_7.outputs[0], group_output_41.inputs[0]
            )
            # boolean_math_12.Boolean -> group_output_41.Inverted
            select_atomic_number.links.new(
                boolean_math_12.outputs[0], group_output_41.inputs[1]
            )
            # boolean_math_002_7.Boolean -> reroute_7.Input
            select_atomic_number.links.new(
                boolean_math_002_7.outputs[0], reroute_7.inputs[0]
            )
            # compare_7.Result -> boolean_math_001_10.Boolean
            select_atomic_number.links.new(
                compare_7.outputs[0], boolean_math_001_10.inputs[1]
            )
            # group_input_001_6.And -> boolean_math_001_10.Boolean
            select_atomic_number.links.new(
                group_input_001_6.outputs[0], boolean_math_001_10.inputs[0]
            )
            # boolean_math_001_10.Boolean -> boolean_math_002_7.Boolean
            select_atomic_number.links.new(
                boolean_math_001_10.outputs[0], boolean_math_002_7.inputs[0]
            )
            # group_input_40.Or -> boolean_math_002_7.Boolean
            select_atomic_number.links.new(
                group_input_40.outputs[1], boolean_math_002_7.inputs[1]
            )
            return select_atomic_number

        select_atomic_number = select_atomic_number_node_group()

        # initialize select_sphere node group
        def select_sphere_node_group():
            select_sphere = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Sphere"
            )

            select_sphere.color_tag = "INPUT"
            select_sphere.description = ""

            # select_sphere interface
            # Socket Selection
            selection_socket_17 = select_sphere.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_17.attribute_domain = "POINT"
            selection_socket_17.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_8 = select_sphere.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_8.attribute_domain = "POINT"
            inverted_socket_8.description = "The inverse of the calculated selection"

            # Socket 0..1
            _0__1_socket = select_sphere.interface.new_socket(
                name="0..1", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            _0__1_socket.subtype = "NONE"
            _0__1_socket.default_value = 0.0
            _0__1_socket.min_value = -3.4028234663852886e38
            _0__1_socket.max_value = 3.4028234663852886e38
            _0__1_socket.attribute_domain = "POINT"

            # Socket And
            and_socket_9 = select_sphere.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_9.attribute_domain = "POINT"
            and_socket_9.hide_value = True

            # Socket Or
            or_socket_8 = select_sphere.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_8.attribute_domain = "POINT"
            or_socket_8.hide_value = True

            # Socket Object
            object_socket = select_sphere.interface.new_socket(
                name="Object", in_out="INPUT", socket_type="NodeSocketObject"
            )
            object_socket.attribute_domain = "POINT"

            # Socket From Min (A)
            from_min__a__socket = select_sphere.interface.new_socket(
                name="From Min (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_min__a__socket.subtype = "NONE"
            from_min__a__socket.default_value = 0.0
            from_min__a__socket.min_value = -10000.0
            from_min__a__socket.max_value = 10000.0
            from_min__a__socket.attribute_domain = "POINT"

            # Socket From Max (A)
            from_max__a__socket = select_sphere.interface.new_socket(
                name="From Max (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_max__a__socket.subtype = "NONE"
            from_max__a__socket.default_value = 10.0
            from_max__a__socket.min_value = -10000.0
            from_max__a__socket.max_value = 10000.0
            from_max__a__socket.attribute_domain = "POINT"

            # initialize select_sphere nodes
            # node Group Input
            group_input_41 = select_sphere.nodes.new("NodeGroupInput")
            group_input_41.name = "Group Input"
            group_input_41.outputs[0].hide = True

            # node Math.003
            math_003_1 = select_sphere.nodes.new("ShaderNodeMath")
            math_003_1.name = "Math.003"
            math_003_1.operation = "ABSOLUTE"
            math_003_1.use_clamp = False

            # node Map Range
            map_range = select_sphere.nodes.new("ShaderNodeMapRange")
            map_range.name = "Map Range"
            map_range.clamp = True
            map_range.data_type = "FLOAT"
            map_range.interpolation_type = "LINEAR"
            # To Min
            map_range.inputs[3].default_value = 0.0
            # To Max
            map_range.inputs[4].default_value = 1.0

            # node Position
            position = select_sphere.nodes.new("GeometryNodeInputPosition")
            position.name = "Position"

            # node Object Info
            object_info = select_sphere.nodes.new("GeometryNodeObjectInfo")
            object_info.name = "Object Info"
            object_info.transform_space = "RELATIVE"
            # As Instance
            object_info.inputs[1].default_value = True

            # node Vector Math.002
            vector_math_002_2 = select_sphere.nodes.new("ShaderNodeVectorMath")
            vector_math_002_2.name = "Vector Math.002"
            vector_math_002_2.operation = "DISTANCE"

            # node Group Output
            group_output_42 = select_sphere.nodes.new("NodeGroupOutput")
            group_output_42.name = "Group Output"
            group_output_42.is_active_output = True

            # node Compare
            compare_8 = select_sphere.nodes.new("FunctionNodeCompare")
            compare_8.name = "Compare"
            compare_8.data_type = "FLOAT"
            compare_8.mode = "ELEMENT"
            compare_8.operation = "LESS_THAN"

            # node Boolean Math
            boolean_math_13 = select_sphere.nodes.new("FunctionNodeBooleanMath")
            boolean_math_13.name = "Boolean Math"
            boolean_math_13.operation = "NOT"

            # node Math.002
            math_002_2 = select_sphere.nodes.new("ShaderNodeMath")
            math_002_2.name = "Math.002"
            math_002_2.operation = "SUBTRACT"
            math_002_2.use_clamp = False

            # node Math.004
            math_004 = select_sphere.nodes.new("ShaderNodeMath")
            math_004.name = "Math.004"
            math_004.operation = "MULTIPLY"
            math_004.use_clamp = False
            # Value_001
            math_004.inputs[1].default_value = 1.0

            # node Group Input.001
            group_input_001_7 = select_sphere.nodes.new("NodeGroupInput")
            group_input_001_7.name = "Group Input.001"
            group_input_001_7.outputs[0].hide = True

            # node Group.001
            group_001_9 = select_sphere.nodes.new("GeometryNodeGroup")
            group_001_9.name = "Group.001"
            group_001_9.node_tree = mn_units

            # node Group
            group_17 = select_sphere.nodes.new("GeometryNodeGroup")
            group_17.name = "Group"
            group_17.node_tree = mn_units

            # node Vector Math
            vector_math_3 = select_sphere.nodes.new("ShaderNodeVectorMath")
            vector_math_3.name = "Vector Math"
            vector_math_3.operation = "ABSOLUTE"

            # node Reroute
            reroute_8 = select_sphere.nodes.new("NodeReroute")
            reroute_8.name = "Reroute"
            # node Boolean Math.001
            boolean_math_001_11 = select_sphere.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_11.name = "Boolean Math.001"
            boolean_math_001_11.hide = True
            boolean_math_001_11.operation = "AND"

            # node Group Input.002
            group_input_002_4 = select_sphere.nodes.new("NodeGroupInput")
            group_input_002_4.name = "Group Input.002"
            group_input_002_4.outputs[2].hide = True
            group_input_002_4.outputs[3].hide = True
            group_input_002_4.outputs[4].hide = True
            group_input_002_4.outputs[5].hide = True

            # node Boolean Math.002
            boolean_math_002_8 = select_sphere.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_8.name = "Boolean Math.002"
            boolean_math_002_8.operation = "AND"

            # Set locations
            group_input_41.location = (-760.0, 220.0)
            math_003_1.location = (-40.0, 40.0)
            map_range.location = (180.0, 20.0)
            position.location = (-560.0, 300.0)
            object_info.location = (-560.0, 240.0)
            vector_math_002_2.location = (-380.0, 300.0)
            group_output_42.location = (607.9999389648438, 140.0)
            compare_8.location = (-200.0, 300.0)
            boolean_math_13.location = (368.0, 140.0)
            math_002_2.location = (-200.0, 40.0)
            math_004.location = (-380.0, 40.0)
            group_input_001_7.location = (-352.86383056640625, -163.8787841796875)
            group_001_9.location = (-40.0, -260.0)
            group_17.location = (-40.0, -140.0)
            vector_math_3.location = (-380.0, 160.0)
            reroute_8.location = (328.0, 160.0)
            boolean_math_001_11.location = (-40.0, 300.0)
            group_input_002_4.location = (-200.0, 360.0)
            boolean_math_002_8.location = (120.0, 340.0)

            # Set dimensions
            group_input_41.width, group_input_41.height = 140.0, 100.0
            math_003_1.width, math_003_1.height = 140.0, 100.0
            map_range.width, map_range.height = 140.0, 100.0
            position.width, position.height = 140.0, 100.0
            object_info.width, object_info.height = 140.0, 100.0
            vector_math_002_2.width, vector_math_002_2.height = 140.0, 100.0
            group_output_42.width, group_output_42.height = 140.0, 100.0
            compare_8.width, compare_8.height = 140.0, 100.0
            boolean_math_13.width, boolean_math_13.height = 140.0, 100.0
            math_002_2.width, math_002_2.height = 140.0, 100.0
            math_004.width, math_004.height = 140.0, 100.0
            group_input_001_7.width, group_input_001_7.height = 140.0, 100.0
            group_001_9.width, group_001_9.height = 140.0, 100.0
            group_17.width, group_17.height = 140.0, 100.0
            vector_math_3.width, vector_math_3.height = 140.0, 100.0
            reroute_8.width, reroute_8.height = 16.0, 100.0
            boolean_math_001_11.width, boolean_math_001_11.height = 140.0, 100.0
            group_input_002_4.width, group_input_002_4.height = 140.0, 100.0
            boolean_math_002_8.width, boolean_math_002_8.height = 140.0, 100.0

            # initialize select_sphere links
            # group_input_41.Object -> object_info.Object
            select_sphere.links.new(group_input_41.outputs[2], object_info.inputs[0])
            # group_17.Angstrom -> map_range.From Min
            select_sphere.links.new(group_17.outputs[0], map_range.inputs[1])
            # map_range.Result -> group_output_42.0..1
            select_sphere.links.new(map_range.outputs[0], group_output_42.inputs[2])
            # object_info.Location -> vector_math_002_2.Vector
            select_sphere.links.new(object_info.outputs[1], vector_math_002_2.inputs[1])
            # vector_math_002_2.Value -> compare_8.A
            select_sphere.links.new(vector_math_002_2.outputs[1], compare_8.inputs[0])
            # vector_math_3.Vector -> compare_8.B
            select_sphere.links.new(vector_math_3.outputs[0], compare_8.inputs[1])
            # reroute_8.Output -> group_output_42.Selection
            select_sphere.links.new(reroute_8.outputs[0], group_output_42.inputs[0])
            # vector_math_002_2.Value -> math_002_2.Value
            select_sphere.links.new(vector_math_002_2.outputs[1], math_002_2.inputs[0])
            # math_002_2.Value -> math_003_1.Value
            select_sphere.links.new(math_002_2.outputs[0], math_003_1.inputs[0])
            # math_003_1.Value -> map_range.Value
            select_sphere.links.new(math_003_1.outputs[0], map_range.inputs[0])
            # group_001_9.Angstrom -> map_range.From Max
            select_sphere.links.new(group_001_9.outputs[0], map_range.inputs[2])
            # position.Position -> vector_math_002_2.Vector
            select_sphere.links.new(position.outputs[0], vector_math_002_2.inputs[0])
            # reroute_8.Output -> boolean_math_13.Boolean
            select_sphere.links.new(reroute_8.outputs[0], boolean_math_13.inputs[0])
            # boolean_math_13.Boolean -> group_output_42.Inverted
            select_sphere.links.new(
                boolean_math_13.outputs[0], group_output_42.inputs[1]
            )
            # vector_math_3.Vector -> math_004.Value
            select_sphere.links.new(vector_math_3.outputs[0], math_004.inputs[0])
            # math_004.Value -> math_002_2.Value
            select_sphere.links.new(math_004.outputs[0], math_002_2.inputs[1])
            # group_input_001_7.From Min (A) -> group_17.Value
            select_sphere.links.new(group_input_001_7.outputs[3], group_17.inputs[0])
            # group_input_001_7.From Max (A) -> group_001_9.Value
            select_sphere.links.new(group_input_001_7.outputs[4], group_001_9.inputs[0])
            # object_info.Scale -> vector_math_3.Vector
            select_sphere.links.new(object_info.outputs[3], vector_math_3.inputs[0])
            # boolean_math_002_8.Boolean -> reroute_8.Input
            select_sphere.links.new(boolean_math_002_8.outputs[0], reroute_8.inputs[0])
            # compare_8.Result -> boolean_math_001_11.Boolean
            select_sphere.links.new(compare_8.outputs[0], boolean_math_001_11.inputs[1])
            # group_input_002_4.And -> boolean_math_001_11.Boolean
            select_sphere.links.new(
                group_input_002_4.outputs[0], boolean_math_001_11.inputs[0]
            )
            # boolean_math_001_11.Boolean -> boolean_math_002_8.Boolean
            select_sphere.links.new(
                boolean_math_001_11.outputs[0], boolean_math_002_8.inputs[0]
            )
            # group_input_002_4.Or -> boolean_math_002_8.Boolean
            select_sphere.links.new(
                group_input_002_4.outputs[1], boolean_math_002_8.inputs[1]
            )
            return select_sphere

        select_sphere = select_sphere_node_group()

        # initialize select_res_whole node group
        def select_res_whole_node_group():
            select_res_whole = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Res Whole"
            )

            select_res_whole.color_tag = "INPUT"
            select_res_whole.description = ""

            # select_res_whole interface
            # Socket Selection
            selection_socket_18 = select_res_whole.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_18.attribute_domain = "POINT"
            selection_socket_18.description = "The calculated selection"

            # Socket Selection
            selection_socket_19 = select_res_whole.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_19.attribute_domain = "POINT"
            selection_socket_19.hide_value = True
            selection_socket_19.description = "Selection of atoms to apply this node to"

            # Socket Expand
            expand_socket = select_res_whole.interface.new_socket(
                name="Expand", in_out="INPUT", socket_type="NodeSocketBool"
            )
            expand_socket.attribute_domain = "POINT"
            expand_socket.description = "Whether to expand the selection to the whole residue if at least one atom is selected"

            # initialize select_res_whole nodes
            # node Accumulate Field
            accumulate_field_1 = select_res_whole.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_1.name = "Accumulate Field"
            accumulate_field_1.data_type = "INT"
            accumulate_field_1.domain = "POINT"

            # node Compare.001
            compare_001_5 = select_res_whole.nodes.new("FunctionNodeCompare")
            compare_001_5.name = "Compare.001"
            compare_001_5.data_type = "INT"
            compare_001_5.mode = "ELEMENT"
            compare_001_5.operation = "GREATER_THAN"
            # B_INT
            compare_001_5.inputs[3].default_value = 0

            # node Group Output
            group_output_43 = select_res_whole.nodes.new("NodeGroupOutput")
            group_output_43.name = "Group Output"
            group_output_43.is_active_output = True

            # node Named Attribute.001
            named_attribute_001_3 = select_res_whole.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_3.name = "Named Attribute.001"
            named_attribute_001_3.data_type = "INT"
            # Name
            named_attribute_001_3.inputs[0].default_value = "res_id"

            # node Index
            index_5 = select_res_whole.nodes.new("GeometryNodeInputIndex")
            index_5.name = "Index"

            # node Math
            math_10 = select_res_whole.nodes.new("ShaderNodeMath")
            math_10.label = "x + 1"
            math_10.name = "Math"
            math_10.hide = True
            math_10.operation = "ADD"
            math_10.use_clamp = False
            # Value_001
            math_10.inputs[1].default_value = 1.0

            # node Field at Index
            field_at_index_1 = select_res_whole.nodes.new("GeometryNodeFieldAtIndex")
            field_at_index_1.name = "Field at Index"
            field_at_index_1.data_type = "INT"
            field_at_index_1.domain = "POINT"

            # node Compare
            compare_9 = select_res_whole.nodes.new("FunctionNodeCompare")
            compare_9.name = "Compare"
            compare_9.data_type = "INT"
            compare_9.mode = "ELEMENT"
            compare_9.operation = "NOT_EQUAL"

            # node Accumulate Field.001
            accumulate_field_001_2 = select_res_whole.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_2.name = "Accumulate Field.001"
            accumulate_field_001_2.data_type = "INT"
            accumulate_field_001_2.domain = "POINT"
            # Group Index
            accumulate_field_001_2.inputs[1].default_value = 0

            # node Group Input
            group_input_42 = select_res_whole.nodes.new("NodeGroupInput")
            group_input_42.name = "Group Input"

            # node Switch
            switch_9 = select_res_whole.nodes.new("GeometryNodeSwitch")
            switch_9.name = "Switch"
            switch_9.input_type = "BOOLEAN"

            # Set locations
            accumulate_field_1.location = (0.0, 80.0)
            compare_001_5.location = (160.0, 80.0)
            group_output_43.location = (480.0, 180.0)
            named_attribute_001_3.location = (-520.0, -100.0)
            index_5.location = (-700.0, -280.0)
            math_10.location = (-700.0, -340.0)
            field_at_index_1.location = (-520.0, -240.0)
            compare_9.location = (-360.0, -240.0)
            accumulate_field_001_2.location = (-200.0, -200.0)
            group_input_42.location = (-280.0, 160.0)
            switch_9.location = (160.0, 240.0)

            # Set dimensions
            accumulate_field_1.width, accumulate_field_1.height = 140.0, 100.0
            compare_001_5.width, compare_001_5.height = 140.0, 100.0
            group_output_43.width, group_output_43.height = 140.0, 100.0
            named_attribute_001_3.width, named_attribute_001_3.height = 140.0, 100.0
            index_5.width, index_5.height = 140.0, 100.0
            math_10.width, math_10.height = 140.0, 100.0
            field_at_index_1.width, field_at_index_1.height = 140.0, 100.0
            compare_9.width, compare_9.height = 140.0, 100.0
            accumulate_field_001_2.width, accumulate_field_001_2.height = 140.0, 100.0
            group_input_42.width, group_input_42.height = 140.0, 100.0
            switch_9.width, switch_9.height = 140.0, 100.0

            # initialize select_res_whole links
            # group_input_42.Selection -> accumulate_field_1.Value
            select_res_whole.links.new(
                group_input_42.outputs[0], accumulate_field_1.inputs[0]
            )
            # accumulate_field_1.Total -> compare_001_5.A
            select_res_whole.links.new(
                accumulate_field_1.outputs[2], compare_001_5.inputs[2]
            )
            # named_attribute_001_3.Attribute -> field_at_index_1.Value
            select_res_whole.links.new(
                named_attribute_001_3.outputs[0], field_at_index_1.inputs[1]
            )
            # index_5.Index -> math_10.Value
            select_res_whole.links.new(index_5.outputs[0], math_10.inputs[0])
            # math_10.Value -> field_at_index_1.Index
            select_res_whole.links.new(math_10.outputs[0], field_at_index_1.inputs[0])
            # named_attribute_001_3.Attribute -> compare_9.A
            select_res_whole.links.new(
                named_attribute_001_3.outputs[0], compare_9.inputs[2]
            )
            # field_at_index_1.Value -> compare_9.B
            select_res_whole.links.new(field_at_index_1.outputs[0], compare_9.inputs[3])
            # compare_9.Result -> accumulate_field_001_2.Value
            select_res_whole.links.new(
                compare_9.outputs[0], accumulate_field_001_2.inputs[0]
            )
            # accumulate_field_001_2.Trailing -> accumulate_field_1.Group ID
            select_res_whole.links.new(
                accumulate_field_001_2.outputs[1], accumulate_field_1.inputs[1]
            )
            # group_input_42.Selection -> switch_9.False
            select_res_whole.links.new(group_input_42.outputs[0], switch_9.inputs[1])
            # compare_001_5.Result -> switch_9.True
            select_res_whole.links.new(compare_001_5.outputs[0], switch_9.inputs[2])
            # switch_9.Output -> group_output_43.Selection
            select_res_whole.links.new(switch_9.outputs[0], group_output_43.inputs[0])
            # group_input_42.Expand -> switch_9.Switch
            select_res_whole.links.new(group_input_42.outputs[1], switch_9.inputs[0])
            return select_res_whole

        select_res_whole = select_res_whole_node_group()

        # initialize select_proximity node group
        def select_proximity_node_group():
            select_proximity = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Proximity"
            )

            select_proximity.color_tag = "INPUT"
            select_proximity.description = ""

            # select_proximity interface
            # Socket Selection
            selection_socket_20 = select_proximity.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_20.attribute_domain = "POINT"
            selection_socket_20.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_9 = select_proximity.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_9.attribute_domain = "POINT"
            inverted_socket_9.description = "The inverse of the calculated selection"

            # Socket Target Atoms
            target_atoms_socket = select_proximity.interface.new_socket(
                name="Target Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            target_atoms_socket.attribute_domain = "POINT"
            target_atoms_socket.description = "The atoms to measure the distance from."

            # Socket Subset
            subset_socket = select_proximity.interface.new_socket(
                name="Subset", in_out="INPUT", socket_type="NodeSocketBool"
            )
            subset_socket.attribute_domain = "POINT"
            subset_socket.hide_value = True
            subset_socket.description = (
                "Subset of input atoms to use for proximity calculation"
            )

            # Socket Expand
            expand_socket_1 = select_proximity.interface.new_socket(
                name="Expand", in_out="INPUT", socket_type="NodeSocketBool"
            )
            expand_socket_1.attribute_domain = "POINT"
            expand_socket_1.description = "Whether to expand selection to entire residue if single atom is selected"

            # Socket Distance (A)
            distance__a__socket = select_proximity.interface.new_socket(
                name="Distance (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distance__a__socket.subtype = "NONE"
            distance__a__socket.default_value = 5.0
            distance__a__socket.min_value = 0.0
            distance__a__socket.max_value = 10000.0
            distance__a__socket.attribute_domain = "POINT"
            distance__a__socket.description = (
                "Cutoff distance for the selection in Angstroms"
            )

            # initialize select_proximity nodes
            # node Geometry Proximity
            geometry_proximity = select_proximity.nodes.new("GeometryNodeProximity")
            geometry_proximity.name = "Geometry Proximity"
            geometry_proximity.target_element = "POINTS"
            # Group ID
            geometry_proximity.inputs[1].default_value = 0
            # Source Position
            geometry_proximity.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Sample Group ID
            geometry_proximity.inputs[3].default_value = 0

            # node Group.068
            group_068 = select_proximity.nodes.new("GeometryNodeGroup")
            group_068.name = "Group.068"
            group_068.node_tree = mn_units

            # node Group Output
            group_output_44 = select_proximity.nodes.new("NodeGroupOutput")
            group_output_44.name = "Group Output"
            group_output_44.is_active_output = True

            # node Boolean Math
            boolean_math_14 = select_proximity.nodes.new("FunctionNodeBooleanMath")
            boolean_math_14.name = "Boolean Math"
            boolean_math_14.operation = "NOT"

            # node Reroute
            reroute_9 = select_proximity.nodes.new("NodeReroute")
            reroute_9.name = "Reroute"
            # node Compare
            compare_10 = select_proximity.nodes.new("FunctionNodeCompare")
            compare_10.name = "Compare"
            compare_10.data_type = "FLOAT"
            compare_10.mode = "ELEMENT"
            compare_10.operation = "LESS_THAN"

            # node Group
            group_18 = select_proximity.nodes.new("GeometryNodeGroup")
            group_18.name = "Group"
            group_18.node_tree = select_res_whole

            # node Group Input
            group_input_43 = select_proximity.nodes.new("NodeGroupInput")
            group_input_43.name = "Group Input"

            # node Separate Geometry
            separate_geometry_7 = select_proximity.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_7.name = "Separate Geometry"
            separate_geometry_7.domain = "POINT"

            # node Boolean Math.002
            boolean_math_002_9 = select_proximity.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_9.name = "Boolean Math.002"
            boolean_math_002_9.operation = "NIMPLY"

            # node Accumulate Field
            accumulate_field_2 = select_proximity.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_2.name = "Accumulate Field"
            accumulate_field_2.data_type = "INT"
            accumulate_field_2.domain = "POINT"
            # Group Index
            accumulate_field_2.inputs[1].default_value = 0

            # node Boolean Math.004
            boolean_math_004_3 = select_proximity.nodes.new("FunctionNodeBooleanMath")
            boolean_math_004_3.name = "Boolean Math.004"
            boolean_math_004_3.operation = "NOT"

            # node Switch
            switch_10 = select_proximity.nodes.new("GeometryNodeSwitch")
            switch_10.name = "Switch"
            switch_10.input_type = "BOOLEAN"
            # False
            switch_10.inputs[1].default_value = False

            # Set locations
            geometry_proximity.location = (-298.0000915527344, 80.0)
            group_068.location = (-300.0, -160.0)
            group_output_44.location = (840.0, 160.0)
            boolean_math_14.location = (600.0, 100.0)
            reroute_9.location = (560.0, 120.0)
            compare_10.location = (-140.0, 80.0)
            group_18.location = (200.0, 80.0)
            group_input_43.location = (-738.4535522460938, -21.88127326965332)
            separate_geometry_7.location = (-506.0091857910156, 87.78723907470703)
            boolean_math_002_9.location = (20.0, 80.0)
            accumulate_field_2.location = (-340.0, 320.0)
            boolean_math_004_3.location = (-500.0, 320.0)
            switch_10.location = (-140.0, 260.0)

            # Set dimensions
            geometry_proximity.width, geometry_proximity.height = 140.0, 100.0
            group_068.width, group_068.height = 140.0, 100.0
            group_output_44.width, group_output_44.height = 140.0, 100.0
            boolean_math_14.width, boolean_math_14.height = 140.0, 100.0
            reroute_9.width, reroute_9.height = 16.0, 100.0
            compare_10.width, compare_10.height = 140.0, 100.0
            group_18.width, group_18.height = 140.0, 100.0
            group_input_43.width, group_input_43.height = 140.0, 100.0
            separate_geometry_7.width, separate_geometry_7.height = 140.0, 100.0
            boolean_math_002_9.width, boolean_math_002_9.height = 140.0, 100.0
            accumulate_field_2.width, accumulate_field_2.height = 140.0, 100.0
            boolean_math_004_3.width, boolean_math_004_3.height = 140.0, 100.0
            switch_10.width, switch_10.height = 140.0, 100.0

            # initialize select_proximity links
            # geometry_proximity.Distance -> compare_10.A
            select_proximity.links.new(
                geometry_proximity.outputs[1], compare_10.inputs[0]
            )
            # group_068.Angstrom -> compare_10.B
            select_proximity.links.new(group_068.outputs[0], compare_10.inputs[1])
            # separate_geometry_7.Selection -> geometry_proximity.Geometry
            select_proximity.links.new(
                separate_geometry_7.outputs[0], geometry_proximity.inputs[0]
            )
            # group_input_43.Distance (A) -> group_068.Value
            select_proximity.links.new(group_input_43.outputs[3], group_068.inputs[0])
            # reroute_9.Output -> group_output_44.Selection
            select_proximity.links.new(reroute_9.outputs[0], group_output_44.inputs[0])
            # reroute_9.Output -> boolean_math_14.Boolean
            select_proximity.links.new(reroute_9.outputs[0], boolean_math_14.inputs[0])
            # boolean_math_14.Boolean -> group_output_44.Inverted
            select_proximity.links.new(
                boolean_math_14.outputs[0], group_output_44.inputs[1]
            )
            # group_18.Selection -> reroute_9.Input
            select_proximity.links.new(group_18.outputs[0], reroute_9.inputs[0])
            # group_input_43.Target Atoms -> separate_geometry_7.Geometry
            select_proximity.links.new(
                group_input_43.outputs[0], separate_geometry_7.inputs[0]
            )
            # group_input_43.Subset -> separate_geometry_7.Selection
            select_proximity.links.new(
                group_input_43.outputs[1], separate_geometry_7.inputs[1]
            )
            # compare_10.Result -> boolean_math_002_9.Boolean
            select_proximity.links.new(
                compare_10.outputs[0], boolean_math_002_9.inputs[0]
            )
            # group_input_43.Expand -> group_18.Expand
            select_proximity.links.new(group_input_43.outputs[2], group_18.inputs[1])
            # boolean_math_002_9.Boolean -> group_18.Selection
            select_proximity.links.new(
                boolean_math_002_9.outputs[0], group_18.inputs[0]
            )
            # group_input_43.Subset -> boolean_math_004_3.Boolean
            select_proximity.links.new(
                group_input_43.outputs[1], boolean_math_004_3.inputs[0]
            )
            # boolean_math_004_3.Boolean -> accumulate_field_2.Value
            select_proximity.links.new(
                boolean_math_004_3.outputs[0], accumulate_field_2.inputs[0]
            )
            # accumulate_field_2.Total -> switch_10.Switch
            select_proximity.links.new(
                accumulate_field_2.outputs[2], switch_10.inputs[0]
            )
            # group_input_43.Subset -> switch_10.True
            select_proximity.links.new(group_input_43.outputs[1], switch_10.inputs[2])
            # switch_10.Output -> boolean_math_002_9.Boolean
            select_proximity.links.new(
                switch_10.outputs[0], boolean_math_002_9.inputs[1]
            )
            return select_proximity

        select_proximity = select_proximity_node_group()

        # initialize select_res_id node group
        def select_res_id_node_group():
            select_res_id = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Res ID"
            )

            select_res_id.color_tag = "INPUT"
            select_res_id.description = ""

            # select_res_id interface
            # Socket Selection
            selection_socket_21 = select_res_id.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_21.attribute_domain = "POINT"
            selection_socket_21.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_10 = select_res_id.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_10.attribute_domain = "POINT"
            inverted_socket_10.description = "The inverse of the calculated selection"

            # Socket And
            and_socket_10 = select_res_id.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_10.attribute_domain = "POINT"
            and_socket_10.hide_value = True

            # Socket Or
            or_socket_9 = select_res_id.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_9.attribute_domain = "POINT"
            or_socket_9.hide_value = True

            # Socket Res ID
            res_id_socket = select_res_id.interface.new_socket(
                name="Res ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id_socket.subtype = "NONE"
            res_id_socket.default_value = 10
            res_id_socket.min_value = 0
            res_id_socket.max_value = 2147483647
            res_id_socket.attribute_domain = "POINT"
            res_id_socket.description = "A single `res_id` selection"

            # initialize select_res_id nodes
            # node Group Input
            group_input_44 = select_res_id.nodes.new("NodeGroupInput")
            group_input_44.name = "Group Input"
            group_input_44.outputs[0].hide = True

            # node Named Attribute
            named_attribute_9 = select_res_id.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_9.name = "Named Attribute"
            named_attribute_9.data_type = "INT"
            # Name
            named_attribute_9.inputs[0].default_value = "res_id"

            # node Compare
            compare_11 = select_res_id.nodes.new("FunctionNodeCompare")
            compare_11.name = "Compare"
            compare_11.data_type = "INT"
            compare_11.mode = "ELEMENT"
            compare_11.operation = "EQUAL"

            # node Boolean Math
            boolean_math_15 = select_res_id.nodes.new("FunctionNodeBooleanMath")
            boolean_math_15.name = "Boolean Math"
            boolean_math_15.operation = "NOT"

            # node Group Output
            group_output_45 = select_res_id.nodes.new("NodeGroupOutput")
            group_output_45.name = "Group Output"
            group_output_45.is_active_output = True

            # node Reroute
            reroute_10 = select_res_id.nodes.new("NodeReroute")
            reroute_10.name = "Reroute"
            # node Boolean Math.001
            boolean_math_001_12 = select_res_id.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_12.name = "Boolean Math.001"
            boolean_math_001_12.operation = "AND"

            # node Group Input.001
            group_input_001_8 = select_res_id.nodes.new("NodeGroupInput")
            group_input_001_8.name = "Group Input.001"
            group_input_001_8.outputs[1].hide = True
            group_input_001_8.outputs[2].hide = True
            group_input_001_8.outputs[3].hide = True

            # node Boolean Math.002
            boolean_math_002_10 = select_res_id.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_10.name = "Boolean Math.002"
            boolean_math_002_10.operation = "OR"

            # Set locations
            group_input_44.location = (-508.0000305175781, -120.0)
            named_attribute_9.location = (-508.0000305175781, 0.0)
            compare_11.location = (-348.0000305175781, 0.0)
            boolean_math_15.location = (227.99998474121094, -60.0)
            group_output_45.location = (428.00006103515625, 0.0)
            reroute_10.location = (207.99998474121094, -40.0)
            boolean_math_001_12.location = (-160.0, 0.0)
            group_input_001_8.location = (-340.0, 80.0)
            boolean_math_002_10.location = (0.0, 0.0)

            # Set dimensions
            group_input_44.width, group_input_44.height = 140.0, 100.0
            named_attribute_9.width, named_attribute_9.height = 140.0, 100.0
            compare_11.width, compare_11.height = 140.0, 100.0
            boolean_math_15.width, boolean_math_15.height = 140.0, 100.0
            group_output_45.width, group_output_45.height = 140.0, 100.0
            reroute_10.width, reroute_10.height = 16.0, 100.0
            boolean_math_001_12.width, boolean_math_001_12.height = 140.0, 100.0
            group_input_001_8.width, group_input_001_8.height = 140.0, 100.0
            boolean_math_002_10.width, boolean_math_002_10.height = 140.0, 100.0

            # initialize select_res_id links
            # named_attribute_9.Attribute -> compare_11.A
            select_res_id.links.new(named_attribute_9.outputs[0], compare_11.inputs[2])
            # reroute_10.Output -> boolean_math_15.Boolean
            select_res_id.links.new(reroute_10.outputs[0], boolean_math_15.inputs[0])
            # group_input_44.Res ID -> compare_11.B
            select_res_id.links.new(group_input_44.outputs[2], compare_11.inputs[3])
            # reroute_10.Output -> group_output_45.Selection
            select_res_id.links.new(reroute_10.outputs[0], group_output_45.inputs[0])
            # boolean_math_15.Boolean -> group_output_45.Inverted
            select_res_id.links.new(
                boolean_math_15.outputs[0], group_output_45.inputs[1]
            )
            # boolean_math_002_10.Boolean -> reroute_10.Input
            select_res_id.links.new(
                boolean_math_002_10.outputs[0], reroute_10.inputs[0]
            )
            # compare_11.Result -> boolean_math_001_12.Boolean
            select_res_id.links.new(
                compare_11.outputs[0], boolean_math_001_12.inputs[1]
            )
            # group_input_001_8.And -> boolean_math_001_12.Boolean
            select_res_id.links.new(
                group_input_001_8.outputs[0], boolean_math_001_12.inputs[0]
            )
            # boolean_math_001_12.Boolean -> boolean_math_002_10.Boolean
            select_res_id.links.new(
                boolean_math_001_12.outputs[0], boolean_math_002_10.inputs[0]
            )
            # group_input_44.Or -> boolean_math_002_10.Boolean
            select_res_id.links.new(
                group_input_44.outputs[1], boolean_math_002_10.inputs[1]
            )
            return select_res_id

        select_res_id = select_res_id_node_group()

        # initialize select_res_id_ node group
        def select_res_id__node_group():
            select_res_id_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Res ID_"
            )

            select_res_id_.color_tag = "INPUT"
            select_res_id_.description = ""

            # select_res_id_ interface
            # Socket Selection
            selection_socket_22 = select_res_id_.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_22.attribute_domain = "POINT"
            selection_socket_22.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_11 = select_res_id_.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_11.attribute_domain = "POINT"
            inverted_socket_11.description = "The inverse of the calculated selection"

            # Socket res_id
            res_id_socket_1 = select_res_id_.interface.new_socket(
                name="res_id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id_socket_1.subtype = "NONE"
            res_id_socket_1.default_value = 10
            res_id_socket_1.min_value = 0
            res_id_socket_1.max_value = 2147483647
            res_id_socket_1.attribute_domain = "POINT"
            res_id_socket_1.description = "A single `res_id` selection"

            # Socket res_id
            res_id_socket_2 = select_res_id_.interface.new_socket(
                name="res_id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id_socket_2.subtype = "NONE"
            res_id_socket_2.default_value = 15
            res_id_socket_2.min_value = -2147483648
            res_id_socket_2.max_value = 2147483647
            res_id_socket_2.attribute_domain = "POINT"
            res_id_socket_2.description = "A single `res_id` selection"

            # Socket res_id: Min
            res_id__min_socket = select_res_id_.interface.new_socket(
                name="res_id: Min", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id__min_socket.subtype = "NONE"
            res_id__min_socket.default_value = 20
            res_id__min_socket.min_value = -2147483648
            res_id__min_socket.max_value = 2147483647
            res_id__min_socket.attribute_domain = "POINT"
            res_id__min_socket.description = "Minimum of a `res_id` range selection"

            # Socket res_id: Max
            res_id__max_socket = select_res_id_.interface.new_socket(
                name="res_id: Max", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id__max_socket.subtype = "NONE"
            res_id__max_socket.default_value = 100
            res_id__max_socket.min_value = 1
            res_id__max_socket.max_value = 2147483647
            res_id__max_socket.attribute_domain = "POINT"
            res_id__max_socket.description = "Maximum of a `res_id` range selection"

            # initialize select_res_id_ nodes
            # node Named Attribute
            named_attribute_10 = select_res_id_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_10.name = "Named Attribute"
            named_attribute_10.data_type = "INT"
            # Name
            named_attribute_10.inputs[0].default_value = "res_id"

            # node Boolean Math.001
            boolean_math_001_13 = select_res_id_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_13.name = "Boolean Math.001"
            boolean_math_001_13.operation = "AND"

            # node Compare
            compare_12 = select_res_id_.nodes.new("FunctionNodeCompare")
            compare_12.name = "Compare"
            compare_12.data_type = "INT"
            compare_12.mode = "ELEMENT"
            compare_12.operation = "GREATER_EQUAL"

            # node Compare.001
            compare_001_6 = select_res_id_.nodes.new("FunctionNodeCompare")
            compare_001_6.name = "Compare.001"
            compare_001_6.data_type = "INT"
            compare_001_6.mode = "ELEMENT"
            compare_001_6.operation = "LESS_EQUAL"

            # node Group Input
            group_input_45 = select_res_id_.nodes.new("NodeGroupInput")
            group_input_45.name = "Group Input"

            # node Boolean Math
            boolean_math_16 = select_res_id_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_16.name = "Boolean Math"
            boolean_math_16.operation = "NOT"

            # node Group Output
            group_output_46 = select_res_id_.nodes.new("NodeGroupOutput")
            group_output_46.name = "Group Output"
            group_output_46.is_active_output = True

            # Set locations
            named_attribute_10.location = (-360.0, 0.0)
            boolean_math_001_13.location = (20.0, -21.7943115234375)
            compare_12.location = (-200.0, 0.0)
            compare_001_6.location = (-200.0, -160.0)
            group_input_45.location = (-360.0, -140.0)
            boolean_math_16.location = (220.0, -100.0)
            group_output_46.location = (380.0, -20.0)

            # Set dimensions
            named_attribute_10.width, named_attribute_10.height = 140.0, 100.0
            boolean_math_001_13.width, boolean_math_001_13.height = 140.0, 100.0
            compare_12.width, compare_12.height = 140.0, 100.0
            compare_001_6.width, compare_001_6.height = 140.0, 100.0
            group_input_45.width, group_input_45.height = 140.0, 100.0
            boolean_math_16.width, boolean_math_16.height = 140.0, 100.0
            group_output_46.width, group_output_46.height = 140.0, 100.0

            # initialize select_res_id_ links
            # named_attribute_10.Attribute -> compare_12.A
            select_res_id_.links.new(
                named_attribute_10.outputs[0], compare_12.inputs[2]
            )
            # boolean_math_001_13.Boolean -> boolean_math_16.Boolean
            select_res_id_.links.new(
                boolean_math_001_13.outputs[0], boolean_math_16.inputs[0]
            )
            # group_input_45.res_id -> compare_12.B
            select_res_id_.links.new(group_input_45.outputs[0], compare_12.inputs[3])
            # boolean_math_001_13.Boolean -> group_output_46.Selection
            select_res_id_.links.new(
                boolean_math_001_13.outputs[0], group_output_46.inputs[0]
            )
            # boolean_math_16.Boolean -> group_output_46.Inverted
            select_res_id_.links.new(
                boolean_math_16.outputs[0], group_output_46.inputs[1]
            )
            # compare_12.Result -> boolean_math_001_13.Boolean
            select_res_id_.links.new(
                compare_12.outputs[0], boolean_math_001_13.inputs[0]
            )
            # named_attribute_10.Attribute -> compare_001_6.A
            select_res_id_.links.new(
                named_attribute_10.outputs[0], compare_001_6.inputs[2]
            )
            # group_input_45.res_id: Max -> compare_001_6.B
            select_res_id_.links.new(group_input_45.outputs[3], compare_001_6.inputs[3])
            # compare_001_6.Result -> boolean_math_001_13.Boolean
            select_res_id_.links.new(
                compare_001_6.outputs[0], boolean_math_001_13.inputs[1]
            )
            return select_res_id_

        select_res_id_ = select_res_id__node_group()

        # initialize select_ligand_ node group
        def select_ligand__node_group():
            select_ligand_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Ligand_"
            )

            select_ligand_.color_tag = "INPUT"
            select_ligand_.description = ""

            # select_ligand_ interface
            # Socket Selection
            selection_socket_23 = select_ligand_.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_23.attribute_domain = "POINT"
            selection_socket_23.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_12 = select_ligand_.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_12.attribute_domain = "POINT"
            inverted_socket_12.description = "The inverse of the calculated selection"

            # Socket Ligand A
            ligand_a_socket = select_ligand_.interface.new_socket(
                name="Ligand A", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ligand_a_socket.attribute_domain = "POINT"
            ligand_a_socket.description = "Select the atoms in Ligand A"

            # Socket Ligand B
            ligand_b_socket = select_ligand_.interface.new_socket(
                name="Ligand B", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ligand_b_socket.attribute_domain = "POINT"
            ligand_b_socket.description = "Select the atoms in Ligand B"

            # Socket Ligand ...
            ligand_____socket = select_ligand_.interface.new_socket(
                name="Ligand ...", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ligand_____socket.attribute_domain = "POINT"
            ligand_____socket.description = "Select the atoms in Ligand ..."

            # initialize select_ligand_ nodes
            # node Named Attribute
            named_attribute_11 = select_ligand_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_11.name = "Named Attribute"
            named_attribute_11.data_type = "INT"
            # Name
            named_attribute_11.inputs[0].default_value = "chaind_id"

            # node Group Output
            group_output_47 = select_ligand_.nodes.new("NodeGroupOutput")
            group_output_47.name = "Group Output"
            group_output_47.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_14 = select_ligand_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_14.name = "Boolean Math.001"
            boolean_math_001_14.operation = "NOT"

            # node Group Input
            group_input_46 = select_ligand_.nodes.new("NodeGroupInput")
            group_input_46.name = "Group Input"

            # node Index Switch
            index_switch = select_ligand_.nodes.new("GeometryNodeIndexSwitch")
            index_switch.name = "Index Switch"
            index_switch.data_type = "BOOLEAN"
            index_switch.index_switch_items.clear()
            index_switch.index_switch_items.new()
            index_switch.index_switch_items.new()
            index_switch.index_switch_items.new()

            # Set locations
            named_attribute_11.location = (-780.0, -100.0)
            group_output_47.location = (-240.0, -160.0)
            boolean_math_001_14.location = (-420.0, -240.0)
            group_input_46.location = (-780.0, -240.0)
            index_switch.location = (-580.0, -160.0)

            # Set dimensions
            named_attribute_11.width, named_attribute_11.height = 140.0, 100.0
            group_output_47.width, group_output_47.height = 140.0, 100.0
            boolean_math_001_14.width, boolean_math_001_14.height = 140.0, 100.0
            group_input_46.width, group_input_46.height = 140.0, 100.0
            index_switch.width, index_switch.height = 140.0, 100.0

            # initialize select_ligand_ links
            # index_switch.Output -> boolean_math_001_14.Boolean
            select_ligand_.links.new(
                index_switch.outputs[0], boolean_math_001_14.inputs[0]
            )
            # index_switch.Output -> group_output_47.Selection
            select_ligand_.links.new(index_switch.outputs[0], group_output_47.inputs[0])
            # boolean_math_001_14.Boolean -> group_output_47.Inverted
            select_ligand_.links.new(
                boolean_math_001_14.outputs[0], group_output_47.inputs[1]
            )
            # named_attribute_11.Attribute -> index_switch.Index
            select_ligand_.links.new(
                named_attribute_11.outputs[0], index_switch.inputs[0]
            )
            # group_input_46.Ligand A -> index_switch.0
            select_ligand_.links.new(group_input_46.outputs[0], index_switch.inputs[1])
            # group_input_46.Ligand B -> index_switch.1
            select_ligand_.links.new(group_input_46.outputs[1], index_switch.inputs[2])
            # group_input_46.Ligand ... -> index_switch.2
            select_ligand_.links.new(group_input_46.outputs[2], index_switch.inputs[3])
            return select_ligand_

        select_ligand_ = select_ligand__node_group()

        # initialize select_entity_ node group
        def select_entity__node_group():
            select_entity_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Entity_"
            )

            select_entity_.color_tag = "INPUT"
            select_entity_.description = ""

            # select_entity_ interface
            # Socket Selection
            selection_socket_24 = select_entity_.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_24.attribute_domain = "POINT"
            selection_socket_24.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_13 = select_entity_.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_13.attribute_domain = "POINT"
            inverted_socket_13.description = "The inverse of the calculated selection"

            # Socket Entity A
            entity_a_socket = select_entity_.interface.new_socket(
                name="Entity A", in_out="INPUT", socket_type="NodeSocketBool"
            )
            entity_a_socket.attribute_domain = "POINT"
            entity_a_socket.description = "Select the atoms in Entity A"

            # Socket Entity B
            entity_b_socket = select_entity_.interface.new_socket(
                name="Entity B", in_out="INPUT", socket_type="NodeSocketBool"
            )
            entity_b_socket.attribute_domain = "POINT"
            entity_b_socket.description = "Select the atoms in Entity B"

            # Socket Entity ...
            entity_____socket = select_entity_.interface.new_socket(
                name="Entity ...", in_out="INPUT", socket_type="NodeSocketBool"
            )
            entity_____socket.attribute_domain = "POINT"
            entity_____socket.description = "Select the atoms in Entity ..."

            # initialize select_entity_ nodes
            # node Named Attribute
            named_attribute_12 = select_entity_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_12.name = "Named Attribute"
            named_attribute_12.data_type = "INT"
            # Name
            named_attribute_12.inputs[0].default_value = "chaind_id"

            # node Reroute.018
            reroute_018_1 = select_entity_.nodes.new("NodeReroute")
            reroute_018_1.name = "Reroute.018"
            # node Group Output
            group_output_48 = select_entity_.nodes.new("NodeGroupOutput")
            group_output_48.name = "Group Output"
            group_output_48.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_15 = select_entity_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_15.name = "Boolean Math.001"
            boolean_math_001_15.operation = "NOT"

            # node Group Input
            group_input_47 = select_entity_.nodes.new("NodeGroupInput")
            group_input_47.name = "Group Input"

            # node Index Switch
            index_switch_1 = select_entity_.nodes.new("GeometryNodeIndexSwitch")
            index_switch_1.name = "Index Switch"
            index_switch_1.data_type = "BOOLEAN"
            index_switch_1.index_switch_items.clear()
            index_switch_1.index_switch_items.new()
            index_switch_1.index_switch_items.new()
            index_switch_1.index_switch_items.new()

            # Set locations
            named_attribute_12.location = (-780.0, -60.0)
            reroute_018_1.location = (-420.0, -220.0)
            group_output_48.location = (-200.0, -180.0)
            boolean_math_001_15.location = (-380.0, -240.0)
            group_input_47.location = (-780.0, -240.0)
            index_switch_1.location = (-600.0, -180.0)

            # Set dimensions
            named_attribute_12.width, named_attribute_12.height = 140.0, 100.0
            reroute_018_1.width, reroute_018_1.height = 16.0, 100.0
            group_output_48.width, group_output_48.height = 140.0, 100.0
            boolean_math_001_15.width, boolean_math_001_15.height = 140.0, 100.0
            group_input_47.width, group_input_47.height = 140.0, 100.0
            index_switch_1.width, index_switch_1.height = 140.0, 100.0

            # initialize select_entity_ links
            # reroute_018_1.Output -> boolean_math_001_15.Boolean
            select_entity_.links.new(
                reroute_018_1.outputs[0], boolean_math_001_15.inputs[0]
            )
            # reroute_018_1.Output -> group_output_48.Selection
            select_entity_.links.new(
                reroute_018_1.outputs[0], group_output_48.inputs[0]
            )
            # boolean_math_001_15.Boolean -> group_output_48.Inverted
            select_entity_.links.new(
                boolean_math_001_15.outputs[0], group_output_48.inputs[1]
            )
            # named_attribute_12.Attribute -> index_switch_1.Index
            select_entity_.links.new(
                named_attribute_12.outputs[0], index_switch_1.inputs[0]
            )
            # group_input_47.Entity A -> index_switch_1.0
            select_entity_.links.new(
                group_input_47.outputs[0], index_switch_1.inputs[1]
            )
            # group_input_47.Entity B -> index_switch_1.1
            select_entity_.links.new(
                group_input_47.outputs[1], index_switch_1.inputs[2]
            )
            # group_input_47.Entity ... -> index_switch_1.2
            select_entity_.links.new(
                group_input_47.outputs[2], index_switch_1.inputs[3]
            )
            # index_switch_1.Output -> reroute_018_1.Input
            select_entity_.links.new(index_switch_1.outputs[0], reroute_018_1.inputs[0])
            return select_entity_

        select_entity_ = select_entity__node_group()

        # initialize separate_atoms node group
        def separate_atoms_node_group():
            separate_atoms = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Separate Atoms"
            )

            separate_atoms.color_tag = "GEOMETRY"
            separate_atoms.description = ""

            separate_atoms.is_modifier = True

            # separate_atoms interface
            # Socket Atoms
            atoms_socket_13 = separate_atoms.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_13.attribute_domain = "POINT"
            atoms_socket_13.description = "The selected atoms"

            # Socket Inverted
            inverted_socket_14 = separate_atoms.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            inverted_socket_14.attribute_domain = "POINT"
            inverted_socket_14.description = "The non-selected atoms"

            # Socket Index
            index_socket_4 = separate_atoms.interface.new_socket(
                name="Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_socket_4.subtype = "NONE"
            index_socket_4.default_value = 0
            index_socket_4.min_value = -2147483648
            index_socket_4.max_value = 2147483647
            index_socket_4.attribute_domain = "POINT"
            index_socket_4.description = "Index of the atoms before they were separated"

            # Socket Atoms
            atoms_socket_14 = separate_atoms.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_14.attribute_domain = "POINT"
            atoms_socket_14.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_25 = separate_atoms.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_25.attribute_domain = "POINT"
            selection_socket_25.hide_value = True
            selection_socket_25.description = (
                "Selection field for which atoms to separate"
            )

            # initialize separate_atoms nodes
            # node Group Output
            group_output_49 = separate_atoms.nodes.new("NodeGroupOutput")
            group_output_49.name = "Group Output"
            group_output_49.is_active_output = True

            # node Group Input
            group_input_48 = separate_atoms.nodes.new("NodeGroupInput")
            group_input_48.name = "Group Input"

            # node Capture Attribute
            capture_attribute_4 = separate_atoms.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_4.name = "Capture Attribute"
            capture_attribute_4.active_index = 0
            capture_attribute_4.capture_items.clear()
            capture_attribute_4.capture_items.new("FLOAT", "Value")
            capture_attribute_4.capture_items["Value"].data_type = "INT"
            capture_attribute_4.domain = "POINT"

            # node Separate Geometry
            separate_geometry_8 = separate_atoms.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_8.name = "Separate Geometry"
            separate_geometry_8.domain = "POINT"

            # node Index
            index_6 = separate_atoms.nodes.new("GeometryNodeInputIndex")
            index_6.name = "Index"

            # Set locations
            group_output_49.location = (-140.0, 80.0)
            group_input_48.location = (-639.2076416015625, 73.4643783569336)
            capture_attribute_4.location = (-460.0, 80.0)
            separate_geometry_8.location = (-300.0, 80.0)
            index_6.location = (-640.0, -40.0)

            # Set dimensions
            group_output_49.width, group_output_49.height = 140.0, 100.0
            group_input_48.width, group_input_48.height = 140.0, 100.0
            capture_attribute_4.width, capture_attribute_4.height = 140.0, 100.0
            separate_geometry_8.width, separate_geometry_8.height = 140.0, 100.0
            index_6.width, index_6.height = 140.0, 100.0

            # initialize separate_atoms links
            # separate_geometry_8.Selection -> group_output_49.Atoms
            separate_atoms.links.new(
                separate_geometry_8.outputs[0], group_output_49.inputs[0]
            )
            # separate_geometry_8.Inverted -> group_output_49.Inverted
            separate_atoms.links.new(
                separate_geometry_8.outputs[1], group_output_49.inputs[1]
            )
            # capture_attribute_4.Geometry -> separate_geometry_8.Geometry
            separate_atoms.links.new(
                capture_attribute_4.outputs[0], separate_geometry_8.inputs[0]
            )
            # group_input_48.Atoms -> capture_attribute_4.Geometry
            separate_atoms.links.new(
                group_input_48.outputs[0], capture_attribute_4.inputs[0]
            )
            # index_6.Index -> capture_attribute_4.Value
            separate_atoms.links.new(index_6.outputs[0], capture_attribute_4.inputs[1])
            # capture_attribute_4.Value -> group_output_49.Index
            separate_atoms.links.new(
                capture_attribute_4.outputs[1], group_output_49.inputs[2]
            )
            # group_input_48.Selection -> separate_geometry_8.Selection
            separate_atoms.links.new(
                group_input_48.outputs[1], separate_geometry_8.inputs[1]
            )
            return separate_atoms

        separate_atoms = separate_atoms_node_group()

        # initialize mn_select_distance_empty node group
        def mn_select_distance_empty_node_group():
            mn_select_distance_empty = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_select_distance_empty"
            )

            mn_select_distance_empty.color_tag = "NONE"
            mn_select_distance_empty.description = ""

            # mn_select_distance_empty interface
            # Socket > Cutoff
            __cutoff_socket = mn_select_distance_empty.interface.new_socket(
                name="> Cutoff", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            __cutoff_socket.attribute_domain = "POINT"

            # Socket < Cutoff
            __cutoff_socket_1 = mn_select_distance_empty.interface.new_socket(
                name="< Cutoff", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            __cutoff_socket_1.attribute_domain = "POINT"

            # Socket Distance
            distance_socket = mn_select_distance_empty.interface.new_socket(
                name="Distance", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            distance_socket.subtype = "NONE"
            distance_socket.default_value = 0.0
            distance_socket.min_value = -3.4028234663852886e38
            distance_socket.max_value = 3.4028234663852886e38
            distance_socket.attribute_domain = "POINT"

            # Socket 0..1
            _0__1_socket_1 = mn_select_distance_empty.interface.new_socket(
                name="0..1", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            _0__1_socket_1.subtype = "NONE"
            _0__1_socket_1.default_value = 0.0
            _0__1_socket_1.min_value = -3.4028234663852886e38
            _0__1_socket_1.max_value = 3.4028234663852886e38
            _0__1_socket_1.attribute_domain = "POINT"

            # Socket Object
            object_socket_1 = mn_select_distance_empty.interface.new_socket(
                name="Object", in_out="INPUT", socket_type="NodeSocketObject"
            )
            object_socket_1.attribute_domain = "POINT"

            # Socket From Min
            from_min_socket = mn_select_distance_empty.interface.new_socket(
                name="From Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_min_socket.subtype = "NONE"
            from_min_socket.default_value = 0.0
            from_min_socket.min_value = -10000.0
            from_min_socket.max_value = 10000.0
            from_min_socket.attribute_domain = "POINT"

            # Socket From Max
            from_max_socket = mn_select_distance_empty.interface.new_socket(
                name="From Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_max_socket.subtype = "NONE"
            from_max_socket.default_value = 1.0
            from_max_socket.min_value = -10000.0
            from_max_socket.max_value = 10000.0
            from_max_socket.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_1 = mn_select_distance_empty.interface.new_socket(
                name="Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_1.subtype = "NONE"
            distance_socket_1.default_value = 3.0
            distance_socket_1.min_value = -10000.0
            distance_socket_1.max_value = 10000.0
            distance_socket_1.attribute_domain = "POINT"

            # initialize mn_select_distance_empty nodes
            # node Group Output
            group_output_50 = mn_select_distance_empty.nodes.new("NodeGroupOutput")
            group_output_50.name = "Group Output"
            group_output_50.is_active_output = True

            # node Reroute
            reroute_11 = mn_select_distance_empty.nodes.new("NodeReroute")
            reroute_11.name = "Reroute"
            # node Object Info
            object_info_1 = mn_select_distance_empty.nodes.new("GeometryNodeObjectInfo")
            object_info_1.name = "Object Info"
            object_info_1.transform_space = "RELATIVE"
            # As Instance
            object_info_1.inputs[1].default_value = False

            # node Position
            position_1 = mn_select_distance_empty.nodes.new("GeometryNodeInputPosition")
            position_1.name = "Position"

            # node Boolean Math
            boolean_math_17 = mn_select_distance_empty.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_17.name = "Boolean Math"
            boolean_math_17.operation = "NOT"

            # node Map Range
            map_range_1 = mn_select_distance_empty.nodes.new("ShaderNodeMapRange")
            map_range_1.name = "Map Range"
            map_range_1.clamp = True
            map_range_1.data_type = "FLOAT"
            map_range_1.interpolation_type = "LINEAR"
            # To Min
            map_range_1.inputs[3].default_value = 0.0
            # To Max
            map_range_1.inputs[4].default_value = 1.0

            # node Compare
            compare_13 = mn_select_distance_empty.nodes.new("FunctionNodeCompare")
            compare_13.name = "Compare"
            compare_13.data_type = "FLOAT"
            compare_13.mode = "ELEMENT"
            compare_13.operation = "GREATER_THAN"

            # node Group Input
            group_input_49 = mn_select_distance_empty.nodes.new("NodeGroupInput")
            group_input_49.name = "Group Input"

            # node Vector Math
            vector_math_4 = mn_select_distance_empty.nodes.new("ShaderNodeVectorMath")
            vector_math_4.name = "Vector Math"
            vector_math_4.operation = "DISTANCE"

            # node Group
            group_19 = mn_select_distance_empty.nodes.new("GeometryNodeGroup")
            group_19.name = "Group"
            group_19.node_tree = mn_units

            # Set locations
            group_output_50.location = (820.0, 100.0)
            reroute_11.location = (340.0, 80.0)
            object_info_1.location = (-447.0, 80.0)
            position_1.location = (-220.0, 40.0)
            boolean_math_17.location = (571.5794677734375, -13.08974838256836)
            map_range_1.location = (580.0, -140.0)
            compare_13.location = (376.64703369140625, 27.823856353759766)
            group_input_49.location = (-640.0, -140.0)
            vector_math_4.location = (-60.0, 140.0)
            group_19.location = (127.40702819824219, -27.151321411132812)

            # Set dimensions
            group_output_50.width, group_output_50.height = 140.0, 100.0
            reroute_11.width, reroute_11.height = 16.0, 100.0
            object_info_1.width, object_info_1.height = 140.0, 100.0
            position_1.width, position_1.height = 140.0, 100.0
            boolean_math_17.width, boolean_math_17.height = 140.0, 100.0
            map_range_1.width, map_range_1.height = 140.0, 100.0
            compare_13.width, compare_13.height = 140.0, 100.0
            group_input_49.width, group_input_49.height = 140.0, 100.0
            vector_math_4.width, vector_math_4.height = 140.0, 100.0
            group_19.width, group_19.height = 140.0, 100.0

            # initialize mn_select_distance_empty links
            # group_input_49.Object -> object_info_1.Object
            mn_select_distance_empty.links.new(
                group_input_49.outputs[0], object_info_1.inputs[0]
            )
            # reroute_11.Output -> group_output_50.Distance
            mn_select_distance_empty.links.new(
                reroute_11.outputs[0], group_output_50.inputs[2]
            )
            # reroute_11.Output -> compare_13.A
            mn_select_distance_empty.links.new(
                reroute_11.outputs[0], compare_13.inputs[0]
            )
            # compare_13.Result -> boolean_math_17.Boolean
            mn_select_distance_empty.links.new(
                compare_13.outputs[0], boolean_math_17.inputs[0]
            )
            # compare_13.Result -> group_output_50.> Cutoff
            mn_select_distance_empty.links.new(
                compare_13.outputs[0], group_output_50.inputs[0]
            )
            # boolean_math_17.Boolean -> group_output_50.< Cutoff
            mn_select_distance_empty.links.new(
                boolean_math_17.outputs[0], group_output_50.inputs[1]
            )
            # object_info_1.Location -> vector_math_4.Vector
            mn_select_distance_empty.links.new(
                object_info_1.outputs[1], vector_math_4.inputs[0]
            )
            # position_1.Position -> vector_math_4.Vector
            mn_select_distance_empty.links.new(
                position_1.outputs[0], vector_math_4.inputs[1]
            )
            # vector_math_4.Value -> reroute_11.Input
            mn_select_distance_empty.links.new(
                vector_math_4.outputs[1], reroute_11.inputs[0]
            )
            # map_range_1.Result -> group_output_50.0..1
            mn_select_distance_empty.links.new(
                map_range_1.outputs[0], group_output_50.inputs[3]
            )
            # vector_math_4.Value -> map_range_1.Value
            mn_select_distance_empty.links.new(
                vector_math_4.outputs[1], map_range_1.inputs[0]
            )
            # group_input_49.From Min -> map_range_1.From Min
            mn_select_distance_empty.links.new(
                group_input_49.outputs[1], map_range_1.inputs[1]
            )
            # group_input_49.From Max -> map_range_1.From Max
            mn_select_distance_empty.links.new(
                group_input_49.outputs[2], map_range_1.inputs[2]
            )
            # group_input_49.Distance -> group_19.Value
            mn_select_distance_empty.links.new(
                group_input_49.outputs[3], group_19.inputs[0]
            )
            # group_19.Angstrom -> compare_13.B
            mn_select_distance_empty.links.new(
                group_19.outputs[0], compare_13.inputs[1]
            )
            return mn_select_distance_empty

        mn_select_distance_empty = mn_select_distance_empty_node_group()

        # initialize vector_angle node group
        def vector_angle_node_group():
            vector_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Vector Angle"
            )

            vector_angle.color_tag = "VECTOR"
            vector_angle.description = ""

            # vector_angle interface
            # Socket Angle
            angle_socket = vector_angle.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket.subtype = "ANGLE"
            angle_socket.default_value = 0.0
            angle_socket.min_value = -3.4028234663852886e38
            angle_socket.max_value = 3.4028234663852886e38
            angle_socket.attribute_domain = "POINT"
            angle_socket.description = "Angle between the two given vectors in radians"

            # Socket A
            a_socket = vector_angle.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketVector"
            )
            a_socket.subtype = "NONE"
            a_socket.default_value = (0.0, 0.0, 0.0)
            a_socket.min_value = -10000.0
            a_socket.max_value = 10000.0
            a_socket.attribute_domain = "POINT"

            # Socket B
            b_socket_1 = vector_angle.interface.new_socket(
                name="B", in_out="INPUT", socket_type="NodeSocketVector"
            )
            b_socket_1.subtype = "NONE"
            b_socket_1.default_value = (0.0, 0.0, 0.0)
            b_socket_1.min_value = -10000.0
            b_socket_1.max_value = 10000.0
            b_socket_1.attribute_domain = "POINT"

            # initialize vector_angle nodes
            # node Group Input
            group_input_50 = vector_angle.nodes.new("NodeGroupInput")
            group_input_50.name = "Group Input"

            # node Vector Math.002
            vector_math_002_3 = vector_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_002_3.name = "Vector Math.002"
            vector_math_002_3.operation = "NORMALIZE"

            # node Vector Math.001
            vector_math_001_1 = vector_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_001_1.name = "Vector Math.001"
            vector_math_001_1.operation = "NORMALIZE"

            # node Vector Math
            vector_math_5 = vector_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_5.name = "Vector Math"
            vector_math_5.operation = "DOT_PRODUCT"

            # node Math
            math_11 = vector_angle.nodes.new("ShaderNodeMath")
            math_11.name = "Math"
            math_11.operation = "ARCCOSINE"
            math_11.use_clamp = False

            # node Group Output
            group_output_51 = vector_angle.nodes.new("NodeGroupOutput")
            group_output_51.name = "Group Output"
            group_output_51.is_active_output = True

            # Set locations
            group_input_50.location = (-360.0, 0.0)
            vector_math_002_3.location = (-160.0, -60.0)
            vector_math_001_1.location = (-160.0, 60.0)
            vector_math_5.location = (0.0, 60.0)
            math_11.location = (160.0, 60.0)
            group_output_51.location = (340.0, 60.0)

            # Set dimensions
            group_input_50.width, group_input_50.height = 140.0, 100.0
            vector_math_002_3.width, vector_math_002_3.height = 140.0, 100.0
            vector_math_001_1.width, vector_math_001_1.height = 140.0, 100.0
            vector_math_5.width, vector_math_5.height = 140.0, 100.0
            math_11.width, math_11.height = 140.0, 100.0
            group_output_51.width, group_output_51.height = 140.0, 100.0

            # initialize vector_angle links
            # vector_math_5.Value -> math_11.Value
            vector_angle.links.new(vector_math_5.outputs[1], math_11.inputs[0])
            # vector_math_002_3.Vector -> vector_math_5.Vector
            vector_angle.links.new(
                vector_math_002_3.outputs[0], vector_math_5.inputs[1]
            )
            # vector_math_001_1.Vector -> vector_math_5.Vector
            vector_angle.links.new(
                vector_math_001_1.outputs[0], vector_math_5.inputs[0]
            )
            # math_11.Value -> group_output_51.Angle
            vector_angle.links.new(math_11.outputs[0], group_output_51.inputs[0])
            # group_input_50.A -> vector_math_001_1.Vector
            vector_angle.links.new(
                group_input_50.outputs[0], vector_math_001_1.inputs[0]
            )
            # group_input_50.B -> vector_math_002_3.Vector
            vector_angle.links.new(
                group_input_50.outputs[1], vector_math_002_3.inputs[0]
            )
            return vector_angle

        vector_angle = vector_angle_node_group()

        # initialize _3_point_angle node group
        def _3_point_angle_node_group():
            _3_point_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="3 Point Angle"
            )

            _3_point_angle.color_tag = "CONVERTER"
            _3_point_angle.description = ""

            # _3_point_angle interface
            # Socket Angle
            angle_socket_1 = _3_point_angle.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_1.subtype = "ANGLE"
            angle_socket_1.default_value = 0.0
            angle_socket_1.min_value = -3.4028234663852886e38
            angle_socket_1.max_value = 3.4028234663852886e38
            angle_socket_1.attribute_domain = "POINT"
            angle_socket_1.description = (
                "Angle between the points around Index B in radians"
            )

            # Socket Index A
            index_a_socket = _3_point_angle.interface.new_socket(
                name="Index A", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_a_socket.subtype = "NONE"
            index_a_socket.default_value = 0
            index_a_socket.min_value = 0
            index_a_socket.max_value = 2147483647
            index_a_socket.attribute_domain = "POINT"
            index_a_socket.description = "First of the points for the angle calculation"

            # Socket Index B
            index_b_socket = _3_point_angle.interface.new_socket(
                name="Index B", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_b_socket.subtype = "NONE"
            index_b_socket.default_value = 1
            index_b_socket.min_value = 0
            index_b_socket.max_value = 2147483647
            index_b_socket.attribute_domain = "POINT"
            index_b_socket.description = "The middle point for the angle calculation"

            # Socket Index C
            index_c_socket = _3_point_angle.interface.new_socket(
                name="Index C", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_c_socket.subtype = "NONE"
            index_c_socket.default_value = 2
            index_c_socket.min_value = 0
            index_c_socket.max_value = 2147483647
            index_c_socket.attribute_domain = "POINT"
            index_c_socket.description = "Last of the points for the angle calculation"

            # initialize _3_point_angle nodes
            # node Group Input
            group_input_51 = _3_point_angle.nodes.new("NodeGroupInput")
            group_input_51.name = "Group Input"

            # node Position
            position_2 = _3_point_angle.nodes.new("GeometryNodeInputPosition")
            position_2.name = "Position"

            # node Evaluate at Index.002
            evaluate_at_index_002_1 = _3_point_angle.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_1.name = "Evaluate at Index.002"
            evaluate_at_index_002_1.data_type = "FLOAT_VECTOR"
            evaluate_at_index_002_1.domain = "POINT"

            # node Evaluate at Index
            evaluate_at_index_5 = _3_point_angle.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_5.name = "Evaluate at Index"
            evaluate_at_index_5.data_type = "FLOAT_VECTOR"
            evaluate_at_index_5.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_3 = _3_point_angle.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_3.name = "Evaluate at Index.001"
            evaluate_at_index_001_3.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001_3.domain = "POINT"

            # node Vector Math
            vector_math_6 = _3_point_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_6.name = "Vector Math"
            vector_math_6.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_2 = _3_point_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_001_2.name = "Vector Math.001"
            vector_math_001_2.operation = "SUBTRACT"

            # node Group Output
            group_output_52 = _3_point_angle.nodes.new("NodeGroupOutput")
            group_output_52.name = "Group Output"
            group_output_52.is_active_output = True

            # node Group.075
            group_075 = _3_point_angle.nodes.new("GeometryNodeGroup")
            group_075.name = "Group.075"
            group_075.node_tree = vector_angle

            # Set locations
            group_input_51.location = (-486.337646484375, 0.0)
            position_2.location = (-286.337646484375, -9.940185546875)
            evaluate_at_index_002_1.location = (-73.662353515625, -160.290283203125)
            evaluate_at_index_5.location = (-73.662353515625, 159.709716796875)
            evaluate_at_index_001_3.location = (-73.662353515625, -0.290283203125)
            vector_math_6.location = (106.638427734375, 160.290283203125)
            vector_math_001_2.location = (126.337646484375, -40.290283203125)
            group_output_52.location = (460.0, 160.0)
            group_075.location = (286.337646484375, 159.709716796875)

            # Set dimensions
            group_input_51.width, group_input_51.height = 140.0, 100.0
            position_2.width, position_2.height = 140.0, 100.0
            evaluate_at_index_002_1.width, evaluate_at_index_002_1.height = 140.0, 100.0
            evaluate_at_index_5.width, evaluate_at_index_5.height = 140.0, 100.0
            evaluate_at_index_001_3.width, evaluate_at_index_001_3.height = 140.0, 100.0
            vector_math_6.width, vector_math_6.height = 140.0, 100.0
            vector_math_001_2.width, vector_math_001_2.height = 140.0, 100.0
            group_output_52.width, group_output_52.height = 140.0, 100.0
            group_075.width, group_075.height = 140.0, 100.0

            # initialize _3_point_angle links
            # evaluate_at_index_002_1.Value -> vector_math_001_2.Vector
            _3_point_angle.links.new(
                evaluate_at_index_002_1.outputs[0], vector_math_001_2.inputs[0]
            )
            # vector_math_6.Vector -> group_075.A
            _3_point_angle.links.new(vector_math_6.outputs[0], group_075.inputs[0])
            # evaluate_at_index_5.Value -> vector_math_6.Vector
            _3_point_angle.links.new(
                evaluate_at_index_5.outputs[0], vector_math_6.inputs[0]
            )
            # position_2.Position -> evaluate_at_index_002_1.Value
            _3_point_angle.links.new(
                position_2.outputs[0], evaluate_at_index_002_1.inputs[1]
            )
            # evaluate_at_index_001_3.Value -> vector_math_001_2.Vector
            _3_point_angle.links.new(
                evaluate_at_index_001_3.outputs[0], vector_math_001_2.inputs[1]
            )
            # vector_math_001_2.Vector -> group_075.B
            _3_point_angle.links.new(vector_math_001_2.outputs[0], group_075.inputs[1])
            # evaluate_at_index_001_3.Value -> vector_math_6.Vector
            _3_point_angle.links.new(
                evaluate_at_index_001_3.outputs[0], vector_math_6.inputs[1]
            )
            # position_2.Position -> evaluate_at_index_5.Value
            _3_point_angle.links.new(
                position_2.outputs[0], evaluate_at_index_5.inputs[1]
            )
            # position_2.Position -> evaluate_at_index_001_3.Value
            _3_point_angle.links.new(
                position_2.outputs[0], evaluate_at_index_001_3.inputs[1]
            )
            # group_input_51.Index A -> evaluate_at_index_5.Index
            _3_point_angle.links.new(
                group_input_51.outputs[0], evaluate_at_index_5.inputs[0]
            )
            # group_input_51.Index B -> evaluate_at_index_001_3.Index
            _3_point_angle.links.new(
                group_input_51.outputs[1], evaluate_at_index_001_3.inputs[0]
            )
            # group_input_51.Index C -> evaluate_at_index_002_1.Index
            _3_point_angle.links.new(
                group_input_51.outputs[2], evaluate_at_index_002_1.inputs[0]
            )
            # group_075.Angle -> group_output_52.Angle
            _3_point_angle.links.new(group_075.outputs[0], group_output_52.inputs[0])
            return _3_point_angle

        _3_point_angle = _3_point_angle_node_group()

        # initialize point_distance node group
        def point_distance_node_group():
            point_distance = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Point Distance"
            )

            point_distance.color_tag = "CONVERTER"
            point_distance.description = ""

            # point_distance interface
            # Socket Vector
            vector_socket_1 = point_distance.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket_1.subtype = "NONE"
            vector_socket_1.default_value = (0.0, 0.0, 0.0)
            vector_socket_1.min_value = -3.4028234663852886e38
            vector_socket_1.max_value = 3.4028234663852886e38
            vector_socket_1.attribute_domain = "POINT"
            vector_socket_1.description = (
                "Vector from the current point to the indexed point"
            )

            # Socket Distance
            distance_socket_2 = point_distance.interface.new_socket(
                name="Distance", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_2.subtype = "NONE"
            distance_socket_2.default_value = 0.0
            distance_socket_2.min_value = -3.4028234663852886e38
            distance_socket_2.max_value = 3.4028234663852886e38
            distance_socket_2.attribute_domain = "POINT"
            distance_socket_2.description = (
                "Distance from the current point to the indexed point"
            )

            # Socket Index
            index_socket_5 = point_distance.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_5.subtype = "NONE"
            index_socket_5.default_value = 100
            index_socket_5.min_value = 0
            index_socket_5.max_value = 2147483647
            index_socket_5.attribute_domain = "POINT"
            index_socket_5.description = "Index for the selected point to measure to"

            # initialize point_distance nodes
            # node Evaluate at Index
            evaluate_at_index_6 = point_distance.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_6.name = "Evaluate at Index"
            evaluate_at_index_6.data_type = "FLOAT_VECTOR"
            evaluate_at_index_6.domain = "POINT"

            # node Vector Math
            vector_math_7 = point_distance.nodes.new("ShaderNodeVectorMath")
            vector_math_7.name = "Vector Math"
            vector_math_7.operation = "SUBTRACT"

            # node Group Input
            group_input_52 = point_distance.nodes.new("NodeGroupInput")
            group_input_52.name = "Group Input"

            # node Position
            position_3 = point_distance.nodes.new("GeometryNodeInputPosition")
            position_3.name = "Position"

            # node Group Output
            group_output_53 = point_distance.nodes.new("NodeGroupOutput")
            group_output_53.name = "Group Output"
            group_output_53.is_active_output = True

            # node Vector Math.001
            vector_math_001_3 = point_distance.nodes.new("ShaderNodeVectorMath")
            vector_math_001_3.name = "Vector Math.001"
            vector_math_001_3.operation = "LENGTH"

            # Set locations
            evaluate_at_index_6.location = (-100.06727600097656, 80.02735900878906)
            vector_math_7.location = (53.334869384765625, 83.23219299316406)
            group_input_52.location = (-280.0, 40.0)
            position_3.location = (-280.0, -60.0)
            group_output_53.location = (420.0, 80.0)
            vector_math_001_3.location = (220.0, 40.0)

            # Set dimensions
            evaluate_at_index_6.width, evaluate_at_index_6.height = 140.0, 100.0
            vector_math_7.width, vector_math_7.height = 140.0, 100.0
            group_input_52.width, group_input_52.height = 140.0, 100.0
            position_3.width, position_3.height = 147.27230834960938, 100.0
            group_output_53.width, group_output_53.height = 140.0, 100.0
            vector_math_001_3.width, vector_math_001_3.height = 140.0, 100.0

            # initialize point_distance links
            # vector_math_7.Vector -> vector_math_001_3.Vector
            point_distance.links.new(
                vector_math_7.outputs[0], vector_math_001_3.inputs[0]
            )
            # position_3.Position -> vector_math_7.Vector
            point_distance.links.new(position_3.outputs[0], vector_math_7.inputs[1])
            # evaluate_at_index_6.Value -> vector_math_7.Vector
            point_distance.links.new(
                evaluate_at_index_6.outputs[0], vector_math_7.inputs[0]
            )
            # position_3.Position -> evaluate_at_index_6.Value
            point_distance.links.new(
                position_3.outputs[0], evaluate_at_index_6.inputs[1]
            )
            # group_input_52.Index -> evaluate_at_index_6.Index
            point_distance.links.new(
                group_input_52.outputs[0], evaluate_at_index_6.inputs[0]
            )
            # vector_math_7.Vector -> group_output_53.Vector
            point_distance.links.new(
                vector_math_7.outputs[0], group_output_53.inputs[0]
            )
            # vector_math_001_3.Value -> group_output_53.Distance
            point_distance.links.new(
                vector_math_001_3.outputs[1], group_output_53.inputs[1]
            )
            return point_distance

        point_distance = point_distance_node_group()

        # initialize edge_info node group
        def edge_info_node_group():
            edge_info = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Edge Info"
            )

            edge_info.color_tag = "INPUT"
            edge_info.description = ""

            # edge_info interface
            # Socket Is Valid
            is_valid_socket_3 = edge_info.interface.new_socket(
                name="Is Valid", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_valid_socket_3.attribute_domain = "POINT"
            is_valid_socket_3.description = (
                "Whether there is a valid edge corresponding to the given index"
            )

            # Socket Point Index
            point_index_socket = edge_info.interface.new_socket(
                name="Point Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            point_index_socket.subtype = "NONE"
            point_index_socket.default_value = -1
            point_index_socket.min_value = -1
            point_index_socket.max_value = 2147483647
            point_index_socket.attribute_domain = "POINT"
            point_index_socket.description = "The index for the other point involved in this edge, -1 if not connected"

            # Socket Point Position
            point_position_socket = edge_info.interface.new_socket(
                name="Point Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            point_position_socket.subtype = "NONE"
            point_position_socket.default_value = (0.0, 0.0, 0.0)
            point_position_socket.min_value = -3.4028234663852886e38
            point_position_socket.max_value = 3.4028234663852886e38
            point_position_socket.attribute_domain = "POINT"
            point_position_socket.description = "The position for the other point involved in this edge, (0, 0, 0) if not connected"

            # Socket Edge Index
            edge_index_socket = edge_info.interface.new_socket(
                name="Edge Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            edge_index_socket.subtype = "NONE"
            edge_index_socket.default_value = -1
            edge_index_socket.min_value = -1
            edge_index_socket.max_value = 2147483647
            edge_index_socket.attribute_domain = "POINT"
            edge_index_socket.description = "The index on the edge domain for the selected edge. -1 if not connected"

            # Socket Edge Vector
            edge_vector_socket = edge_info.interface.new_socket(
                name="Edge Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            edge_vector_socket.subtype = "EULER"
            edge_vector_socket.default_value = (0.0, 0.0, 0.0)
            edge_vector_socket.min_value = -3.4028234663852886e38
            edge_vector_socket.max_value = 3.4028234663852886e38
            edge_vector_socket.attribute_domain = "POINT"
            edge_vector_socket.description = (
                "The vector along the selected edge. (0, 0, 0) if not connected"
            )

            # Socket Edge Length
            edge_length_socket = edge_info.interface.new_socket(
                name="Edge Length", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            edge_length_socket.subtype = "NONE"
            edge_length_socket.default_value = -1.0
            edge_length_socket.min_value = 0.0
            edge_length_socket.max_value = 3.4028234663852886e38
            edge_length_socket.attribute_domain = "POINT"
            edge_length_socket.description = (
                "Length of the selected edge, -1 if not connected"
            )

            # Socket Edge Index
            edge_index_socket_1 = edge_info.interface.new_socket(
                name="Edge Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            edge_index_socket_1.subtype = "NONE"
            edge_index_socket_1.default_value = 0
            edge_index_socket_1.min_value = 0
            edge_index_socket_1.max_value = 3
            edge_index_socket_1.attribute_domain = "POINT"
            edge_index_socket_1.description = (
                "Index within the gorup of edges that are connected to this point"
            )

            # initialize edge_info nodes
            # node Frame
            frame_7 = edge_info.nodes.new("NodeFrame")
            frame_7.label = "Check edge exists, or return index -1 and (0, 0, 0) vector"
            frame_7.name = "Frame"
            frame_7.label_size = 20
            frame_7.shrink = True

            # node Group Output
            group_output_54 = edge_info.nodes.new("NodeGroupOutput")
            group_output_54.name = "Group Output"
            group_output_54.is_active_output = True

            # node Reroute.001
            reroute_001_8 = edge_info.nodes.new("NodeReroute")
            reroute_001_8.name = "Reroute.001"
            # node Reroute.002
            reroute_002_7 = edge_info.nodes.new("NodeReroute")
            reroute_002_7.name = "Reroute.002"
            # node Reroute
            reroute_12 = edge_info.nodes.new("NodeReroute")
            reroute_12.name = "Reroute"
            # node Group Input
            group_input_53 = edge_info.nodes.new("NodeGroupInput")
            group_input_53.name = "Group Input"

            # node Switch.003
            switch_003 = edge_info.nodes.new("GeometryNodeSwitch")
            switch_003.name = "Switch.003"
            switch_003.input_type = "FLOAT"
            # False
            switch_003.inputs[1].default_value = -1.0

            # node Switch.001
            switch_001_4 = edge_info.nodes.new("GeometryNodeSwitch")
            switch_001_4.name = "Switch.001"
            switch_001_4.input_type = "VECTOR"
            # False
            switch_001_4.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Vector Math
            vector_math_8 = edge_info.nodes.new("ShaderNodeVectorMath")
            vector_math_8.name = "Vector Math"
            vector_math_8.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_4 = edge_info.nodes.new("ShaderNodeVectorMath")
            vector_math_001_4.name = "Vector Math.001"
            vector_math_001_4.operation = "LENGTH"

            # node Evaluate at Index.001
            evaluate_at_index_001_4 = edge_info.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_001_4.name = "Evaluate at Index.001"
            evaluate_at_index_001_4.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001_4.domain = "POINT"

            # node Switch
            switch_11 = edge_info.nodes.new("GeometryNodeSwitch")
            switch_11.name = "Switch"
            switch_11.input_type = "INT"
            # False
            switch_11.inputs[1].default_value = -1

            # node Reroute.004
            reroute_004_2 = edge_info.nodes.new("NodeReroute")
            reroute_004_2.name = "Reroute.004"
            # node Switch.002
            switch_002_2 = edge_info.nodes.new("GeometryNodeSwitch")
            switch_002_2.name = "Switch.002"
            switch_002_2.input_type = "INT"
            # False
            switch_002_2.inputs[1].default_value = -1

            # node Compare
            compare_14 = edge_info.nodes.new("FunctionNodeCompare")
            compare_14.name = "Compare"
            compare_14.data_type = "INT"
            compare_14.mode = "ELEMENT"
            compare_14.operation = "LESS_THAN"

            # node Reroute.003
            reroute_003_4 = edge_info.nodes.new("NodeReroute")
            reroute_003_4.name = "Reroute.003"
            # node Edges of Vertex.002
            edges_of_vertex_002 = edge_info.nodes.new("GeometryNodeEdgesOfVertex")
            edges_of_vertex_002.name = "Edges of Vertex.002"
            # Vertex Index
            edges_of_vertex_002.inputs[0].default_value = 0
            # Weights
            edges_of_vertex_002.inputs[1].default_value = 0.0

            # node Position
            position_4 = edge_info.nodes.new("GeometryNodeInputPosition")
            position_4.name = "Position"

            # node Evaluate at Index
            evaluate_at_index_7 = edge_info.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_7.name = "Evaluate at Index"
            evaluate_at_index_7.data_type = "INT"
            evaluate_at_index_7.domain = "EDGE"

            # node Index.002
            index_002_1 = edge_info.nodes.new("GeometryNodeInputIndex")
            index_002_1.name = "Index.002"

            # node Math.002
            math_002_3 = edge_info.nodes.new("ShaderNodeMath")
            math_002_3.name = "Math.002"
            math_002_3.operation = "ADD"
            math_002_3.use_clamp = False

            # node Math.003
            math_003_2 = edge_info.nodes.new("ShaderNodeMath")
            math_003_2.name = "Math.003"
            math_003_2.operation = "SUBTRACT"
            math_003_2.use_clamp = False

            # node Edge Vertices.002
            edge_vertices_002 = edge_info.nodes.new("GeometryNodeInputMeshEdgeVertices")
            edge_vertices_002.name = "Edge Vertices.002"

            # Set parents
            compare_14.parent = frame_7

            # Set locations
            frame_7.location = (170.0, 40.0)
            group_output_54.location = (740.0, 360.0)
            reroute_001_8.location = (500.0, 520.0)
            reroute_002_7.location = (680.0, 520.0)
            reroute_12.location = (360.0, 340.0)
            group_input_53.location = (-740.0, 300.0)
            switch_003.location = (520.0, -140.0)
            switch_001_4.location = (520.0, 80.0)
            vector_math_8.location = (300.0, -60.0)
            vector_math_001_4.location = (300.0, -200.0)
            evaluate_at_index_001_4.location = (300.0, 100.0)
            switch_11.location = (520.0, 500.0)
            reroute_004_2.location = (500.0, 280.0)
            switch_002_2.location = (520.0, 240.0)
            compare_14.location = (-360.0, 440.0)
            reroute_003_4.location = (-200.0, 120.0)
            edges_of_vertex_002.location = (-416.6744384765625, 200.0)
            position_4.location = (120.0, -40.0)
            evaluate_at_index_7.location = (-200.0, 80.0)
            index_002_1.location = (-200.0, -80.0)
            math_002_3.location = (-360.0, -20.0)
            math_003_2.location = (-40.0, 80.0)
            edge_vertices_002.location = (-520.0, -20.0)

            # Set dimensions
            frame_7.width, frame_7.height = 200.0, 218.0
            group_output_54.width, group_output_54.height = 140.0, 100.0
            reroute_001_8.width, reroute_001_8.height = 16.0, 100.0
            reroute_002_7.width, reroute_002_7.height = 16.0, 100.0
            reroute_12.width, reroute_12.height = 16.0, 100.0
            group_input_53.width, group_input_53.height = 140.0, 100.0
            switch_003.width, switch_003.height = 140.0, 100.0
            switch_001_4.width, switch_001_4.height = 140.0, 100.0
            vector_math_8.width, vector_math_8.height = 140.0, 100.0
            vector_math_001_4.width, vector_math_001_4.height = 140.0, 100.0
            evaluate_at_index_001_4.width, evaluate_at_index_001_4.height = 140.0, 100.0
            switch_11.width, switch_11.height = 140.0, 100.0
            reroute_004_2.width, reroute_004_2.height = 16.0, 100.0
            switch_002_2.width, switch_002_2.height = 140.0, 100.0
            compare_14.width, compare_14.height = 140.0, 100.0
            reroute_003_4.width, reroute_003_4.height = 16.0, 100.0
            edges_of_vertex_002.width, edges_of_vertex_002.height = 140.0, 100.0
            position_4.width, position_4.height = 147.27230834960938, 100.0
            evaluate_at_index_7.width, evaluate_at_index_7.height = 140.0, 100.0
            index_002_1.width, index_002_1.height = 140.0, 100.0
            math_002_3.width, math_002_3.height = 140.0, 100.0
            math_003_2.width, math_003_2.height = 140.0, 100.0
            edge_vertices_002.width, edge_vertices_002.height = 138.7440185546875, 100.0

            # initialize edge_info links
            # math_002_3.Value -> evaluate_at_index_7.Value
            edge_info.links.new(math_002_3.outputs[0], evaluate_at_index_7.inputs[1])
            # edge_vertices_002.Vertex Index 1 -> math_002_3.Value
            edge_info.links.new(edge_vertices_002.outputs[0], math_002_3.inputs[0])
            # evaluate_at_index_7.Value -> math_003_2.Value
            edge_info.links.new(evaluate_at_index_7.outputs[0], math_003_2.inputs[0])
            # index_002_1.Index -> math_003_2.Value
            edge_info.links.new(index_002_1.outputs[0], math_003_2.inputs[1])
            # reroute_003_4.Output -> evaluate_at_index_7.Index
            edge_info.links.new(reroute_003_4.outputs[0], evaluate_at_index_7.inputs[0])
            # edge_vertices_002.Vertex Index 2 -> math_002_3.Value
            edge_info.links.new(edge_vertices_002.outputs[1], math_002_3.inputs[1])
            # switch_001_4.Output -> group_output_54.Edge Vector
            edge_info.links.new(switch_001_4.outputs[0], group_output_54.inputs[4])
            # group_input_53.Edge Index -> edges_of_vertex_002.Sort Index
            edge_info.links.new(
                group_input_53.outputs[0], edges_of_vertex_002.inputs[2]
            )
            # reroute_12.Output -> switch_11.Switch
            edge_info.links.new(reroute_12.outputs[0], switch_11.inputs[0])
            # switch_11.Output -> group_output_54.Point Index
            edge_info.links.new(switch_11.outputs[0], group_output_54.inputs[1])
            # reroute_12.Output -> switch_001_4.Switch
            edge_info.links.new(reroute_12.outputs[0], switch_001_4.inputs[0])
            # reroute_002_7.Output -> group_output_54.Is Valid
            edge_info.links.new(reroute_002_7.outputs[0], group_output_54.inputs[0])
            # edges_of_vertex_002.Total -> compare_14.B
            edge_info.links.new(edges_of_vertex_002.outputs[1], compare_14.inputs[3])
            # reroute_12.Output -> switch_002_2.Switch
            edge_info.links.new(reroute_12.outputs[0], switch_002_2.inputs[0])
            # switch_002_2.Output -> group_output_54.Edge Index
            edge_info.links.new(switch_002_2.outputs[0], group_output_54.inputs[3])
            # group_input_53.Edge Index -> compare_14.A
            edge_info.links.new(group_input_53.outputs[0], compare_14.inputs[2])
            # reroute_003_4.Output -> switch_002_2.True
            edge_info.links.new(reroute_003_4.outputs[0], switch_002_2.inputs[2])
            # math_003_2.Value -> switch_11.True
            edge_info.links.new(math_003_2.outputs[0], switch_11.inputs[2])
            # reroute_12.Output -> switch_003.Switch
            edge_info.links.new(reroute_12.outputs[0], switch_003.inputs[0])
            # switch_003.Output -> group_output_54.Edge Length
            edge_info.links.new(switch_003.outputs[0], group_output_54.inputs[5])
            # reroute_12.Output -> reroute_001_8.Input
            edge_info.links.new(reroute_12.outputs[0], reroute_001_8.inputs[0])
            # reroute_001_8.Output -> reroute_002_7.Input
            edge_info.links.new(reroute_001_8.outputs[0], reroute_002_7.inputs[0])
            # compare_14.Result -> reroute_12.Input
            edge_info.links.new(compare_14.outputs[0], reroute_12.inputs[0])
            # vector_math_8.Vector -> vector_math_001_4.Vector
            edge_info.links.new(vector_math_8.outputs[0], vector_math_001_4.inputs[0])
            # position_4.Position -> vector_math_8.Vector
            edge_info.links.new(position_4.outputs[0], vector_math_8.inputs[1])
            # evaluate_at_index_001_4.Value -> vector_math_8.Vector
            edge_info.links.new(
                evaluate_at_index_001_4.outputs[0], vector_math_8.inputs[0]
            )
            # position_4.Position -> evaluate_at_index_001_4.Value
            edge_info.links.new(
                position_4.outputs[0], evaluate_at_index_001_4.inputs[1]
            )
            # math_003_2.Value -> evaluate_at_index_001_4.Index
            edge_info.links.new(
                math_003_2.outputs[0], evaluate_at_index_001_4.inputs[0]
            )
            # vector_math_8.Vector -> switch_001_4.True
            edge_info.links.new(vector_math_8.outputs[0], switch_001_4.inputs[2])
            # vector_math_001_4.Value -> switch_003.True
            edge_info.links.new(vector_math_001_4.outputs[1], switch_003.inputs[2])
            # reroute_004_2.Output -> group_output_54.Point Position
            edge_info.links.new(reroute_004_2.outputs[0], group_output_54.inputs[2])
            # evaluate_at_index_001_4.Value -> reroute_004_2.Input
            edge_info.links.new(
                evaluate_at_index_001_4.outputs[0], reroute_004_2.inputs[0]
            )
            # edges_of_vertex_002.Edge Index -> reroute_003_4.Input
            edge_info.links.new(edges_of_vertex_002.outputs[0], reroute_003_4.inputs[0])
            return edge_info

        edge_info = edge_info_node_group()

        # initialize points_of_edge node group
        def points_of_edge_node_group():
            points_of_edge = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Points of Edge"
            )

            points_of_edge.color_tag = "INPUT"
            points_of_edge.description = ""

            # points_of_edge interface
            # Socket 0
            _0_socket = points_of_edge.interface.new_socket(
                name="0", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            _0_socket.subtype = "NONE"
            _0_socket.default_value = -1
            _0_socket.min_value = -1
            _0_socket.max_value = 2147483647
            _0_socket.attribute_domain = "POINT"
            _0_socket.description = "Index for the 0th point, connected to the point at the end of the selected edge. Returns -1 if not connected or self"

            # Socket 1
            _1_socket = points_of_edge.interface.new_socket(
                name="1", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            _1_socket.subtype = "NONE"
            _1_socket.default_value = -1
            _1_socket.min_value = -1
            _1_socket.max_value = 2147483647
            _1_socket.attribute_domain = "POINT"
            _1_socket.description = "Index for the 1th point, connected to the point at the end of the selected edge. Returns -1 if not connected or self"

            # Socket 2
            _2_socket = points_of_edge.interface.new_socket(
                name="2", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            _2_socket.subtype = "NONE"
            _2_socket.default_value = -1
            _2_socket.min_value = -1
            _2_socket.max_value = 2147483647
            _2_socket.attribute_domain = "POINT"
            _2_socket.description = "Index for the 2th point, connected to the point at the end of the selected edge. Returns -1 if not connected or self"

            # Socket 3
            _3_socket = points_of_edge.interface.new_socket(
                name="3", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            _3_socket.subtype = "NONE"
            _3_socket.default_value = -1
            _3_socket.min_value = -1
            _3_socket.max_value = 2147483647
            _3_socket.attribute_domain = "POINT"
            _3_socket.description = "Index for the 3th point, connected to the point at the end of the selected edge. Returns -1 if not connected or self"

            # Socket Total
            total_socket_1 = points_of_edge.interface.new_socket(
                name="Total", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            total_socket_1.subtype = "NONE"
            total_socket_1.default_value = 0
            total_socket_1.min_value = 0
            total_socket_1.max_value = 2147483647
            total_socket_1.attribute_domain = "POINT"
            total_socket_1.description = (
                "Number of edges conncted to the connected point, including this edge"
            )

            # Socket Edge Index
            edge_index_socket_2 = points_of_edge.interface.new_socket(
                name="Edge Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            edge_index_socket_2.subtype = "NONE"
            edge_index_socket_2.default_value = 0
            edge_index_socket_2.min_value = 0
            edge_index_socket_2.max_value = 3
            edge_index_socket_2.attribute_domain = "POINT"
            edge_index_socket_2.description = (
                "Index within the gorup of edges that are connected to this point"
            )

            # initialize points_of_edge nodes
            # node Frame
            frame_8 = points_of_edge.nodes.new("NodeFrame")
            frame_8.label = "check if selecting self, return -1 if so"
            frame_8.name = "Frame"
            frame_8.label_size = 20
            frame_8.shrink = True

            # node Group Output
            group_output_55 = points_of_edge.nodes.new("NodeGroupOutput")
            group_output_55.name = "Group Output"
            group_output_55.is_active_output = True

            # node Evaluate at Index
            evaluate_at_index_8 = points_of_edge.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_8.name = "Evaluate at Index"
            evaluate_at_index_8.data_type = "INT"
            evaluate_at_index_8.domain = "POINT"

            # node Evaluate at Index.003
            evaluate_at_index_003_1 = points_of_edge.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_003_1.name = "Evaluate at Index.003"
            evaluate_at_index_003_1.data_type = "INT"
            evaluate_at_index_003_1.domain = "POINT"

            # node Group Input
            group_input_54 = points_of_edge.nodes.new("NodeGroupInput")
            group_input_54.name = "Group Input"

            # node Group.007
            group_007_1 = points_of_edge.nodes.new("GeometryNodeGroup")
            group_007_1.name = "Group.007"
            group_007_1.node_tree = edge_info

            # node Group.012
            group_012_2 = points_of_edge.nodes.new("GeometryNodeGroup")
            group_012_2.name = "Group.012"
            group_012_2.node_tree = edge_info
            # Socket_1
            group_012_2.inputs[0].default_value = 3

            # node Group.011
            group_011_1 = points_of_edge.nodes.new("GeometryNodeGroup")
            group_011_1.name = "Group.011"
            group_011_1.node_tree = edge_info
            # Socket_1
            group_011_1.inputs[0].default_value = 2

            # node Group.010
            group_010_1 = points_of_edge.nodes.new("GeometryNodeGroup")
            group_010_1.name = "Group.010"
            group_010_1.node_tree = edge_info
            # Socket_1
            group_010_1.inputs[0].default_value = 1

            # node Group.009
            group_009_1 = points_of_edge.nodes.new("GeometryNodeGroup")
            group_009_1.name = "Group.009"
            group_009_1.node_tree = edge_info
            # Socket_1
            group_009_1.inputs[0].default_value = 0

            # node Evaluate at Index.001
            evaluate_at_index_001_5 = points_of_edge.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_5.name = "Evaluate at Index.001"
            evaluate_at_index_001_5.data_type = "INT"
            evaluate_at_index_001_5.domain = "POINT"

            # node Index
            index_7 = points_of_edge.nodes.new("GeometryNodeInputIndex")
            index_7.name = "Index"

            # node Evaluate at Index.002
            evaluate_at_index_002_2 = points_of_edge.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_2.name = "Evaluate at Index.002"
            evaluate_at_index_002_2.data_type = "INT"
            evaluate_at_index_002_2.domain = "POINT"

            # node Edges of Vertex
            edges_of_vertex = points_of_edge.nodes.new("GeometryNodeEdgesOfVertex")
            edges_of_vertex.name = "Edges of Vertex"
            # Vertex Index
            edges_of_vertex.inputs[0].default_value = 0
            # Weights
            edges_of_vertex.inputs[1].default_value = 0.0
            # Sort Index
            edges_of_vertex.inputs[2].default_value = 0

            # node Evaluate at Index.004
            evaluate_at_index_004 = points_of_edge.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_004.name = "Evaluate at Index.004"
            evaluate_at_index_004.data_type = "INT"
            evaluate_at_index_004.domain = "POINT"

            # node Compare.002
            compare_002_3 = points_of_edge.nodes.new("FunctionNodeCompare")
            compare_002_3.name = "Compare.002"
            compare_002_3.data_type = "INT"
            compare_002_3.mode = "ELEMENT"
            compare_002_3.operation = "EQUAL"

            # node Compare.003
            compare_003_4 = points_of_edge.nodes.new("FunctionNodeCompare")
            compare_003_4.name = "Compare.003"
            compare_003_4.data_type = "INT"
            compare_003_4.mode = "ELEMENT"
            compare_003_4.operation = "EQUAL"

            # node Compare
            compare_15 = points_of_edge.nodes.new("FunctionNodeCompare")
            compare_15.name = "Compare"
            compare_15.data_type = "INT"
            compare_15.mode = "ELEMENT"
            compare_15.operation = "EQUAL"

            # node Switch
            switch_12 = points_of_edge.nodes.new("GeometryNodeSwitch")
            switch_12.name = "Switch"
            switch_12.input_type = "INT"
            # True
            switch_12.inputs[2].default_value = -1

            # node Switch.002
            switch_002_3 = points_of_edge.nodes.new("GeometryNodeSwitch")
            switch_002_3.name = "Switch.002"
            switch_002_3.input_type = "INT"
            # True
            switch_002_3.inputs[2].default_value = -1

            # node Switch.003
            switch_003_1 = points_of_edge.nodes.new("GeometryNodeSwitch")
            switch_003_1.name = "Switch.003"
            switch_003_1.input_type = "INT"
            # True
            switch_003_1.inputs[2].default_value = -1

            # node Switch.001
            switch_001_5 = points_of_edge.nodes.new("GeometryNodeSwitch")
            switch_001_5.name = "Switch.001"
            switch_001_5.input_type = "INT"
            # True
            switch_001_5.inputs[2].default_value = -1

            # node Compare.001
            compare_001_7 = points_of_edge.nodes.new("FunctionNodeCompare")
            compare_001_7.name = "Compare.001"
            compare_001_7.data_type = "INT"
            compare_001_7.mode = "ELEMENT"
            compare_001_7.operation = "EQUAL"

            # Set parents
            compare_002_3.parent = frame_8
            compare_003_4.parent = frame_8
            compare_15.parent = frame_8
            switch_12.parent = frame_8
            switch_002_3.parent = frame_8
            switch_003_1.parent = frame_8
            switch_001_5.parent = frame_8
            compare_001_7.parent = frame_8

            # Set locations
            frame_8.location = (0.0, 0.0)
            group_output_55.location = (406.12969970703125, 546.538818359375)
            evaluate_at_index_8.location = (-660.0, 620.0)
            evaluate_at_index_003_1.location = (-660.0, -40.0)
            group_input_54.location = (-1160.0, -440.0)
            group_007_1.location = (-980.0, -360.0)
            group_012_2.location = (-1060.0, -40.0)
            group_011_1.location = (-1060.0, 180.0)
            group_010_1.location = (-1060.0, 400.0)
            group_009_1.location = (-1060.0, 620.0)
            evaluate_at_index_001_5.location = (-660.0, 440.0)
            index_7.location = (-660.0, 260.0)
            evaluate_at_index_002_2.location = (-660.0, 180.0)
            edges_of_vertex.location = (-180.0, -440.0)
            evaluate_at_index_004.location = (-180.0, -260.0)
            compare_002_3.location = (-440.0, 180.0)
            compare_003_4.location = (-440.0, -40.0)
            compare_15.location = (-460.0, 620.0)
            switch_12.location = (-220.0, 620.0)
            switch_002_3.location = (-220.0, 220.0)
            switch_003_1.location = (-220.0, -20.0)
            switch_001_5.location = (-220.0, 440.0)
            compare_001_7.location = (-460.0, 440.0)

            # Set dimensions
            frame_8.width, frame_8.height = 440.0, 878.0
            group_output_55.width, group_output_55.height = 140.0, 100.0
            evaluate_at_index_8.width, evaluate_at_index_8.height = 140.0, 100.0
            evaluate_at_index_003_1.width, evaluate_at_index_003_1.height = 140.0, 100.0
            group_input_54.width, group_input_54.height = 140.0, 100.0
            group_007_1.width, group_007_1.height = 230.73724365234375, 100.0
            group_012_2.width, group_012_2.height = 230.73724365234375, 100.0
            group_011_1.width, group_011_1.height = 230.73724365234375, 100.0
            group_010_1.width, group_010_1.height = 230.73724365234375, 100.0
            group_009_1.width, group_009_1.height = 230.73724365234375, 100.0
            evaluate_at_index_001_5.width, evaluate_at_index_001_5.height = 140.0, 100.0
            index_7.width, index_7.height = 140.0, 100.0
            evaluate_at_index_002_2.width, evaluate_at_index_002_2.height = 140.0, 100.0
            edges_of_vertex.width, edges_of_vertex.height = 140.0, 100.0
            evaluate_at_index_004.width, evaluate_at_index_004.height = 140.0, 100.0
            compare_002_3.width, compare_002_3.height = 140.0, 100.0
            compare_003_4.width, compare_003_4.height = 140.0, 100.0
            compare_15.width, compare_15.height = 140.0, 100.0
            switch_12.width, switch_12.height = 140.0, 100.0
            switch_002_3.width, switch_002_3.height = 140.0, 100.0
            switch_003_1.width, switch_003_1.height = 140.0, 100.0
            switch_001_5.width, switch_001_5.height = 140.0, 100.0
            compare_001_7.width, compare_001_7.height = 140.0, 100.0

            # initialize points_of_edge links
            # group_010_1.Point Index -> evaluate_at_index_001_5.Value
            points_of_edge.links.new(
                group_010_1.outputs[1], evaluate_at_index_001_5.inputs[1]
            )
            # group_011_1.Point Index -> evaluate_at_index_002_2.Value
            points_of_edge.links.new(
                group_011_1.outputs[1], evaluate_at_index_002_2.inputs[1]
            )
            # group_012_2.Point Index -> evaluate_at_index_003_1.Value
            points_of_edge.links.new(
                group_012_2.outputs[1], evaluate_at_index_003_1.inputs[1]
            )
            # group_input_54.Edge Index -> group_007_1.Edge Index
            points_of_edge.links.new(group_input_54.outputs[0], group_007_1.inputs[0])
            # edges_of_vertex.Total -> evaluate_at_index_004.Value
            points_of_edge.links.new(
                edges_of_vertex.outputs[1], evaluate_at_index_004.inputs[1]
            )
            # group_007_1.Point Index -> evaluate_at_index_004.Index
            points_of_edge.links.new(
                group_007_1.outputs[1], evaluate_at_index_004.inputs[0]
            )
            # evaluate_at_index_004.Value -> group_output_55.Total
            points_of_edge.links.new(
                evaluate_at_index_004.outputs[0], group_output_55.inputs[4]
            )
            # group_007_1.Point Index -> evaluate_at_index_8.Index
            points_of_edge.links.new(
                group_007_1.outputs[1], evaluate_at_index_8.inputs[0]
            )
            # group_009_1.Point Index -> evaluate_at_index_8.Value
            points_of_edge.links.new(
                group_009_1.outputs[1], evaluate_at_index_8.inputs[1]
            )
            # group_007_1.Point Index -> evaluate_at_index_001_5.Index
            points_of_edge.links.new(
                group_007_1.outputs[1], evaluate_at_index_001_5.inputs[0]
            )
            # group_007_1.Point Index -> evaluate_at_index_002_2.Index
            points_of_edge.links.new(
                group_007_1.outputs[1], evaluate_at_index_002_2.inputs[0]
            )
            # group_007_1.Point Index -> evaluate_at_index_003_1.Index
            points_of_edge.links.new(
                group_007_1.outputs[1], evaluate_at_index_003_1.inputs[0]
            )
            # compare_15.Result -> switch_12.Switch
            points_of_edge.links.new(compare_15.outputs[0], switch_12.inputs[0])
            # switch_12.Output -> group_output_55.0
            points_of_edge.links.new(switch_12.outputs[0], group_output_55.inputs[0])
            # evaluate_at_index_8.Value -> compare_15.A
            points_of_edge.links.new(
                evaluate_at_index_8.outputs[0], compare_15.inputs[2]
            )
            # index_7.Index -> compare_15.B
            points_of_edge.links.new(index_7.outputs[0], compare_15.inputs[3])
            # compare_001_7.Result -> switch_001_5.Switch
            points_of_edge.links.new(compare_001_7.outputs[0], switch_001_5.inputs[0])
            # evaluate_at_index_001_5.Value -> compare_001_7.A
            points_of_edge.links.new(
                evaluate_at_index_001_5.outputs[0], compare_001_7.inputs[2]
            )
            # index_7.Index -> compare_001_7.B
            points_of_edge.links.new(index_7.outputs[0], compare_001_7.inputs[3])
            # switch_001_5.Output -> group_output_55.1
            points_of_edge.links.new(switch_001_5.outputs[0], group_output_55.inputs[1])
            # compare_002_3.Result -> switch_002_3.Switch
            points_of_edge.links.new(compare_002_3.outputs[0], switch_002_3.inputs[0])
            # evaluate_at_index_002_2.Value -> compare_002_3.A
            points_of_edge.links.new(
                evaluate_at_index_002_2.outputs[0], compare_002_3.inputs[2]
            )
            # index_7.Index -> compare_002_3.B
            points_of_edge.links.new(index_7.outputs[0], compare_002_3.inputs[3])
            # switch_002_3.Output -> group_output_55.2
            points_of_edge.links.new(switch_002_3.outputs[0], group_output_55.inputs[2])
            # compare_003_4.Result -> switch_003_1.Switch
            points_of_edge.links.new(compare_003_4.outputs[0], switch_003_1.inputs[0])
            # evaluate_at_index_003_1.Value -> compare_003_4.A
            points_of_edge.links.new(
                evaluate_at_index_003_1.outputs[0], compare_003_4.inputs[2]
            )
            # index_7.Index -> compare_003_4.B
            points_of_edge.links.new(index_7.outputs[0], compare_003_4.inputs[3])
            # switch_003_1.Output -> group_output_55.3
            points_of_edge.links.new(switch_003_1.outputs[0], group_output_55.inputs[3])
            # evaluate_at_index_8.Value -> switch_12.False
            points_of_edge.links.new(
                evaluate_at_index_8.outputs[0], switch_12.inputs[1]
            )
            # evaluate_at_index_001_5.Value -> switch_001_5.False
            points_of_edge.links.new(
                evaluate_at_index_001_5.outputs[0], switch_001_5.inputs[1]
            )
            # evaluate_at_index_002_2.Value -> switch_002_3.False
            points_of_edge.links.new(
                evaluate_at_index_002_2.outputs[0], switch_002_3.inputs[1]
            )
            # evaluate_at_index_003_1.Value -> switch_003_1.False
            points_of_edge.links.new(
                evaluate_at_index_003_1.outputs[0], switch_003_1.inputs[1]
            )
            return points_of_edge

        points_of_edge = points_of_edge_node_group()

        # initialize point_edge_angle node group
        def point_edge_angle_node_group():
            point_edge_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Point Edge Angle"
            )

            point_edge_angle.color_tag = "INPUT"
            point_edge_angle.description = ""

            # point_edge_angle interface
            # Socket Is Valid
            is_valid_socket_4 = point_edge_angle.interface.new_socket(
                name="Is Valid", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_valid_socket_4.attribute_domain = "POINT"
            is_valid_socket_4.description = "Whether both edges are valid corresponding to the given indices and are not the same"

            # Socket Angle
            angle_socket_2 = point_edge_angle.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_2.subtype = "NONE"
            angle_socket_2.default_value = -1.0
            angle_socket_2.min_value = -3.4028234663852886e38
            angle_socket_2.max_value = 3.4028234663852886e38
            angle_socket_2.attribute_domain = "POINT"
            angle_socket_2.description = "Angle between the two selected edges in radians. Returns -1 if not valid."

            # Socket Edge Index A
            edge_index_a_socket = point_edge_angle.interface.new_socket(
                name="Edge Index A", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            edge_index_a_socket.subtype = "NONE"
            edge_index_a_socket.default_value = -1
            edge_index_a_socket.min_value = 0
            edge_index_a_socket.max_value = 2147483647
            edge_index_a_socket.attribute_domain = "POINT"
            edge_index_a_socket.description = 'Index for "Edge A" in the Edge domain of the geometry. Returns -1 if not valid'

            # Socket Edge Index B
            edge_index_b_socket = point_edge_angle.interface.new_socket(
                name="Edge Index B", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            edge_index_b_socket.subtype = "NONE"
            edge_index_b_socket.default_value = -1
            edge_index_b_socket.min_value = 0
            edge_index_b_socket.max_value = 2147483647
            edge_index_b_socket.attribute_domain = "POINT"
            edge_index_b_socket.description = 'Index for "Edge B" in the Edge domain of the geometry. Returns -1 if not valid'

            # Socket Edge Vector A
            edge_vector_a_socket = point_edge_angle.interface.new_socket(
                name="Edge Vector A", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            edge_vector_a_socket.subtype = "NONE"
            edge_vector_a_socket.default_value = (0.0, 0.0, 0.0)
            edge_vector_a_socket.min_value = -3.4028234663852886e38
            edge_vector_a_socket.max_value = 3.4028234663852886e38
            edge_vector_a_socket.attribute_domain = "POINT"
            edge_vector_a_socket.description = "Vector from the current point to the other point in Edge A. Returns (0, 0, 0) if not valid."

            # Socket Edge Vector B
            edge_vector_b_socket = point_edge_angle.interface.new_socket(
                name="Edge Vector B", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            edge_vector_b_socket.subtype = "NONE"
            edge_vector_b_socket.default_value = (0.0, 0.0, 0.0)
            edge_vector_b_socket.min_value = -3.4028234663852886e38
            edge_vector_b_socket.max_value = 3.4028234663852886e38
            edge_vector_b_socket.attribute_domain = "POINT"
            edge_vector_b_socket.description = "Vector from the current point to the other point in Edge B. Returns (0, 0, 0) if not valid."

            # Socket Edge A
            edge_a_socket = point_edge_angle.interface.new_socket(
                name="Edge A", in_out="INPUT", socket_type="NodeSocketInt"
            )
            edge_a_socket.subtype = "NONE"
            edge_a_socket.default_value = 0
            edge_a_socket.min_value = 0
            edge_a_socket.max_value = 3
            edge_a_socket.attribute_domain = "POINT"
            edge_a_socket.description = (
                "Index within the gorup of edges that are connected to this point"
            )

            # Socket Edge B
            edge_b_socket = point_edge_angle.interface.new_socket(
                name="Edge B", in_out="INPUT", socket_type="NodeSocketInt"
            )
            edge_b_socket.subtype = "NONE"
            edge_b_socket.default_value = 1
            edge_b_socket.min_value = 0
            edge_b_socket.max_value = 3
            edge_b_socket.attribute_domain = "POINT"
            edge_b_socket.description = (
                "Index within the gorup of edges that are connected to this point"
            )

            # initialize point_edge_angle nodes
            # node Group Input
            group_input_55 = point_edge_angle.nodes.new("NodeGroupInput")
            group_input_55.name = "Group Input"

            # node Group Output
            group_output_56 = point_edge_angle.nodes.new("NodeGroupOutput")
            group_output_56.name = "Group Output"
            group_output_56.is_active_output = True

            # node Group.002
            group_002_3 = point_edge_angle.nodes.new("GeometryNodeGroup")
            group_002_3.name = "Group.002"
            group_002_3.node_tree = edge_info

            # node Group
            group_20 = point_edge_angle.nodes.new("GeometryNodeGroup")
            group_20.name = "Group"
            group_20.node_tree = vector_angle

            # node Switch
            switch_13 = point_edge_angle.nodes.new("GeometryNodeSwitch")
            switch_13.name = "Switch"
            switch_13.input_type = "FLOAT"
            # False
            switch_13.inputs[1].default_value = -1.0

            # node Group.001
            group_001_10 = point_edge_angle.nodes.new("GeometryNodeGroup")
            group_001_10.name = "Group.001"
            group_001_10.node_tree = edge_info

            # node Compare
            compare_16 = point_edge_angle.nodes.new("FunctionNodeCompare")
            compare_16.name = "Compare"
            compare_16.data_type = "INT"
            compare_16.mode = "ELEMENT"
            compare_16.operation = "NOT_EQUAL"

            # node Boolean Math
            boolean_math_18 = point_edge_angle.nodes.new("FunctionNodeBooleanMath")
            boolean_math_18.name = "Boolean Math"
            boolean_math_18.operation = "AND"

            # node Reroute
            reroute_13 = point_edge_angle.nodes.new("NodeReroute")
            reroute_13.name = "Reroute"
            # node Boolean Math.001
            boolean_math_001_16 = point_edge_angle.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_16.name = "Boolean Math.001"
            boolean_math_001_16.operation = "AND"

            # Set locations
            group_input_55.location = (-380.0, 60.0)
            group_output_56.location = (528.431884765625, 156.69076538085938)
            group_002_3.location = (-160.0, -40.0)
            group_20.location = (60.0, 80.0)
            switch_13.location = (300.0, 200.0)
            group_001_10.location = (-160.0, 200.0)
            compare_16.location = (-159.9289093017578, 376.91131591796875)
            boolean_math_18.location = (60.0, 220.0)
            reroute_13.location = (268.1847229003906, 167.89195251464844)
            boolean_math_001_16.location = (100.0, 360.0)

            # Set dimensions
            group_input_55.width, group_input_55.height = 140.0, 100.0
            group_output_56.width, group_output_56.height = 140.0, 100.0
            group_002_3.width, group_002_3.height = 144.36843872070312, 100.0
            group_20.width, group_20.height = 175.07342529296875, 100.0
            switch_13.width, switch_13.height = 140.0, 100.0
            group_001_10.width, group_001_10.height = 140.0, 100.0
            compare_16.width, compare_16.height = 144.92868041992188, 100.0
            boolean_math_18.width, boolean_math_18.height = 175.42935180664062, 100.0
            reroute_13.width, reroute_13.height = 16.0, 100.0
            boolean_math_001_16.width, boolean_math_001_16.height = 140.0, 100.0

            # initialize point_edge_angle links
            # group_input_55.Edge A -> group_001_10.Edge Index
            point_edge_angle.links.new(
                group_input_55.outputs[0], group_001_10.inputs[0]
            )
            # group_input_55.Edge B -> group_002_3.Edge Index
            point_edge_angle.links.new(group_input_55.outputs[1], group_002_3.inputs[0])
            # group_001_10.Edge Vector -> group_20.A
            point_edge_angle.links.new(group_001_10.outputs[4], group_20.inputs[0])
            # group_002_3.Edge Vector -> group_20.B
            point_edge_angle.links.new(group_002_3.outputs[4], group_20.inputs[1])
            # group_001_10.Edge Index -> group_output_56.Edge Index A
            point_edge_angle.links.new(
                group_001_10.outputs[3], group_output_56.inputs[2]
            )
            # group_002_3.Edge Index -> group_output_56.Edge Index B
            point_edge_angle.links.new(
                group_002_3.outputs[3], group_output_56.inputs[3]
            )
            # group_001_10.Edge Vector -> group_output_56.Edge Vector A
            point_edge_angle.links.new(
                group_001_10.outputs[4], group_output_56.inputs[4]
            )
            # group_002_3.Edge Vector -> group_output_56.Edge Vector B
            point_edge_angle.links.new(
                group_002_3.outputs[4], group_output_56.inputs[5]
            )
            # group_001_10.Is Valid -> boolean_math_18.Boolean
            point_edge_angle.links.new(
                group_001_10.outputs[0], boolean_math_18.inputs[0]
            )
            # group_002_3.Is Valid -> boolean_math_18.Boolean
            point_edge_angle.links.new(
                group_002_3.outputs[0], boolean_math_18.inputs[1]
            )
            # reroute_13.Output -> switch_13.Switch
            point_edge_angle.links.new(reroute_13.outputs[0], switch_13.inputs[0])
            # switch_13.Output -> group_output_56.Angle
            point_edge_angle.links.new(switch_13.outputs[0], group_output_56.inputs[1])
            # reroute_13.Output -> group_output_56.Is Valid
            point_edge_angle.links.new(reroute_13.outputs[0], group_output_56.inputs[0])
            # group_20.Angle -> switch_13.True
            point_edge_angle.links.new(group_20.outputs[0], switch_13.inputs[2])
            # group_input_55.Edge A -> compare_16.A
            point_edge_angle.links.new(group_input_55.outputs[0], compare_16.inputs[2])
            # group_input_55.Edge B -> compare_16.B
            point_edge_angle.links.new(group_input_55.outputs[1], compare_16.inputs[3])
            # compare_16.Result -> boolean_math_001_16.Boolean
            point_edge_angle.links.new(
                compare_16.outputs[0], boolean_math_001_16.inputs[0]
            )
            # boolean_math_18.Boolean -> boolean_math_001_16.Boolean
            point_edge_angle.links.new(
                boolean_math_18.outputs[0], boolean_math_001_16.inputs[1]
            )
            # boolean_math_001_16.Boolean -> reroute_13.Input
            point_edge_angle.links.new(
                boolean_math_001_16.outputs[0], reroute_13.inputs[0]
            )
            return point_edge_angle

        point_edge_angle = point_edge_angle_node_group()

        # initialize _2_point_angle node group
        def _2_point_angle_node_group():
            _2_point_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="2 Point Angle"
            )

            _2_point_angle.color_tag = "CONVERTER"
            _2_point_angle.description = ""

            # _2_point_angle interface
            # Socket Angle
            angle_socket_3 = _2_point_angle.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_3.subtype = "NONE"
            angle_socket_3.default_value = 0.0
            angle_socket_3.min_value = -3.4028234663852886e38
            angle_socket_3.max_value = 3.4028234663852886e38
            angle_socket_3.attribute_domain = "POINT"
            angle_socket_3.description = "Angle of the line A -> Self -> C in radians"

            # Socket Index A
            index_a_socket_1 = _2_point_angle.interface.new_socket(
                name="Index A", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_a_socket_1.subtype = "NONE"
            index_a_socket_1.default_value = 0
            index_a_socket_1.min_value = 0
            index_a_socket_1.max_value = 2147483647
            index_a_socket_1.attribute_domain = "POINT"
            index_a_socket_1.description = (
                "First end point for the angle calculation around the current point"
            )

            # Socket Index C
            index_c_socket_1 = _2_point_angle.interface.new_socket(
                name="Index C", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_c_socket_1.subtype = "NONE"
            index_c_socket_1.default_value = 2
            index_c_socket_1.min_value = 0
            index_c_socket_1.max_value = 2147483647
            index_c_socket_1.attribute_domain = "POINT"
            index_c_socket_1.description = (
                "Last end point for the angle calculation around the current point"
            )

            # initialize _2_point_angle nodes
            # node Group Input
            group_input_56 = _2_point_angle.nodes.new("NodeGroupInput")
            group_input_56.name = "Group Input"

            # node Position
            position_5 = _2_point_angle.nodes.new("GeometryNodeInputPosition")
            position_5.name = "Position"

            # node Evaluate at Index.002
            evaluate_at_index_002_3 = _2_point_angle.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_3.name = "Evaluate at Index.002"
            evaluate_at_index_002_3.data_type = "FLOAT_VECTOR"
            evaluate_at_index_002_3.domain = "POINT"

            # node Evaluate at Index
            evaluate_at_index_9 = _2_point_angle.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_9.name = "Evaluate at Index"
            evaluate_at_index_9.data_type = "FLOAT_VECTOR"
            evaluate_at_index_9.domain = "POINT"

            # node Vector Math
            vector_math_9 = _2_point_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_9.name = "Vector Math"
            vector_math_9.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_5 = _2_point_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_001_5.name = "Vector Math.001"
            vector_math_001_5.operation = "SUBTRACT"

            # node Group.075
            group_075_1 = _2_point_angle.nodes.new("GeometryNodeGroup")
            group_075_1.name = "Group.075"
            group_075_1.node_tree = vector_angle

            # node Group Output
            group_output_57 = _2_point_angle.nodes.new("NodeGroupOutput")
            group_output_57.name = "Group Output"
            group_output_57.is_active_output = True

            # Set locations
            group_input_56.location = (-486.337646484375, 0.0)
            position_5.location = (-286.337646484375, -9.940185546875)
            evaluate_at_index_002_3.location = (-80.0, -60.0)
            evaluate_at_index_9.location = (-73.662353515625, 159.709716796875)
            vector_math_9.location = (106.638427734375, 160.290283203125)
            vector_math_001_5.location = (100.0, 20.0)
            group_075_1.location = (286.337646484375, 159.709716796875)
            group_output_57.location = (460.0, 160.0)

            # Set dimensions
            group_input_56.width, group_input_56.height = 140.0, 100.0
            position_5.width, position_5.height = 140.0, 100.0
            evaluate_at_index_002_3.width, evaluate_at_index_002_3.height = 140.0, 100.0
            evaluate_at_index_9.width, evaluate_at_index_9.height = 140.0, 100.0
            vector_math_9.width, vector_math_9.height = 140.0, 100.0
            vector_math_001_5.width, vector_math_001_5.height = 140.0, 100.0
            group_075_1.width, group_075_1.height = 140.0, 100.0
            group_output_57.width, group_output_57.height = 140.0, 100.0

            # initialize _2_point_angle links
            # evaluate_at_index_002_3.Value -> vector_math_001_5.Vector
            _2_point_angle.links.new(
                evaluate_at_index_002_3.outputs[0], vector_math_001_5.inputs[0]
            )
            # vector_math_9.Vector -> group_075_1.A
            _2_point_angle.links.new(vector_math_9.outputs[0], group_075_1.inputs[0])
            # evaluate_at_index_9.Value -> vector_math_9.Vector
            _2_point_angle.links.new(
                evaluate_at_index_9.outputs[0], vector_math_9.inputs[0]
            )
            # position_5.Position -> evaluate_at_index_002_3.Value
            _2_point_angle.links.new(
                position_5.outputs[0], evaluate_at_index_002_3.inputs[1]
            )
            # position_5.Position -> vector_math_001_5.Vector
            _2_point_angle.links.new(position_5.outputs[0], vector_math_001_5.inputs[1])
            # vector_math_001_5.Vector -> group_075_1.B
            _2_point_angle.links.new(
                vector_math_001_5.outputs[0], group_075_1.inputs[1]
            )
            # position_5.Position -> vector_math_9.Vector
            _2_point_angle.links.new(position_5.outputs[0], vector_math_9.inputs[1])
            # position_5.Position -> evaluate_at_index_9.Value
            _2_point_angle.links.new(
                position_5.outputs[0], evaluate_at_index_9.inputs[1]
            )
            # group_input_56.Index A -> evaluate_at_index_9.Index
            _2_point_angle.links.new(
                group_input_56.outputs[0], evaluate_at_index_9.inputs[0]
            )
            # group_input_56.Index C -> evaluate_at_index_002_3.Index
            _2_point_angle.links.new(
                group_input_56.outputs[1], evaluate_at_index_002_3.inputs[0]
            )
            # group_075_1.Angle -> group_output_57.Angle
            _2_point_angle.links.new(group_075_1.outputs[0], group_output_57.inputs[0])
            return _2_point_angle

        _2_point_angle = _2_point_angle_node_group()

        # initialize fallback_vector node group
        def fallback_vector_node_group():
            fallback_vector = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Fallback Vector"
            )

            fallback_vector.color_tag = "INPUT"
            fallback_vector.description = ""

            # fallback_vector interface
            # Socket Output
            output_socket = fallback_vector.interface.new_socket(
                name="Output", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            output_socket.subtype = "NONE"
            output_socket.default_value = (0.0, 0.0, 0.0)
            output_socket.min_value = -3.4028234663852886e38
            output_socket.max_value = 3.4028234663852886e38
            output_socket.attribute_domain = "POINT"

            # Socket Name
            name_socket_1 = fallback_vector.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_1.attribute_domain = "POINT"

            # Socket Fallback
            fallback_socket_1 = fallback_vector.interface.new_socket(
                name="Fallback", in_out="INPUT", socket_type="NodeSocketVector"
            )
            fallback_socket_1.subtype = "NONE"
            fallback_socket_1.default_value = (0.0, 0.0, 0.0)
            fallback_socket_1.min_value = -3.4028234663852886e38
            fallback_socket_1.max_value = 3.4028234663852886e38
            fallback_socket_1.attribute_domain = "POINT"

            # initialize fallback_vector nodes
            # node Group Output
            group_output_58 = fallback_vector.nodes.new("NodeGroupOutput")
            group_output_58.name = "Group Output"
            group_output_58.is_active_output = True

            # node Group Input
            group_input_57 = fallback_vector.nodes.new("NodeGroupInput")
            group_input_57.name = "Group Input"

            # node Named Attribute.001
            named_attribute_001_4 = fallback_vector.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_4.name = "Named Attribute.001"
            named_attribute_001_4.data_type = "FLOAT_VECTOR"

            # node Switch
            switch_14 = fallback_vector.nodes.new("GeometryNodeSwitch")
            switch_14.name = "Switch"
            switch_14.input_type = "VECTOR"

            # Set locations
            group_output_58.location = (260.0, 140.0)
            group_input_57.location = (-320.0, 80.0)
            named_attribute_001_4.location = (-134.38072204589844, 30.303295135498047)
            switch_14.location = (100.0, 140.0)

            # Set dimensions
            group_output_58.width, group_output_58.height = 140.0, 100.0
            group_input_57.width, group_input_57.height = 140.0, 100.0
            named_attribute_001_4.width, named_attribute_001_4.height = (
                147.09487915039062,
                100.0,
            )
            switch_14.width, switch_14.height = 140.0, 100.0

            # initialize fallback_vector links
            # named_attribute_001_4.Attribute -> switch_14.True
            fallback_vector.links.new(
                named_attribute_001_4.outputs[0], switch_14.inputs[2]
            )
            # named_attribute_001_4.Exists -> switch_14.Switch
            fallback_vector.links.new(
                named_attribute_001_4.outputs[1], switch_14.inputs[0]
            )
            # group_input_57.Fallback -> switch_14.False
            fallback_vector.links.new(group_input_57.outputs[1], switch_14.inputs[1])
            # switch_14.Output -> group_output_58.Output
            fallback_vector.links.new(switch_14.outputs[0], group_output_58.inputs[0])
            # group_input_57.Name -> named_attribute_001_4.Name
            fallback_vector.links.new(
                group_input_57.outputs[0], named_attribute_001_4.inputs[0]
            )
            return fallback_vector

        fallback_vector = fallback_vector_node_group()

        # initialize offset_vector node group
        def offset_vector_node_group():
            offset_vector = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Offset Vector"
            )

            offset_vector.color_tag = "CONVERTER"
            offset_vector.description = ""

            # offset_vector interface
            # Socket Value
            value_socket_8 = offset_vector.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            value_socket_8.subtype = "NONE"
            value_socket_8.default_value = (0.0, 0.0, 0.0)
            value_socket_8.min_value = -3.4028234663852886e38
            value_socket_8.max_value = 3.4028234663852886e38
            value_socket_8.attribute_domain = "POINT"

            # Socket Index
            index_socket_6 = offset_vector.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_6.subtype = "NONE"
            index_socket_6.default_value = 0
            index_socket_6.min_value = 0
            index_socket_6.max_value = 2147483647
            index_socket_6.attribute_domain = "POINT"

            # Socket Position
            position_socket_2 = offset_vector.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket_2.subtype = "NONE"
            position_socket_2.default_value = (0.0, 0.0, 0.0)
            position_socket_2.min_value = -3.4028234663852886e38
            position_socket_2.max_value = 3.4028234663852886e38
            position_socket_2.attribute_domain = "POINT"
            position_socket_2.hide_value = True

            # Socket Offset
            offset_socket_4 = offset_vector.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_4.subtype = "NONE"
            offset_socket_4.default_value = 0
            offset_socket_4.min_value = -2147483647
            offset_socket_4.max_value = 2147483647
            offset_socket_4.attribute_domain = "POINT"

            # initialize offset_vector nodes
            # node Group Output
            group_output_59 = offset_vector.nodes.new("NodeGroupOutput")
            group_output_59.name = "Group Output"
            group_output_59.is_active_output = True

            # node Group Input
            group_input_58 = offset_vector.nodes.new("NodeGroupInput")
            group_input_58.name = "Group Input"

            # node Evaluate at Index
            evaluate_at_index_10 = offset_vector.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_10.name = "Evaluate at Index"
            evaluate_at_index_10.data_type = "FLOAT_VECTOR"
            evaluate_at_index_10.domain = "POINT"

            # node Math
            math_12 = offset_vector.nodes.new("ShaderNodeMath")
            math_12.name = "Math"
            math_12.operation = "ADD"
            math_12.use_clamp = False

            # Set locations
            group_output_59.location = (300.0, 20.0)
            group_input_58.location = (-273.81378173828125, 0.0)
            evaluate_at_index_10.location = (120.0, 20.0)
            math_12.location = (-60.0, 20.0)

            # Set dimensions
            group_output_59.width, group_output_59.height = 140.0, 100.0
            group_input_58.width, group_input_58.height = 140.0, 100.0
            evaluate_at_index_10.width, evaluate_at_index_10.height = 140.0, 100.0
            math_12.width, math_12.height = 140.0, 100.0

            # initialize offset_vector links
            # group_input_58.Position -> evaluate_at_index_10.Value
            offset_vector.links.new(
                group_input_58.outputs[1], evaluate_at_index_10.inputs[1]
            )
            # evaluate_at_index_10.Value -> group_output_59.Value
            offset_vector.links.new(
                evaluate_at_index_10.outputs[0], group_output_59.inputs[0]
            )
            # group_input_58.Index -> math_12.Value
            offset_vector.links.new(group_input_58.outputs[0], math_12.inputs[0])
            # group_input_58.Offset -> math_12.Value
            offset_vector.links.new(group_input_58.outputs[2], math_12.inputs[1])
            # math_12.Value -> evaluate_at_index_10.Index
            offset_vector.links.new(math_12.outputs[0], evaluate_at_index_10.inputs[0])
            return offset_vector

        offset_vector = offset_vector_node_group()

        # initialize group_info node group
        def group_info_node_group():
            group_info = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Group Info"
            )

            group_info.color_tag = "CONVERTER"
            group_info.description = ""

            # group_info interface
            # Socket First Index
            first_index_socket = group_info.interface.new_socket(
                name="First Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_index_socket.subtype = "NONE"
            first_index_socket.default_value = 0
            first_index_socket.min_value = -2147483648
            first_index_socket.max_value = 2147483647
            first_index_socket.attribute_domain = "POINT"
            first_index_socket.description = "Index of the first point in the group"

            # Socket Last Index
            last_index_socket = group_info.interface.new_socket(
                name="Last Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_index_socket.subtype = "NONE"
            last_index_socket.default_value = 0
            last_index_socket.min_value = -2147483648
            last_index_socket.max_value = 2147483647
            last_index_socket.attribute_domain = "POINT"
            last_index_socket.description = "Index of the last point in the group"

            # Socket Index in Group
            index_in_group_socket = group_info.interface.new_socket(
                name="Index in Group", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_in_group_socket.subtype = "NONE"
            index_in_group_socket.default_value = 0
            index_in_group_socket.min_value = -2147483648
            index_in_group_socket.max_value = 2147483647
            index_in_group_socket.attribute_domain = "POINT"

            # Socket Size
            size_socket = group_info.interface.new_socket(
                name="Size", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            size_socket.subtype = "NONE"
            size_socket.default_value = 0
            size_socket.min_value = -2147483648
            size_socket.max_value = 2147483647
            size_socket.attribute_domain = "POINT"
            size_socket.description = "Number of points in the group"

            # Socket Group ID
            group_id_socket_4 = group_info.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_4.subtype = "NONE"
            group_id_socket_4.default_value = 0
            group_id_socket_4.min_value = -2147483648
            group_id_socket_4.max_value = 2147483647
            group_id_socket_4.attribute_domain = "POINT"

            # initialize group_info nodes
            # node Group Output
            group_output_60 = group_info.nodes.new("NodeGroupOutput")
            group_output_60.name = "Group Output"
            group_output_60.is_active_output = True

            # node Group Input
            group_input_59 = group_info.nodes.new("NodeGroupInput")
            group_input_59.name = "Group Input"

            # node Accumulate Field.001
            accumulate_field_001_3 = group_info.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_001_3.name = "Accumulate Field.001"
            accumulate_field_001_3.data_type = "INT"
            accumulate_field_001_3.domain = "POINT"
            accumulate_field_001_3.outputs[0].hide = True
            accumulate_field_001_3.outputs[1].hide = True

            # node Index
            index_8 = group_info.nodes.new("GeometryNodeInputIndex")
            index_8.name = "Index"

            # node Compare
            compare_17 = group_info.nodes.new("FunctionNodeCompare")
            compare_17.name = "Compare"
            compare_17.data_type = "INT"
            compare_17.mode = "ELEMENT"
            compare_17.operation = "EQUAL"
            # B_INT
            compare_17.inputs[3].default_value = 0

            # node Switch.001
            switch_001_6 = group_info.nodes.new("GeometryNodeSwitch")
            switch_001_6.name = "Switch.001"
            switch_001_6.input_type = "INT"
            # False
            switch_001_6.inputs[1].default_value = 0

            # node Compare.002
            compare_002_4 = group_info.nodes.new("FunctionNodeCompare")
            compare_002_4.name = "Compare.002"
            compare_002_4.data_type = "INT"
            compare_002_4.mode = "ELEMENT"
            compare_002_4.operation = "EQUAL"

            # node Switch.002
            switch_002_4 = group_info.nodes.new("GeometryNodeSwitch")
            switch_002_4.name = "Switch.002"
            switch_002_4.input_type = "INT"
            # False
            switch_002_4.inputs[1].default_value = 0

            # node Accumulate Field.002
            accumulate_field_002_1 = group_info.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_002_1.name = "Accumulate Field.002"
            accumulate_field_002_1.data_type = "INT"
            accumulate_field_002_1.domain = "POINT"
            accumulate_field_002_1.outputs[0].hide = True
            accumulate_field_002_1.outputs[1].hide = True

            # node Reroute
            reroute_14 = group_info.nodes.new("NodeReroute")
            reroute_14.name = "Reroute"
            # node Accumulate Field.003
            accumulate_field_003 = group_info.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_003.name = "Accumulate Field.003"
            accumulate_field_003.data_type = "INT"
            accumulate_field_003.domain = "POINT"
            # Value
            accumulate_field_003.inputs[0].default_value = 1

            # node Reroute.001
            reroute_001_9 = group_info.nodes.new("NodeReroute")
            reroute_001_9.name = "Reroute.001"

            # Set locations
            group_output_60.location = (580.0, 100.0)
            group_input_59.location = (-540.0, 0.0)
            accumulate_field_001_3.location = (340.0, 140.0)
            index_8.location = (-40.0, -20.0)
            compare_17.location = (-40.0, 140.0)
            switch_001_6.location = (120.0, 140.0)
            compare_002_4.location = (-40.0, -80.0)
            switch_002_4.location = (120.0, -20.0)
            accumulate_field_002_1.location = (340.0, -78.97427368164062)
            reroute_14.location = (280.0, -300.0)
            accumulate_field_003.location = (-240.0, -80.0)
            reroute_001_9.location = (-320.0, -300.0)

            # Set dimensions
            group_output_60.width, group_output_60.height = 140.0, 100.0
            group_input_59.width, group_input_59.height = 140.0, 100.0
            accumulate_field_001_3.width, accumulate_field_001_3.height = 140.0, 100.0
            index_8.width, index_8.height = 140.0, 100.0
            compare_17.width, compare_17.height = 140.0, 100.0
            switch_001_6.width, switch_001_6.height = 140.0, 100.0
            compare_002_4.width, compare_002_4.height = 140.0, 100.0
            switch_002_4.width, switch_002_4.height = 140.0, 100.0
            accumulate_field_002_1.width, accumulate_field_002_1.height = 140.0, 100.0
            reroute_14.width, reroute_14.height = 16.0, 100.0
            accumulate_field_003.width, accumulate_field_003.height = 140.0, 100.0
            reroute_001_9.width, reroute_001_9.height = 16.0, 100.0

            # initialize group_info links
            # reroute_14.Output -> accumulate_field_002_1.Group ID
            group_info.links.new(
                reroute_14.outputs[0], accumulate_field_002_1.inputs[1]
            )
            # reroute_001_9.Output -> reroute_14.Input
            group_info.links.new(reroute_001_9.outputs[0], reroute_14.inputs[0])
            # index_8.Index -> switch_002_4.True
            group_info.links.new(index_8.outputs[0], switch_002_4.inputs[2])
            # accumulate_field_003.Trailing -> compare_17.A
            group_info.links.new(accumulate_field_003.outputs[1], compare_17.inputs[2])
            # compare_17.Result -> switch_001_6.Switch
            group_info.links.new(compare_17.outputs[0], switch_001_6.inputs[0])
            # accumulate_field_003.Total -> compare_002_4.B
            group_info.links.new(
                accumulate_field_003.outputs[2], compare_002_4.inputs[3]
            )
            # switch_002_4.Output -> accumulate_field_002_1.Value
            group_info.links.new(
                switch_002_4.outputs[0], accumulate_field_002_1.inputs[0]
            )
            # reroute_001_9.Output -> accumulate_field_003.Group ID
            group_info.links.new(
                reroute_001_9.outputs[0], accumulate_field_003.inputs[1]
            )
            # index_8.Index -> switch_001_6.True
            group_info.links.new(index_8.outputs[0], switch_001_6.inputs[2])
            # switch_001_6.Output -> accumulate_field_001_3.Value
            group_info.links.new(
                switch_001_6.outputs[0], accumulate_field_001_3.inputs[0]
            )
            # compare_002_4.Result -> switch_002_4.Switch
            group_info.links.new(compare_002_4.outputs[0], switch_002_4.inputs[0])
            # reroute_14.Output -> accumulate_field_001_3.Group ID
            group_info.links.new(
                reroute_14.outputs[0], accumulate_field_001_3.inputs[1]
            )
            # group_input_59.Group ID -> reroute_001_9.Input
            group_info.links.new(group_input_59.outputs[0], reroute_001_9.inputs[0])
            # accumulate_field_001_3.Total -> group_output_60.First Index
            group_info.links.new(
                accumulate_field_001_3.outputs[2], group_output_60.inputs[0]
            )
            # accumulate_field_002_1.Total -> group_output_60.Last Index
            group_info.links.new(
                accumulate_field_002_1.outputs[2], group_output_60.inputs[1]
            )
            # accumulate_field_003.Total -> group_output_60.Size
            group_info.links.new(
                accumulate_field_003.outputs[2], group_output_60.inputs[3]
            )
            # accumulate_field_003.Leading -> compare_002_4.A
            group_info.links.new(
                accumulate_field_003.outputs[0], compare_002_4.inputs[2]
            )
            # accumulate_field_003.Trailing -> group_output_60.Index in Group
            group_info.links.new(
                accumulate_field_003.outputs[1], group_output_60.inputs[2]
            )
            return group_info

        group_info = group_info_node_group()

        # initialize backbone_position node group
        def backbone_position_node_group():
            backbone_position = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Backbone Position"
            )

            backbone_position.color_tag = "INPUT"
            backbone_position.description = ""

            # backbone_position interface
            # Socket Position
            position_socket_3 = backbone_position.interface.new_socket(
                name="Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            position_socket_3.subtype = "NONE"
            position_socket_3.default_value = (0.0, 0.0, 0.0)
            position_socket_3.min_value = -3.4028234663852886e38
            position_socket_3.max_value = 3.4028234663852886e38
            position_socket_3.attribute_domain = "POINT"

            # Socket Index
            index_socket_7 = backbone_position.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_7.subtype = "NONE"
            index_socket_7.default_value = 0
            index_socket_7.min_value = 0
            index_socket_7.max_value = 2147483647
            index_socket_7.attribute_domain = "POINT"
            index_socket_7.hide_value = True

            # Socket Menu
            menu_socket = backbone_position.interface.new_socket(
                name="Menu", in_out="INPUT", socket_type="NodeSocketMenu"
            )
            menu_socket.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_5 = backbone_position.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_5.subtype = "NONE"
            offset_socket_5.default_value = 0
            offset_socket_5.min_value = -1
            offset_socket_5.max_value = 1
            offset_socket_5.attribute_domain = "POINT"

            # initialize backbone_position nodes
            # node Group Output
            group_output_61 = backbone_position.nodes.new("NodeGroupOutput")
            group_output_61.name = "Group Output"
            group_output_61.is_active_output = True

            # node Group Input
            group_input_60 = backbone_position.nodes.new("NodeGroupInput")
            group_input_60.name = "Group Input"
            group_input_60.outputs[0].hide = True
            group_input_60.outputs[2].hide = True
            group_input_60.outputs[3].hide = True

            # node Group
            group_21 = backbone_position.nodes.new("GeometryNodeGroup")
            group_21.name = "Group"
            group_21.node_tree = residue_mask
            # Socket_5
            group_21.inputs[1].default_value = True
            # Socket_4
            group_21.inputs[2].default_value = 0

            # node Group.001
            group_001_11 = backbone_position.nodes.new("GeometryNodeGroup")
            group_001_11.name = "Group.001"
            group_001_11.node_tree = fallback_vector

            # node Index Switch
            index_switch_2 = backbone_position.nodes.new("GeometryNodeIndexSwitch")
            index_switch_2.name = "Index Switch"
            index_switch_2.data_type = "STRING"
            index_switch_2.index_switch_items.clear()
            index_switch_2.index_switch_items.new()
            index_switch_2.index_switch_items.new()
            index_switch_2.index_switch_items.new()
            index_switch_2.index_switch_items.new()
            index_switch_2.index_switch_items.new()
            # Item_0
            index_switch_2.inputs[1].default_value = ""
            # Item_1
            index_switch_2.inputs[2].default_value = "backbone_N"
            # Item_2
            index_switch_2.inputs[3].default_value = "backbone_CA"
            # Item_3
            index_switch_2.inputs[4].default_value = "backbone_C"
            # Item_4
            index_switch_2.inputs[5].default_value = "backbone_O"

            # node Menu Switch
            menu_switch = backbone_position.nodes.new("GeometryNodeMenuSwitch")
            menu_switch.name = "Menu Switch"
            menu_switch.active_index = 3
            menu_switch.data_type = "INT"
            menu_switch.enum_items.clear()
            menu_switch.enum_items.new("backbone_N")
            menu_switch.enum_items[0].description = ""
            menu_switch.enum_items.new("backbone_CA")
            menu_switch.enum_items[1].description = ""
            menu_switch.enum_items.new("backbone_C")
            menu_switch.enum_items[2].description = ""
            menu_switch.enum_items.new("backbone_O")
            menu_switch.enum_items[3].description = ""
            # Item_0
            menu_switch.inputs[1].default_value = 1
            # Item_1
            menu_switch.inputs[2].default_value = 2
            # Item_2
            menu_switch.inputs[3].default_value = 3
            # Item_3
            menu_switch.inputs[4].default_value = 4

            # node Group.002
            group_002_4 = backbone_position.nodes.new("GeometryNodeGroup")
            group_002_4.name = "Group.002"
            group_002_4.node_tree = offset_vector

            # node Group Input.001
            group_input_001_9 = backbone_position.nodes.new("NodeGroupInput")
            group_input_001_9.name = "Group Input.001"
            group_input_001_9.outputs[1].hide = True
            group_input_001_9.outputs[3].hide = True

            # node Group.003
            group_003_2 = backbone_position.nodes.new("GeometryNodeGroup")
            group_003_2.name = "Group.003"
            group_003_2.node_tree = group_info

            # node Math
            math_13 = backbone_position.nodes.new("ShaderNodeMath")
            math_13.name = "Math"
            math_13.operation = "MULTIPLY"
            math_13.use_clamp = False

            # Set locations
            group_output_61.location = (640.0, 100.0)
            group_input_60.location = (-560.0, 100.0)
            group_21.location = (-194.45651245117188, 100.0)
            group_001_11.location = (60.0, 120.0)
            index_switch_2.location = (-200.0, -140.0)
            menu_switch.location = (-380.0, 100.0)
            group_002_4.location = (460.0, 100.0)
            group_input_001_9.location = (60.0, 0.0)
            group_003_2.location = (60.0, -100.0)
            math_13.location = (260.0, -100.0)

            # Set dimensions
            group_output_61.width, group_output_61.height = 140.0, 100.0
            group_input_60.width, group_input_60.height = 140.0, 100.0
            group_21.width, group_21.height = 174.45651245117188, 100.0
            group_001_11.width, group_001_11.height = 141.8542938232422, 100.0
            index_switch_2.width, index_switch_2.height = 184.38287353515625, 100.0
            menu_switch.width, menu_switch.height = 140.0, 100.0
            group_002_4.width, group_002_4.height = 140.0, 100.0
            group_input_001_9.width, group_input_001_9.height = 140.0, 100.0
            group_003_2.width, group_003_2.height = 140.0, 100.0
            math_13.width, math_13.height = 140.0, 100.0

            # initialize backbone_position links
            # index_switch_2.Output -> group_001_11.Name
            backbone_position.links.new(
                index_switch_2.outputs[0], group_001_11.inputs[0]
            )
            # menu_switch.Output -> index_switch_2.Index
            backbone_position.links.new(
                menu_switch.outputs[0], index_switch_2.inputs[0]
            )
            # group_input_60.Menu -> menu_switch.Menu
            backbone_position.links.new(
                group_input_60.outputs[1], menu_switch.inputs[0]
            )
            # group_input_001_9.Index -> group_002_4.Index
            backbone_position.links.new(
                group_input_001_9.outputs[0], group_002_4.inputs[0]
            )
            # menu_switch.Output -> group_21.atom_name
            backbone_position.links.new(menu_switch.outputs[0], group_21.inputs[0])
            # group_002_4.Value -> group_output_61.Position
            backbone_position.links.new(
                group_002_4.outputs[0], group_output_61.inputs[0]
            )
            # group_001_11.Output -> group_002_4.Position
            backbone_position.links.new(group_001_11.outputs[0], group_002_4.inputs[1])
            # group_21.Position -> group_001_11.Fallback
            backbone_position.links.new(group_21.outputs[2], group_001_11.inputs[1])
            # group_21.Group ID -> group_003_2.Group ID
            backbone_position.links.new(group_21.outputs[3], group_003_2.inputs[0])
            # group_input_001_9.Offset -> math_13.Value
            backbone_position.links.new(group_input_001_9.outputs[2], math_13.inputs[0])
            # group_003_2.Size -> math_13.Value
            backbone_position.links.new(group_003_2.outputs[3], math_13.inputs[1])
            # math_13.Value -> group_002_4.Offset
            backbone_position.links.new(math_13.outputs[0], group_002_4.inputs[2])
            return backbone_position

        backbone_position = backbone_position_node_group()

        # initialize backbone_positions node group
        def backbone_positions_node_group():
            backbone_positions = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Backbone Positions"
            )

            backbone_positions.color_tag = "INPUT"
            backbone_positions.description = ""

            # backbone_positions interface
            # Socket O
            o_socket_1 = backbone_positions.interface.new_socket(
                name="O", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            o_socket_1.subtype = "NONE"
            o_socket_1.default_value = (0.0, 0.0, 0.0)
            o_socket_1.min_value = -3.4028234663852886e38
            o_socket_1.max_value = 3.4028234663852886e38
            o_socket_1.attribute_domain = "POINT"

            # Socket C
            c_socket_1 = backbone_positions.interface.new_socket(
                name="C", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            c_socket_1.subtype = "NONE"
            c_socket_1.default_value = (0.0, 0.0, 0.0)
            c_socket_1.min_value = -3.4028234663852886e38
            c_socket_1.max_value = 3.4028234663852886e38
            c_socket_1.attribute_domain = "POINT"

            # Socket CA
            ca_socket = backbone_positions.interface.new_socket(
                name="CA", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ca_socket.subtype = "NONE"
            ca_socket.default_value = (0.0, 0.0, 0.0)
            ca_socket.min_value = -3.4028234663852886e38
            ca_socket.max_value = 3.4028234663852886e38
            ca_socket.attribute_domain = "POINT"

            # Socket N
            n_socket_1 = backbone_positions.interface.new_socket(
                name="N", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            n_socket_1.subtype = "NONE"
            n_socket_1.default_value = (0.0, 0.0, 0.0)
            n_socket_1.min_value = -3.4028234663852886e38
            n_socket_1.max_value = 3.4028234663852886e38
            n_socket_1.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_6 = backbone_positions.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_6.subtype = "NONE"
            offset_socket_6.default_value = 0
            offset_socket_6.min_value = -2147483648
            offset_socket_6.max_value = 2147483647
            offset_socket_6.attribute_domain = "POINT"

            # initialize backbone_positions nodes
            # node Group Output
            group_output_62 = backbone_positions.nodes.new("NodeGroupOutput")
            group_output_62.name = "Group Output"
            group_output_62.is_active_output = True

            # node Group Input
            group_input_61 = backbone_positions.nodes.new("NodeGroupInput")
            group_input_61.name = "Group Input"

            # node Group.001
            group_001_12 = backbone_positions.nodes.new("GeometryNodeGroup")
            group_001_12.name = "Group.001"
            group_001_12.node_tree = backbone_position
            # Socket_3
            group_001_12.inputs[0].default_value = 0
            # Socket_2
            group_001_12.inputs[1].default_value = "backbone_O"

            # node Group.005
            group_005_2 = backbone_positions.nodes.new("GeometryNodeGroup")
            group_005_2.name = "Group.005"
            group_005_2.node_tree = backbone_position
            # Socket_3
            group_005_2.inputs[0].default_value = 0
            # Socket_2
            group_005_2.inputs[1].default_value = "backbone_C"

            # node Group.006
            group_006_2 = backbone_positions.nodes.new("GeometryNodeGroup")
            group_006_2.name = "Group.006"
            group_006_2.node_tree = backbone_position
            # Socket_3
            group_006_2.inputs[0].default_value = 0
            # Socket_2
            group_006_2.inputs[1].default_value = "backbone_CA"

            # node Group.007
            group_007_2 = backbone_positions.nodes.new("GeometryNodeGroup")
            group_007_2.name = "Group.007"
            group_007_2.node_tree = backbone_position
            # Socket_3
            group_007_2.inputs[0].default_value = 0
            # Socket_2
            group_007_2.inputs[1].default_value = "backbone_N"

            # Set locations
            group_output_62.location = (320.0, -220.0)
            group_input_61.location = (-260.0, -340.0)
            group_001_12.location = (60.0, -60.0)
            group_005_2.location = (60.0, -220.0)
            group_006_2.location = (60.0, -400.0)
            group_007_2.location = (60.0, -560.0)

            # Set dimensions
            group_output_62.width, group_output_62.height = 140.0, 100.0
            group_input_61.width, group_input_61.height = 140.0, 100.0
            group_001_12.width, group_001_12.height = 177.7757568359375, 100.0
            group_005_2.width, group_005_2.height = 177.7757568359375, 100.0
            group_006_2.width, group_006_2.height = 177.7757568359375, 100.0
            group_007_2.width, group_007_2.height = 177.7757568359375, 100.0

            # initialize backbone_positions links
            # group_007_2.Position -> group_output_62.N
            backbone_positions.links.new(
                group_007_2.outputs[0], group_output_62.inputs[3]
            )
            # group_006_2.Position -> group_output_62.CA
            backbone_positions.links.new(
                group_006_2.outputs[0], group_output_62.inputs[2]
            )
            # group_005_2.Position -> group_output_62.C
            backbone_positions.links.new(
                group_005_2.outputs[0], group_output_62.inputs[1]
            )
            # group_001_12.Position -> group_output_62.O
            backbone_positions.links.new(
                group_001_12.outputs[0], group_output_62.inputs[0]
            )
            # group_input_61.Offset -> group_005_2.Offset
            backbone_positions.links.new(
                group_input_61.outputs[0], group_005_2.inputs[2]
            )
            # group_input_61.Offset -> group_001_12.Offset
            backbone_positions.links.new(
                group_input_61.outputs[0], group_001_12.inputs[2]
            )
            # group_input_61.Offset -> group_006_2.Offset
            backbone_positions.links.new(
                group_input_61.outputs[0], group_006_2.inputs[2]
            )
            # group_input_61.Offset -> group_007_2.Offset
            backbone_positions.links.new(
                group_input_61.outputs[0], group_007_2.inputs[2]
            )
            return backbone_positions

        backbone_positions = backbone_positions_node_group()

        # initialize sample_nearest_atoms node group
        def sample_nearest_atoms_node_group():
            sample_nearest_atoms = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Sample Nearest Atoms"
            )

            sample_nearest_atoms.color_tag = "GEOMETRY"
            sample_nearest_atoms.description = ""

            # sample_nearest_atoms interface
            # Socket Color
            color_socket = sample_nearest_atoms.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket.attribute_domain = "POINT"

            # Socket b_factor
            b_factor_socket = sample_nearest_atoms.interface.new_socket(
                name="b_factor", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            b_factor_socket.subtype = "NONE"
            b_factor_socket.default_value = 0.0
            b_factor_socket.min_value = -3.4028234663852886e38
            b_factor_socket.max_value = 3.4028234663852886e38
            b_factor_socket.attribute_domain = "POINT"

            # Socket atomic_number
            atomic_number_socket_1 = sample_nearest_atoms.interface.new_socket(
                name="atomic_number", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            atomic_number_socket_1.subtype = "NONE"
            atomic_number_socket_1.default_value = 0
            atomic_number_socket_1.min_value = -2147483648
            atomic_number_socket_1.max_value = 2147483647
            atomic_number_socket_1.attribute_domain = "POINT"

            # Socket chain_number
            chain_number_socket = sample_nearest_atoms.interface.new_socket(
                name="chain_number", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            chain_number_socket.subtype = "NONE"
            chain_number_socket.default_value = 0
            chain_number_socket.min_value = -2147483648
            chain_number_socket.max_value = 2147483647
            chain_number_socket.attribute_domain = "POINT"

            # Socket res_id
            res_id_socket_3 = sample_nearest_atoms.interface.new_socket(
                name="res_id", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            res_id_socket_3.subtype = "NONE"
            res_id_socket_3.default_value = 0
            res_id_socket_3.min_value = -2147483648
            res_id_socket_3.max_value = 2147483647
            res_id_socket_3.attribute_domain = "POINT"

            # Socket res_name
            res_name_socket = sample_nearest_atoms.interface.new_socket(
                name="res_name", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            res_name_socket.subtype = "NONE"
            res_name_socket.default_value = 0
            res_name_socket.min_value = -2147483648
            res_name_socket.max_value = 2147483647
            res_name_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_15 = sample_nearest_atoms.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_15.attribute_domain = "POINT"
            atoms_socket_15.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # initialize sample_nearest_atoms nodes
            # node Group Output
            group_output_63 = sample_nearest_atoms.nodes.new("NodeGroupOutput")
            group_output_63.name = "Group Output"
            group_output_63.is_active_output = True

            # node Sample Index.001
            sample_index_001_2 = sample_nearest_atoms.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_2.name = "Sample Index.001"
            sample_index_001_2.clamp = False
            sample_index_001_2.data_type = "INT"
            sample_index_001_2.domain = "POINT"

            # node Sample Index.002
            sample_index_002_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002_1.name = "Sample Index.002"
            sample_index_002_1.clamp = False
            sample_index_002_1.data_type = "INT"
            sample_index_002_1.domain = "POINT"

            # node Sample Index.003
            sample_index_003_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_003_1.name = "Sample Index.003"
            sample_index_003_1.clamp = False
            sample_index_003_1.data_type = "INT"
            sample_index_003_1.domain = "POINT"

            # node Sample Index.004
            sample_index_004_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_004_1.name = "Sample Index.004"
            sample_index_004_1.clamp = False
            sample_index_004_1.data_type = "INT"
            sample_index_004_1.domain = "POINT"

            # node Sample Index.005
            sample_index_005_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_005_1.name = "Sample Index.005"
            sample_index_005_1.clamp = False
            sample_index_005_1.data_type = "FLOAT_COLOR"
            sample_index_005_1.domain = "POINT"

            # node Sample Index
            sample_index_2 = sample_nearest_atoms.nodes.new("GeometryNodeSampleIndex")
            sample_index_2.name = "Sample Index"
            sample_index_2.clamp = False
            sample_index_2.data_type = "FLOAT"
            sample_index_2.domain = "POINT"

            # node Group Input
            group_input_62 = sample_nearest_atoms.nodes.new("NodeGroupInput")
            group_input_62.name = "Group Input"

            # node Sample Nearest
            sample_nearest = sample_nearest_atoms.nodes.new("GeometryNodeSampleNearest")
            sample_nearest.name = "Sample Nearest"
            sample_nearest.domain = "POINT"
            # Sample Position
            sample_nearest.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Named Attribute.002
            named_attribute_002_5 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_5.name = "Named Attribute.002"
            named_attribute_002_5.data_type = "INT"
            # Name
            named_attribute_002_5.inputs[0].default_value = "chain_number"

            # node Named Attribute.003
            named_attribute_003_2 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_2.name = "Named Attribute.003"
            named_attribute_003_2.data_type = "INT"
            # Name
            named_attribute_003_2.inputs[0].default_value = "res_id"

            # node Named Attribute.004
            named_attribute_004_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_1.name = "Named Attribute.004"
            named_attribute_004_1.data_type = "INT"
            # Name
            named_attribute_004_1.inputs[0].default_value = "res_name"

            # node Named Attribute.001
            named_attribute_001_5 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_5.name = "Named Attribute.001"
            named_attribute_001_5.data_type = "INT"
            # Name
            named_attribute_001_5.inputs[0].default_value = "atomic_number"

            # node Named Attribute
            named_attribute_13 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_13.name = "Named Attribute"
            named_attribute_13.data_type = "FLOAT"
            # Name
            named_attribute_13.inputs[0].default_value = "b_factor"

            # node Named Attribute.005
            named_attribute_005_1 = sample_nearest_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_005_1.name = "Named Attribute.005"
            named_attribute_005_1.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_005_1.inputs[0].default_value = "Color"

            # Set locations
            group_output_63.location = (518.507568359375, 77.42973327636719)
            sample_index_001_2.location = (120.0, -100.0)
            sample_index_002_1.location = (120.0, -320.0)
            sample_index_003_1.location = (120.0, -540.0)
            sample_index_004_1.location = (120.0, -760.0)
            sample_index_005_1.location = (120.0, 320.0)
            sample_index_2.location = (118.25213623046875, 111.74752807617188)
            group_input_62.location = (-622.2442626953125, 8.679118156433105)
            sample_nearest.location = (-620.0, -80.0)
            named_attribute_002_5.location = (-60.0, -380.0)
            named_attribute_003_2.location = (-60.0, -600.0)
            named_attribute_004_1.location = (-60.0, -820.0)
            named_attribute_001_5.location = (-60.0, -160.0)
            named_attribute_13.location = (-60.0, 40.0)
            named_attribute_005_1.location = (-60.0, 260.0)

            # Set dimensions
            group_output_63.width, group_output_63.height = 140.0, 100.0
            sample_index_001_2.width, sample_index_001_2.height = 140.0, 100.0
            sample_index_002_1.width, sample_index_002_1.height = 140.0, 100.0
            sample_index_003_1.width, sample_index_003_1.height = 140.0, 100.0
            sample_index_004_1.width, sample_index_004_1.height = 140.0, 100.0
            sample_index_005_1.width, sample_index_005_1.height = 140.0, 100.0
            sample_index_2.width, sample_index_2.height = 140.0, 100.0
            group_input_62.width, group_input_62.height = 140.0, 100.0
            sample_nearest.width, sample_nearest.height = 140.0, 100.0
            named_attribute_002_5.width, named_attribute_002_5.height = 140.0, 100.0
            named_attribute_003_2.width, named_attribute_003_2.height = 140.0, 100.0
            named_attribute_004_1.width, named_attribute_004_1.height = 140.0, 100.0
            named_attribute_001_5.width, named_attribute_001_5.height = 140.0, 100.0
            named_attribute_13.width, named_attribute_13.height = 140.0, 100.0
            named_attribute_005_1.width, named_attribute_005_1.height = 140.0, 100.0

            # initialize sample_nearest_atoms links
            # sample_nearest.Index -> sample_index_2.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_2.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_2.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_2.inputs[0]
            )
            # group_input_62.Atoms -> sample_nearest.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_nearest.inputs[0]
            )
            # sample_nearest.Index -> sample_index_001_2.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_001_2.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_001_2.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_001_2.inputs[0]
            )
            # named_attribute_001_5.Attribute -> sample_index_001_2.Value
            sample_nearest_atoms.links.new(
                named_attribute_001_5.outputs[0], sample_index_001_2.inputs[1]
            )
            # sample_index_001_2.Value -> group_output_63.atomic_number
            sample_nearest_atoms.links.new(
                sample_index_001_2.outputs[0], group_output_63.inputs[2]
            )
            # sample_nearest.Index -> sample_index_002_1.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_002_1.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_002_1.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_002_1.inputs[0]
            )
            # named_attribute_002_5.Attribute -> sample_index_002_1.Value
            sample_nearest_atoms.links.new(
                named_attribute_002_5.outputs[0], sample_index_002_1.inputs[1]
            )
            # sample_index_002_1.Value -> group_output_63.chain_number
            sample_nearest_atoms.links.new(
                sample_index_002_1.outputs[0], group_output_63.inputs[3]
            )
            # sample_nearest.Index -> sample_index_003_1.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_003_1.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_003_1.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_003_1.inputs[0]
            )
            # named_attribute_003_2.Attribute -> sample_index_003_1.Value
            sample_nearest_atoms.links.new(
                named_attribute_003_2.outputs[0], sample_index_003_1.inputs[1]
            )
            # sample_index_003_1.Value -> group_output_63.res_id
            sample_nearest_atoms.links.new(
                sample_index_003_1.outputs[0], group_output_63.inputs[4]
            )
            # sample_nearest.Index -> sample_index_004_1.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_004_1.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_004_1.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_004_1.inputs[0]
            )
            # named_attribute_004_1.Attribute -> sample_index_004_1.Value
            sample_nearest_atoms.links.new(
                named_attribute_004_1.outputs[0], sample_index_004_1.inputs[1]
            )
            # sample_index_004_1.Value -> group_output_63.res_name
            sample_nearest_atoms.links.new(
                sample_index_004_1.outputs[0], group_output_63.inputs[5]
            )
            # named_attribute_005_1.Attribute -> sample_index_005_1.Value
            sample_nearest_atoms.links.new(
                named_attribute_005_1.outputs[0], sample_index_005_1.inputs[1]
            )
            # sample_nearest.Index -> sample_index_005_1.Index
            sample_nearest_atoms.links.new(
                sample_nearest.outputs[0], sample_index_005_1.inputs[2]
            )
            # group_input_62.Atoms -> sample_index_005_1.Geometry
            sample_nearest_atoms.links.new(
                group_input_62.outputs[0], sample_index_005_1.inputs[0]
            )
            # sample_index_005_1.Value -> group_output_63.Color
            sample_nearest_atoms.links.new(
                sample_index_005_1.outputs[0], group_output_63.inputs[0]
            )
            # named_attribute_13.Attribute -> sample_index_2.Value
            sample_nearest_atoms.links.new(
                named_attribute_13.outputs[0], sample_index_2.inputs[1]
            )
            # sample_index_2.Value -> group_output_63.b_factor
            sample_nearest_atoms.links.new(
                sample_index_2.outputs[0], group_output_63.inputs[1]
            )
            return sample_nearest_atoms

        sample_nearest_atoms = sample_nearest_atoms_node_group()

        # initialize style_density_surface node group
        def style_density_surface_node_group():
            style_density_surface = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Density Surface"
            )

            style_density_surface.color_tag = "GEOMETRY"
            style_density_surface.description = ""

            style_density_surface.is_modifier = True

            # style_density_surface interface
            # Socket Geometry
            geometry_socket_8 = style_density_surface.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_8.attribute_domain = "POINT"

            # Socket Volume
            volume_socket = style_density_surface.interface.new_socket(
                name="Volume", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            volume_socket.attribute_domain = "POINT"

            # Socket Threshold
            threshold_socket = style_density_surface.interface.new_socket(
                name="Threshold", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            threshold_socket.subtype = "NONE"
            threshold_socket.default_value = 0.800000011920929
            threshold_socket.min_value = -3.4028234663852886e38
            threshold_socket.max_value = 3.4028234663852886e38
            threshold_socket.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_6 = style_density_surface.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_6.attribute_domain = "POINT"
            shade_smooth_socket_6.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Hide Dust
            hide_dust_socket = style_density_surface.interface.new_socket(
                name="Hide Dust", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            hide_dust_socket.subtype = "NONE"
            hide_dust_socket.default_value = 0.0
            hide_dust_socket.min_value = -10000.0
            hide_dust_socket.max_value = 10000.0
            hide_dust_socket.attribute_domain = "POINT"

            # Panel Material
            material_panel_4 = style_density_surface.interface.new_panel("Material")
            # Socket Color
            color_socket_1 = style_density_surface.interface.new_socket(
                name="Color",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=material_panel_4,
            )
            color_socket_1.attribute_domain = "POINT"

            # Socket Material
            material_socket_8 = style_density_surface.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_4,
            )
            material_socket_8.attribute_domain = "POINT"
            material_socket_8.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_density_surface nodes
            # node Volume to Mesh
            volume_to_mesh = style_density_surface.nodes.new("GeometryNodeVolumeToMesh")
            volume_to_mesh.name = "Volume to Mesh"
            volume_to_mesh.resolution_mode = "GRID"
            # Adaptivity
            volume_to_mesh.inputs[4].default_value = 0.0

            # node Store Named Attribute
            store_named_attribute_5 = style_density_surface.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_5.name = "Store Named Attribute"
            store_named_attribute_5.data_type = "FLOAT_COLOR"
            store_named_attribute_5.domain = "POINT"
            # Selection
            store_named_attribute_5.inputs[1].default_value = True
            # Name
            store_named_attribute_5.inputs[2].default_value = "Color"

            # node Set Material
            set_material_5 = style_density_surface.nodes.new("GeometryNodeSetMaterial")
            set_material_5.name = "Set Material"
            # Selection
            set_material_5.inputs[1].default_value = True

            # node Group Output
            group_output_64 = style_density_surface.nodes.new("NodeGroupOutput")
            group_output_64.name = "Group Output"
            group_output_64.is_active_output = True

            # node Set Shade Smooth
            set_shade_smooth_4 = style_density_surface.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_4.name = "Set Shade Smooth"
            set_shade_smooth_4.domain = "FACE"
            # Selection
            set_shade_smooth_4.inputs[1].default_value = True

            # node Group Input
            group_input_63 = style_density_surface.nodes.new("NodeGroupInput")
            group_input_63.name = "Group Input"

            # node Mesh Island
            mesh_island = style_density_surface.nodes.new("GeometryNodeInputMeshIsland")
            mesh_island.name = "Mesh Island"

            # node Face Area
            face_area = style_density_surface.nodes.new("GeometryNodeInputMeshFaceArea")
            face_area.name = "Face Area"

            # node Accumulate Field
            accumulate_field_3 = style_density_surface.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_3.name = "Accumulate Field"
            accumulate_field_3.data_type = "FLOAT"
            accumulate_field_3.domain = "POINT"

            # node Compare
            compare_18 = style_density_surface.nodes.new("FunctionNodeCompare")
            compare_18.name = "Compare"
            compare_18.data_type = "FLOAT"
            compare_18.mode = "ELEMENT"
            compare_18.operation = "LESS_THAN"

            # node Delete Geometry
            delete_geometry_2 = style_density_surface.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry_2.name = "Delete Geometry"
            delete_geometry_2.domain = "POINT"
            delete_geometry_2.mode = "ALL"

            # Set locations
            volume_to_mesh.location = (-362.1430358886719, 7.630115509033203)
            store_named_attribute_5.location = (108.04933166503906, 22.085805892944336)
            set_material_5.location = (306.03485107421875, 6.998895645141602)
            group_output_64.location = (745.5179443359375, 7.314505577087402)
            set_shade_smooth_4.location = (525.8917846679688, 32.18394470214844)
            group_input_63.location = (-575.2391967773438, -60.0)
            mesh_island.location = (-718.2122802734375, 136.0499267578125)
            face_area.location = (-719.6749267578125, 216.50949096679688)
            accumulate_field_3.location = (-514.8893432617188, 256.0077819824219)
            compare_18.location = (-332.0450439453125, 241.37879943847656)
            delete_geometry_2.location = (-112.00000762939453, 21.943641662597656)

            # Set dimensions
            volume_to_mesh.width, volume_to_mesh.height = 170.0, 100.0
            store_named_attribute_5.width, store_named_attribute_5.height = 140.0, 100.0
            set_material_5.width, set_material_5.height = 140.0, 100.0
            group_output_64.width, group_output_64.height = 140.0, 100.0
            set_shade_smooth_4.width, set_shade_smooth_4.height = 140.0, 100.0
            group_input_63.width, group_input_63.height = 140.0, 100.0
            mesh_island.width, mesh_island.height = 140.0, 100.0
            face_area.width, face_area.height = 140.0, 100.0
            accumulate_field_3.width, accumulate_field_3.height = 140.0, 100.0
            compare_18.width, compare_18.height = 140.0, 100.0
            delete_geometry_2.width, delete_geometry_2.height = 140.0, 100.0

            # initialize style_density_surface links
            # store_named_attribute_5.Geometry -> set_material_5.Geometry
            style_density_surface.links.new(
                store_named_attribute_5.outputs[0], set_material_5.inputs[0]
            )
            # delete_geometry_2.Geometry -> store_named_attribute_5.Geometry
            style_density_surface.links.new(
                delete_geometry_2.outputs[0], store_named_attribute_5.inputs[0]
            )
            # group_input_63.Color -> store_named_attribute_5.Value
            style_density_surface.links.new(
                group_input_63.outputs[4], store_named_attribute_5.inputs[3]
            )
            # group_input_63.Volume -> volume_to_mesh.Volume
            style_density_surface.links.new(
                group_input_63.outputs[0], volume_to_mesh.inputs[0]
            )
            # set_shade_smooth_4.Geometry -> group_output_64.Geometry
            style_density_surface.links.new(
                set_shade_smooth_4.outputs[0], group_output_64.inputs[0]
            )
            # group_input_63.Threshold -> volume_to_mesh.Threshold
            style_density_surface.links.new(
                group_input_63.outputs[1], volume_to_mesh.inputs[3]
            )
            # group_input_63.Material -> set_material_5.Material
            style_density_surface.links.new(
                group_input_63.outputs[5], set_material_5.inputs[2]
            )
            # set_material_5.Geometry -> set_shade_smooth_4.Geometry
            style_density_surface.links.new(
                set_material_5.outputs[0], set_shade_smooth_4.inputs[0]
            )
            # group_input_63.Shade Smooth -> set_shade_smooth_4.Shade Smooth
            style_density_surface.links.new(
                group_input_63.outputs[2], set_shade_smooth_4.inputs[2]
            )
            # volume_to_mesh.Mesh -> delete_geometry_2.Geometry
            style_density_surface.links.new(
                volume_to_mesh.outputs[0], delete_geometry_2.inputs[0]
            )
            # face_area.Area -> accumulate_field_3.Value
            style_density_surface.links.new(
                face_area.outputs[0], accumulate_field_3.inputs[0]
            )
            # compare_18.Result -> delete_geometry_2.Selection
            style_density_surface.links.new(
                compare_18.outputs[0], delete_geometry_2.inputs[1]
            )
            # accumulate_field_3.Total -> compare_18.A
            style_density_surface.links.new(
                accumulate_field_3.outputs[2], compare_18.inputs[0]
            )
            # group_input_63.Hide Dust -> compare_18.B
            style_density_surface.links.new(
                group_input_63.outputs[3], compare_18.inputs[1]
            )
            # mesh_island.Island Index -> accumulate_field_3.Group ID
            style_density_surface.links.new(
                mesh_island.outputs[0], accumulate_field_3.inputs[1]
            )
            return style_density_surface

        style_density_surface = style_density_surface_node_group()

        # initialize style_density_wire node group
        def style_density_wire_node_group():
            style_density_wire = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Density Wire"
            )

            style_density_wire.color_tag = "GEOMETRY"
            style_density_wire.description = ""

            style_density_wire.is_modifier = True

            # style_density_wire interface
            # Socket Geometry
            geometry_socket_9 = style_density_wire.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_9.attribute_domain = "POINT"

            # Socket Volume
            volume_socket_1 = style_density_wire.interface.new_socket(
                name="Volume", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            volume_socket_1.attribute_domain = "POINT"

            # Socket Threshold
            threshold_socket_1 = style_density_wire.interface.new_socket(
                name="Threshold", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            threshold_socket_1.subtype = "NONE"
            threshold_socket_1.default_value = 0.800000011920929
            threshold_socket_1.min_value = -3.4028234663852886e38
            threshold_socket_1.max_value = 3.4028234663852886e38
            threshold_socket_1.attribute_domain = "POINT"

            # Socket Hide Dust
            hide_dust_socket_1 = style_density_wire.interface.new_socket(
                name="Hide Dust", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            hide_dust_socket_1.subtype = "NONE"
            hide_dust_socket_1.default_value = 20.0
            hide_dust_socket_1.min_value = -10000.0
            hide_dust_socket_1.max_value = 10000.0
            hide_dust_socket_1.attribute_domain = "POINT"

            # Panel Wire
            wire_panel = style_density_wire.interface.new_panel("Wire")
            # Socket Wire Radius
            wire_radius_socket = style_density_wire.interface.new_socket(
                name="Wire Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=wire_panel,
            )
            wire_radius_socket.subtype = "NONE"
            wire_radius_socket.default_value = 1.0
            wire_radius_socket.min_value = 0.0
            wire_radius_socket.max_value = 3.4028234663852886e38
            wire_radius_socket.attribute_domain = "POINT"
            wire_radius_socket.description = (
                "Radius of the created wire (in relative nm)"
            )

            # Socket Wire Resolution
            wire_resolution_socket = style_density_wire.interface.new_socket(
                name="Wire Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=wire_panel,
            )
            wire_resolution_socket.subtype = "NONE"
            wire_resolution_socket.default_value = 3
            wire_resolution_socket.min_value = 3
            wire_resolution_socket.max_value = 512
            wire_resolution_socket.attribute_domain = "POINT"

            # Panel Material
            material_panel_5 = style_density_wire.interface.new_panel("Material")
            # Socket Color
            color_socket_2 = style_density_wire.interface.new_socket(
                name="Color",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=material_panel_5,
            )
            color_socket_2.attribute_domain = "POINT"

            # Socket Material
            material_socket_9 = style_density_wire.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_5,
            )
            material_socket_9.attribute_domain = "POINT"
            material_socket_9.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_density_wire nodes
            # node Group Output
            group_output_65 = style_density_wire.nodes.new("NodeGroupOutput")
            group_output_65.name = "Group Output"
            group_output_65.is_active_output = True

            # node Set Material
            set_material_6 = style_density_wire.nodes.new("GeometryNodeSetMaterial")
            set_material_6.name = "Set Material"
            # Selection
            set_material_6.inputs[1].default_value = True

            # node Store Named Attribute
            store_named_attribute_6 = style_density_wire.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_6.name = "Store Named Attribute"
            store_named_attribute_6.data_type = "FLOAT_COLOR"
            store_named_attribute_6.domain = "POINT"
            # Selection
            store_named_attribute_6.inputs[1].default_value = True
            # Name
            store_named_attribute_6.inputs[2].default_value = "Color"

            # node Mesh to Curve
            mesh_to_curve_3 = style_density_wire.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_3.name = "Mesh to Curve"
            # Selection
            mesh_to_curve_3.inputs[1].default_value = True

            # node Curve to Mesh
            curve_to_mesh_4 = style_density_wire.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_4.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_4.inputs[2].default_value = True

            # node Curve Circle
            curve_circle_3 = style_density_wire.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_3.name = "Curve Circle"
            curve_circle_3.mode = "RADIUS"

            # node Math
            math_14 = style_density_wire.nodes.new("ShaderNodeMath")
            math_14.name = "Math"
            math_14.operation = "DIVIDE"
            math_14.use_clamp = False
            # Value_001
            math_14.inputs[1].default_value = 1000.0

            # node Mesh Island
            mesh_island_1 = style_density_wire.nodes.new("GeometryNodeInputMeshIsland")
            mesh_island_1.name = "Mesh Island"

            # node Face Area
            face_area_1 = style_density_wire.nodes.new("GeometryNodeInputMeshFaceArea")
            face_area_1.name = "Face Area"

            # node Accumulate Field
            accumulate_field_4 = style_density_wire.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_4.name = "Accumulate Field"
            accumulate_field_4.data_type = "FLOAT"
            accumulate_field_4.domain = "POINT"

            # node Compare
            compare_19 = style_density_wire.nodes.new("FunctionNodeCompare")
            compare_19.name = "Compare"
            compare_19.data_type = "FLOAT"
            compare_19.mode = "ELEMENT"
            compare_19.operation = "LESS_THAN"

            # node Group Input
            group_input_64 = style_density_wire.nodes.new("NodeGroupInput")
            group_input_64.name = "Group Input"

            # node Volume to Mesh
            volume_to_mesh_1 = style_density_wire.nodes.new("GeometryNodeVolumeToMesh")
            volume_to_mesh_1.name = "Volume to Mesh"
            volume_to_mesh_1.resolution_mode = "GRID"
            # Adaptivity
            volume_to_mesh_1.inputs[4].default_value = 0.0

            # node Delete Geometry
            delete_geometry_3 = style_density_wire.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry_3.name = "Delete Geometry"
            delete_geometry_3.domain = "POINT"
            delete_geometry_3.mode = "ALL"

            # Set locations
            group_output_65.location = (387.14306640625, 0.0)
            set_material_6.location = (197.14306640625, -7.630115509033203)
            store_named_attribute_6.location = (-360.0, 60.0)
            mesh_to_curve_3.location = (-157.53106689453125, 102.452392578125)
            curve_to_mesh_4.location = (13.590629577636719, 121.26826477050781)
            curve_circle_3.location = (-160.0, -20.0)
            math_14.location = (-360.0, -160.0)
            mesh_island_1.location = (-1117.136474609375, 390.44488525390625)
            face_area_1.location = (-1118.59912109375, 470.9044494628906)
            accumulate_field_4.location = (-913.8134765625, 510.4027404785156)
            compare_19.location = (-730.9691772460938, 495.7737731933594)
            group_input_64.location = (-942.8719482421875, -125.95775604248047)
            volume_to_mesh_1.location = (-749.5906372070312, -26.41063690185547)
            delete_geometry_3.location = (-547.6565551757812, 47.350433349609375)

            # Set dimensions
            group_output_65.width, group_output_65.height = 140.0, 100.0
            set_material_6.width, set_material_6.height = 140.0, 100.0
            store_named_attribute_6.width, store_named_attribute_6.height = 140.0, 100.0
            mesh_to_curve_3.width, mesh_to_curve_3.height = 140.0, 100.0
            curve_to_mesh_4.width, curve_to_mesh_4.height = 140.0, 100.0
            curve_circle_3.width, curve_circle_3.height = 140.0, 100.0
            math_14.width, math_14.height = 140.0, 100.0
            mesh_island_1.width, mesh_island_1.height = 140.0, 100.0
            face_area_1.width, face_area_1.height = 140.0, 100.0
            accumulate_field_4.width, accumulate_field_4.height = 140.0, 100.0
            compare_19.width, compare_19.height = 140.0, 100.0
            group_input_64.width, group_input_64.height = 140.0, 100.0
            volume_to_mesh_1.width, volume_to_mesh_1.height = 170.0, 100.0
            delete_geometry_3.width, delete_geometry_3.height = 140.0, 100.0

            # initialize style_density_wire links
            # group_input_64.Color -> store_named_attribute_6.Value
            style_density_wire.links.new(
                group_input_64.outputs[5], store_named_attribute_6.inputs[3]
            )
            # group_input_64.Volume -> volume_to_mesh_1.Volume
            style_density_wire.links.new(
                group_input_64.outputs[0], volume_to_mesh_1.inputs[0]
            )
            # set_material_6.Geometry -> group_output_65.Geometry
            style_density_wire.links.new(
                set_material_6.outputs[0], group_output_65.inputs[0]
            )
            # group_input_64.Threshold -> volume_to_mesh_1.Threshold
            style_density_wire.links.new(
                group_input_64.outputs[1], volume_to_mesh_1.inputs[3]
            )
            # group_input_64.Material -> set_material_6.Material
            style_density_wire.links.new(
                group_input_64.outputs[6], set_material_6.inputs[2]
            )
            # store_named_attribute_6.Geometry -> mesh_to_curve_3.Mesh
            style_density_wire.links.new(
                store_named_attribute_6.outputs[0], mesh_to_curve_3.inputs[0]
            )
            # mesh_to_curve_3.Curve -> curve_to_mesh_4.Curve
            style_density_wire.links.new(
                mesh_to_curve_3.outputs[0], curve_to_mesh_4.inputs[0]
            )
            # curve_circle_3.Curve -> curve_to_mesh_4.Profile Curve
            style_density_wire.links.new(
                curve_circle_3.outputs[0], curve_to_mesh_4.inputs[1]
            )
            # curve_to_mesh_4.Mesh -> set_material_6.Geometry
            style_density_wire.links.new(
                curve_to_mesh_4.outputs[0], set_material_6.inputs[0]
            )
            # group_input_64.Wire Radius -> math_14.Value
            style_density_wire.links.new(group_input_64.outputs[3], math_14.inputs[0])
            # math_14.Value -> curve_circle_3.Radius
            style_density_wire.links.new(math_14.outputs[0], curve_circle_3.inputs[4])
            # group_input_64.Wire Resolution -> curve_circle_3.Resolution
            style_density_wire.links.new(
                group_input_64.outputs[4], curve_circle_3.inputs[0]
            )
            # face_area_1.Area -> accumulate_field_4.Value
            style_density_wire.links.new(
                face_area_1.outputs[0], accumulate_field_4.inputs[0]
            )
            # compare_19.Result -> delete_geometry_3.Selection
            style_density_wire.links.new(
                compare_19.outputs[0], delete_geometry_3.inputs[1]
            )
            # accumulate_field_4.Total -> compare_19.A
            style_density_wire.links.new(
                accumulate_field_4.outputs[2], compare_19.inputs[0]
            )
            # mesh_island_1.Island Index -> accumulate_field_4.Group ID
            style_density_wire.links.new(
                mesh_island_1.outputs[0], accumulate_field_4.inputs[1]
            )
            # volume_to_mesh_1.Mesh -> delete_geometry_3.Geometry
            style_density_wire.links.new(
                volume_to_mesh_1.outputs[0], delete_geometry_3.inputs[0]
            )
            # delete_geometry_3.Geometry -> store_named_attribute_6.Geometry
            style_density_wire.links.new(
                delete_geometry_3.outputs[0], store_named_attribute_6.inputs[0]
            )
            # group_input_64.Hide Dust -> compare_19.B
            style_density_wire.links.new(
                group_input_64.outputs[2], compare_19.inputs[1]
            )
            return style_density_wire

        style_density_wire = style_density_wire_node_group()

        # initialize mn_animate_noise_field node group
        def mn_animate_noise_field_node_group():
            mn_animate_noise_field = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_animate_noise_field"
            )

            mn_animate_noise_field.color_tag = "TEXTURE"
            mn_animate_noise_field.description = ""

            # mn_animate_noise_field interface
            # Socket Noise
            noise_socket = mn_animate_noise_field.interface.new_socket(
                name="Noise", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            noise_socket.subtype = "NONE"
            noise_socket.default_value = (0.0, 0.0, 0.0)
            noise_socket.min_value = -3.4028234663852886e38
            noise_socket.max_value = 3.4028234663852886e38
            noise_socket.attribute_domain = "POINT"

            # Socket Fac
            fac_socket = mn_animate_noise_field.interface.new_socket(
                name="Fac", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            fac_socket.subtype = "NONE"
            fac_socket.default_value = 0.0
            fac_socket.min_value = -3.4028234663852886e38
            fac_socket.max_value = 3.4028234663852886e38
            fac_socket.attribute_domain = "POINT"

            # Socket Field
            field_socket_8 = mn_animate_noise_field.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketVector"
            )
            field_socket_8.subtype = "NONE"
            field_socket_8.default_value = (0.0, 0.0, 0.0)
            field_socket_8.min_value = -3.4028234663852886e38
            field_socket_8.max_value = 3.4028234663852886e38
            field_socket_8.attribute_domain = "POINT"
            field_socket_8.hide_value = True

            # Socket Amplitude
            amplitude_socket = mn_animate_noise_field.interface.new_socket(
                name="Amplitude", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amplitude_socket.subtype = "NONE"
            amplitude_socket.default_value = 0.25
            amplitude_socket.min_value = -10000.0
            amplitude_socket.max_value = 10000.0
            amplitude_socket.attribute_domain = "POINT"

            # Socket Animate
            animate_socket = mn_animate_noise_field.interface.new_socket(
                name="Animate", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_socket.subtype = "NONE"
            animate_socket.default_value = 0.0
            animate_socket.min_value = -1000.0
            animate_socket.max_value = 1000.0
            animate_socket.attribute_domain = "POINT"

            # Socket Scale
            scale_socket = mn_animate_noise_field.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_socket.subtype = "NONE"
            scale_socket.default_value = 1.0
            scale_socket.min_value = -1000.0
            scale_socket.max_value = 1000.0
            scale_socket.attribute_domain = "POINT"

            # Socket Detail
            detail_socket = mn_animate_noise_field.interface.new_socket(
                name="Detail", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            detail_socket.subtype = "NONE"
            detail_socket.default_value = 3.0
            detail_socket.min_value = 0.0
            detail_socket.max_value = 15.0
            detail_socket.attribute_domain = "POINT"

            # Socket Roughness
            roughness_socket = mn_animate_noise_field.interface.new_socket(
                name="Roughness", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            roughness_socket.subtype = "FACTOR"
            roughness_socket.default_value = 1.0
            roughness_socket.min_value = 0.0
            roughness_socket.max_value = 1.0
            roughness_socket.attribute_domain = "POINT"

            # Socket Distortion
            distortion_socket = mn_animate_noise_field.interface.new_socket(
                name="Distortion", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distortion_socket.subtype = "NONE"
            distortion_socket.default_value = 0.0
            distortion_socket.min_value = -1000.0
            distortion_socket.max_value = 1000.0
            distortion_socket.attribute_domain = "POINT"

            # initialize mn_animate_noise_field nodes
            # node Vector Math
            vector_math_10 = mn_animate_noise_field.nodes.new("ShaderNodeVectorMath")
            vector_math_10.name = "Vector Math"
            vector_math_10.operation = "SUBTRACT"
            # Vector_001
            vector_math_10.inputs[1].default_value = (0.5, 0.5, 0.5)

            # node Vector Math.001
            vector_math_001_6 = mn_animate_noise_field.nodes.new("ShaderNodeVectorMath")
            vector_math_001_6.name = "Vector Math.001"
            vector_math_001_6.operation = "SCALE"

            # node Group Input
            group_input_65 = mn_animate_noise_field.nodes.new("NodeGroupInput")
            group_input_65.name = "Group Input"

            # node Group Output
            group_output_66 = mn_animate_noise_field.nodes.new("NodeGroupOutput")
            group_output_66.name = "Group Output"
            group_output_66.is_active_output = True

            # node Noise Texture
            noise_texture = mn_animate_noise_field.nodes.new("ShaderNodeTexNoise")
            noise_texture.name = "Noise Texture"
            noise_texture.noise_dimensions = "4D"
            noise_texture.noise_type = "FBM"
            noise_texture.normalize = True
            # Lacunarity
            noise_texture.inputs[5].default_value = 2.0

            # node Clamp
            clamp = mn_animate_noise_field.nodes.new("ShaderNodeClamp")
            clamp.name = "Clamp"
            clamp.hide = True
            clamp.clamp_type = "MINMAX"
            # Min
            clamp.inputs[1].default_value = 0.0
            # Max
            clamp.inputs[2].default_value = 1.0

            # Set locations
            vector_math_10.location = (0.0, 0.0)
            vector_math_001_6.location = (160.0, 0.0)
            group_input_65.location = (-360.0, -0.0)
            group_output_66.location = (340.0, 0.0)
            noise_texture.location = (-160.0, 0.0)
            clamp.location = (-160.0, -300.0)

            # Set dimensions
            vector_math_10.width, vector_math_10.height = 140.0, 100.0
            vector_math_001_6.width, vector_math_001_6.height = 140.0, 100.0
            group_input_65.width, group_input_65.height = 140.0, 100.0
            group_output_66.width, group_output_66.height = 140.0, 100.0
            noise_texture.width, noise_texture.height = 140.0, 100.0
            clamp.width, clamp.height = 140.0, 100.0

            # initialize mn_animate_noise_field links
            # vector_math_001_6.Vector -> group_output_66.Noise
            mn_animate_noise_field.links.new(
                vector_math_001_6.outputs[0], group_output_66.inputs[0]
            )
            # noise_texture.Color -> vector_math_10.Vector
            mn_animate_noise_field.links.new(
                noise_texture.outputs[1], vector_math_10.inputs[0]
            )
            # vector_math_10.Vector -> vector_math_001_6.Vector
            mn_animate_noise_field.links.new(
                vector_math_10.outputs[0], vector_math_001_6.inputs[0]
            )
            # group_input_65.Amplitude -> vector_math_001_6.Scale
            mn_animate_noise_field.links.new(
                group_input_65.outputs[1], vector_math_001_6.inputs[3]
            )
            # group_input_65.Animate -> noise_texture.W
            mn_animate_noise_field.links.new(
                group_input_65.outputs[2], noise_texture.inputs[1]
            )
            # group_input_65.Scale -> noise_texture.Scale
            mn_animate_noise_field.links.new(
                group_input_65.outputs[3], noise_texture.inputs[2]
            )
            # group_input_65.Detail -> noise_texture.Detail
            mn_animate_noise_field.links.new(
                group_input_65.outputs[4], noise_texture.inputs[3]
            )
            # group_input_65.Distortion -> noise_texture.Distortion
            mn_animate_noise_field.links.new(
                group_input_65.outputs[6], noise_texture.inputs[8]
            )
            # noise_texture.Fac -> group_output_66.Fac
            mn_animate_noise_field.links.new(
                noise_texture.outputs[0], group_output_66.inputs[1]
            )
            # group_input_65.Field -> noise_texture.Vector
            mn_animate_noise_field.links.new(
                group_input_65.outputs[0], noise_texture.inputs[0]
            )
            # group_input_65.Roughness -> clamp.Value
            mn_animate_noise_field.links.new(group_input_65.outputs[5], clamp.inputs[0])
            # clamp.Result -> noise_texture.Roughness
            mn_animate_noise_field.links.new(clamp.outputs[0], noise_texture.inputs[4])
            return mn_animate_noise_field

        mn_animate_noise_field = mn_animate_noise_field_node_group()

        # initialize mn_animate_noise_position node group
        def mn_animate_noise_position_node_group():
            mn_animate_noise_position = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_animate_noise_position"
            )

            mn_animate_noise_position.color_tag = "TEXTURE"
            mn_animate_noise_position.description = ""

            # mn_animate_noise_position interface
            # Socket Vector
            vector_socket_2 = mn_animate_noise_position.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket_2.subtype = "NONE"
            vector_socket_2.default_value = (0.0, 0.0, 0.0)
            vector_socket_2.min_value = -3.4028234663852886e38
            vector_socket_2.max_value = 3.4028234663852886e38
            vector_socket_2.attribute_domain = "POINT"

            # Socket Fac
            fac_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Fac", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            fac_socket_1.subtype = "NONE"
            fac_socket_1.default_value = 0.0
            fac_socket_1.min_value = -3.4028234663852886e38
            fac_socket_1.max_value = 3.4028234663852886e38
            fac_socket_1.attribute_domain = "POINT"

            # Socket Amplitude
            amplitude_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Amplitude", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amplitude_socket_1.subtype = "NONE"
            amplitude_socket_1.default_value = 0.25
            amplitude_socket_1.min_value = -10000.0
            amplitude_socket_1.max_value = 10000.0
            amplitude_socket_1.attribute_domain = "POINT"

            # Socket Animate
            animate_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Animate", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_socket_1.subtype = "NONE"
            animate_socket_1.default_value = 0.0
            animate_socket_1.min_value = -1000.0
            animate_socket_1.max_value = 1000.0
            animate_socket_1.attribute_domain = "POINT"

            # Socket Scale
            scale_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_socket_1.subtype = "NONE"
            scale_socket_1.default_value = 1.0
            scale_socket_1.min_value = -1000.0
            scale_socket_1.max_value = 1000.0
            scale_socket_1.attribute_domain = "POINT"

            # Socket Detail
            detail_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Detail", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            detail_socket_1.subtype = "NONE"
            detail_socket_1.default_value = 3.0
            detail_socket_1.min_value = 0.0
            detail_socket_1.max_value = 15.0
            detail_socket_1.attribute_domain = "POINT"

            # Socket Roughness
            roughness_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Roughness", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            roughness_socket_1.subtype = "FACTOR"
            roughness_socket_1.default_value = 1.0
            roughness_socket_1.min_value = 0.0
            roughness_socket_1.max_value = 1.0
            roughness_socket_1.attribute_domain = "POINT"

            # Socket Distortion
            distortion_socket_1 = mn_animate_noise_position.interface.new_socket(
                name="Distortion", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distortion_socket_1.subtype = "NONE"
            distortion_socket_1.default_value = 0.0
            distortion_socket_1.min_value = -1000.0
            distortion_socket_1.max_value = 1000.0
            distortion_socket_1.attribute_domain = "POINT"

            # initialize mn_animate_noise_position nodes
            # node Vector Math
            vector_math_11 = mn_animate_noise_position.nodes.new("ShaderNodeVectorMath")
            vector_math_11.name = "Vector Math"
            vector_math_11.operation = "SUBTRACT"
            # Vector_001
            vector_math_11.inputs[1].default_value = (0.5, 0.5, 0.5)

            # node Noise Texture
            noise_texture_1 = mn_animate_noise_position.nodes.new("ShaderNodeTexNoise")
            noise_texture_1.name = "Noise Texture"
            noise_texture_1.noise_dimensions = "4D"
            noise_texture_1.noise_type = "FBM"
            noise_texture_1.normalize = True
            # Vector
            noise_texture_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Lacunarity
            noise_texture_1.inputs[5].default_value = 2.0

            # node Vector Math.001
            vector_math_001_7 = mn_animate_noise_position.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_7.name = "Vector Math.001"
            vector_math_001_7.operation = "SCALE"

            # node Group Input
            group_input_66 = mn_animate_noise_position.nodes.new("NodeGroupInput")
            group_input_66.name = "Group Input"

            # node Group Output
            group_output_67 = mn_animate_noise_position.nodes.new("NodeGroupOutput")
            group_output_67.name = "Group Output"
            group_output_67.is_active_output = True

            # node Clamp
            clamp_1 = mn_animate_noise_position.nodes.new("ShaderNodeClamp")
            clamp_1.name = "Clamp"
            clamp_1.hide = True
            clamp_1.clamp_type = "MINMAX"
            # Min
            clamp_1.inputs[1].default_value = 0.0
            # Max
            clamp_1.inputs[2].default_value = 1.0

            # Set locations
            vector_math_11.location = (0.0, 0.0)
            noise_texture_1.location = (-160.0, 0.0)
            vector_math_001_7.location = (160.0, 0.0)
            group_input_66.location = (-360.0, -0.0)
            group_output_67.location = (340.0, 0.0)
            clamp_1.location = (-160.0, -340.0)

            # Set dimensions
            vector_math_11.width, vector_math_11.height = 140.0, 100.0
            noise_texture_1.width, noise_texture_1.height = 140.0, 100.0
            vector_math_001_7.width, vector_math_001_7.height = 140.0, 100.0
            group_input_66.width, group_input_66.height = 140.0, 100.0
            group_output_67.width, group_output_67.height = 140.0, 100.0
            clamp_1.width, clamp_1.height = 140.0, 100.0

            # initialize mn_animate_noise_position links
            # vector_math_001_7.Vector -> group_output_67.Vector
            mn_animate_noise_position.links.new(
                vector_math_001_7.outputs[0], group_output_67.inputs[0]
            )
            # noise_texture_1.Color -> vector_math_11.Vector
            mn_animate_noise_position.links.new(
                noise_texture_1.outputs[1], vector_math_11.inputs[0]
            )
            # vector_math_11.Vector -> vector_math_001_7.Vector
            mn_animate_noise_position.links.new(
                vector_math_11.outputs[0], vector_math_001_7.inputs[0]
            )
            # group_input_66.Amplitude -> vector_math_001_7.Scale
            mn_animate_noise_position.links.new(
                group_input_66.outputs[0], vector_math_001_7.inputs[3]
            )
            # group_input_66.Animate -> noise_texture_1.W
            mn_animate_noise_position.links.new(
                group_input_66.outputs[1], noise_texture_1.inputs[1]
            )
            # group_input_66.Scale -> noise_texture_1.Scale
            mn_animate_noise_position.links.new(
                group_input_66.outputs[2], noise_texture_1.inputs[2]
            )
            # group_input_66.Detail -> noise_texture_1.Detail
            mn_animate_noise_position.links.new(
                group_input_66.outputs[3], noise_texture_1.inputs[3]
            )
            # group_input_66.Distortion -> noise_texture_1.Distortion
            mn_animate_noise_position.links.new(
                group_input_66.outputs[5], noise_texture_1.inputs[8]
            )
            # noise_texture_1.Fac -> group_output_67.Fac
            mn_animate_noise_position.links.new(
                noise_texture_1.outputs[0], group_output_67.inputs[1]
            )
            # group_input_66.Roughness -> clamp_1.Value
            mn_animate_noise_position.links.new(
                group_input_66.outputs[4], clamp_1.inputs[0]
            )
            # clamp_1.Result -> noise_texture_1.Roughness
            mn_animate_noise_position.links.new(
                clamp_1.outputs[0], noise_texture_1.inputs[4]
            )
            return mn_animate_noise_position

        mn_animate_noise_position = mn_animate_noise_position_node_group()

        # initialize mn_animate_noise_repeat node group
        def mn_animate_noise_repeat_node_group():
            mn_animate_noise_repeat = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_animate_noise_repeat"
            )

            mn_animate_noise_repeat.color_tag = "TEXTURE"
            mn_animate_noise_repeat.description = ""

            # mn_animate_noise_repeat interface
            # Socket Noise Float
            noise_float_socket = mn_animate_noise_repeat.interface.new_socket(
                name="Noise Float", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            noise_float_socket.subtype = "NONE"
            noise_float_socket.default_value = 0.0
            noise_float_socket.min_value = -3.4028234663852886e38
            noise_float_socket.max_value = 3.4028234663852886e38
            noise_float_socket.attribute_domain = "POINT"

            # Socket Noise Vector
            noise_vector_socket = mn_animate_noise_repeat.interface.new_socket(
                name="Noise Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            noise_vector_socket.subtype = "NONE"
            noise_vector_socket.default_value = (0.0, 0.0, 0.0)
            noise_vector_socket.min_value = -3.4028234663852886e38
            noise_vector_socket.max_value = 3.4028234663852886e38
            noise_vector_socket.attribute_domain = "POINT"

            # Socket Amplitude
            amplitude_socket_2 = mn_animate_noise_repeat.interface.new_socket(
                name="Amplitude", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amplitude_socket_2.subtype = "NONE"
            amplitude_socket_2.default_value = 1.0
            amplitude_socket_2.min_value = -10000.0
            amplitude_socket_2.max_value = 10000.0
            amplitude_socket_2.attribute_domain = "POINT"

            # Socket Detail
            detail_socket_2 = mn_animate_noise_repeat.interface.new_socket(
                name="Detail", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            detail_socket_2.subtype = "NONE"
            detail_socket_2.default_value = 0.5
            detail_socket_2.min_value = 0.0
            detail_socket_2.max_value = 15.0
            detail_socket_2.attribute_domain = "POINT"

            # Socket Roughness
            roughness_socket_2 = mn_animate_noise_repeat.interface.new_socket(
                name="Roughness", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            roughness_socket_2.subtype = "FACTOR"
            roughness_socket_2.default_value = 0.5
            roughness_socket_2.min_value = 0.0
            roughness_socket_2.max_value = 1.0
            roughness_socket_2.attribute_domain = "POINT"

            # Socket Distortion
            distortion_socket_2 = mn_animate_noise_repeat.interface.new_socket(
                name="Distortion", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distortion_socket_2.subtype = "NONE"
            distortion_socket_2.default_value = 0.0
            distortion_socket_2.min_value = -1000.0
            distortion_socket_2.max_value = 1000.0
            distortion_socket_2.attribute_domain = "POINT"

            # Socket Vector
            vector_socket_3 = mn_animate_noise_repeat.interface.new_socket(
                name="Vector", in_out="INPUT", socket_type="NodeSocketVector"
            )
            vector_socket_3.subtype = "NONE"
            vector_socket_3.default_value = (0.0, 0.0, 0.0)
            vector_socket_3.min_value = -10000.0
            vector_socket_3.max_value = 10000.0
            vector_socket_3.default_attribute_name = "position"
            vector_socket_3.attribute_domain = "POINT"
            vector_socket_3.hide_value = True

            # Socket Speed
            speed_socket = mn_animate_noise_repeat.interface.new_socket(
                name="Speed", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            speed_socket.subtype = "NONE"
            speed_socket.default_value = 0.5
            speed_socket.min_value = -10000.0
            speed_socket.max_value = 10000.0
            speed_socket.attribute_domain = "POINT"

            # Socket Animate 0..1
            animate_0__1_socket = mn_animate_noise_repeat.interface.new_socket(
                name="Animate 0..1", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_0__1_socket.subtype = "NONE"
            animate_0__1_socket.default_value = 0.5
            animate_0__1_socket.min_value = -10000.0
            animate_0__1_socket.max_value = 10000.0
            animate_0__1_socket.attribute_domain = "POINT"

            # initialize mn_animate_noise_repeat nodes
            # node Combine XYZ
            combine_xyz_2 = mn_animate_noise_repeat.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_2.name = "Combine XYZ"
            # Y
            combine_xyz_2.inputs[1].default_value = 0.0
            # Z
            combine_xyz_2.inputs[2].default_value = 0.0

            # node Vector Math.003
            vector_math_003_1 = mn_animate_noise_repeat.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003_1.name = "Vector Math.003"
            vector_math_003_1.operation = "SCALE"

            # node Math
            math_15 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_15.name = "Math"
            math_15.operation = "DIVIDE"
            math_15.use_clamp = False
            # Value
            math_15.inputs[0].default_value = 6.2831854820251465

            # node Math.003
            math_003_3 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_003_3.name = "Math.003"
            math_003_3.operation = "COSINE"
            math_003_3.use_clamp = False

            # node Math.002
            math_002_4 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_002_4.name = "Math.002"
            math_002_4.operation = "SINE"
            math_002_4.use_clamp = False

            # node Math.004
            math_004_1 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_004_1.name = "Math.004"
            math_004_1.operation = "SINE"
            math_004_1.use_clamp = False

            # node Separate XYZ
            separate_xyz = mn_animate_noise_repeat.nodes.new("ShaderNodeSeparateXYZ")
            separate_xyz.name = "Separate XYZ"

            # node Math.005
            math_005 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_005.name = "Math.005"
            math_005.operation = "COSINE"
            math_005.use_clamp = False

            # node Math.001
            math_001_7 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_001_7.name = "Math.001"
            math_001_7.operation = "MULTIPLY"
            math_001_7.use_clamp = False

            # node Value.001
            value_001 = mn_animate_noise_repeat.nodes.new("ShaderNodeValue")
            value_001.name = "Value.001"

            value_001.outputs[0].default_value = 0.20000000298023224
            # node Vector Math.002
            vector_math_002_4 = mn_animate_noise_repeat.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_002_4.name = "Vector Math.002"
            vector_math_002_4.operation = "ADD"

            # node Group Output
            group_output_68 = mn_animate_noise_repeat.nodes.new("NodeGroupOutput")
            group_output_68.name = "Group Output"
            group_output_68.is_active_output = True

            # node Math.006
            math_006 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_006.name = "Math.006"
            math_006.operation = "MULTIPLY"
            math_006.use_clamp = False

            # node Vector Math
            vector_math_12 = mn_animate_noise_repeat.nodes.new("ShaderNodeVectorMath")
            vector_math_12.name = "Vector Math"
            vector_math_12.operation = "SCALE"

            # node Map Range
            map_range_2 = mn_animate_noise_repeat.nodes.new("ShaderNodeMapRange")
            map_range_2.name = "Map Range"
            map_range_2.clamp = True
            map_range_2.data_type = "FLOAT"
            map_range_2.interpolation_type = "LINEAR"
            # From Min
            map_range_2.inputs[1].default_value = 0.0
            # From Max
            map_range_2.inputs[2].default_value = 1.0
            # To Min
            map_range_2.inputs[3].default_value = -1.0
            # To Max
            map_range_2.inputs[4].default_value = 1.0

            # node Map Range.001
            map_range_001 = mn_animate_noise_repeat.nodes.new("ShaderNodeMapRange")
            map_range_001.name = "Map Range.001"
            map_range_001.clamp = True
            map_range_001.data_type = "FLOAT_VECTOR"
            map_range_001.interpolation_type = "LINEAR"
            # From_Min_FLOAT3
            map_range_001.inputs[7].default_value = (0.0, 0.0, 0.0)
            # From_Max_FLOAT3
            map_range_001.inputs[8].default_value = (1.0, 1.0, 1.0)
            # To_Min_FLOAT3
            map_range_001.inputs[9].default_value = (-1.0, -1.0, -1.0)
            # To_Max_FLOAT3
            map_range_001.inputs[10].default_value = (1.0, 1.0, 1.0)

            # node Noise Texture
            noise_texture_2 = mn_animate_noise_repeat.nodes.new("ShaderNodeTexNoise")
            noise_texture_2.name = "Noise Texture"
            noise_texture_2.noise_dimensions = "4D"
            noise_texture_2.noise_type = "FBM"
            noise_texture_2.normalize = True
            # Lacunarity
            noise_texture_2.inputs[5].default_value = 2.0

            # node Combine XYZ.001
            combine_xyz_001_1 = mn_animate_noise_repeat.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_001_1.name = "Combine XYZ.001"

            # node Value
            value_2 = mn_animate_noise_repeat.nodes.new("ShaderNodeValue")
            value_2.name = "Value"

            value_2.outputs[0].default_value = 4.0
            # node Random Value
            random_value = mn_animate_noise_repeat.nodes.new("FunctionNodeRandomValue")
            random_value.name = "Random Value"
            random_value.data_type = "FLOAT_VECTOR"
            # Min
            random_value.inputs[0].default_value = (-10.0, -10.0, -10.0)
            # Max
            random_value.inputs[1].default_value = (-1.0, 10.0, 10.0)
            # Seed
            random_value.inputs[8].default_value = 0

            # node Math.009
            math_009 = mn_animate_noise_repeat.nodes.new("ShaderNodeMath")
            math_009.name = "Math.009"
            math_009.operation = "MULTIPLY"
            math_009.use_clamp = False

            # node Vector Math.001
            vector_math_001_8 = mn_animate_noise_repeat.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_8.name = "Vector Math.001"
            vector_math_001_8.operation = "ADD"

            # node Reroute
            reroute_15 = mn_animate_noise_repeat.nodes.new("NodeReroute")
            reroute_15.name = "Reroute"
            # node Group Input
            group_input_67 = mn_animate_noise_repeat.nodes.new("NodeGroupInput")
            group_input_67.name = "Group Input"

            # node Clamp
            clamp_2 = mn_animate_noise_repeat.nodes.new("ShaderNodeClamp")
            clamp_2.name = "Clamp"
            clamp_2.hide = True
            clamp_2.clamp_type = "MINMAX"
            # Min
            clamp_2.inputs[1].default_value = 0.0
            # Max
            clamp_2.inputs[2].default_value = 1.0

            # Set locations
            combine_xyz_2.location = (0.0001220703125, 110.0)
            vector_math_003_1.location = (320.0001220703125, 190.0)
            math_15.location = (160.0, 40.0)
            math_003_3.location = (700.0, 240.0)
            math_002_4.location = (700.0, 380.0)
            math_004_1.location = (700.0, 100.0)
            separate_xyz.location = (480.0001220703125, 190.0)
            math_005.location = (700.0, -40.0)
            math_001_7.location = (164.15023803710938, -158.06997680664062)
            value_001.location = (-480.0, -320.0)
            vector_math_002_4.location = (160.0001220703125, 190.0)
            group_output_68.location = (1768.860595703125, 286.24639892578125)
            math_006.location = (1543.8201904296875, 306.56878662109375)
            vector_math_12.location = (1543.8201904296875, 146.56878662109375)
            map_range_2.location = (1340.0, 300.0)
            map_range_001.location = (1340.0, 40.0)
            noise_texture_2.location = (1142.486328125, 289.14031982421875)
            combine_xyz_001_1.location = (880.0, 300.0)
            value_2.location = (-480.0, -228.98846435546875)
            random_value.location = (-146.0265655517578, 430.21173095703125)
            math_009.location = (-159.9998779296875, 110.0)
            vector_math_001_8.location = (45.413909912109375, 436.6630859375)
            reroute_15.location = (-200.3484344482422, -201.43125915527344)
            group_input_67.location = (-480.0, 0.0)
            clamp_2.location = (1142.486328125, -10.85968017578125)

            # Set dimensions
            combine_xyz_2.width, combine_xyz_2.height = 140.0, 100.0
            vector_math_003_1.width, vector_math_003_1.height = 140.0, 100.0
            math_15.width, math_15.height = 140.0, 100.0
            math_003_3.width, math_003_3.height = 140.0, 100.0
            math_002_4.width, math_002_4.height = 140.0, 100.0
            math_004_1.width, math_004_1.height = 140.0, 100.0
            separate_xyz.width, separate_xyz.height = 140.0, 100.0
            math_005.width, math_005.height = 140.0, 100.0
            math_001_7.width, math_001_7.height = 140.0, 100.0
            value_001.width, value_001.height = 140.0, 100.0
            vector_math_002_4.width, vector_math_002_4.height = 140.0, 100.0
            group_output_68.width, group_output_68.height = 140.0, 100.0
            math_006.width, math_006.height = 140.0, 100.0
            vector_math_12.width, vector_math_12.height = 140.0, 100.0
            map_range_2.width, map_range_2.height = 140.0, 100.0
            map_range_001.width, map_range_001.height = 140.0, 100.0
            noise_texture_2.width, noise_texture_2.height = 140.0, 100.0
            combine_xyz_001_1.width, combine_xyz_001_1.height = 140.0, 100.0
            value_2.width, value_2.height = 140.0, 100.0
            random_value.width, random_value.height = 140.0, 100.0
            math_009.width, math_009.height = 140.0, 100.0
            vector_math_001_8.width, vector_math_001_8.height = 140.0, 100.0
            reroute_15.width, reroute_15.height = 16.0, 100.0
            group_input_67.width, group_input_67.height = 140.0, 100.0
            clamp_2.width, clamp_2.height = 140.0, 100.0

            # initialize mn_animate_noise_repeat links
            # math_009.Value -> combine_xyz_2.X
            mn_animate_noise_repeat.links.new(
                math_009.outputs[0], combine_xyz_2.inputs[0]
            )
            # combine_xyz_2.Vector -> vector_math_002_4.Vector
            mn_animate_noise_repeat.links.new(
                combine_xyz_2.outputs[0], vector_math_002_4.inputs[1]
            )
            # vector_math_003_1.Vector -> separate_xyz.Vector
            mn_animate_noise_repeat.links.new(
                vector_math_003_1.outputs[0], separate_xyz.inputs[0]
            )
            # reroute_15.Output -> math_15.Value
            mn_animate_noise_repeat.links.new(reroute_15.outputs[0], math_15.inputs[1])
            # math_15.Value -> vector_math_003_1.Scale
            mn_animate_noise_repeat.links.new(
                math_15.outputs[0], vector_math_003_1.inputs[3]
            )
            # reroute_15.Output -> math_001_7.Value
            mn_animate_noise_repeat.links.new(
                reroute_15.outputs[0], math_001_7.inputs[0]
            )
            # value_001.Value -> math_001_7.Value
            mn_animate_noise_repeat.links.new(
                value_001.outputs[0], math_001_7.inputs[1]
            )
            # separate_xyz.X -> math_002_4.Value
            mn_animate_noise_repeat.links.new(
                separate_xyz.outputs[0], math_002_4.inputs[0]
            )
            # separate_xyz.X -> math_003_3.Value
            mn_animate_noise_repeat.links.new(
                separate_xyz.outputs[0], math_003_3.inputs[0]
            )
            # math_002_4.Value -> combine_xyz_001_1.X
            mn_animate_noise_repeat.links.new(
                math_002_4.outputs[0], combine_xyz_001_1.inputs[0]
            )
            # math_003_3.Value -> combine_xyz_001_1.Y
            mn_animate_noise_repeat.links.new(
                math_003_3.outputs[0], combine_xyz_001_1.inputs[1]
            )
            # separate_xyz.Y -> math_004_1.Value
            mn_animate_noise_repeat.links.new(
                separate_xyz.outputs[1], math_004_1.inputs[0]
            )
            # math_004_1.Value -> combine_xyz_001_1.Z
            mn_animate_noise_repeat.links.new(
                math_004_1.outputs[0], combine_xyz_001_1.inputs[2]
            )
            # separate_xyz.Y -> math_005.Value
            mn_animate_noise_repeat.links.new(
                separate_xyz.outputs[1], math_005.inputs[0]
            )
            # math_005.Value -> noise_texture_2.W
            mn_animate_noise_repeat.links.new(
                math_005.outputs[0], noise_texture_2.inputs[1]
            )
            # math_001_7.Value -> noise_texture_2.Scale
            mn_animate_noise_repeat.links.new(
                math_001_7.outputs[0], noise_texture_2.inputs[2]
            )
            # noise_texture_2.Fac -> map_range_2.Value
            mn_animate_noise_repeat.links.new(
                noise_texture_2.outputs[0], map_range_2.inputs[0]
            )
            # map_range_2.Result -> math_006.Value
            mn_animate_noise_repeat.links.new(
                map_range_2.outputs[0], math_006.inputs[0]
            )
            # math_006.Value -> group_output_68.Noise Float
            mn_animate_noise_repeat.links.new(
                math_006.outputs[0], group_output_68.inputs[0]
            )
            # group_input_67.Amplitude -> math_006.Value
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[0], math_006.inputs[1]
            )
            # noise_texture_2.Color -> map_range_001.Vector
            mn_animate_noise_repeat.links.new(
                noise_texture_2.outputs[1], map_range_001.inputs[6]
            )
            # map_range_001.Vector -> vector_math_12.Vector
            mn_animate_noise_repeat.links.new(
                map_range_001.outputs[1], vector_math_12.inputs[0]
            )
            # group_input_67.Amplitude -> vector_math_12.Scale
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[0], vector_math_12.inputs[3]
            )
            # vector_math_12.Vector -> group_output_68.Noise Vector
            mn_animate_noise_repeat.links.new(
                vector_math_12.outputs[0], group_output_68.inputs[1]
            )
            # group_input_67.Detail -> noise_texture_2.Detail
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[1], noise_texture_2.inputs[3]
            )
            # group_input_67.Distortion -> noise_texture_2.Distortion
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[3], noise_texture_2.inputs[8]
            )
            # group_input_67.Vector -> vector_math_002_4.Vector
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[4], vector_math_002_4.inputs[0]
            )
            # vector_math_002_4.Vector -> vector_math_001_8.Vector
            mn_animate_noise_repeat.links.new(
                vector_math_002_4.outputs[0], vector_math_001_8.inputs[0]
            )
            # random_value.Value -> vector_math_001_8.Vector
            mn_animate_noise_repeat.links.new(
                random_value.outputs[0], vector_math_001_8.inputs[1]
            )
            # vector_math_001_8.Vector -> vector_math_003_1.Vector
            mn_animate_noise_repeat.links.new(
                vector_math_001_8.outputs[0], vector_math_003_1.inputs[0]
            )
            # combine_xyz_001_1.Vector -> noise_texture_2.Vector
            mn_animate_noise_repeat.links.new(
                combine_xyz_001_1.outputs[0], noise_texture_2.inputs[0]
            )
            # reroute_15.Output -> math_009.Value
            mn_animate_noise_repeat.links.new(reroute_15.outputs[0], math_009.inputs[1])
            # group_input_67.Vector -> random_value.ID
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[4], random_value.inputs[7]
            )
            # group_input_67.Animate 0..1 -> math_009.Value
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[6], math_009.inputs[0]
            )
            # group_input_67.Speed -> reroute_15.Input
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[5], reroute_15.inputs[0]
            )
            # group_input_67.Roughness -> clamp_2.Value
            mn_animate_noise_repeat.links.new(
                group_input_67.outputs[2], clamp_2.inputs[0]
            )
            # clamp_2.Result -> noise_texture_2.Roughness
            mn_animate_noise_repeat.links.new(
                clamp_2.outputs[0], noise_texture_2.inputs[4]
            )
            return mn_animate_noise_repeat

        mn_animate_noise_repeat = mn_animate_noise_repeat_node_group()

        # initialize color_common node group
        def color_common_node_group():
            color_common = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Common"
            )

            color_common.color_tag = "COLOR"
            color_common.description = ""

            # color_common interface
            # Socket Color
            color_socket_3 = color_common.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_3.attribute_domain = "POINT"
            color_socket_3.description = "The output colors for the common elements"

            # Socket Hydrogen
            hydrogen_socket = color_common.interface.new_socket(
                name="Hydrogen", in_out="INPUT", socket_type="NodeSocketColor"
            )
            hydrogen_socket.attribute_domain = "POINT"
            hydrogen_socket.description = "Color to set for the element Hydrogen"

            # Socket Carbon
            carbon_socket = color_common.interface.new_socket(
                name="Carbon", in_out="INPUT", socket_type="NodeSocketColor"
            )
            carbon_socket.attribute_domain = "POINT"
            carbon_socket.description = "Color to set for the element Carbon"

            # Socket Nitrogen
            nitrogen_socket = color_common.interface.new_socket(
                name="Nitrogen", in_out="INPUT", socket_type="NodeSocketColor"
            )
            nitrogen_socket.attribute_domain = "POINT"
            nitrogen_socket.description = "Color to set for the element Nitrogen"

            # Socket Oxygen
            oxygen_socket = color_common.interface.new_socket(
                name="Oxygen", in_out="INPUT", socket_type="NodeSocketColor"
            )
            oxygen_socket.attribute_domain = "POINT"
            oxygen_socket.description = "Color to set for the element Oxygen"

            # Socket Phosphorous
            phosphorous_socket = color_common.interface.new_socket(
                name="Phosphorous", in_out="INPUT", socket_type="NodeSocketColor"
            )
            phosphorous_socket.attribute_domain = "POINT"
            phosphorous_socket.description = "Color to set for the element Phosphorous"

            # Socket Sulfur
            sulfur_socket = color_common.interface.new_socket(
                name="Sulfur", in_out="INPUT", socket_type="NodeSocketColor"
            )
            sulfur_socket.attribute_domain = "POINT"
            sulfur_socket.description = "Color to set for the element Sulfur"

            # initialize color_common nodes
            # node Reroute.001
            reroute_001_10 = color_common.nodes.new("NodeReroute")
            reroute_001_10.name = "Reroute.001"
            # node Reroute.007
            reroute_007_2 = color_common.nodes.new("NodeReroute")
            reroute_007_2.name = "Reroute.007"
            # node Switch.002
            switch_002_5 = color_common.nodes.new("GeometryNodeSwitch")
            switch_002_5.name = "Switch.002"
            switch_002_5.input_type = "RGBA"

            # node Reroute.009
            reroute_009_1 = color_common.nodes.new("NodeReroute")
            reroute_009_1.name = "Reroute.009"
            # node Reroute
            reroute_16 = color_common.nodes.new("NodeReroute")
            reroute_16.name = "Reroute"
            # node Reroute.006
            reroute_006_2 = color_common.nodes.new("NodeReroute")
            reroute_006_2.name = "Reroute.006"
            # node Reroute.004
            reroute_004_3 = color_common.nodes.new("NodeReroute")
            reroute_004_3.name = "Reroute.004"
            # node Switch
            switch_15 = color_common.nodes.new("GeometryNodeSwitch")
            switch_15.name = "Switch"
            switch_15.input_type = "RGBA"

            # node Switch.001
            switch_001_7 = color_common.nodes.new("GeometryNodeSwitch")
            switch_001_7.name = "Switch.001"
            switch_001_7.input_type = "RGBA"

            # node Compare
            compare_20 = color_common.nodes.new("FunctionNodeCompare")
            compare_20.name = "Compare"
            compare_20.data_type = "INT"
            compare_20.mode = "ELEMENT"
            compare_20.operation = "EQUAL"
            # B_INT
            compare_20.inputs[3].default_value = 1

            # node Reroute.011
            reroute_011_1 = color_common.nodes.new("NodeReroute")
            reroute_011_1.name = "Reroute.011"
            # node Reroute.002
            reroute_002_8 = color_common.nodes.new("NodeReroute")
            reroute_002_8.name = "Reroute.002"
            # node Compare.001
            compare_001_8 = color_common.nodes.new("FunctionNodeCompare")
            compare_001_8.name = "Compare.001"
            compare_001_8.data_type = "INT"
            compare_001_8.mode = "ELEMENT"
            compare_001_8.operation = "EQUAL"
            # B_INT
            compare_001_8.inputs[3].default_value = 6

            # node Reroute.003
            reroute_003_5 = color_common.nodes.new("NodeReroute")
            reroute_003_5.name = "Reroute.003"
            # node Compare.002
            compare_002_5 = color_common.nodes.new("FunctionNodeCompare")
            compare_002_5.name = "Compare.002"
            compare_002_5.data_type = "INT"
            compare_002_5.mode = "ELEMENT"
            compare_002_5.operation = "EQUAL"
            # B_INT
            compare_002_5.inputs[3].default_value = 7

            # node Reroute.005
            reroute_005_3 = color_common.nodes.new("NodeReroute")
            reroute_005_3.name = "Reroute.005"
            # node Compare.003
            compare_003_5 = color_common.nodes.new("FunctionNodeCompare")
            compare_003_5.name = "Compare.003"
            compare_003_5.data_type = "INT"
            compare_003_5.mode = "ELEMENT"
            compare_003_5.operation = "EQUAL"
            # B_INT
            compare_003_5.inputs[3].default_value = 8

            # node Reroute.012
            reroute_012_1 = color_common.nodes.new("NodeReroute")
            reroute_012_1.name = "Reroute.012"
            # node Reroute.013
            reroute_013_1 = color_common.nodes.new("NodeReroute")
            reroute_013_1.name = "Reroute.013"
            # node Reroute.014
            reroute_014 = color_common.nodes.new("NodeReroute")
            reroute_014.name = "Reroute.014"
            # node Switch.003
            switch_003_2 = color_common.nodes.new("GeometryNodeSwitch")
            switch_003_2.name = "Switch.003"
            switch_003_2.input_type = "RGBA"

            # node Compare.004
            compare_004_3 = color_common.nodes.new("FunctionNodeCompare")
            compare_004_3.name = "Compare.004"
            compare_004_3.data_type = "INT"
            compare_004_3.mode = "ELEMENT"
            compare_004_3.operation = "EQUAL"
            # B_INT
            compare_004_3.inputs[3].default_value = 15

            # node Compare.005
            compare_005_3 = color_common.nodes.new("FunctionNodeCompare")
            compare_005_3.name = "Compare.005"
            compare_005_3.data_type = "INT"
            compare_005_3.mode = "ELEMENT"
            compare_005_3.operation = "EQUAL"
            # B_INT
            compare_005_3.inputs[3].default_value = 16

            # node Reroute.015
            reroute_015_1 = color_common.nodes.new("NodeReroute")
            reroute_015_1.name = "Reroute.015"
            # node Switch.004
            switch_004 = color_common.nodes.new("GeometryNodeSwitch")
            switch_004.name = "Switch.004"
            switch_004.input_type = "RGBA"

            # node Reroute.016
            reroute_016 = color_common.nodes.new("NodeReroute")
            reroute_016.name = "Reroute.016"
            # node Reroute.017
            reroute_017 = color_common.nodes.new("NodeReroute")
            reroute_017.name = "Reroute.017"
            # node Reroute.010
            reroute_010_1 = color_common.nodes.new("NodeReroute")
            reroute_010_1.name = "Reroute.010"
            # node Named Attribute
            named_attribute_14 = color_common.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_14.name = "Named Attribute"
            named_attribute_14.data_type = "INT"
            # Name
            named_attribute_14.inputs[0].default_value = "atomic_number"

            # node Named Attribute.002
            named_attribute_002_6 = color_common.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_6.name = "Named Attribute.002"
            named_attribute_002_6.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_002_6.inputs[0].default_value = "Color"

            # node Switch.005
            switch_005 = color_common.nodes.new("GeometryNodeSwitch")
            switch_005.name = "Switch.005"
            switch_005.input_type = "RGBA"

            # node Group Output
            group_output_69 = color_common.nodes.new("NodeGroupOutput")
            group_output_69.name = "Group Output"
            group_output_69.is_active_output = True

            # node Group Input
            group_input_68 = color_common.nodes.new("NodeGroupInput")
            group_input_68.name = "Group Input"

            # Set locations
            reroute_001_10.location = (40.0, -160.0)
            reroute_007_2.location = (200.00003051757812, -180.0)
            switch_002_5.location = (240.0, 19.999969482421875)
            reroute_009_1.location = (339.9999694824219, -200.0)
            reroute_16.location = (-119.99996948242188, -160.0)
            reroute_006_2.location = (-119.99996948242188, -179.99996948242188)
            reroute_004_3.location = (-119.99996948242188, -200.0)
            switch_15.location = (-120.0, 20.0)
            switch_001_7.location = (60.0, 20.0)
            compare_20.location = (-120.0, 199.99996948242188)
            reroute_011_1.location = (-160.0, 219.99998474121094)
            reroute_002_8.location = (20.0, 219.99998474121094)
            compare_001_8.location = (59.99998474121094, 199.99998474121094)
            reroute_003_5.location = (200.0, 220.00001525878906)
            compare_002_5.location = (240.0, 200.00001525878906)
            reroute_005_3.location = (379.9999694824219, 220.00003051757812)
            compare_003_5.location = (420.0, 200.0)
            reroute_012_1.location = (560.0000610351562, 219.99996948242188)
            reroute_013_1.location = (520.0000610351562, -220.0)
            reroute_014.location = (-120.0, -220.0)
            switch_003_2.location = (420.0, 20.0)
            compare_004_3.location = (600.0000610351562, 199.99996948242188)
            compare_005_3.location = (780.0, 200.0)
            reroute_015_1.location = (760.0, 220.0)
            switch_004.location = (600.0000610351562, 20.0)
            reroute_016.location = (680.0, -240.0)
            reroute_017.location = (-120.0, -240.0)
            reroute_010_1.location = (-168.18707275390625, 82.08197021484375)
            named_attribute_14.location = (-440.0, 260.0)
            named_attribute_002_6.location = (-380.0, 40.0)
            switch_005.location = (780.0, 20.0)
            group_output_69.location = (1020.0, 220.0)
            group_input_68.location = (-380.0, -100.0)

            # Set dimensions
            reroute_001_10.width, reroute_001_10.height = 16.0, 100.0
            reroute_007_2.width, reroute_007_2.height = 16.0, 100.0
            switch_002_5.width, switch_002_5.height = 140.0, 100.0
            reroute_009_1.width, reroute_009_1.height = 16.0, 100.0
            reroute_16.width, reroute_16.height = 16.0, 100.0
            reroute_006_2.width, reroute_006_2.height = 16.0, 100.0
            reroute_004_3.width, reroute_004_3.height = 16.0, 100.0
            switch_15.width, switch_15.height = 140.0, 100.0
            switch_001_7.width, switch_001_7.height = 140.0, 100.0
            compare_20.width, compare_20.height = 140.0, 100.0
            reroute_011_1.width, reroute_011_1.height = 16.0, 100.0
            reroute_002_8.width, reroute_002_8.height = 16.0, 100.0
            compare_001_8.width, compare_001_8.height = 140.0, 100.0
            reroute_003_5.width, reroute_003_5.height = 16.0, 100.0
            compare_002_5.width, compare_002_5.height = 140.0, 100.0
            reroute_005_3.width, reroute_005_3.height = 16.0, 100.0
            compare_003_5.width, compare_003_5.height = 140.0, 100.0
            reroute_012_1.width, reroute_012_1.height = 16.0, 100.0
            reroute_013_1.width, reroute_013_1.height = 16.0, 100.0
            reroute_014.width, reroute_014.height = 16.0, 100.0
            switch_003_2.width, switch_003_2.height = 140.0, 100.0
            compare_004_3.width, compare_004_3.height = 140.0, 100.0
            compare_005_3.width, compare_005_3.height = 140.0, 100.0
            reroute_015_1.width, reroute_015_1.height = 16.0, 100.0
            switch_004.width, switch_004.height = 140.0, 100.0
            reroute_016.width, reroute_016.height = 16.0, 100.0
            reroute_017.width, reroute_017.height = 16.0, 100.0
            reroute_010_1.width, reroute_010_1.height = 16.0, 100.0
            named_attribute_14.width, named_attribute_14.height = (
                199.0511474609375,
                100.0,
            )
            named_attribute_002_6.width, named_attribute_002_6.height = 140.0, 100.0
            switch_005.width, switch_005.height = 140.0, 100.0
            group_output_69.width, group_output_69.height = 140.0, 100.0
            group_input_68.width, group_input_68.height = 140.0, 100.0

            # initialize color_common links
            # compare_20.Result -> switch_15.Switch
            color_common.links.new(compare_20.outputs[0], switch_15.inputs[0])
            # group_input_68.Hydrogen -> switch_15.True
            color_common.links.new(group_input_68.outputs[0], switch_15.inputs[2])
            # switch_15.Output -> switch_001_7.False
            color_common.links.new(switch_15.outputs[0], switch_001_7.inputs[1])
            # reroute_001_10.Output -> switch_001_7.True
            color_common.links.new(reroute_001_10.outputs[0], switch_001_7.inputs[2])
            # group_input_68.Carbon -> reroute_16.Input
            color_common.links.new(group_input_68.outputs[1], reroute_16.inputs[0])
            # reroute_16.Output -> reroute_001_10.Input
            color_common.links.new(reroute_16.outputs[0], reroute_001_10.inputs[0])
            # switch_001_7.Output -> switch_002_5.False
            color_common.links.new(switch_001_7.outputs[0], switch_002_5.inputs[1])
            # reroute_007_2.Output -> switch_002_5.True
            color_common.links.new(reroute_007_2.outputs[0], switch_002_5.inputs[2])
            # group_input_68.Nitrogen -> reroute_006_2.Input
            color_common.links.new(group_input_68.outputs[2], reroute_006_2.inputs[0])
            # reroute_006_2.Output -> reroute_007_2.Input
            color_common.links.new(reroute_006_2.outputs[0], reroute_007_2.inputs[0])
            # switch_002_5.Output -> switch_003_2.False
            color_common.links.new(switch_002_5.outputs[0], switch_003_2.inputs[1])
            # reroute_009_1.Output -> switch_003_2.True
            color_common.links.new(reroute_009_1.outputs[0], switch_003_2.inputs[2])
            # group_input_68.Oxygen -> reroute_004_3.Input
            color_common.links.new(group_input_68.outputs[3], reroute_004_3.inputs[0])
            # reroute_004_3.Output -> reroute_009_1.Input
            color_common.links.new(reroute_004_3.outputs[0], reroute_009_1.inputs[0])
            # reroute_010_1.Output -> compare_20.A
            color_common.links.new(reroute_010_1.outputs[0], compare_20.inputs[2])
            # reroute_010_1.Output -> reroute_011_1.Input
            color_common.links.new(reroute_010_1.outputs[0], reroute_011_1.inputs[0])
            # compare_001_8.Result -> switch_001_7.Switch
            color_common.links.new(compare_001_8.outputs[0], switch_001_7.inputs[0])
            # reroute_002_8.Output -> compare_001_8.A
            color_common.links.new(reroute_002_8.outputs[0], compare_001_8.inputs[2])
            # reroute_011_1.Output -> reroute_002_8.Input
            color_common.links.new(reroute_011_1.outputs[0], reroute_002_8.inputs[0])
            # reroute_003_5.Output -> compare_002_5.A
            color_common.links.new(reroute_003_5.outputs[0], compare_002_5.inputs[2])
            # reroute_002_8.Output -> reroute_003_5.Input
            color_common.links.new(reroute_002_8.outputs[0], reroute_003_5.inputs[0])
            # compare_002_5.Result -> switch_002_5.Switch
            color_common.links.new(compare_002_5.outputs[0], switch_002_5.inputs[0])
            # reroute_005_3.Output -> compare_003_5.A
            color_common.links.new(reroute_005_3.outputs[0], compare_003_5.inputs[2])
            # reroute_003_5.Output -> reroute_005_3.Input
            color_common.links.new(reroute_003_5.outputs[0], reroute_005_3.inputs[0])
            # compare_003_5.Result -> switch_003_2.Switch
            color_common.links.new(compare_003_5.outputs[0], switch_003_2.inputs[0])
            # reroute_012_1.Output -> compare_004_3.A
            color_common.links.new(reroute_012_1.outputs[0], compare_004_3.inputs[2])
            # compare_004_3.Result -> switch_004.Switch
            color_common.links.new(compare_004_3.outputs[0], switch_004.inputs[0])
            # reroute_005_3.Output -> reroute_012_1.Input
            color_common.links.new(reroute_005_3.outputs[0], reroute_012_1.inputs[0])
            # reroute_013_1.Output -> switch_004.True
            color_common.links.new(reroute_013_1.outputs[0], switch_004.inputs[2])
            # reroute_014.Output -> reroute_013_1.Input
            color_common.links.new(reroute_014.outputs[0], reroute_013_1.inputs[0])
            # group_input_68.Phosphorous -> reroute_014.Input
            color_common.links.new(group_input_68.outputs[4], reroute_014.inputs[0])
            # switch_003_2.Output -> switch_004.False
            color_common.links.new(switch_003_2.outputs[0], switch_004.inputs[1])
            # reroute_015_1.Output -> compare_005_3.A
            color_common.links.new(reroute_015_1.outputs[0], compare_005_3.inputs[2])
            # compare_005_3.Result -> switch_005.Switch
            color_common.links.new(compare_005_3.outputs[0], switch_005.inputs[0])
            # reroute_012_1.Output -> reroute_015_1.Input
            color_common.links.new(reroute_012_1.outputs[0], reroute_015_1.inputs[0])
            # switch_004.Output -> switch_005.False
            color_common.links.new(switch_004.outputs[0], switch_005.inputs[1])
            # reroute_016.Output -> switch_005.True
            color_common.links.new(reroute_016.outputs[0], switch_005.inputs[2])
            # reroute_017.Output -> reroute_016.Input
            color_common.links.new(reroute_017.outputs[0], reroute_016.inputs[0])
            # group_input_68.Sulfur -> reroute_017.Input
            color_common.links.new(group_input_68.outputs[5], reroute_017.inputs[0])
            # named_attribute_14.Attribute -> reroute_010_1.Input
            color_common.links.new(
                named_attribute_14.outputs[0], reroute_010_1.inputs[0]
            )
            # switch_005.Output -> group_output_69.Color
            color_common.links.new(switch_005.outputs[0], group_output_69.inputs[0])
            # named_attribute_002_6.Attribute -> switch_15.False
            color_common.links.new(
                named_attribute_002_6.outputs[0], switch_15.inputs[1]
            )
            return color_common

        color_common = color_common_node_group()

        # initialize is_side_chain node group
        def is_side_chain_node_group():
            is_side_chain = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Side Chain"
            )

            is_side_chain.color_tag = "INPUT"
            is_side_chain.description = ""

            # is_side_chain interface
            # Socket Selection
            selection_socket_26 = is_side_chain.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_26.attribute_domain = "POINT"
            selection_socket_26.description = "True if atom is part of the side chain for either an amino acid or a nucleic acid"

            # Socket Inverted
            inverted_socket_15 = is_side_chain.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_15.attribute_domain = "POINT"

            # Socket And
            and_socket_11 = is_side_chain.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_11.attribute_domain = "POINT"
            and_socket_11.hide_value = True

            # Socket Or
            or_socket_10 = is_side_chain.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_10.attribute_domain = "POINT"
            or_socket_10.hide_value = True

            # initialize is_side_chain nodes
            # node Boolean Math.001
            boolean_math_001_17 = is_side_chain.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_17.name = "Boolean Math.001"
            boolean_math_001_17.operation = "OR"

            # node Group Input
            group_input_69 = is_side_chain.nodes.new("NodeGroupInput")
            group_input_69.name = "Group Input"

            # node Boolean Math
            boolean_math_19 = is_side_chain.nodes.new("FunctionNodeBooleanMath")
            boolean_math_19.name = "Boolean Math"
            boolean_math_19.operation = "AND"

            # node Group Output
            group_output_70 = is_side_chain.nodes.new("NodeGroupOutput")
            group_output_70.name = "Group Output"
            group_output_70.is_active_output = True

            # node Group.001
            group_001_13 = is_side_chain.nodes.new("GeometryNodeGroup")
            group_001_13.name = "Group.001"
            group_001_13.node_tree = _mn_select_nucleic

            # node Group.002
            group_002_5 = is_side_chain.nodes.new("GeometryNodeGroup")
            group_002_5.name = "Group.002"
            group_002_5.node_tree = _mn_select_peptide

            # node Group
            group_22 = is_side_chain.nodes.new("GeometryNodeGroup")
            group_22.name = "Group"
            group_22.node_tree = fallback_boolean
            # Socket_2
            group_22.inputs[0].default_value = "is_side_chain"

            # node Boolean Math.002
            boolean_math_002_11 = is_side_chain.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_11.name = "Boolean Math.002"
            boolean_math_002_11.operation = "OR"

            # node Boolean Math.003
            boolean_math_003_2 = is_side_chain.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_2.name = "Boolean Math.003"
            boolean_math_003_2.operation = "NOT"

            # Set locations
            boolean_math_001_17.location = (-460.0, -80.0)
            group_input_69.location = (-280.0, 20.0)
            boolean_math_19.location = (-120.0, 20.0)
            group_output_70.location = (240.00001525878906, 20.0)
            group_001_13.location = (-740.0, -80.0)
            group_002_5.location = (-740.0, -220.0)
            group_22.location = (-300.0, -80.0)
            boolean_math_002_11.location = (59.99999237060547, 20.0)
            boolean_math_003_2.location = (60.0, -120.0)

            # Set dimensions
            boolean_math_001_17.width, boolean_math_001_17.height = 140.0, 100.0
            group_input_69.width, group_input_69.height = 140.0, 100.0
            boolean_math_19.width, boolean_math_19.height = 140.0, 100.0
            group_output_70.width, group_output_70.height = 140.0, 100.0
            group_001_13.width, group_001_13.height = 244.02914428710938, 100.0
            group_002_5.width, group_002_5.height = 244.02914428710938, 100.0
            group_22.width, group_22.height = 140.0, 100.0
            boolean_math_002_11.width, boolean_math_002_11.height = 140.0, 100.0
            boolean_math_003_2.width, boolean_math_003_2.height = 140.0, 100.0

            # initialize is_side_chain links
            # group_input_69.And -> boolean_math_19.Boolean
            is_side_chain.links.new(
                group_input_69.outputs[0], boolean_math_19.inputs[0]
            )
            # group_001_13.Is Side Chain -> boolean_math_001_17.Boolean
            is_side_chain.links.new(
                group_001_13.outputs[1], boolean_math_001_17.inputs[0]
            )
            # group_002_5.Is Side Chain -> boolean_math_001_17.Boolean
            is_side_chain.links.new(
                group_002_5.outputs[1], boolean_math_001_17.inputs[1]
            )
            # boolean_math_001_17.Boolean -> group_22.Fallback
            is_side_chain.links.new(boolean_math_001_17.outputs[0], group_22.inputs[1])
            # group_22.Boolean -> boolean_math_19.Boolean
            is_side_chain.links.new(group_22.outputs[0], boolean_math_19.inputs[1])
            # boolean_math_002_11.Boolean -> group_output_70.Selection
            is_side_chain.links.new(
                boolean_math_002_11.outputs[0], group_output_70.inputs[0]
            )
            # boolean_math_19.Boolean -> boolean_math_002_11.Boolean
            is_side_chain.links.new(
                boolean_math_19.outputs[0], boolean_math_002_11.inputs[0]
            )
            # group_input_69.Or -> boolean_math_002_11.Boolean
            is_side_chain.links.new(
                group_input_69.outputs[1], boolean_math_002_11.inputs[1]
            )
            # boolean_math_002_11.Boolean -> boolean_math_003_2.Boolean
            is_side_chain.links.new(
                boolean_math_002_11.outputs[0], boolean_math_003_2.inputs[0]
            )
            # boolean_math_003_2.Boolean -> group_output_70.Inverted
            is_side_chain.links.new(
                boolean_math_003_2.outputs[0], group_output_70.inputs[1]
            )
            return is_side_chain

        is_side_chain = is_side_chain_node_group()

        # initialize is_backbone node group
        def is_backbone_node_group():
            is_backbone = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Backbone"
            )

            is_backbone.color_tag = "INPUT"
            is_backbone.description = ""

            # is_backbone interface
            # Socket Selection
            selection_socket_27 = is_backbone.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_27.attribute_domain = "POINT"
            selection_socket_27.description = "True if the atom is part of the backbone for either an amino acid or a peptide chain"

            # Socket Inverted
            inverted_socket_16 = is_backbone.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_16.attribute_domain = "POINT"

            # Socket And
            and_socket_12 = is_backbone.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_12.attribute_domain = "POINT"
            and_socket_12.hide_value = True

            # Socket Or
            or_socket_11 = is_backbone.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_11.attribute_domain = "POINT"
            or_socket_11.hide_value = True

            # initialize is_backbone nodes
            # node Group Input
            group_input_70 = is_backbone.nodes.new("NodeGroupInput")
            group_input_70.name = "Group Input"

            # node Boolean Math
            boolean_math_20 = is_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_20.name = "Boolean Math"
            boolean_math_20.operation = "AND"

            # node Group Output
            group_output_71 = is_backbone.nodes.new("NodeGroupOutput")
            group_output_71.name = "Group Output"
            group_output_71.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_18 = is_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_18.name = "Boolean Math.001"
            boolean_math_001_18.operation = "OR"

            # node Group.001
            group_001_14 = is_backbone.nodes.new("GeometryNodeGroup")
            group_001_14.name = "Group.001"
            group_001_14.node_tree = _mn_select_nucleic

            # node Group.002
            group_002_6 = is_backbone.nodes.new("GeometryNodeGroup")
            group_002_6.name = "Group.002"
            group_002_6.node_tree = _mn_select_peptide

            # node Group
            group_23 = is_backbone.nodes.new("GeometryNodeGroup")
            group_23.name = "Group"
            group_23.node_tree = fallback_boolean
            # Socket_2
            group_23.inputs[0].default_value = "is_backbone"

            # node Boolean Math.002
            boolean_math_002_12 = is_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_12.name = "Boolean Math.002"
            boolean_math_002_12.operation = "OR"

            # node Boolean Math.003
            boolean_math_003_3 = is_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_3.name = "Boolean Math.003"
            boolean_math_003_3.operation = "NOT"

            # Set locations
            group_input_70.location = (-240.0, 20.0)
            boolean_math_20.location = (-60.0, 20.0)
            group_output_71.location = (300.0000305175781, 20.0)
            boolean_math_001_18.location = (-400.0, -80.0)
            group_001_14.location = (-680.0, -80.0)
            group_002_6.location = (-680.0, -220.0)
            group_23.location = (-240.0, -80.0)
            boolean_math_002_12.location = (120.0, 22.075050354003906)
            boolean_math_003_3.location = (120.0, -120.0)

            # Set dimensions
            group_input_70.width, group_input_70.height = 140.0, 100.0
            boolean_math_20.width, boolean_math_20.height = 140.0, 100.0
            group_output_71.width, group_output_71.height = 140.0, 100.0
            boolean_math_001_18.width, boolean_math_001_18.height = 140.0, 100.0
            group_001_14.width, group_001_14.height = 244.02914428710938, 100.0
            group_002_6.width, group_002_6.height = 244.02914428710938, 100.0
            group_23.width, group_23.height = 140.0, 100.0
            boolean_math_002_12.width, boolean_math_002_12.height = 140.0, 100.0
            boolean_math_003_3.width, boolean_math_003_3.height = 140.0, 100.0

            # initialize is_backbone links
            # group_input_70.And -> boolean_math_20.Boolean
            is_backbone.links.new(group_input_70.outputs[0], boolean_math_20.inputs[0])
            # boolean_math_002_12.Boolean -> group_output_71.Selection
            is_backbone.links.new(
                boolean_math_002_12.outputs[0], group_output_71.inputs[0]
            )
            # group_001_14.Is Backbone -> boolean_math_001_18.Boolean
            is_backbone.links.new(
                group_001_14.outputs[0], boolean_math_001_18.inputs[0]
            )
            # group_002_6.Is Backbone -> boolean_math_001_18.Boolean
            is_backbone.links.new(group_002_6.outputs[0], boolean_math_001_18.inputs[1])
            # boolean_math_001_18.Boolean -> group_23.Fallback
            is_backbone.links.new(boolean_math_001_18.outputs[0], group_23.inputs[1])
            # group_23.Boolean -> boolean_math_20.Boolean
            is_backbone.links.new(group_23.outputs[0], boolean_math_20.inputs[1])
            # boolean_math_20.Boolean -> boolean_math_002_12.Boolean
            is_backbone.links.new(
                boolean_math_20.outputs[0], boolean_math_002_12.inputs[0]
            )
            # group_input_70.Or -> boolean_math_002_12.Boolean
            is_backbone.links.new(
                group_input_70.outputs[1], boolean_math_002_12.inputs[1]
            )
            # boolean_math_002_12.Boolean -> boolean_math_003_3.Boolean
            is_backbone.links.new(
                boolean_math_002_12.outputs[0], boolean_math_003_3.inputs[0]
            )
            # boolean_math_003_3.Boolean -> group_output_71.Inverted
            is_backbone.links.new(
                boolean_math_003_3.outputs[0], group_output_71.inputs[1]
            )
            return is_backbone

        is_backbone = is_backbone_node_group()

        # initialize color_backbone node group
        def color_backbone_node_group():
            color_backbone = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Backbone"
            )

            color_backbone.color_tag = "COLOR"
            color_backbone.description = ""

            # color_backbone interface
            # Socket Color
            color_socket_4 = color_backbone.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_4.attribute_domain = "POINT"

            # Socket Backbone
            backbone_socket = color_backbone.interface.new_socket(
                name="Backbone", in_out="INPUT", socket_type="NodeSocketColor"
            )
            backbone_socket.attribute_domain = "POINT"

            # Socket Side Chain
            side_chain_socket = color_backbone.interface.new_socket(
                name="Side Chain", in_out="INPUT", socket_type="NodeSocketColor"
            )
            side_chain_socket.attribute_domain = "POINT"

            # initialize color_backbone nodes
            # node Group Output
            group_output_72 = color_backbone.nodes.new("NodeGroupOutput")
            group_output_72.name = "Group Output"
            group_output_72.is_active_output = True

            # node Boolean Math
            boolean_math_21 = color_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_21.name = "Boolean Math"
            boolean_math_21.operation = "NOT"

            # node Boolean Math.001
            boolean_math_001_19 = color_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_19.name = "Boolean Math.001"
            boolean_math_001_19.operation = "AND"

            # node Named Attribute
            named_attribute_15 = color_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_15.name = "Named Attribute"
            named_attribute_15.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_15.inputs[0].default_value = "Color"

            # node Group Input
            group_input_71 = color_backbone.nodes.new("NodeGroupInput")
            group_input_71.name = "Group Input"

            # node Switch
            switch_16 = color_backbone.nodes.new("GeometryNodeSwitch")
            switch_16.name = "Switch"
            switch_16.input_type = "RGBA"

            # node Switch.001
            switch_001_8 = color_backbone.nodes.new("GeometryNodeSwitch")
            switch_001_8.name = "Switch.001"
            switch_001_8.input_type = "RGBA"

            # node MN Select Alpha Carbon
            mn_select_alpha_carbon = color_backbone.nodes.new("GeometryNodeGroup")
            mn_select_alpha_carbon.label = " Select Alpha Carbon"
            mn_select_alpha_carbon.name = "MN Select Alpha Carbon"
            mn_select_alpha_carbon.node_tree = is_alpha_carbon
            # Socket_1
            mn_select_alpha_carbon.inputs[0].default_value = True
            # Socket_3
            mn_select_alpha_carbon.inputs[1].default_value = False

            # node MN Select Side Chain
            mn_select_side_chain = color_backbone.nodes.new("GeometryNodeGroup")
            mn_select_side_chain.label = " Select Side Chain"
            mn_select_side_chain.name = "MN Select Side Chain"
            mn_select_side_chain.node_tree = is_side_chain
            # Socket_1
            mn_select_side_chain.inputs[0].default_value = True
            # Socket_3
            mn_select_side_chain.inputs[1].default_value = False

            # node MN Select Backbone
            mn_select_backbone = color_backbone.nodes.new("GeometryNodeGroup")
            mn_select_backbone.label = " Select Backbone"
            mn_select_backbone.name = "MN Select Backbone"
            mn_select_backbone.node_tree = is_backbone
            # Socket_1
            mn_select_backbone.inputs[0].default_value = True
            # Socket_3
            mn_select_backbone.inputs[1].default_value = False

            # node Reroute
            reroute_17 = color_backbone.nodes.new("NodeReroute")
            reroute_17.name = "Reroute"

            # Set locations
            group_output_72.location = (260.0, 20.0)
            boolean_math_21.location = (-440.0, 20.0)
            boolean_math_001_19.location = (-280.0, 20.0)
            named_attribute_15.location = (-280.0, -240.0)
            group_input_71.location = (-280.0, -380.0)
            switch_16.location = (-100.0, -180.0)
            switch_001_8.location = (100.0, 20.0)
            mn_select_alpha_carbon.location = (-603.0540161132812, 20.0)
            mn_select_side_chain.location = (-440.0, -100.0)
            mn_select_backbone.location = (-279.925048828125, -120.0)
            reroute_17.location = (80.0, -380.0)

            # Set dimensions
            group_output_72.width, group_output_72.height = 140.0, 100.0
            boolean_math_21.width, boolean_math_21.height = 140.0, 100.0
            boolean_math_001_19.width, boolean_math_001_19.height = 140.0, 100.0
            named_attribute_15.width, named_attribute_15.height = 140.0, 100.0
            group_input_71.width, group_input_71.height = 140.0, 100.0
            switch_16.width, switch_16.height = 140.0, 100.0
            switch_001_8.width, switch_001_8.height = 140.0, 100.0
            mn_select_alpha_carbon.width, mn_select_alpha_carbon.height = (
                143.05401611328125,
                100.0,
            )
            mn_select_side_chain.width, mn_select_side_chain.height = (
                144.931396484375,
                100.0,
            )
            mn_select_backbone.width, mn_select_backbone.height = (
                139.925048828125,
                100.0,
            )
            reroute_17.width, reroute_17.height = 16.0, 100.0

            # initialize color_backbone links
            # group_input_71.Backbone -> switch_16.True
            color_backbone.links.new(group_input_71.outputs[0], switch_16.inputs[2])
            # switch_001_8.Output -> group_output_72.Color
            color_backbone.links.new(switch_001_8.outputs[0], group_output_72.inputs[0])
            # switch_16.Output -> switch_001_8.False
            color_backbone.links.new(switch_16.outputs[0], switch_001_8.inputs[1])
            # reroute_17.Output -> switch_001_8.True
            color_backbone.links.new(reroute_17.outputs[0], switch_001_8.inputs[2])
            # boolean_math_21.Boolean -> boolean_math_001_19.Boolean
            color_backbone.links.new(
                boolean_math_21.outputs[0], boolean_math_001_19.inputs[0]
            )
            # boolean_math_001_19.Boolean -> switch_001_8.Switch
            color_backbone.links.new(
                boolean_math_001_19.outputs[0], switch_001_8.inputs[0]
            )
            # named_attribute_15.Attribute -> switch_16.False
            color_backbone.links.new(named_attribute_15.outputs[0], switch_16.inputs[1])
            # mn_select_alpha_carbon.Selection -> boolean_math_21.Boolean
            color_backbone.links.new(
                mn_select_alpha_carbon.outputs[0], boolean_math_21.inputs[0]
            )
            # mn_select_side_chain.Selection -> boolean_math_001_19.Boolean
            color_backbone.links.new(
                mn_select_side_chain.outputs[0], boolean_math_001_19.inputs[1]
            )
            # mn_select_backbone.Selection -> switch_16.Switch
            color_backbone.links.new(mn_select_backbone.outputs[0], switch_16.inputs[0])
            # group_input_71.Side Chain -> reroute_17.Input
            color_backbone.links.new(group_input_71.outputs[1], reroute_17.inputs[0])
            return color_backbone

        color_backbone = color_backbone_node_group()

        # initialize color_chain_ node group
        def color_chain__node_group():
            color_chain_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Chain_"
            )

            color_chain_.color_tag = "COLOR"
            color_chain_.description = ""

            # color_chain_ interface
            # Socket Color
            color_socket_5 = color_chain_.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_5.attribute_domain = "POINT"
            color_socket_5.description = "The colors based on `chain_id`"

            # Socket Chain A
            chain_a_socket = color_chain_.interface.new_socket(
                name="Chain A", in_out="INPUT", socket_type="NodeSocketColor"
            )
            chain_a_socket.attribute_domain = "POINT"
            chain_a_socket.description = "Color to set for Chain A"

            # Socket Chain B
            chain_b_socket = color_chain_.interface.new_socket(
                name="Chain B", in_out="INPUT", socket_type="NodeSocketColor"
            )
            chain_b_socket.attribute_domain = "POINT"
            chain_b_socket.description = "Color to set for Chain B"

            # Socket ...
            ____socket = color_chain_.interface.new_socket(
                name="...", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ____socket.attribute_domain = "POINT"
            ____socket.description = "Color to set for Chain ..."

            # initialize color_chain_ nodes
            # node Group Output
            group_output_73 = color_chain_.nodes.new("NodeGroupOutput")
            group_output_73.name = "Group Output"
            group_output_73.is_active_output = True

            # node Switch.001
            switch_001_9 = color_chain_.nodes.new("GeometryNodeSwitch")
            switch_001_9.name = "Switch.001"
            switch_001_9.input_type = "RGBA"

            # node Group.059
            group_059 = color_chain_.nodes.new("GeometryNodeGroup")
            group_059.name = "Group.059"
            group_059.node_tree = _mn_select_sec_struct
            # Socket_1
            group_059.inputs[0].default_value = True

            # node Switch.002
            switch_002_6 = color_chain_.nodes.new("GeometryNodeSwitch")
            switch_002_6.name = "Switch.002"
            switch_002_6.input_type = "RGBA"

            # node Switch
            switch_17 = color_chain_.nodes.new("GeometryNodeSwitch")
            switch_17.name = "Switch"
            switch_17.input_type = "RGBA"
            # False
            switch_17.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Group Input
            group_input_72 = color_chain_.nodes.new("NodeGroupInput")
            group_input_72.name = "Group Input"

            # Set locations
            group_output_73.location = (278.192138671875, 0.0)
            switch_001_9.location = (80.0, -140.0)
            group_059.location = (-100.0, 20.0)
            switch_002_6.location = (80.0, -300.0)
            switch_17.location = (80.0, 20.0)
            group_input_72.location = (-288.192138671875, 0.0)

            # Set dimensions
            group_output_73.width, group_output_73.height = 140.0, 100.0
            switch_001_9.width, switch_001_9.height = 140.0, 100.0
            group_059.width, group_059.height = 140.0, 100.0
            switch_002_6.width, switch_002_6.height = 140.0, 100.0
            switch_17.width, switch_17.height = 140.0, 100.0
            group_input_72.width, group_input_72.height = 140.0, 100.0

            # initialize color_chain_ links
            # group_059.Is Helix -> switch_17.Switch
            color_chain_.links.new(group_059.outputs[0], switch_17.inputs[0])
            # group_input_72.Chain A -> switch_17.True
            color_chain_.links.new(group_input_72.outputs[0], switch_17.inputs[2])
            # switch_001_9.Output -> switch_002_6.False
            color_chain_.links.new(switch_001_9.outputs[0], switch_002_6.inputs[1])
            # group_059.Is Sheet -> switch_001_9.Switch
            color_chain_.links.new(group_059.outputs[1], switch_001_9.inputs[0])
            # group_059.Is Loop -> switch_002_6.Switch
            color_chain_.links.new(group_059.outputs[3], switch_002_6.inputs[0])
            # switch_002_6.Output -> group_output_73.Color
            color_chain_.links.new(switch_002_6.outputs[0], group_output_73.inputs[0])
            # switch_17.Output -> switch_001_9.False
            color_chain_.links.new(switch_17.outputs[0], switch_001_9.inputs[1])
            # group_input_72.Chain B -> switch_001_9.True
            color_chain_.links.new(group_input_72.outputs[1], switch_001_9.inputs[2])
            # group_input_72.... -> switch_002_6.True
            color_chain_.links.new(group_input_72.outputs[2], switch_002_6.inputs[2])
            return color_chain_

        color_chain_ = color_chain__node_group()

        # initialize color_ligand_ node group
        def color_ligand__node_group():
            color_ligand_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Ligand_"
            )

            color_ligand_.color_tag = "COLOR"
            color_ligand_.description = ""

            # color_ligand_ interface
            # Socket Color
            color_socket_6 = color_ligand_.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_6.attribute_domain = "POINT"
            color_socket_6.description = "The colors based on `entity_id`"

            # Socket Ligand A
            ligand_a_socket_1 = color_ligand_.interface.new_socket(
                name="Ligand A", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ligand_a_socket_1.attribute_domain = "POINT"
            ligand_a_socket_1.description = "Color to set for Ligand B"

            # Socket Ligand B
            ligand_b_socket_1 = color_ligand_.interface.new_socket(
                name="Ligand B", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ligand_b_socket_1.attribute_domain = "POINT"
            ligand_b_socket_1.description = "Color to set for Ligand B"

            # Socket ...
            ____socket_1 = color_ligand_.interface.new_socket(
                name="...", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ____socket_1.attribute_domain = "POINT"
            ____socket_1.description = "Color to set for Ligand ..."

            # initialize color_ligand_ nodes
            # node Group Output
            group_output_74 = color_ligand_.nodes.new("NodeGroupOutput")
            group_output_74.name = "Group Output"
            group_output_74.is_active_output = True

            # node Switch.001
            switch_001_10 = color_ligand_.nodes.new("GeometryNodeSwitch")
            switch_001_10.name = "Switch.001"
            switch_001_10.input_type = "RGBA"

            # node Group.059
            group_059_1 = color_ligand_.nodes.new("GeometryNodeGroup")
            group_059_1.name = "Group.059"
            group_059_1.node_tree = _mn_select_sec_struct
            # Socket_1
            group_059_1.inputs[0].default_value = True

            # node Switch.002
            switch_002_7 = color_ligand_.nodes.new("GeometryNodeSwitch")
            switch_002_7.name = "Switch.002"
            switch_002_7.input_type = "RGBA"

            # node Switch
            switch_18 = color_ligand_.nodes.new("GeometryNodeSwitch")
            switch_18.name = "Switch"
            switch_18.input_type = "RGBA"
            # False
            switch_18.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Group Input
            group_input_73 = color_ligand_.nodes.new("NodeGroupInput")
            group_input_73.name = "Group Input"

            # Set locations
            group_output_74.location = (278.192138671875, 0.0)
            switch_001_10.location = (80.0, -140.0)
            group_059_1.location = (-100.0, 20.0)
            switch_002_7.location = (80.0, -300.0)
            switch_18.location = (80.0, 20.0)
            group_input_73.location = (-288.192138671875, 0.0)

            # Set dimensions
            group_output_74.width, group_output_74.height = 140.0, 100.0
            switch_001_10.width, switch_001_10.height = 140.0, 100.0
            group_059_1.width, group_059_1.height = 140.0, 100.0
            switch_002_7.width, switch_002_7.height = 140.0, 100.0
            switch_18.width, switch_18.height = 140.0, 100.0
            group_input_73.width, group_input_73.height = 140.0, 100.0

            # initialize color_ligand_ links
            # group_059_1.Is Helix -> switch_18.Switch
            color_ligand_.links.new(group_059_1.outputs[0], switch_18.inputs[0])
            # group_input_73.Ligand A -> switch_18.True
            color_ligand_.links.new(group_input_73.outputs[0], switch_18.inputs[2])
            # switch_001_10.Output -> switch_002_7.False
            color_ligand_.links.new(switch_001_10.outputs[0], switch_002_7.inputs[1])
            # group_059_1.Is Sheet -> switch_001_10.Switch
            color_ligand_.links.new(group_059_1.outputs[1], switch_001_10.inputs[0])
            # group_059_1.Is Loop -> switch_002_7.Switch
            color_ligand_.links.new(group_059_1.outputs[3], switch_002_7.inputs[0])
            # switch_002_7.Output -> group_output_74.Color
            color_ligand_.links.new(switch_002_7.outputs[0], group_output_74.inputs[0])
            # switch_18.Output -> switch_001_10.False
            color_ligand_.links.new(switch_18.outputs[0], switch_001_10.inputs[1])
            # group_input_73.Ligand B -> switch_001_10.True
            color_ligand_.links.new(group_input_73.outputs[1], switch_001_10.inputs[2])
            # group_input_73.... -> switch_002_7.True
            color_ligand_.links.new(group_input_73.outputs[2], switch_002_7.inputs[2])
            return color_ligand_

        color_ligand_ = color_ligand__node_group()

        # initialize color_entity_ node group
        def color_entity__node_group():
            color_entity_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Entity_"
            )

            color_entity_.color_tag = "COLOR"
            color_entity_.description = ""

            # color_entity_ interface
            # Socket Color
            color_socket_7 = color_entity_.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_7.attribute_domain = "POINT"
            color_socket_7.description = "The colors based on `entity_id`"

            # Socket Entity A
            entity_a_socket_1 = color_entity_.interface.new_socket(
                name="Entity A", in_out="INPUT", socket_type="NodeSocketColor"
            )
            entity_a_socket_1.attribute_domain = "POINT"
            entity_a_socket_1.description = "Color to set for Entity A"

            # Socket Entity B
            entity_b_socket_1 = color_entity_.interface.new_socket(
                name="Entity B", in_out="INPUT", socket_type="NodeSocketColor"
            )
            entity_b_socket_1.attribute_domain = "POINT"
            entity_b_socket_1.description = "Color to set for Entity B"

            # Socket ...
            ____socket_2 = color_entity_.interface.new_socket(
                name="...", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ____socket_2.attribute_domain = "POINT"
            ____socket_2.description = "Color to set for Entity ..."

            # initialize color_entity_ nodes
            # node Group Output
            group_output_75 = color_entity_.nodes.new("NodeGroupOutput")
            group_output_75.name = "Group Output"
            group_output_75.is_active_output = True

            # node Switch.001
            switch_001_11 = color_entity_.nodes.new("GeometryNodeSwitch")
            switch_001_11.name = "Switch.001"
            switch_001_11.input_type = "RGBA"

            # node Group.059
            group_059_2 = color_entity_.nodes.new("GeometryNodeGroup")
            group_059_2.name = "Group.059"
            group_059_2.node_tree = _mn_select_sec_struct
            # Socket_1
            group_059_2.inputs[0].default_value = True

            # node Switch.002
            switch_002_8 = color_entity_.nodes.new("GeometryNodeSwitch")
            switch_002_8.name = "Switch.002"
            switch_002_8.input_type = "RGBA"

            # node Switch
            switch_19 = color_entity_.nodes.new("GeometryNodeSwitch")
            switch_19.name = "Switch"
            switch_19.input_type = "RGBA"
            # False
            switch_19.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Group Input
            group_input_74 = color_entity_.nodes.new("NodeGroupInput")
            group_input_74.name = "Group Input"

            # Set locations
            group_output_75.location = (278.192138671875, 0.0)
            switch_001_11.location = (80.0, -140.0)
            group_059_2.location = (-100.0, 20.0)
            switch_002_8.location = (80.0, -300.0)
            switch_19.location = (80.0, 20.0)
            group_input_74.location = (-288.192138671875, 0.0)

            # Set dimensions
            group_output_75.width, group_output_75.height = 140.0, 100.0
            switch_001_11.width, switch_001_11.height = 140.0, 100.0
            group_059_2.width, group_059_2.height = 140.0, 100.0
            switch_002_8.width, switch_002_8.height = 140.0, 100.0
            switch_19.width, switch_19.height = 140.0, 100.0
            group_input_74.width, group_input_74.height = 140.0, 100.0

            # initialize color_entity_ links
            # group_059_2.Is Helix -> switch_19.Switch
            color_entity_.links.new(group_059_2.outputs[0], switch_19.inputs[0])
            # group_input_74.Entity A -> switch_19.True
            color_entity_.links.new(group_input_74.outputs[0], switch_19.inputs[2])
            # switch_001_11.Output -> switch_002_8.False
            color_entity_.links.new(switch_001_11.outputs[0], switch_002_8.inputs[1])
            # group_059_2.Is Sheet -> switch_001_11.Switch
            color_entity_.links.new(group_059_2.outputs[1], switch_001_11.inputs[0])
            # group_059_2.Is Loop -> switch_002_8.Switch
            color_entity_.links.new(group_059_2.outputs[3], switch_002_8.inputs[0])
            # switch_002_8.Output -> group_output_75.Color
            color_entity_.links.new(switch_002_8.outputs[0], group_output_75.inputs[0])
            # switch_19.Output -> switch_001_11.False
            color_entity_.links.new(switch_19.outputs[0], switch_001_11.inputs[1])
            # group_input_74.Entity B -> switch_001_11.True
            color_entity_.links.new(group_input_74.outputs[1], switch_001_11.inputs[2])
            # group_input_74.... -> switch_002_8.True
            color_entity_.links.new(group_input_74.outputs[2], switch_002_8.inputs[2])
            return color_entity_

        color_entity_ = color_entity__node_group()

        # initialize animate_value node group
        def animate_value_node_group():
            animate_value = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Value"
            )

            animate_value.color_tag = "INPUT"
            animate_value.description = ""

            # animate_value interface
            # Socket Value
            value_socket_9 = animate_value.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_9.subtype = "NONE"
            value_socket_9.default_value = 0.0
            value_socket_9.min_value = -3.4028234663852886e38
            value_socket_9.max_value = 3.4028234663852886e38
            value_socket_9.attribute_domain = "POINT"
            value_socket_9.description = (
                "Animated value that interpolates from min to max over frames"
            )

            # Socket Smoother Step
            smoother_step_socket = animate_value.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket.attribute_domain = "POINT"
            smoother_step_socket.description = (
                "Ease out and in from the min and max values"
            )

            # Socket Clamped
            clamped_socket = animate_value.interface.new_socket(
                name="Clamped", in_out="INPUT", socket_type="NodeSocketBool"
            )
            clamped_socket.attribute_domain = "POINT"
            clamped_socket.description = (
                "Whether to clamp the interpolated value to the max"
            )

            # Panel Frame
            frame_panel = animate_value.interface.new_panel("Frame")
            # Socket Frame Start
            frame_start_socket = animate_value.interface.new_socket(
                name="Frame Start",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=frame_panel,
            )
            frame_start_socket.subtype = "NONE"
            frame_start_socket.default_value = 1
            frame_start_socket.min_value = 1
            frame_start_socket.max_value = 2147483647
            frame_start_socket.attribute_domain = "POINT"
            frame_start_socket.description = "Frame to start the animation on"

            # Socket Frame End
            frame_end_socket = animate_value.interface.new_socket(
                name="Frame End",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=frame_panel,
            )
            frame_end_socket.subtype = "NONE"
            frame_end_socket.default_value = 250
            frame_end_socket.min_value = 1
            frame_end_socket.max_value = 2147483647
            frame_end_socket.attribute_domain = "POINT"
            frame_end_socket.description = "Frame to finish the animation on"

            # Panel Value
            value_panel = animate_value.interface.new_panel("Value")
            # Socket Value Min
            value_min_socket = animate_value.interface.new_socket(
                name="Value Min",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=value_panel,
            )
            value_min_socket.subtype = "NONE"
            value_min_socket.default_value = 0.0
            value_min_socket.min_value = -10000.0
            value_min_socket.max_value = 10000.0
            value_min_socket.attribute_domain = "POINT"
            value_min_socket.description = "Value to start animation from"

            # Socket Value Max
            value_max_socket = animate_value.interface.new_socket(
                name="Value Max",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=value_panel,
            )
            value_max_socket.subtype = "NONE"
            value_max_socket.default_value = 1.0
            value_max_socket.min_value = -10000.0
            value_max_socket.max_value = 10000.0
            value_max_socket.attribute_domain = "POINT"
            value_max_socket.description = "Value to end animation at"

            # initialize animate_value nodes
            # node Group Input
            group_input_75 = animate_value.nodes.new("NodeGroupInput")
            group_input_75.name = "Group Input"

            # node Scene Time
            scene_time = animate_value.nodes.new("GeometryNodeInputSceneTime")
            scene_time.name = "Scene Time"

            # node Map Range.002
            map_range_002 = animate_value.nodes.new("ShaderNodeMapRange")
            map_range_002.name = "Map Range.002"
            map_range_002.clamp = True
            map_range_002.data_type = "FLOAT"
            map_range_002.interpolation_type = "LINEAR"

            # node Map Range
            map_range_3 = animate_value.nodes.new("ShaderNodeMapRange")
            map_range_3.name = "Map Range"
            map_range_3.clamp = False
            map_range_3.data_type = "FLOAT"
            map_range_3.interpolation_type = "LINEAR"

            # node Switch.001
            switch_001_12 = animate_value.nodes.new("GeometryNodeSwitch")
            switch_001_12.name = "Switch.001"
            switch_001_12.input_type = "FLOAT"

            # node Group Output
            group_output_76 = animate_value.nodes.new("NodeGroupOutput")
            group_output_76.name = "Group Output"
            group_output_76.is_active_output = True

            # node Map Range.001
            map_range_001_1 = animate_value.nodes.new("ShaderNodeMapRange")
            map_range_001_1.name = "Map Range.001"
            map_range_001_1.clamp = False
            map_range_001_1.data_type = "FLOAT"
            map_range_001_1.interpolation_type = "SMOOTHERSTEP"

            # node Switch.002
            switch_002_9 = animate_value.nodes.new("GeometryNodeSwitch")
            switch_002_9.name = "Switch.002"
            switch_002_9.input_type = "FLOAT"

            # Set locations
            group_input_75.location = (-620.0, -180.0)
            scene_time.location = (-620.0, -80.0)
            map_range_002.location = (-60.0, 100.0)
            map_range_3.location = (-60.0, -160.0)
            switch_001_12.location = (120.0, 100.0)
            group_output_76.location = (779.9998779296875, 40.0)
            map_range_001_1.location = (-60.0, -420.0)
            switch_002_9.location = (349.49884033203125, 7.68292236328125)

            # Set dimensions
            group_input_75.width, group_input_75.height = 140.0, 100.0
            scene_time.width, scene_time.height = 140.0, 100.0
            map_range_002.width, map_range_002.height = 140.0, 100.0
            map_range_3.width, map_range_3.height = 140.0, 100.0
            switch_001_12.width, switch_001_12.height = 140.0, 100.0
            group_output_76.width, group_output_76.height = 140.0, 100.0
            map_range_001_1.width, map_range_001_1.height = 140.0, 100.0
            switch_002_9.width, switch_002_9.height = 140.0, 100.0

            # initialize animate_value links
            # scene_time.Frame -> map_range_3.Value
            animate_value.links.new(scene_time.outputs[1], map_range_3.inputs[0])
            # group_input_75.Frame Start -> map_range_3.From Min
            animate_value.links.new(group_input_75.outputs[2], map_range_3.inputs[1])
            # group_input_75.Frame End -> map_range_3.From Max
            animate_value.links.new(group_input_75.outputs[3], map_range_3.inputs[2])
            # group_input_75.Value Min -> map_range_3.To Min
            animate_value.links.new(group_input_75.outputs[4], map_range_3.inputs[3])
            # group_input_75.Value Max -> map_range_3.To Max
            animate_value.links.new(group_input_75.outputs[5], map_range_3.inputs[4])
            # scene_time.Frame -> map_range_002.Value
            animate_value.links.new(scene_time.outputs[1], map_range_002.inputs[0])
            # group_input_75.Frame Start -> map_range_002.From Min
            animate_value.links.new(group_input_75.outputs[2], map_range_002.inputs[1])
            # group_input_75.Frame End -> map_range_002.From Max
            animate_value.links.new(group_input_75.outputs[3], map_range_002.inputs[2])
            # group_input_75.Value Min -> map_range_002.To Min
            animate_value.links.new(group_input_75.outputs[4], map_range_002.inputs[3])
            # group_input_75.Value Max -> map_range_002.To Max
            animate_value.links.new(group_input_75.outputs[5], map_range_002.inputs[4])
            # group_input_75.Clamped -> switch_001_12.Switch
            animate_value.links.new(group_input_75.outputs[1], switch_001_12.inputs[0])
            # map_range_002.Result -> switch_001_12.True
            animate_value.links.new(map_range_002.outputs[0], switch_001_12.inputs[2])
            # map_range_3.Result -> switch_001_12.False
            animate_value.links.new(map_range_3.outputs[0], switch_001_12.inputs[1])
            # scene_time.Frame -> map_range_001_1.Value
            animate_value.links.new(scene_time.outputs[1], map_range_001_1.inputs[0])
            # group_input_75.Frame Start -> map_range_001_1.From Min
            animate_value.links.new(
                group_input_75.outputs[2], map_range_001_1.inputs[1]
            )
            # group_input_75.Frame End -> map_range_001_1.From Max
            animate_value.links.new(
                group_input_75.outputs[3], map_range_001_1.inputs[2]
            )
            # group_input_75.Value Min -> map_range_001_1.To Min
            animate_value.links.new(
                group_input_75.outputs[4], map_range_001_1.inputs[3]
            )
            # group_input_75.Value Max -> map_range_001_1.To Max
            animate_value.links.new(
                group_input_75.outputs[5], map_range_001_1.inputs[4]
            )
            # map_range_001_1.Result -> switch_002_9.True
            animate_value.links.new(map_range_001_1.outputs[0], switch_002_9.inputs[2])
            # switch_001_12.Output -> switch_002_9.False
            animate_value.links.new(switch_001_12.outputs[0], switch_002_9.inputs[1])
            # group_input_75.Smoother Step -> switch_002_9.Switch
            animate_value.links.new(group_input_75.outputs[0], switch_002_9.inputs[0])
            # switch_002_9.Output -> group_output_76.Value
            animate_value.links.new(switch_002_9.outputs[0], group_output_76.inputs[0])
            return animate_value

        animate_value = animate_value_node_group()

        # initialize _mn_animate_field node group
        def _mn_animate_field_node_group():
            _mn_animate_field = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_animate_field"
            )

            _mn_animate_field.color_tag = "NONE"
            _mn_animate_field.description = ""

            # _mn_animate_field interface
            # Socket Vector Interp.
            vector_interp__socket = _mn_animate_field.interface.new_socket(
                name="Vector Interp.", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_interp__socket.subtype = "NONE"
            vector_interp__socket.default_value = (0.0, 0.0, 0.0)
            vector_interp__socket.min_value = -3.4028234663852886e38
            vector_interp__socket.max_value = 3.4028234663852886e38
            vector_interp__socket.attribute_domain = "POINT"

            # Socket Vector0
            vector0_socket = _mn_animate_field.interface.new_socket(
                name="Vector0", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector0_socket.subtype = "NONE"
            vector0_socket.default_value = (0.0, 0.0, 0.0)
            vector0_socket.min_value = -3.4028234663852886e38
            vector0_socket.max_value = 3.4028234663852886e38
            vector0_socket.attribute_domain = "POINT"

            # Socket Vector1
            vector1_socket = _mn_animate_field.interface.new_socket(
                name="Vector1", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector1_socket.subtype = "NONE"
            vector1_socket.default_value = (0.0, 0.0, 0.0)
            vector1_socket.min_value = -3.4028234663852886e38
            vector1_socket.max_value = 3.4028234663852886e38
            vector1_socket.attribute_domain = "POINT"

            # Socket Float Interp.
            float_interp__socket = _mn_animate_field.interface.new_socket(
                name="Float Interp.", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            float_interp__socket.subtype = "NONE"
            float_interp__socket.default_value = 0.0
            float_interp__socket.min_value = -3.4028234663852886e38
            float_interp__socket.max_value = 3.4028234663852886e38
            float_interp__socket.attribute_domain = "POINT"

            # Socket Float0
            float0_socket = _mn_animate_field.interface.new_socket(
                name="Float0", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            float0_socket.subtype = "NONE"
            float0_socket.default_value = 0.0
            float0_socket.min_value = -3.4028234663852886e38
            float0_socket.max_value = 3.4028234663852886e38
            float0_socket.attribute_domain = "POINT"

            # Socket Float1
            float1_socket = _mn_animate_field.interface.new_socket(
                name="Float1", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            float1_socket.subtype = "NONE"
            float1_socket.default_value = 0.0
            float1_socket.min_value = -3.4028234663852886e38
            float1_socket.max_value = 3.4028234663852886e38
            float1_socket.attribute_domain = "POINT"

            # Socket Vector
            vector_socket_4 = _mn_animate_field.interface.new_socket(
                name="Vector", in_out="INPUT", socket_type="NodeSocketVector"
            )
            vector_socket_4.subtype = "NONE"
            vector_socket_4.default_value = (0.0, 0.0, 0.0)
            vector_socket_4.min_value = -3.4028234663852886e38
            vector_socket_4.max_value = 3.4028234663852886e38
            vector_socket_4.attribute_domain = "POINT"
            vector_socket_4.hide_value = True

            # Socket Float
            float_socket = _mn_animate_field.interface.new_socket(
                name="Float", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            float_socket.subtype = "NONE"
            float_socket.default_value = 0.0
            float_socket.min_value = -3.4028234663852886e38
            float_socket.max_value = 3.4028234663852886e38
            float_socket.attribute_domain = "POINT"
            float_socket.hide_value = True

            # Socket Frames
            frames_socket = _mn_animate_field.interface.new_socket(
                name="Frames", in_out="INPUT", socket_type="NodeSocketCollection"
            )
            frames_socket.attribute_domain = "POINT"

            # Socket Start
            start_socket = _mn_animate_field.interface.new_socket(
                name="Start", in_out="INPUT", socket_type="NodeSocketInt"
            )
            start_socket.subtype = "NONE"
            start_socket.default_value = 0
            start_socket.min_value = 0
            start_socket.max_value = 100000
            start_socket.attribute_domain = "POINT"

            # Socket End
            end_socket = _mn_animate_field.interface.new_socket(
                name="End", in_out="INPUT", socket_type="NodeSocketInt"
            )
            end_socket.subtype = "NONE"
            end_socket.default_value = -1
            end_socket.min_value = -1
            end_socket.max_value = 100000
            end_socket.attribute_domain = "POINT"

            # Socket Animate 0..1
            animate_0__1_socket_1 = _mn_animate_field.interface.new_socket(
                name="Animate 0..1", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_0__1_socket_1.subtype = "NONE"
            animate_0__1_socket_1.default_value = 1.0
            animate_0__1_socket_1.min_value = -10000.0
            animate_0__1_socket_1.max_value = 10000.0
            animate_0__1_socket_1.attribute_domain = "POINT"

            # Socket Interpolate
            interpolate_socket = _mn_animate_field.interface.new_socket(
                name="Interpolate", in_out="INPUT", socket_type="NodeSocketBool"
            )
            interpolate_socket.attribute_domain = "POINT"

            # Socket Smoother Step
            smoother_step_socket_1 = _mn_animate_field.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket_1.attribute_domain = "POINT"

            # Socket Index
            index_socket_8 = _mn_animate_field.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_8.subtype = "NONE"
            index_socket_8.default_value = 0
            index_socket_8.min_value = -2147483648
            index_socket_8.max_value = 2147483647
            index_socket_8.default_attribute_name = "Index"
            index_socket_8.attribute_domain = "POINT"
            index_socket_8.hide_value = True

            # initialize _mn_animate_field nodes
            # node Compare
            compare_21 = _mn_animate_field.nodes.new("FunctionNodeCompare")
            compare_21.name = "Compare"
            compare_21.data_type = "INT"
            compare_21.mode = "ELEMENT"
            compare_21.operation = "EQUAL"

            # node Separate Geometry
            separate_geometry_9 = _mn_animate_field.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_9.name = "Separate Geometry"
            separate_geometry_9.domain = "INSTANCE"

            # node Compare.001
            compare_001_9 = _mn_animate_field.nodes.new("FunctionNodeCompare")
            compare_001_9.name = "Compare.001"
            compare_001_9.data_type = "INT"
            compare_001_9.mode = "ELEMENT"
            compare_001_9.operation = "EQUAL"

            # node Separate Geometry.001
            separate_geometry_001_2 = _mn_animate_field.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_2.name = "Separate Geometry.001"
            separate_geometry_001_2.domain = "INSTANCE"

            # node Realize Instances.001
            realize_instances_001 = _mn_animate_field.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_001.name = "Realize Instances.001"
            # Selection
            realize_instances_001.inputs[1].default_value = True
            # Realize All
            realize_instances_001.inputs[2].default_value = True
            # Depth
            realize_instances_001.inputs[3].default_value = 0

            # node Reroute.003
            reroute_003_6 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_003_6.name = "Reroute.003"
            # node Map Range
            map_range_4 = _mn_animate_field.nodes.new("ShaderNodeMapRange")
            map_range_4.name = "Map Range"
            map_range_4.clamp = False
            map_range_4.data_type = "FLOAT"
            map_range_4.interpolation_type = "LINEAR"
            # From Min
            map_range_4.inputs[1].default_value = 0.0
            # From Max
            map_range_4.inputs[2].default_value = 1.0

            # node Reroute.004
            reroute_004_4 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_004_4.name = "Reroute.004"
            # node Switch.001
            switch_001_13 = _mn_animate_field.nodes.new("GeometryNodeSwitch")
            switch_001_13.name = "Switch.001"
            switch_001_13.input_type = "FLOAT"

            # node Index.001
            index_001_1 = _mn_animate_field.nodes.new("GeometryNodeInputIndex")
            index_001_1.name = "Index.001"

            # node Realize Instances
            realize_instances_1 = _mn_animate_field.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_1.name = "Realize Instances"
            # Selection
            realize_instances_1.inputs[1].default_value = True
            # Realize All
            realize_instances_1.inputs[2].default_value = True
            # Depth
            realize_instances_1.inputs[3].default_value = 0

            # node Group Output
            group_output_77 = _mn_animate_field.nodes.new("NodeGroupOutput")
            group_output_77.name = "Group Output"
            group_output_77.is_active_output = True

            # node Reroute.005
            reroute_005_4 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_005_4.name = "Reroute.005"
            # node Switch.002
            switch_002_10 = _mn_animate_field.nodes.new("GeometryNodeSwitch")
            switch_002_10.name = "Switch.002"
            switch_002_10.input_type = "VECTOR"

            # node Group Input.003
            group_input_003_4 = _mn_animate_field.nodes.new("NodeGroupInput")
            group_input_003_4.name = "Group Input.003"

            # node Sample Index.002
            sample_index_002_2 = _mn_animate_field.nodes.new("GeometryNodeSampleIndex")
            sample_index_002_2.name = "Sample Index.002"
            sample_index_002_2.clamp = True
            sample_index_002_2.data_type = "FLOAT"
            sample_index_002_2.domain = "POINT"

            # node Reroute.002
            reroute_002_9 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_002_9.name = "Reroute.002"
            # node Mix.001
            mix_001 = _mn_animate_field.nodes.new("ShaderNodeMix")
            mix_001.name = "Mix.001"
            mix_001.blend_type = "MIX"
            mix_001.clamp_factor = True
            mix_001.clamp_result = False
            mix_001.data_type = "FLOAT"
            mix_001.factor_mode = "UNIFORM"

            # node Switch.003
            switch_003_3 = _mn_animate_field.nodes.new("GeometryNodeSwitch")
            switch_003_3.name = "Switch.003"
            switch_003_3.input_type = "FLOAT"

            # node Index.002
            index_002_2 = _mn_animate_field.nodes.new("GeometryNodeInputIndex")
            index_002_2.name = "Index.002"

            # node Switch.004
            switch_004_1 = _mn_animate_field.nodes.new("GeometryNodeSwitch")
            switch_004_1.label = "backup_index"
            switch_004_1.name = "Switch.004"
            switch_004_1.input_type = "INT"

            # node Field at Index
            field_at_index_2 = _mn_animate_field.nodes.new("GeometryNodeFieldAtIndex")
            field_at_index_2.name = "Field at Index"
            field_at_index_2.hide = True
            field_at_index_2.data_type = "INT"
            field_at_index_2.domain = "POINT"
            # Index
            field_at_index_2.inputs[0].default_value = 1

            # node Index.004
            index_004_2 = _mn_animate_field.nodes.new("GeometryNodeInputIndex")
            index_004_2.name = "Index.004"

            # node Mix
            mix_1 = _mn_animate_field.nodes.new("ShaderNodeMix")
            mix_1.name = "Mix"
            mix_1.blend_type = "MIX"
            mix_1.clamp_factor = True
            mix_1.clamp_result = False
            mix_1.data_type = "VECTOR"
            mix_1.factor_mode = "UNIFORM"

            # node Sample Index
            sample_index_3 = _mn_animate_field.nodes.new("GeometryNodeSampleIndex")
            sample_index_3.name = "Sample Index"
            sample_index_3.clamp = True
            sample_index_3.data_type = "FLOAT_VECTOR"
            sample_index_3.domain = "POINT"

            # node Sample Index.001
            sample_index_001_3 = _mn_animate_field.nodes.new("GeometryNodeSampleIndex")
            sample_index_001_3.name = "Sample Index.001"
            sample_index_001_3.clamp = True
            sample_index_001_3.data_type = "FLOAT_VECTOR"
            sample_index_001_3.domain = "POINT"

            # node Sample Index.003
            sample_index_003_2 = _mn_animate_field.nodes.new("GeometryNodeSampleIndex")
            sample_index_003_2.name = "Sample Index.003"
            sample_index_003_2.clamp = True
            sample_index_003_2.data_type = "FLOAT"
            sample_index_003_2.domain = "POINT"

            # node Group Input.002
            group_input_002_5 = _mn_animate_field.nodes.new("NodeGroupInput")
            group_input_002_5.name = "Group Input.002"

            # node Reroute.001
            reroute_001_11 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_001_11.name = "Reroute.001"
            # node Index
            index_9 = _mn_animate_field.nodes.new("GeometryNodeInputIndex")
            index_9.name = "Index"

            # node Reroute
            reroute_18 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_18.name = "Reroute"
            # node Math.006
            math_006_1 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_006_1.name = "Math.006"
            math_006_1.operation = "MINIMUM"
            math_006_1.use_clamp = False

            # node Math
            math_16 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_16.label = "x + 1"
            math_16.name = "Math"
            math_16.hide = True
            math_16.operation = "ADD"
            math_16.use_clamp = False
            # Value_001
            math_16.inputs[1].default_value = 1.0

            # node Math.002
            math_002_5 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_002_5.name = "Math.002"
            math_002_5.operation = "FLOOR"
            math_002_5.use_clamp = False

            # node Switch.005
            switch_005_1 = _mn_animate_field.nodes.new("GeometryNodeSwitch")
            switch_005_1.name = "Switch.005"
            switch_005_1.input_type = "INT"

            # node Math.003
            math_003_4 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_003_4.label = "x - 1"
            math_003_4.name = "Math.003"
            math_003_4.hide = True
            math_003_4.operation = "SUBTRACT"
            math_003_4.use_clamp = False
            # Value_001
            math_003_4.inputs[1].default_value = 1.0

            # node Math.005
            math_005_1 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_005_1.name = "Math.005"
            math_005_1.operation = "WRAP"
            math_005_1.use_clamp = False
            # Value_001
            math_005_1.inputs[1].default_value = 1.0
            # Value_002
            math_005_1.inputs[2].default_value = 0.0

            # node Domain Size
            domain_size_3 = _mn_animate_field.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_3.name = "Domain Size"
            domain_size_3.component = "INSTANCES"

            # node Reroute.007
            reroute_007_3 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_007_3.name = "Reroute.007"
            # node Collection Info
            collection_info = _mn_animate_field.nodes.new("GeometryNodeCollectionInfo")
            collection_info.name = "Collection Info"
            collection_info.transform_space = "RELATIVE"
            # Separate Children
            collection_info.inputs[1].default_value = True
            # Reset Children
            collection_info.inputs[2].default_value = False

            # node Group Input
            group_input_76 = _mn_animate_field.nodes.new("NodeGroupInput")
            group_input_76.name = "Group Input"

            # node Compare.002
            compare_002_6 = _mn_animate_field.nodes.new("FunctionNodeCompare")
            compare_002_6.name = "Compare.002"
            compare_002_6.data_type = "INT"
            compare_002_6.mode = "ELEMENT"
            compare_002_6.operation = "EQUAL"
            # B_INT
            compare_002_6.inputs[3].default_value = -1

            # node Reroute.008
            reroute_008_1 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_008_1.name = "Reroute.008"
            # node Reroute.006
            reroute_006_3 = _mn_animate_field.nodes.new("NodeReroute")
            reroute_006_3.name = "Reroute.006"
            # node Map Range.001
            map_range_001_2 = _mn_animate_field.nodes.new("ShaderNodeMapRange")
            map_range_001_2.name = "Map Range.001"
            map_range_001_2.clamp = True
            map_range_001_2.data_type = "FLOAT"
            map_range_001_2.interpolation_type = "SMOOTHERSTEP"
            # From Min
            map_range_001_2.inputs[1].default_value = 0.0
            # From Max
            map_range_001_2.inputs[2].default_value = 1.0
            # To Min
            map_range_001_2.inputs[3].default_value = 0.0
            # To Max
            map_range_001_2.inputs[4].default_value = 1.0

            # node Math.004
            math_004_2 = _mn_animate_field.nodes.new("ShaderNodeMath")
            math_004_2.name = "Math.004"
            math_004_2.operation = "FRACT"
            math_004_2.use_clamp = False

            # node Group Input.001
            group_input_001_10 = _mn_animate_field.nodes.new("NodeGroupInput")
            group_input_001_10.name = "Group Input.001"

            # node Group Input.004
            group_input_004_3 = _mn_animate_field.nodes.new("NodeGroupInput")
            group_input_004_3.name = "Group Input.004"

            # Set locations
            compare_21.location = (328.0, -140.0)
            separate_geometry_9.location = (328.0, 20.0)
            compare_001_9.location = (328.0, -540.0)
            separate_geometry_001_2.location = (328.0, -380.0)
            realize_instances_001.location = (488.0, -380.0)
            reroute_003_6.location = (-620.0, -220.0)
            map_range_4.location = (-800.0, -160.0)
            reroute_004_4.location = (41.4283447265625, 62.94276809692383)
            switch_001_13.location = (-140.0, 240.0)
            index_001_1.location = (160.0, -600.0)
            realize_instances_1.location = (488.0, 20.0)
            group_output_77.location = (1571.8603515625, 139.68081665039062)
            reroute_005_4.location = (724.9548950195312, -220.96487426757812)
            switch_002_10.location = (1220.0, 136.82861328125)
            group_input_003_4.location = (520.0, -800.0)
            sample_index_002_2.location = (820.0, -980.0)
            reroute_002_9.location = (700.0, 60.0)
            mix_001.location = (1020.0, -740.0)
            switch_003_3.location = (1240.0, -620.0)
            index_002_2.location = (480.0, -320.0)
            switch_004_1.location = (500.0, 320.0)
            field_at_index_2.location = (320.0, 220.0)
            index_004_2.location = (320.0, 180.0)
            mix_1.location = (1000.0, 20.0)
            sample_index_3.location = (800.0, 20.0)
            sample_index_001_3.location = (800.0, -200.0)
            sample_index_003_2.location = (820.0, -740.0)
            group_input_002_5.location = (1000.0, 360.0)
            reroute_001_11.location = (100.0, -240.0)
            index_9.location = (160.0, -220.0)
            reroute_18.location = (100.0, -280.0)
            math_006_1.location = (160.0, -660.0)
            math_16.location = (-60.0, -660.0)
            math_002_5.location = (-598.4962768554688, -251.16390991210938)
            switch_005_1.location = (-800.0, -420.0)
            math_003_4.location = (-960.0, -600.0)
            math_005_1.location = (-800.0, 40.0)
            domain_size_3.location = (-960.0, -640.0)
            reroute_007_3.location = (-240.0, -660.0)
            collection_info.location = (-1160.0, -600.0)
            group_input_76.location = (-1600.0, -80.0)
            compare_002_6.location = (-960.0, -420.0)
            reroute_008_1.location = (780.0, -1020.0)
            reroute_006_3.location = (738.3385009765625, -275.85125732421875)
            map_range_001_2.location = (-140.0, 80.0)
            math_004_2.location = (-340.0, 100.0)
            group_input_001_10.location = (-340.0, 360.0)
            group_input_004_3.location = (320.0, 500.0)

            # Set dimensions
            compare_21.width, compare_21.height = 140.0, 100.0
            separate_geometry_9.width, separate_geometry_9.height = 140.0, 100.0
            compare_001_9.width, compare_001_9.height = 140.0, 100.0
            separate_geometry_001_2.width, separate_geometry_001_2.height = 140.0, 100.0
            realize_instances_001.width, realize_instances_001.height = 140.0, 100.0
            reroute_003_6.width, reroute_003_6.height = 16.0, 100.0
            map_range_4.width, map_range_4.height = 140.0, 100.0
            reroute_004_4.width, reroute_004_4.height = 16.0, 100.0
            switch_001_13.width, switch_001_13.height = 140.0, 100.0
            index_001_1.width, index_001_1.height = 140.0, 100.0
            realize_instances_1.width, realize_instances_1.height = 140.0, 100.0
            group_output_77.width, group_output_77.height = 140.0, 100.0
            reroute_005_4.width, reroute_005_4.height = 16.0, 100.0
            switch_002_10.width, switch_002_10.height = 140.0, 100.0
            group_input_003_4.width, group_input_003_4.height = 140.0, 100.0
            sample_index_002_2.width, sample_index_002_2.height = 140.0, 100.0
            reroute_002_9.width, reroute_002_9.height = 16.0, 100.0
            mix_001.width, mix_001.height = 140.0, 100.0
            switch_003_3.width, switch_003_3.height = 140.0, 100.0
            index_002_2.width, index_002_2.height = 140.0, 100.0
            switch_004_1.width, switch_004_1.height = 140.0, 100.0
            field_at_index_2.width, field_at_index_2.height = 140.0, 100.0
            index_004_2.width, index_004_2.height = 140.0, 100.0
            mix_1.width, mix_1.height = 140.0, 100.0
            sample_index_3.width, sample_index_3.height = 140.0, 100.0
            sample_index_001_3.width, sample_index_001_3.height = 140.0, 100.0
            sample_index_003_2.width, sample_index_003_2.height = 140.0, 100.0
            group_input_002_5.width, group_input_002_5.height = 140.0, 100.0
            reroute_001_11.width, reroute_001_11.height = 16.0, 100.0
            index_9.width, index_9.height = 140.0, 100.0
            reroute_18.width, reroute_18.height = 16.0, 100.0
            math_006_1.width, math_006_1.height = 140.0, 100.0
            math_16.width, math_16.height = 140.0, 100.0
            math_002_5.width, math_002_5.height = 140.0, 100.0
            switch_005_1.width, switch_005_1.height = 140.0, 100.0
            math_003_4.width, math_003_4.height = 140.0, 100.0
            math_005_1.width, math_005_1.height = 140.0, 100.0
            domain_size_3.width, domain_size_3.height = 140.0, 100.0
            reroute_007_3.width, reroute_007_3.height = 16.0, 100.0
            collection_info.width, collection_info.height = 140.0, 100.0
            group_input_76.width, group_input_76.height = 140.0, 100.0
            compare_002_6.width, compare_002_6.height = 140.0, 100.0
            reroute_008_1.width, reroute_008_1.height = 16.0, 100.0
            reroute_006_3.width, reroute_006_3.height = 16.0, 100.0
            map_range_001_2.width, map_range_001_2.height = 140.0, 100.0
            math_004_2.width, math_004_2.height = 140.0, 100.0
            group_input_001_10.width, group_input_001_10.height = 140.0, 100.0
            group_input_004_3.width, group_input_004_3.height = 140.0, 100.0

            # initialize _mn_animate_field links
            # group_input_76.Frames -> collection_info.Collection
            _mn_animate_field.links.new(
                group_input_76.outputs[2], collection_info.inputs[0]
            )
            # reroute_001_11.Output -> separate_geometry_9.Geometry
            _mn_animate_field.links.new(
                reroute_001_11.outputs[0], separate_geometry_9.inputs[0]
            )
            # index_9.Index -> compare_21.A
            _mn_animate_field.links.new(index_9.outputs[0], compare_21.inputs[2])
            # compare_21.Result -> separate_geometry_9.Selection
            _mn_animate_field.links.new(
                compare_21.outputs[0], separate_geometry_9.inputs[1]
            )
            # separate_geometry_9.Selection -> realize_instances_1.Geometry
            _mn_animate_field.links.new(
                separate_geometry_9.outputs[0], realize_instances_1.inputs[0]
            )
            # reroute_18.Output -> compare_21.B
            _mn_animate_field.links.new(reroute_18.outputs[0], compare_21.inputs[3])
            # reroute_18.Output -> math_16.Value
            _mn_animate_field.links.new(reroute_18.outputs[0], math_16.inputs[0])
            # reroute_001_11.Output -> separate_geometry_001_2.Geometry
            _mn_animate_field.links.new(
                reroute_001_11.outputs[0], separate_geometry_001_2.inputs[0]
            )
            # index_001_1.Index -> compare_001_9.A
            _mn_animate_field.links.new(index_001_1.outputs[0], compare_001_9.inputs[2])
            # compare_001_9.Result -> separate_geometry_001_2.Selection
            _mn_animate_field.links.new(
                compare_001_9.outputs[0], separate_geometry_001_2.inputs[1]
            )
            # separate_geometry_001_2.Selection -> realize_instances_001.Geometry
            _mn_animate_field.links.new(
                separate_geometry_001_2.outputs[0], realize_instances_001.inputs[0]
            )
            # realize_instances_1.Geometry -> sample_index_3.Geometry
            _mn_animate_field.links.new(
                realize_instances_1.outputs[0], sample_index_3.inputs[0]
            )
            # realize_instances_001.Geometry -> sample_index_001_3.Geometry
            _mn_animate_field.links.new(
                realize_instances_001.outputs[0], sample_index_001_3.inputs[0]
            )
            # reroute_005_4.Output -> sample_index_3.Value
            _mn_animate_field.links.new(
                reroute_005_4.outputs[0], sample_index_3.inputs[1]
            )
            # reroute_005_4.Output -> sample_index_001_3.Value
            _mn_animate_field.links.new(
                reroute_005_4.outputs[0], sample_index_001_3.inputs[1]
            )
            # sample_index_3.Value -> mix_1.A
            _mn_animate_field.links.new(sample_index_3.outputs[0], mix_1.inputs[6])
            # sample_index_001_3.Value -> mix_1.B
            _mn_animate_field.links.new(sample_index_001_3.outputs[0], mix_1.inputs[7])
            # reroute_007_3.Output -> reroute_001_11.Input
            _mn_animate_field.links.new(
                reroute_007_3.outputs[0], reroute_001_11.inputs[0]
            )
            # collection_info.Instances -> domain_size_3.Geometry
            _mn_animate_field.links.new(
                collection_info.outputs[0], domain_size_3.inputs[0]
            )
            # reroute_003_6.Output -> math_002_5.Value
            _mn_animate_field.links.new(reroute_003_6.outputs[0], math_002_5.inputs[0])
            # domain_size_3.Instance Count -> math_003_4.Value
            _mn_animate_field.links.new(domain_size_3.outputs[5], math_003_4.inputs[0])
            # reroute_003_6.Output -> math_004_2.Value
            _mn_animate_field.links.new(reroute_003_6.outputs[0], math_004_2.inputs[0])
            # reroute_002_9.Output -> mix_1.Factor
            _mn_animate_field.links.new(reroute_002_9.outputs[0], mix_1.inputs[0])
            # reroute_004_4.Output -> reroute_002_9.Input
            _mn_animate_field.links.new(
                reroute_004_4.outputs[0], reroute_002_9.inputs[0]
            )
            # map_range_4.Result -> reroute_003_6.Input
            _mn_animate_field.links.new(map_range_4.outputs[0], reroute_003_6.inputs[0])
            # math_002_5.Value -> reroute_18.Input
            _mn_animate_field.links.new(math_002_5.outputs[0], reroute_18.inputs[0])
            # reroute_006_3.Output -> sample_index_3.Index
            _mn_animate_field.links.new(
                reroute_006_3.outputs[0], sample_index_3.inputs[2]
            )
            # math_004_2.Value -> map_range_001_2.Value
            _mn_animate_field.links.new(
                math_004_2.outputs[0], map_range_001_2.inputs[0]
            )
            # switch_001_13.Output -> reroute_004_4.Input
            _mn_animate_field.links.new(
                switch_001_13.outputs[0], reroute_004_4.inputs[0]
            )
            # math_004_2.Value -> switch_001_13.False
            _mn_animate_field.links.new(math_004_2.outputs[0], switch_001_13.inputs[1])
            # map_range_001_2.Result -> switch_001_13.True
            _mn_animate_field.links.new(
                map_range_001_2.outputs[0], switch_001_13.inputs[2]
            )
            # group_input_001_10.Smoother Step -> switch_001_13.Switch
            _mn_animate_field.links.new(
                group_input_001_10.outputs[7], switch_001_13.inputs[0]
            )
            # sample_index_3.Value -> mix_1.A
            _mn_animate_field.links.new(sample_index_3.outputs[0], mix_1.inputs[4])
            # sample_index_001_3.Value -> mix_1.B
            _mn_animate_field.links.new(sample_index_001_3.outputs[0], mix_1.inputs[5])
            # reroute_006_3.Output -> sample_index_001_3.Index
            _mn_animate_field.links.new(
                reroute_006_3.outputs[0], sample_index_001_3.inputs[2]
            )
            # mix_1.Result -> switch_002_10.True
            _mn_animate_field.links.new(mix_1.outputs[1], switch_002_10.inputs[2])
            # sample_index_3.Value -> switch_002_10.False
            _mn_animate_field.links.new(
                sample_index_3.outputs[0], switch_002_10.inputs[1]
            )
            # group_input_002_5.Interpolate -> switch_002_10.Switch
            _mn_animate_field.links.new(
                group_input_002_5.outputs[6], switch_002_10.inputs[0]
            )
            # switch_002_10.Output -> group_output_77.Vector Interp.
            _mn_animate_field.links.new(
                switch_002_10.outputs[0], group_output_77.inputs[0]
            )
            # group_input_003_4.Vector -> reroute_005_4.Input
            _mn_animate_field.links.new(
                group_input_003_4.outputs[0], reroute_005_4.inputs[0]
            )
            # realize_instances_1.Geometry -> sample_index_003_2.Geometry
            _mn_animate_field.links.new(
                realize_instances_1.outputs[0], sample_index_003_2.inputs[0]
            )
            # realize_instances_001.Geometry -> sample_index_002_2.Geometry
            _mn_animate_field.links.new(
                realize_instances_001.outputs[0], sample_index_002_2.inputs[0]
            )
            # group_input_002_5.Interpolate -> switch_003_3.Switch
            _mn_animate_field.links.new(
                group_input_002_5.outputs[6], switch_003_3.inputs[0]
            )
            # reroute_008_1.Output -> sample_index_003_2.Index
            _mn_animate_field.links.new(
                reroute_008_1.outputs[0], sample_index_003_2.inputs[2]
            )
            # reroute_008_1.Output -> sample_index_002_2.Index
            _mn_animate_field.links.new(
                reroute_008_1.outputs[0], sample_index_002_2.inputs[2]
            )
            # group_input_003_4.Float -> sample_index_003_2.Value
            _mn_animate_field.links.new(
                group_input_003_4.outputs[1], sample_index_003_2.inputs[1]
            )
            # group_input_003_4.Float -> sample_index_002_2.Value
            _mn_animate_field.links.new(
                group_input_003_4.outputs[1], sample_index_002_2.inputs[1]
            )
            # sample_index_003_2.Value -> mix_001.A
            _mn_animate_field.links.new(
                sample_index_003_2.outputs[0], mix_001.inputs[2]
            )
            # sample_index_002_2.Value -> mix_001.B
            _mn_animate_field.links.new(
                sample_index_002_2.outputs[0], mix_001.inputs[3]
            )
            # reroute_002_9.Output -> mix_001.Factor
            _mn_animate_field.links.new(reroute_002_9.outputs[0], mix_001.inputs[0])
            # mix_001.Result -> switch_003_3.True
            _mn_animate_field.links.new(mix_001.outputs[0], switch_003_3.inputs[2])
            # sample_index_003_2.Value -> switch_003_3.False
            _mn_animate_field.links.new(
                sample_index_003_2.outputs[0], switch_003_3.inputs[1]
            )
            # switch_003_3.Output -> group_output_77.Float Interp.
            _mn_animate_field.links.new(
                switch_003_3.outputs[0], group_output_77.inputs[3]
            )
            # group_input_004_3.Index -> switch_004_1.True
            _mn_animate_field.links.new(
                group_input_004_3.outputs[8], switch_004_1.inputs[2]
            )
            # field_at_index_2.Value -> switch_004_1.Switch
            _mn_animate_field.links.new(
                field_at_index_2.outputs[0], switch_004_1.inputs[0]
            )
            # index_004_2.Index -> switch_004_1.False
            _mn_animate_field.links.new(index_004_2.outputs[0], switch_004_1.inputs[1])
            # switch_004_1.Output -> reroute_006_3.Input
            _mn_animate_field.links.new(
                switch_004_1.outputs[0], reroute_006_3.inputs[0]
            )
            # group_input_004_3.Index -> field_at_index_2.Value
            _mn_animate_field.links.new(
                group_input_004_3.outputs[8], field_at_index_2.inputs[1]
            )
            # sample_index_3.Value -> group_output_77.Vector0
            _mn_animate_field.links.new(
                sample_index_3.outputs[0], group_output_77.inputs[1]
            )
            # sample_index_001_3.Value -> group_output_77.Vector1
            _mn_animate_field.links.new(
                sample_index_001_3.outputs[0], group_output_77.inputs[2]
            )
            # sample_index_003_2.Value -> group_output_77.Float0
            _mn_animate_field.links.new(
                sample_index_003_2.outputs[0], group_output_77.inputs[4]
            )
            # sample_index_002_2.Value -> group_output_77.Float1
            _mn_animate_field.links.new(
                sample_index_002_2.outputs[0], group_output_77.inputs[5]
            )
            # group_input_76.End -> compare_002_6.A
            _mn_animate_field.links.new(
                group_input_76.outputs[4], compare_002_6.inputs[2]
            )
            # compare_002_6.Result -> switch_005_1.Switch
            _mn_animate_field.links.new(
                compare_002_6.outputs[0], switch_005_1.inputs[0]
            )
            # group_input_76.End -> switch_005_1.False
            _mn_animate_field.links.new(
                group_input_76.outputs[4], switch_005_1.inputs[1]
            )
            # switch_005_1.Output -> map_range_4.To Max
            _mn_animate_field.links.new(switch_005_1.outputs[0], map_range_4.inputs[4])
            # group_input_76.Start -> map_range_4.To Min
            _mn_animate_field.links.new(
                group_input_76.outputs[3], map_range_4.inputs[3]
            )
            # math_003_4.Value -> switch_005_1.True
            _mn_animate_field.links.new(math_003_4.outputs[0], switch_005_1.inputs[2])
            # math_003_4.Value -> math_006_1.Value
            _mn_animate_field.links.new(math_003_4.outputs[0], math_006_1.inputs[0])
            # math_16.Value -> math_006_1.Value
            _mn_animate_field.links.new(math_16.outputs[0], math_006_1.inputs[1])
            # math_006_1.Value -> compare_001_9.B
            _mn_animate_field.links.new(math_006_1.outputs[0], compare_001_9.inputs[3])
            # group_input_76.Animate 0..1 -> math_005_1.Value
            _mn_animate_field.links.new(group_input_76.outputs[5], math_005_1.inputs[0])
            # math_005_1.Value -> map_range_4.Value
            _mn_animate_field.links.new(math_005_1.outputs[0], map_range_4.inputs[0])
            # collection_info.Instances -> reroute_007_3.Input
            _mn_animate_field.links.new(
                collection_info.outputs[0], reroute_007_3.inputs[0]
            )
            # reroute_006_3.Output -> reroute_008_1.Input
            _mn_animate_field.links.new(
                reroute_006_3.outputs[0], reroute_008_1.inputs[0]
            )
            return _mn_animate_field

        _mn_animate_field = _mn_animate_field_node_group()

        # initialize color_sec_struct node group
        def color_sec_struct_node_group():
            color_sec_struct = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Sec Struct"
            )

            color_sec_struct.color_tag = "COLOR"
            color_sec_struct.description = ""

            # color_sec_struct interface
            # Socket Color
            color_socket_8 = color_sec_struct.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_8.attribute_domain = "POINT"
            color_socket_8.description = "The colors based on secondary structure"

            # Socket Alpha Helix
            alpha_helix_socket = color_sec_struct.interface.new_socket(
                name="Alpha Helix", in_out="INPUT", socket_type="NodeSocketColor"
            )
            alpha_helix_socket.attribute_domain = "POINT"
            alpha_helix_socket.description = "Color to set for alpha helices"

            # Socket Beta Sheet
            beta_sheet_socket = color_sec_struct.interface.new_socket(
                name="Beta Sheet", in_out="INPUT", socket_type="NodeSocketColor"
            )
            beta_sheet_socket.attribute_domain = "POINT"
            beta_sheet_socket.description = "Color to set for beta-sheets"

            # Socket Loop
            loop_socket = color_sec_struct.interface.new_socket(
                name="Loop", in_out="INPUT", socket_type="NodeSocketColor"
            )
            loop_socket.attribute_domain = "POINT"
            loop_socket.description = "Color to set for loops"

            # initialize color_sec_struct nodes
            # node Group Output
            group_output_78 = color_sec_struct.nodes.new("NodeGroupOutput")
            group_output_78.name = "Group Output"
            group_output_78.is_active_output = True

            # node Switch.001
            switch_001_14 = color_sec_struct.nodes.new("GeometryNodeSwitch")
            switch_001_14.name = "Switch.001"
            switch_001_14.input_type = "RGBA"

            # node Switch.002
            switch_002_11 = color_sec_struct.nodes.new("GeometryNodeSwitch")
            switch_002_11.name = "Switch.002"
            switch_002_11.input_type = "RGBA"

            # node Switch
            switch_20 = color_sec_struct.nodes.new("GeometryNodeSwitch")
            switch_20.name = "Switch"
            switch_20.input_type = "RGBA"

            # node Group Input
            group_input_77 = color_sec_struct.nodes.new("NodeGroupInput")
            group_input_77.name = "Group Input"

            # node Named Attribute
            named_attribute_16 = color_sec_struct.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_16.name = "Named Attribute"
            named_attribute_16.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_16.inputs[0].default_value = "Color"

            # node Group.059
            group_059_3 = color_sec_struct.nodes.new("GeometryNodeGroup")
            group_059_3.name = "Group.059"
            group_059_3.node_tree = _mn_select_sec_struct
            # Socket_1
            group_059_3.inputs[0].default_value = True

            # Set locations
            group_output_78.location = (278.192138671875, 0.0)
            switch_001_14.location = (80.0, -140.0)
            switch_002_11.location = (80.0, -300.0)
            switch_20.location = (80.0, 20.0)
            group_input_77.location = (-240.0, -200.0)
            named_attribute_16.location = (-240.0, -60.0)
            group_059_3.location = (-240.0, 120.0)

            # Set dimensions
            group_output_78.width, group_output_78.height = 140.0, 100.0
            switch_001_14.width, switch_001_14.height = 140.0, 100.0
            switch_002_11.width, switch_002_11.height = 140.0, 100.0
            switch_20.width, switch_20.height = 140.0, 100.0
            group_input_77.width, group_input_77.height = 140.0, 100.0
            named_attribute_16.width, named_attribute_16.height = 140.0, 100.0
            group_059_3.width, group_059_3.height = 140.0, 100.0

            # initialize color_sec_struct links
            # group_059_3.Is Helix -> switch_20.Switch
            color_sec_struct.links.new(group_059_3.outputs[0], switch_20.inputs[0])
            # group_input_77.Alpha Helix -> switch_20.True
            color_sec_struct.links.new(group_input_77.outputs[0], switch_20.inputs[2])
            # switch_001_14.Output -> switch_002_11.False
            color_sec_struct.links.new(
                switch_001_14.outputs[0], switch_002_11.inputs[1]
            )
            # group_059_3.Is Sheet -> switch_001_14.Switch
            color_sec_struct.links.new(group_059_3.outputs[1], switch_001_14.inputs[0])
            # group_059_3.Is Loop -> switch_002_11.Switch
            color_sec_struct.links.new(group_059_3.outputs[3], switch_002_11.inputs[0])
            # switch_002_11.Output -> group_output_78.Color
            color_sec_struct.links.new(
                switch_002_11.outputs[0], group_output_78.inputs[0]
            )
            # switch_20.Output -> switch_001_14.False
            color_sec_struct.links.new(switch_20.outputs[0], switch_001_14.inputs[1])
            # group_input_77.Beta Sheet -> switch_001_14.True
            color_sec_struct.links.new(
                group_input_77.outputs[1], switch_001_14.inputs[2]
            )
            # group_input_77.Loop -> switch_002_11.True
            color_sec_struct.links.new(
                group_input_77.outputs[2], switch_002_11.inputs[2]
            )
            # named_attribute_16.Attribute -> switch_20.False
            color_sec_struct.links.new(
                named_attribute_16.outputs[0], switch_20.inputs[1]
            )
            return color_sec_struct

        color_sec_struct = color_sec_struct_node_group()

        # initialize color_atomic_number node group
        def color_atomic_number_node_group():
            color_atomic_number = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Atomic Number"
            )

            color_atomic_number.color_tag = "COLOR"
            color_atomic_number.description = ""

            # color_atomic_number interface
            # Socket Color
            color_socket_9 = color_atomic_number.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_9.attribute_domain = "POINT"

            # Socket atomic_number
            atomic_number_socket_2 = color_atomic_number.interface.new_socket(
                name="atomic_number", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atomic_number_socket_2.subtype = "NONE"
            atomic_number_socket_2.default_value = 6
            atomic_number_socket_2.min_value = 1
            atomic_number_socket_2.max_value = 140
            atomic_number_socket_2.attribute_domain = "POINT"

            # Socket Color
            color_socket_10 = color_atomic_number.interface.new_socket(
                name="Color", in_out="INPUT", socket_type="NodeSocketColor"
            )
            color_socket_10.attribute_domain = "POINT"

            # initialize color_atomic_number nodes
            # node Group Input
            group_input_78 = color_atomic_number.nodes.new("NodeGroupInput")
            group_input_78.name = "Group Input"

            # node Group Output
            group_output_79 = color_atomic_number.nodes.new("NodeGroupOutput")
            group_output_79.name = "Group Output"
            group_output_79.is_active_output = True

            # node Compare
            compare_22 = color_atomic_number.nodes.new("FunctionNodeCompare")
            compare_22.name = "Compare"
            compare_22.data_type = "INT"
            compare_22.mode = "ELEMENT"
            compare_22.operation = "EQUAL"

            # node Switch
            switch_21 = color_atomic_number.nodes.new("GeometryNodeSwitch")
            switch_21.name = "Switch"
            switch_21.input_type = "RGBA"

            # node Named Attribute
            named_attribute_17 = color_atomic_number.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_17.name = "Named Attribute"
            named_attribute_17.data_type = "INT"
            # Name
            named_attribute_17.inputs[0].default_value = "atomic_number"

            # node Named Attribute.001
            named_attribute_001_6 = color_atomic_number.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_6.name = "Named Attribute.001"
            named_attribute_001_6.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_001_6.inputs[0].default_value = "Color"

            # Set locations
            group_input_78.location = (-360.0, -120.0)
            group_output_79.location = (160.0, 0.0)
            compare_22.location = (-200.0, 0.0)
            switch_21.location = (-5.954658508300781, 130.74545288085938)
            named_attribute_17.location = (-360.0, 0.0)
            named_attribute_001_6.location = (-360.0, 140.0)

            # Set dimensions
            group_input_78.width, group_input_78.height = 140.0, 100.0
            group_output_79.width, group_output_79.height = 140.0, 100.0
            compare_22.width, compare_22.height = 140.0, 100.0
            switch_21.width, switch_21.height = 140.0, 100.0
            named_attribute_17.width, named_attribute_17.height = 140.0, 100.0
            named_attribute_001_6.width, named_attribute_001_6.height = 140.0, 100.0

            # initialize color_atomic_number links
            # named_attribute_17.Attribute -> compare_22.A
            color_atomic_number.links.new(
                named_attribute_17.outputs[0], compare_22.inputs[2]
            )
            # group_input_78.atomic_number -> compare_22.B
            color_atomic_number.links.new(
                group_input_78.outputs[0], compare_22.inputs[3]
            )
            # compare_22.Result -> switch_21.Switch
            color_atomic_number.links.new(compare_22.outputs[0], switch_21.inputs[0])
            # group_input_78.Color -> switch_21.True
            color_atomic_number.links.new(
                group_input_78.outputs[1], switch_21.inputs[2]
            )
            # switch_21.Output -> group_output_79.Color
            color_atomic_number.links.new(
                switch_21.outputs[0], group_output_79.inputs[0]
            )
            # named_attribute_001_6.Attribute -> switch_21.False
            color_atomic_number.links.new(
                named_attribute_001_6.outputs[0], switch_21.inputs[1]
            )
            return color_atomic_number

        color_atomic_number = color_atomic_number_node_group()

        # initialize set_color node group
        def set_color_node_group():
            set_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Set Color"
            )

            set_color.color_tag = "GEOMETRY"
            set_color.description = ""

            set_color.is_modifier = True

            # set_color interface
            # Socket Atoms
            atoms_socket_16 = set_color.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_16.attribute_domain = "POINT"
            atoms_socket_16.description = (
                "Atomic geometry with an updated `Color` attribute"
            )

            # Socket Atoms
            atoms_socket_17 = set_color.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_17.attribute_domain = "POINT"
            atoms_socket_17.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_28 = set_color.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_28.attribute_domain = "POINT"
            selection_socket_28.hide_value = True
            selection_socket_28.description = "Selection of atoms to apply this node to"

            # Socket Color
            color_socket_11 = set_color.interface.new_socket(
                name="Color", in_out="INPUT", socket_type="NodeSocketColor"
            )
            color_socket_11.attribute_domain = "POINT"
            color_socket_11.description = "Color to apply to the selected atoms"

            # initialize set_color nodes
            # node Group Input
            group_input_79 = set_color.nodes.new("NodeGroupInput")
            group_input_79.name = "Group Input"

            # node Store Named Attribute
            store_named_attribute_7 = set_color.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_7.name = "Store Named Attribute"
            store_named_attribute_7.data_type = "FLOAT_COLOR"
            store_named_attribute_7.domain = "POINT"
            # Name
            store_named_attribute_7.inputs[2].default_value = "Color"

            # node Group Output
            group_output_80 = set_color.nodes.new("NodeGroupOutput")
            group_output_80.name = "Group Output"
            group_output_80.is_active_output = True

            # Set locations
            group_input_79.location = (-460.0, -80.0)
            store_named_attribute_7.location = (-260.0, -20.0)
            group_output_80.location = (-100.0, -20.0)

            # Set dimensions
            group_input_79.width, group_input_79.height = 140.0, 100.0
            store_named_attribute_7.width, store_named_attribute_7.height = 140.0, 100.0
            group_output_80.width, group_output_80.height = 140.0, 100.0

            # initialize set_color links
            # store_named_attribute_7.Geometry -> group_output_80.Atoms
            set_color.links.new(
                store_named_attribute_7.outputs[0], group_output_80.inputs[0]
            )
            # group_input_79.Atoms -> store_named_attribute_7.Geometry
            set_color.links.new(
                group_input_79.outputs[0], store_named_attribute_7.inputs[0]
            )
            # group_input_79.Selection -> store_named_attribute_7.Selection
            set_color.links.new(
                group_input_79.outputs[1], store_named_attribute_7.inputs[1]
            )
            # group_input_79.Color -> store_named_attribute_7.Value
            set_color.links.new(
                group_input_79.outputs[2], store_named_attribute_7.inputs[3]
            )
            return set_color

        set_color = set_color_node_group()

        # initialize color_attribute_random node group
        def color_attribute_random_node_group():
            color_attribute_random = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Attribute Random"
            )

            color_attribute_random.color_tag = "COLOR"
            color_attribute_random.description = ""

            # color_attribute_random interface
            # Socket Color
            color_socket_12 = color_attribute_random.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_12.attribute_domain = "POINT"
            color_socket_12.description = (
                "The randomly generated color based on the input attribute"
            )

            # Socket Name
            name_socket_2 = color_attribute_random.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_2.attribute_domain = "POINT"
            name_socket_2.description = (
                "Attribute to base the random color generation on "
            )

            # Panel Color
            color_panel = color_attribute_random.interface.new_panel(
                "Color", default_closed=True
            )
            # Socket Color Saturation
            color_saturation_socket = color_attribute_random.interface.new_socket(
                name="Color Saturation",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=color_panel,
            )
            color_saturation_socket.subtype = "FACTOR"
            color_saturation_socket.default_value = 0.6000000238418579
            color_saturation_socket.min_value = 0.0
            color_saturation_socket.max_value = 1.0
            color_saturation_socket.attribute_domain = "POINT"
            color_saturation_socket.description = (
                "Saturlation level for the random color"
            )

            # Socket Color Lightness
            color_lightness_socket = color_attribute_random.interface.new_socket(
                name="Color Lightness",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=color_panel,
            )
            color_lightness_socket.subtype = "FACTOR"
            color_lightness_socket.default_value = 0.6000000238418579
            color_lightness_socket.min_value = 0.0
            color_lightness_socket.max_value = 1.0
            color_lightness_socket.attribute_domain = "POINT"
            color_lightness_socket.description = (
                "Lightness value for the generated random color"
            )

            # Socket Color Seed
            color_seed_socket = color_attribute_random.interface.new_socket(
                name="Color Seed",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=color_panel,
            )
            color_seed_socket.subtype = "NONE"
            color_seed_socket.default_value = 0
            color_seed_socket.min_value = -10000
            color_seed_socket.max_value = 10000
            color_seed_socket.attribute_domain = "POINT"
            color_seed_socket.description = (
                "Seed value for the random generation of the colors"
            )

            # initialize color_attribute_random nodes
            # node Group Output
            group_output_81 = color_attribute_random.nodes.new("NodeGroupOutput")
            group_output_81.name = "Group Output"
            group_output_81.is_active_output = True

            # node Combine Color
            combine_color = color_attribute_random.nodes.new("FunctionNodeCombineColor")
            combine_color.name = "Combine Color"
            combine_color.mode = "HSL"
            # Alpha
            combine_color.inputs[3].default_value = 1.0

            # node Named Attribute
            named_attribute_18 = color_attribute_random.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_18.name = "Named Attribute"
            named_attribute_18.data_type = "INT"

            # node Random Value
            random_value_1 = color_attribute_random.nodes.new("FunctionNodeRandomValue")
            random_value_1.name = "Random Value"
            random_value_1.data_type = "FLOAT"
            # Min_001
            random_value_1.inputs[2].default_value = 0.0
            # Max_001
            random_value_1.inputs[3].default_value = 1.0

            # node Group Input
            group_input_80 = color_attribute_random.nodes.new("NodeGroupInput")
            group_input_80.name = "Group Input"

            # node Math
            math_17 = color_attribute_random.nodes.new("ShaderNodeMath")
            math_17.name = "Math"
            math_17.operation = "ADD"
            math_17.use_clamp = False

            # node Integer
            integer_6 = color_attribute_random.nodes.new("FunctionNodeInputInt")
            integer_6.name = "Integer"
            integer_6.integer = 6

            # Set locations
            group_output_81.location = (272.6910400390625, 0.0)
            combine_color.location = (100.0, 0.0)
            named_attribute_18.location = (-220.0, 0.0)
            random_value_1.location = (-60.0, 0.0)
            group_input_80.location = (-400.0, -80.0)
            math_17.location = (-220.0, -180.0)
            integer_6.location = (-400.0, -280.0)

            # Set dimensions
            group_output_81.width, group_output_81.height = 140.0, 100.0
            combine_color.width, combine_color.height = 140.0, 100.0
            named_attribute_18.width, named_attribute_18.height = 140.0, 100.0
            random_value_1.width, random_value_1.height = 140.0, 100.0
            group_input_80.width, group_input_80.height = 140.0, 100.0
            math_17.width, math_17.height = 140.0, 100.0
            integer_6.width, integer_6.height = 140.0, 100.0

            # initialize color_attribute_random links
            # random_value_1.Value -> combine_color.Red
            color_attribute_random.links.new(
                random_value_1.outputs[1], combine_color.inputs[0]
            )
            # named_attribute_18.Attribute -> random_value_1.ID
            color_attribute_random.links.new(
                named_attribute_18.outputs[0], random_value_1.inputs[7]
            )
            # group_input_80.Name -> named_attribute_18.Name
            color_attribute_random.links.new(
                group_input_80.outputs[0], named_attribute_18.inputs[0]
            )
            # combine_color.Color -> group_output_81.Color
            color_attribute_random.links.new(
                combine_color.outputs[0], group_output_81.inputs[0]
            )
            # group_input_80.Color Saturation -> combine_color.Green
            color_attribute_random.links.new(
                group_input_80.outputs[1], combine_color.inputs[1]
            )
            # group_input_80.Color Lightness -> combine_color.Blue
            color_attribute_random.links.new(
                group_input_80.outputs[2], combine_color.inputs[2]
            )
            # group_input_80.Color Seed -> math_17.Value
            color_attribute_random.links.new(
                group_input_80.outputs[3], math_17.inputs[0]
            )
            # math_17.Value -> random_value_1.Seed
            color_attribute_random.links.new(
                math_17.outputs[0], random_value_1.inputs[8]
            )
            # integer_6.Integer -> math_17.Value
            color_attribute_random.links.new(integer_6.outputs[0], math_17.inputs[1])
            return color_attribute_random

        color_attribute_random = color_attribute_random_node_group()

        # initialize color_attribute_map node group
        def color_attribute_map_node_group():
            color_attribute_map = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Attribute Map"
            )

            color_attribute_map.color_tag = "COLOR"
            color_attribute_map.description = ""

            # color_attribute_map interface
            # Socket Color
            color_socket_13 = color_attribute_map.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_13.attribute_domain = "POINT"
            color_socket_13.description = (
                "The mapped color value based on the attribute."
            )

            # Panel Attribute
            attribute_panel = color_attribute_map.interface.new_panel("Attribute")
            # Socket Attribute Name
            attribute_name_socket = color_attribute_map.interface.new_socket(
                name="Attribute Name",
                in_out="INPUT",
                socket_type="NodeSocketString",
                parent=attribute_panel,
            )
            attribute_name_socket.attribute_domain = "POINT"
            attribute_name_socket.description = "Name of the attribute to map colors to"

            # Socket Attribute Min
            attribute_min_socket = color_attribute_map.interface.new_socket(
                name="Attribute Min",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=attribute_panel,
            )
            attribute_min_socket.subtype = "NONE"
            attribute_min_socket.default_value = 0.0
            attribute_min_socket.min_value = -10000.0
            attribute_min_socket.max_value = 10000.0
            attribute_min_socket.attribute_domain = "POINT"
            attribute_min_socket.description = (
                "Value for the attribute to be the minimum color"
            )

            # Socket Attribute Max
            attribute_max_socket = color_attribute_map.interface.new_socket(
                name="Attribute Max",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=attribute_panel,
            )
            attribute_max_socket.subtype = "NONE"
            attribute_max_socket.default_value = 150.0
            attribute_max_socket.min_value = -10000.0
            attribute_max_socket.max_value = 10000.0
            attribute_max_socket.attribute_domain = "POINT"
            attribute_max_socket.description = (
                "Value for the attribute to be the maxium color"
            )

            # Panel Color
            color_panel_1 = color_attribute_map.interface.new_panel("Color")
            # Socket Color Use Mid
            color_use_mid_socket = color_attribute_map.interface.new_socket(
                name="Color Use Mid",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=color_panel_1,
            )
            color_use_mid_socket.attribute_domain = "POINT"
            color_use_mid_socket.description = (
                "Wheter to interpolate through the 'Mid' color."
            )

            # Socket Color Min
            color_min_socket = color_attribute_map.interface.new_socket(
                name="Color Min",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=color_panel_1,
            )
            color_min_socket.attribute_domain = "POINT"
            color_min_socket.description = (
                "Color mapped to the minimum value of the attribute"
            )

            # Socket Color Mid
            color_mid_socket = color_attribute_map.interface.new_socket(
                name="Color Mid",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=color_panel_1,
            )
            color_mid_socket.attribute_domain = "POINT"
            color_mid_socket.description = (
                "Color mapped to the middle value of the attribute"
            )

            # Socket Color Max
            color_max_socket = color_attribute_map.interface.new_socket(
                name="Color Max",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=color_panel_1,
            )
            color_max_socket.attribute_domain = "POINT"
            color_max_socket.description = (
                "Color mapped t othe maximum value of the attribute"
            )

            # initialize color_attribute_map nodes
            # node Named Attribute.001
            named_attribute_001_7 = color_attribute_map.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_7.name = "Named Attribute.001"
            named_attribute_001_7.data_type = "FLOAT"

            # node Map Range
            map_range_5 = color_attribute_map.nodes.new("ShaderNodeMapRange")
            map_range_5.name = "Map Range"
            map_range_5.clamp = True
            map_range_5.data_type = "FLOAT"
            map_range_5.interpolation_type = "LINEAR"
            # To Min
            map_range_5.inputs[3].default_value = 0.0
            # To Max
            map_range_5.inputs[4].default_value = 1.0

            # node Group Output
            group_output_82 = color_attribute_map.nodes.new("NodeGroupOutput")
            group_output_82.name = "Group Output"
            group_output_82.is_active_output = True

            # node Switch
            switch_22 = color_attribute_map.nodes.new("GeometryNodeSwitch")
            switch_22.name = "Switch"
            switch_22.input_type = "RGBA"

            # node Group Input
            group_input_81 = color_attribute_map.nodes.new("NodeGroupInput")
            group_input_81.name = "Group Input"

            # node Mix.001
            mix_001_1 = color_attribute_map.nodes.new("ShaderNodeMix")
            mix_001_1.name = "Mix.001"
            mix_001_1.blend_type = "MIX"
            mix_001_1.clamp_factor = True
            mix_001_1.clamp_result = False
            mix_001_1.data_type = "RGBA"
            mix_001_1.factor_mode = "UNIFORM"

            # node Mix
            mix_2 = color_attribute_map.nodes.new("ShaderNodeMix")
            mix_2.name = "Mix"
            mix_2.blend_type = "MIX"
            mix_2.clamp_factor = True
            mix_2.clamp_result = False
            mix_2.data_type = "RGBA"
            mix_2.factor_mode = "UNIFORM"

            # node Mix.002
            mix_002_1 = color_attribute_map.nodes.new("ShaderNodeMix")
            mix_002_1.name = "Mix.002"
            mix_002_1.blend_type = "MIX"
            mix_002_1.clamp_factor = True
            mix_002_1.clamp_result = False
            mix_002_1.data_type = "RGBA"
            mix_002_1.factor_mode = "UNIFORM"

            # node Mix.003
            mix_003 = color_attribute_map.nodes.new("ShaderNodeMix")
            mix_003.name = "Mix.003"
            mix_003.blend_type = "MIX"
            mix_003.clamp_factor = True
            mix_003.clamp_result = False
            mix_003.data_type = "RGBA"
            mix_003.factor_mode = "UNIFORM"

            # Set locations
            named_attribute_001_7.location = (-271.3536376953125, 110.04327392578125)
            map_range_5.location = (-111.3536376953125, 110.04327392578125)
            group_output_82.location = (743.28857421875, 6.896442890167236)
            switch_22.location = (480.0, 60.0)
            group_input_81.location = (-440.0, -60.0)
            mix_001_1.location = (100.0, -120.0)
            mix_2.location = (100.0, 120.0)
            mix_002_1.location = (260.0, 120.0)
            mix_003.location = (260.0, -120.0)

            # Set dimensions
            named_attribute_001_7.width, named_attribute_001_7.height = 140.0, 100.0
            map_range_5.width, map_range_5.height = 140.0, 100.0
            group_output_82.width, group_output_82.height = 140.0, 100.0
            switch_22.width, switch_22.height = 140.0, 100.0
            group_input_81.width, group_input_81.height = 140.0, 100.0
            mix_001_1.width, mix_001_1.height = 140.0, 100.0
            mix_2.width, mix_2.height = 140.0, 100.0
            mix_002_1.width, mix_002_1.height = 140.0, 100.0
            mix_003.width, mix_003.height = 140.0, 100.0

            # initialize color_attribute_map links
            # map_range_5.Result -> mix_001_1.Factor
            color_attribute_map.links.new(map_range_5.outputs[0], mix_001_1.inputs[0])
            # named_attribute_001_7.Attribute -> map_range_5.Value
            color_attribute_map.links.new(
                named_attribute_001_7.outputs[0], map_range_5.inputs[0]
            )
            # mix_2.Result -> mix_002_1.A
            color_attribute_map.links.new(mix_2.outputs[2], mix_002_1.inputs[6])
            # mix_001_1.Result -> mix_002_1.B
            color_attribute_map.links.new(mix_001_1.outputs[2], mix_002_1.inputs[7])
            # map_range_5.Result -> mix_002_1.Factor
            color_attribute_map.links.new(map_range_5.outputs[0], mix_002_1.inputs[0])
            # map_range_5.Result -> mix_2.Factor
            color_attribute_map.links.new(map_range_5.outputs[0], mix_2.inputs[0])
            # group_input_81.Color Min -> mix_2.A
            color_attribute_map.links.new(group_input_81.outputs[4], mix_2.inputs[6])
            # group_input_81.Color Mid -> mix_2.B
            color_attribute_map.links.new(group_input_81.outputs[5], mix_2.inputs[7])
            # group_input_81.Color Max -> mix_001_1.B
            color_attribute_map.links.new(
                group_input_81.outputs[6], mix_001_1.inputs[7]
            )
            # group_input_81.Attribute Min -> map_range_5.From Min
            color_attribute_map.links.new(
                group_input_81.outputs[1], map_range_5.inputs[1]
            )
            # group_input_81.Attribute Max -> map_range_5.From Max
            color_attribute_map.links.new(
                group_input_81.outputs[2], map_range_5.inputs[2]
            )
            # group_input_81.Color Mid -> mix_001_1.A
            color_attribute_map.links.new(
                group_input_81.outputs[5], mix_001_1.inputs[6]
            )
            # group_input_81.Attribute Name -> named_attribute_001_7.Name
            color_attribute_map.links.new(
                group_input_81.outputs[0], named_attribute_001_7.inputs[0]
            )
            # map_range_5.Result -> mix_003.Factor
            color_attribute_map.links.new(map_range_5.outputs[0], mix_003.inputs[0])
            # mix_002_1.Result -> switch_22.True
            color_attribute_map.links.new(mix_002_1.outputs[2], switch_22.inputs[2])
            # mix_003.Result -> switch_22.False
            color_attribute_map.links.new(mix_003.outputs[2], switch_22.inputs[1])
            # switch_22.Output -> group_output_82.Color
            color_attribute_map.links.new(
                switch_22.outputs[0], group_output_82.inputs[0]
            )
            # group_input_81.Color Use Mid -> switch_22.Switch
            color_attribute_map.links.new(
                group_input_81.outputs[3], switch_22.inputs[0]
            )
            # group_input_81.Color Min -> mix_003.A
            color_attribute_map.links.new(group_input_81.outputs[4], mix_003.inputs[6])
            # group_input_81.Color Max -> mix_003.B
            color_attribute_map.links.new(group_input_81.outputs[6], mix_003.inputs[7])
            return color_attribute_map

        color_attribute_map = color_attribute_map_node_group()

        # initialize _utils_group_field_at_selection node group
        def _utils_group_field_at_selection_node_group():
            _utils_group_field_at_selection = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".utils_group_field_at_selection"
            )

            _utils_group_field_at_selection.color_tag = "NONE"
            _utils_group_field_at_selection.description = ""

            # _utils_group_field_at_selection interface
            # Socket Group Index
            group_index_socket = _utils_group_field_at_selection.interface.new_socket(
                name="Group Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            group_index_socket.subtype = "NONE"
            group_index_socket.default_value = 0
            group_index_socket.min_value = -2147483648
            group_index_socket.max_value = 2147483647
            group_index_socket.attribute_domain = "POINT"

            # Socket Float
            float_socket_1 = _utils_group_field_at_selection.interface.new_socket(
                name="Float", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            float_socket_1.subtype = "NONE"
            float_socket_1.default_value = 0.0
            float_socket_1.min_value = -3.4028234663852886e38
            float_socket_1.max_value = 3.4028234663852886e38
            float_socket_1.attribute_domain = "POINT"

            # Socket Vector
            vector_socket_5 = _utils_group_field_at_selection.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket_5.subtype = "NONE"
            vector_socket_5.default_value = (0.0, 0.0, 0.0)
            vector_socket_5.min_value = -3.4028234663852886e38
            vector_socket_5.max_value = 3.4028234663852886e38
            vector_socket_5.attribute_domain = "POINT"

            # Socket Boolean
            boolean_socket_2 = _utils_group_field_at_selection.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_2.attribute_domain = "POINT"

            # Socket Color
            color_socket_14 = _utils_group_field_at_selection.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_14.attribute_domain = "POINT"

            # Socket Integer
            integer_socket = _utils_group_field_at_selection.interface.new_socket(
                name="Integer", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            integer_socket.subtype = "NONE"
            integer_socket.default_value = 0
            integer_socket.min_value = -2147483648
            integer_socket.max_value = 2147483647
            integer_socket.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_29 = _utils_group_field_at_selection.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_29.attribute_domain = "POINT"
            selection_socket_29.description = "Selection of atoms to apply this node to"

            # Socket Group Index
            group_index_socket_1 = _utils_group_field_at_selection.interface.new_socket(
                name="Group Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_index_socket_1.subtype = "NONE"
            group_index_socket_1.default_value = 0
            group_index_socket_1.min_value = -2147483648
            group_index_socket_1.max_value = 2147483647
            group_index_socket_1.attribute_domain = "POINT"

            # Socket Float
            float_socket_2 = _utils_group_field_at_selection.interface.new_socket(
                name="Float", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            float_socket_2.subtype = "NONE"
            float_socket_2.default_value = 0.0
            float_socket_2.min_value = -3.4028234663852886e38
            float_socket_2.max_value = 3.4028234663852886e38
            float_socket_2.attribute_domain = "POINT"
            float_socket_2.hide_value = True

            # Socket Vector
            vector_socket_6 = _utils_group_field_at_selection.interface.new_socket(
                name="Vector", in_out="INPUT", socket_type="NodeSocketVector"
            )
            vector_socket_6.subtype = "NONE"
            vector_socket_6.default_value = (0.0, 0.0, 0.0)
            vector_socket_6.min_value = -3.4028234663852886e38
            vector_socket_6.max_value = 3.4028234663852886e38
            vector_socket_6.attribute_domain = "POINT"
            vector_socket_6.hide_value = True

            # Socket Boolean
            boolean_socket_3 = _utils_group_field_at_selection.interface.new_socket(
                name="Boolean", in_out="INPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_3.attribute_domain = "POINT"
            boolean_socket_3.hide_value = True

            # Socket Color
            color_socket_15 = _utils_group_field_at_selection.interface.new_socket(
                name="Color", in_out="INPUT", socket_type="NodeSocketColor"
            )
            color_socket_15.attribute_domain = "POINT"
            color_socket_15.hide_value = True

            # Socket Integer
            integer_socket_1 = _utils_group_field_at_selection.interface.new_socket(
                name="Integer", in_out="INPUT", socket_type="NodeSocketInt"
            )
            integer_socket_1.subtype = "NONE"
            integer_socket_1.default_value = 0
            integer_socket_1.min_value = -2147483648
            integer_socket_1.max_value = 2147483647
            integer_socket_1.attribute_domain = "POINT"
            integer_socket_1.hide_value = True

            # initialize _utils_group_field_at_selection nodes
            # node Switch.006
            switch_006 = _utils_group_field_at_selection.nodes.new("GeometryNodeSwitch")
            switch_006.name = "Switch.006"
            switch_006.input_type = "INT"
            # False
            switch_006.inputs[1].default_value = 0

            # node Accumulate Field.002
            accumulate_field_002_2 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_002_2.name = "Accumulate Field.002"
            accumulate_field_002_2.data_type = "INT"
            accumulate_field_002_2.domain = "POINT"

            # node Index
            index_10 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeInputIndex"
            )
            index_10.name = "Index"

            # node Group Output
            group_output_83 = _utils_group_field_at_selection.nodes.new(
                "NodeGroupOutput"
            )
            group_output_83.name = "Group Output"
            group_output_83.is_active_output = True

            # node Field at Index
            field_at_index_3 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_3.name = "Field at Index"
            field_at_index_3.data_type = "FLOAT"
            field_at_index_3.domain = "POINT"

            # node Field at Index.001
            field_at_index_001_1 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_001_1.name = "Field at Index.001"
            field_at_index_001_1.data_type = "FLOAT_VECTOR"
            field_at_index_001_1.domain = "POINT"

            # node Field at Index.002
            field_at_index_002 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_002.name = "Field at Index.002"
            field_at_index_002.data_type = "BOOLEAN"
            field_at_index_002.domain = "POINT"

            # node Field at Index.003
            field_at_index_003 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_003.name = "Field at Index.003"
            field_at_index_003.data_type = "FLOAT_COLOR"
            field_at_index_003.domain = "POINT"

            # node Group Input
            group_input_82 = _utils_group_field_at_selection.nodes.new("NodeGroupInput")
            group_input_82.name = "Group Input"

            # node Field at Index.004
            field_at_index_004 = _utils_group_field_at_selection.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_004.name = "Field at Index.004"
            field_at_index_004.data_type = "INT"
            field_at_index_004.domain = "POINT"

            # Set locations
            switch_006.location = (-80.0, 80.0)
            accumulate_field_002_2.location = (80.0, 80.0)
            index_10.location = (-80.0, -80.0)
            group_output_83.location = (477.87579345703125, 6.6051177978515625)
            field_at_index_3.location = (280.0, -20.0)
            field_at_index_001_1.location = (280.0, -180.0)
            field_at_index_002.location = (280.0, -340.0)
            field_at_index_003.location = (280.0, -500.0)
            group_input_82.location = (-280.0, -0.0)
            field_at_index_004.location = (280.0, -660.0)

            # Set dimensions
            switch_006.width, switch_006.height = 140.0, 100.0
            accumulate_field_002_2.width, accumulate_field_002_2.height = 140.0, 100.0
            index_10.width, index_10.height = 140.0, 100.0
            group_output_83.width, group_output_83.height = 140.0, 100.0
            field_at_index_3.width, field_at_index_3.height = 140.0, 100.0
            field_at_index_001_1.width, field_at_index_001_1.height = 140.0, 100.0
            field_at_index_002.width, field_at_index_002.height = 140.0, 100.0
            field_at_index_003.width, field_at_index_003.height = 140.0, 100.0
            group_input_82.width, group_input_82.height = 140.0, 100.0
            field_at_index_004.width, field_at_index_004.height = 140.0, 100.0

            # initialize _utils_group_field_at_selection links
            # group_input_82.Selection -> switch_006.Switch
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[0], switch_006.inputs[0]
            )
            # accumulate_field_002_2.Total -> group_output_83.Group Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], group_output_83.inputs[0]
            )
            # group_input_82.Group Index -> accumulate_field_002_2.Group ID
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[1], accumulate_field_002_2.inputs[1]
            )
            # index_10.Index -> switch_006.True
            _utils_group_field_at_selection.links.new(
                index_10.outputs[0], switch_006.inputs[2]
            )
            # switch_006.Output -> accumulate_field_002_2.Value
            _utils_group_field_at_selection.links.new(
                switch_006.outputs[0], accumulate_field_002_2.inputs[0]
            )
            # accumulate_field_002_2.Total -> field_at_index_3.Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], field_at_index_3.inputs[0]
            )
            # group_input_82.Float -> field_at_index_3.Value
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[2], field_at_index_3.inputs[1]
            )
            # field_at_index_3.Value -> group_output_83.Float
            _utils_group_field_at_selection.links.new(
                field_at_index_3.outputs[0], group_output_83.inputs[1]
            )
            # accumulate_field_002_2.Total -> field_at_index_001_1.Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], field_at_index_001_1.inputs[0]
            )
            # group_input_82.Vector -> field_at_index_001_1.Value
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[3], field_at_index_001_1.inputs[1]
            )
            # field_at_index_001_1.Value -> group_output_83.Vector
            _utils_group_field_at_selection.links.new(
                field_at_index_001_1.outputs[0], group_output_83.inputs[2]
            )
            # accumulate_field_002_2.Total -> field_at_index_002.Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], field_at_index_002.inputs[0]
            )
            # group_input_82.Boolean -> field_at_index_002.Value
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[4], field_at_index_002.inputs[1]
            )
            # field_at_index_002.Value -> group_output_83.Boolean
            _utils_group_field_at_selection.links.new(
                field_at_index_002.outputs[0], group_output_83.inputs[3]
            )
            # accumulate_field_002_2.Total -> field_at_index_003.Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], field_at_index_003.inputs[0]
            )
            # group_input_82.Color -> field_at_index_003.Value
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[5], field_at_index_003.inputs[1]
            )
            # field_at_index_003.Value -> group_output_83.Color
            _utils_group_field_at_selection.links.new(
                field_at_index_003.outputs[0], group_output_83.inputs[4]
            )
            # accumulate_field_002_2.Total -> field_at_index_004.Index
            _utils_group_field_at_selection.links.new(
                accumulate_field_002_2.outputs[2], field_at_index_004.inputs[0]
            )
            # group_input_82.Integer -> field_at_index_004.Value
            _utils_group_field_at_selection.links.new(
                group_input_82.outputs[6], field_at_index_004.inputs[1]
            )
            # field_at_index_004.Value -> group_output_83.Integer
            _utils_group_field_at_selection.links.new(
                field_at_index_004.outputs[0], group_output_83.inputs[5]
            )
            return _utils_group_field_at_selection

        _utils_group_field_at_selection = _utils_group_field_at_selection_node_group()

        # initialize _mn_utils_aa_atom_pos node group
        def _mn_utils_aa_atom_pos_node_group():
            _mn_utils_aa_atom_pos = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_aa_atom_pos"
            )

            _mn_utils_aa_atom_pos.color_tag = "NONE"
            _mn_utils_aa_atom_pos.description = ""

            # _mn_utils_aa_atom_pos interface
            # Socket Position
            position_socket_4 = _mn_utils_aa_atom_pos.interface.new_socket(
                name="Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            position_socket_4.subtype = "NONE"
            position_socket_4.default_value = (0.0, 0.0, 0.0)
            position_socket_4.min_value = -3.4028234663852886e38
            position_socket_4.max_value = 3.4028234663852886e38
            position_socket_4.attribute_domain = "POINT"

            # Socket Group Index
            group_index_socket_2 = _mn_utils_aa_atom_pos.interface.new_socket(
                name="Group Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            group_index_socket_2.subtype = "NONE"
            group_index_socket_2.default_value = 0
            group_index_socket_2.min_value = -2147483648
            group_index_socket_2.max_value = 2147483647
            group_index_socket_2.attribute_domain = "POINT"

            # Socket b_factor
            b_factor_socket_1 = _mn_utils_aa_atom_pos.interface.new_socket(
                name="b_factor", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            b_factor_socket_1.subtype = "NONE"
            b_factor_socket_1.default_value = 0.0
            b_factor_socket_1.min_value = -3.4028234663852886e38
            b_factor_socket_1.max_value = 3.4028234663852886e38
            b_factor_socket_1.attribute_domain = "POINT"

            # Socket Integer
            integer_socket_2 = _mn_utils_aa_atom_pos.interface.new_socket(
                name="Integer", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            integer_socket_2.subtype = "NONE"
            integer_socket_2.default_value = 0
            integer_socket_2.min_value = -2147483648
            integer_socket_2.max_value = 2147483647
            integer_socket_2.attribute_domain = "POINT"

            # Socket atom_name
            atom_name_socket_1 = _mn_utils_aa_atom_pos.interface.new_socket(
                name="atom_name", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atom_name_socket_1.subtype = "NONE"
            atom_name_socket_1.default_value = 5
            atom_name_socket_1.min_value = -2147483648
            atom_name_socket_1.max_value = 2147483647
            atom_name_socket_1.attribute_domain = "POINT"

            # initialize _mn_utils_aa_atom_pos nodes
            # node Frame
            frame_9 = _mn_utils_aa_atom_pos.nodes.new("NodeFrame")
            frame_9.label = "If atom_name is 0, return midpoint of backbone N and C"
            frame_9.name = "Frame"
            frame_9.label_size = 20
            frame_9.shrink = True

            # node Group Input
            group_input_83 = _mn_utils_aa_atom_pos.nodes.new("NodeGroupInput")
            group_input_83.name = "Group Input"

            # node Named Attribute
            named_attribute_19 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_19.name = "Named Attribute"
            named_attribute_19.data_type = "INT"
            # Name
            named_attribute_19.inputs[0].default_value = "atom_name"

            # node Compare.002
            compare_002_7 = _mn_utils_aa_atom_pos.nodes.new("FunctionNodeCompare")
            compare_002_7.name = "Compare.002"
            compare_002_7.data_type = "INT"
            compare_002_7.mode = "ELEMENT"
            compare_002_7.operation = "EQUAL"
            # B_INT
            compare_002_7.inputs[3].default_value = 1

            # node Compare
            compare_23 = _mn_utils_aa_atom_pos.nodes.new("FunctionNodeCompare")
            compare_23.name = "Compare"
            compare_23.hide = True
            compare_23.data_type = "INT"
            compare_23.mode = "ELEMENT"
            compare_23.operation = "EQUAL"

            # node Named Attribute.001
            named_attribute_001_8 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_8.label = "b_factor"
            named_attribute_001_8.name = "Named Attribute.001"
            named_attribute_001_8.hide = True
            named_attribute_001_8.data_type = "FLOAT"
            # Name
            named_attribute_001_8.inputs[0].default_value = "b_factor"

            # node Position.001
            position_001_2 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_2.name = "Position.001"

            # node Reroute
            reroute_19 = _mn_utils_aa_atom_pos.nodes.new("NodeReroute")
            reroute_19.name = "Reroute"
            # node Position.002
            position_002_3 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_3.name = "Position.002"

            # node Compare.001
            compare_001_10 = _mn_utils_aa_atom_pos.nodes.new("FunctionNodeCompare")
            compare_001_10.name = "Compare.001"
            compare_001_10.data_type = "INT"
            compare_001_10.mode = "ELEMENT"
            compare_001_10.operation = "EQUAL"
            # B_INT
            compare_001_10.inputs[3].default_value = 3

            # node Compare.003
            compare_003_6 = _mn_utils_aa_atom_pos.nodes.new("FunctionNodeCompare")
            compare_003_6.name = "Compare.003"
            compare_003_6.data_type = "INT"
            compare_003_6.mode = "ELEMENT"
            compare_003_6.operation = "EQUAL"
            # B_INT
            compare_003_6.inputs[3].default_value = 1

            # node Switch.005
            switch_005_2 = _mn_utils_aa_atom_pos.nodes.new("GeometryNodeSwitch")
            switch_005_2.name = "Switch.005"
            switch_005_2.input_type = "VECTOR"

            # node Compare.004
            compare_004_4 = _mn_utils_aa_atom_pos.nodes.new("FunctionNodeCompare")
            compare_004_4.name = "Compare.004"
            compare_004_4.data_type = "INT"
            compare_004_4.mode = "ELEMENT"
            compare_004_4.operation = "NOT_EQUAL"
            # B_INT
            compare_004_4.inputs[3].default_value = 0

            # node Mix
            mix_3 = _mn_utils_aa_atom_pos.nodes.new("ShaderNodeMix")
            mix_3.name = "Mix"
            mix_3.blend_type = "MIX"
            mix_3.clamp_factor = True
            mix_3.clamp_result = False
            mix_3.data_type = "VECTOR"
            mix_3.factor_mode = "UNIFORM"
            # Factor_Float
            mix_3.inputs[0].default_value = 0.5

            # node Index
            index_11 = _mn_utils_aa_atom_pos.nodes.new("GeometryNodeInputIndex")
            index_11.name = "Index"

            # node Edges of Vertex
            edges_of_vertex_1 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeEdgesOfVertex"
            )
            edges_of_vertex_1.name = "Edges of Vertex"
            # Weights
            edges_of_vertex_1.inputs[1].default_value = 0.0
            # Sort Index
            edges_of_vertex_1.inputs[2].default_value = 0

            # node Group.002
            group_002_7 = _mn_utils_aa_atom_pos.nodes.new("GeometryNodeGroup")
            group_002_7.name = "Group.002"
            group_002_7.node_tree = _utils_group_field_at_selection
            group_002_7.inputs[2].hide = True
            group_002_7.inputs[4].hide = True
            group_002_7.inputs[5].hide = True
            group_002_7.inputs[6].hide = True
            group_002_7.outputs[0].hide = True
            group_002_7.outputs[1].hide = True
            group_002_7.outputs[3].hide = True
            group_002_7.outputs[4].hide = True
            group_002_7.outputs[5].hide = True
            # Input_3
            group_002_7.inputs[2].default_value = 0.0
            # Input_7
            group_002_7.inputs[4].default_value = False
            # Input_9
            group_002_7.inputs[5].default_value = (0.0, 0.0, 0.0, 0.0)
            # Input_11
            group_002_7.inputs[6].default_value = 0

            # node Group.001
            group_001_15 = _mn_utils_aa_atom_pos.nodes.new("GeometryNodeGroup")
            group_001_15.name = "Group.001"
            group_001_15.node_tree = _utils_group_field_at_selection
            group_001_15.inputs[2].hide = True
            group_001_15.inputs[4].hide = True
            group_001_15.inputs[5].hide = True
            group_001_15.inputs[6].hide = True
            group_001_15.outputs[0].hide = True
            group_001_15.outputs[1].hide = True
            group_001_15.outputs[3].hide = True
            group_001_15.outputs[4].hide = True
            group_001_15.outputs[5].hide = True
            # Input_3
            group_001_15.inputs[2].default_value = 0.0
            # Input_7
            group_001_15.inputs[4].default_value = False
            # Input_9
            group_001_15.inputs[5].default_value = (0.0, 0.0, 0.0, 0.0)
            # Input_11
            group_001_15.inputs[6].default_value = 0

            # node Group Output
            group_output_84 = _mn_utils_aa_atom_pos.nodes.new("NodeGroupOutput")
            group_output_84.name = "Group Output"
            group_output_84.is_active_output = True

            # node Accumulate Field.001
            accumulate_field_001_4 = _mn_utils_aa_atom_pos.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_4.name = "Accumulate Field.001"
            accumulate_field_001_4.data_type = "INT"
            accumulate_field_001_4.domain = "POINT"
            # Group Index
            accumulate_field_001_4.inputs[1].default_value = 0

            # node Group
            group_24 = _mn_utils_aa_atom_pos.nodes.new("GeometryNodeGroup")
            group_24.name = "Group"
            group_24.node_tree = _utils_group_field_at_selection
            # Input_7
            group_24.inputs[4].default_value = False
            # Input_9
            group_24.inputs[5].default_value = (0.0, 0.0, 0.0, 0.0)

            # Set parents
            position_002_3.parent = frame_9
            compare_001_10.parent = frame_9
            compare_003_6.parent = frame_9
            switch_005_2.parent = frame_9
            compare_004_4.parent = frame_9
            mix_3.parent = frame_9
            group_002_7.parent = frame_9
            group_001_15.parent = frame_9

            # Set locations
            frame_9.location = (0.0, 0.0)
            group_input_83.location = (-580.0, 200.0)
            named_attribute_19.location = (-580.0, 320.0)
            compare_002_7.location = (-580.0, 20.0)
            compare_23.location = (-85.78459167480469, -98.68995666503906)
            named_attribute_001_8.location = (-80.0, -200.0)
            position_001_2.location = (-80.0, -140.0)
            reroute_19.location = (60.0, 80.0)
            position_002_3.location = (-100.0, 440.0)
            compare_001_10.location = (-100.0, 380.0)
            compare_003_6.location = (-100.0, 600.0)
            switch_005_2.location = (620.0, 360.0)
            compare_004_4.location = (420.0, 340.0)
            mix_3.location = (420.0, 560.0)
            index_11.location = (-240.0, -260.0)
            edges_of_vertex_1.location = (-80.0, -260.0)
            group_002_7.location = (160.0, 400.0)
            group_001_15.location = (160.0, 580.0)
            group_output_84.location = (1178.18603515625, 91.78607177734375)
            accumulate_field_001_4.location = (-420.0, 20.0)
            group_24.location = (141.92819213867188, 23.15901756286621)

            # Set dimensions
            frame_9.width, frame_9.height = 920.0, 479.0
            group_input_83.width, group_input_83.height = 140.0, 100.0
            named_attribute_19.width, named_attribute_19.height = (
                218.64825439453125,
                100.0,
            )
            compare_002_7.width, compare_002_7.height = 140.0, 100.0
            compare_23.width, compare_23.height = 140.0, 100.0
            named_attribute_001_8.width, named_attribute_001_8.height = 140.0, 100.0
            position_001_2.width, position_001_2.height = 140.0, 100.0
            reroute_19.width, reroute_19.height = 16.0, 100.0
            position_002_3.width, position_002_3.height = 140.0, 100.0
            compare_001_10.width, compare_001_10.height = 140.0, 100.0
            compare_003_6.width, compare_003_6.height = 140.0, 100.0
            switch_005_2.width, switch_005_2.height = 140.0, 100.0
            compare_004_4.width, compare_004_4.height = 140.0, 100.0
            mix_3.width, mix_3.height = 140.0, 100.0
            index_11.width, index_11.height = 140.0, 100.0
            edges_of_vertex_1.width, edges_of_vertex_1.height = 140.0, 100.0
            group_002_7.width, group_002_7.height = 180.198486328125, 100.0
            group_001_15.width, group_001_15.height = 180.198486328125, 100.0
            group_output_84.width, group_output_84.height = 140.0, 100.0
            accumulate_field_001_4.width, accumulate_field_001_4.height = 140.0, 100.0
            group_24.width, group_24.height = 282.89483642578125, 100.0

            # initialize _mn_utils_aa_atom_pos links
            # group_input_83.atom_name -> compare_23.B
            _mn_utils_aa_atom_pos.links.new(
                group_input_83.outputs[0], compare_23.inputs[3]
            )
            # named_attribute_19.Attribute -> compare_23.A
            _mn_utils_aa_atom_pos.links.new(
                named_attribute_19.outputs[0], compare_23.inputs[2]
            )
            # reroute_19.Output -> group_output_84.Group Index
            _mn_utils_aa_atom_pos.links.new(
                reroute_19.outputs[0], group_output_84.inputs[1]
            )
            # named_attribute_19.Attribute -> compare_002_7.A
            _mn_utils_aa_atom_pos.links.new(
                named_attribute_19.outputs[0], compare_002_7.inputs[2]
            )
            # compare_002_7.Result -> accumulate_field_001_4.Value
            _mn_utils_aa_atom_pos.links.new(
                compare_002_7.outputs[0], accumulate_field_001_4.inputs[0]
            )
            # named_attribute_19.Attribute -> compare_001_10.A
            _mn_utils_aa_atom_pos.links.new(
                named_attribute_19.outputs[0], compare_001_10.inputs[2]
            )
            # named_attribute_19.Attribute -> compare_003_6.A
            _mn_utils_aa_atom_pos.links.new(
                named_attribute_19.outputs[0], compare_003_6.inputs[2]
            )
            # group_input_83.atom_name -> compare_004_4.A
            _mn_utils_aa_atom_pos.links.new(
                group_input_83.outputs[0], compare_004_4.inputs[2]
            )
            # compare_004_4.Result -> switch_005_2.Switch
            _mn_utils_aa_atom_pos.links.new(
                compare_004_4.outputs[0], switch_005_2.inputs[0]
            )
            # mix_3.Result -> switch_005_2.False
            _mn_utils_aa_atom_pos.links.new(mix_3.outputs[1], switch_005_2.inputs[1])
            # switch_005_2.Output -> group_output_84.Position
            _mn_utils_aa_atom_pos.links.new(
                switch_005_2.outputs[0], group_output_84.inputs[0]
            )
            # compare_23.Result -> group_24.Selection
            _mn_utils_aa_atom_pos.links.new(compare_23.outputs[0], group_24.inputs[0])
            # reroute_19.Output -> group_24.Group Index
            _mn_utils_aa_atom_pos.links.new(reroute_19.outputs[0], group_24.inputs[1])
            # named_attribute_001_8.Attribute -> group_24.Float
            _mn_utils_aa_atom_pos.links.new(
                named_attribute_001_8.outputs[0], group_24.inputs[2]
            )
            # group_24.Float -> group_output_84.b_factor
            _mn_utils_aa_atom_pos.links.new(
                group_24.outputs[1], group_output_84.inputs[2]
            )
            # position_001_2.Position -> group_24.Vector
            _mn_utils_aa_atom_pos.links.new(
                position_001_2.outputs[0], group_24.inputs[3]
            )
            # group_24.Vector -> switch_005_2.True
            _mn_utils_aa_atom_pos.links.new(group_24.outputs[2], switch_005_2.inputs[2])
            # compare_003_6.Result -> group_001_15.Selection
            _mn_utils_aa_atom_pos.links.new(
                compare_003_6.outputs[0], group_001_15.inputs[0]
            )
            # reroute_19.Output -> group_001_15.Group Index
            _mn_utils_aa_atom_pos.links.new(
                reroute_19.outputs[0], group_001_15.inputs[1]
            )
            # group_001_15.Vector -> mix_3.A
            _mn_utils_aa_atom_pos.links.new(group_001_15.outputs[2], mix_3.inputs[4])
            # reroute_19.Output -> group_002_7.Group Index
            _mn_utils_aa_atom_pos.links.new(
                reroute_19.outputs[0], group_002_7.inputs[1]
            )
            # compare_001_10.Result -> group_002_7.Selection
            _mn_utils_aa_atom_pos.links.new(
                compare_001_10.outputs[0], group_002_7.inputs[0]
            )
            # group_002_7.Vector -> mix_3.B
            _mn_utils_aa_atom_pos.links.new(group_002_7.outputs[2], mix_3.inputs[5])
            # position_002_3.Position -> group_001_15.Vector
            _mn_utils_aa_atom_pos.links.new(
                position_002_3.outputs[0], group_001_15.inputs[3]
            )
            # position_002_3.Position -> group_002_7.Vector
            _mn_utils_aa_atom_pos.links.new(
                position_002_3.outputs[0], group_002_7.inputs[3]
            )
            # index_11.Index -> edges_of_vertex_1.Vertex Index
            _mn_utils_aa_atom_pos.links.new(
                index_11.outputs[0], edges_of_vertex_1.inputs[0]
            )
            # edges_of_vertex_1.Total -> group_24.Integer
            _mn_utils_aa_atom_pos.links.new(
                edges_of_vertex_1.outputs[1], group_24.inputs[6]
            )
            # group_24.Integer -> group_output_84.Integer
            _mn_utils_aa_atom_pos.links.new(
                group_24.outputs[5], group_output_84.inputs[3]
            )
            # accumulate_field_001_4.Leading -> reroute_19.Input
            _mn_utils_aa_atom_pos.links.new(
                accumulate_field_001_4.outputs[0], reroute_19.inputs[0]
            )
            return _mn_utils_aa_atom_pos

        _mn_utils_aa_atom_pos = _mn_utils_aa_atom_pos_node_group()

        # initialize mn_utils_curve_resample node group
        def mn_utils_curve_resample_node_group():
            mn_utils_curve_resample = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_utils_curve_resample"
            )

            mn_utils_curve_resample.color_tag = "NONE"
            mn_utils_curve_resample.description = ""

            mn_utils_curve_resample.is_modifier = True

            # mn_utils_curve_resample interface
            # Socket Geometry
            geometry_socket_10 = mn_utils_curve_resample.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_10.attribute_domain = "POINT"

            # Socket Position
            position_socket_5 = mn_utils_curve_resample.interface.new_socket(
                name="Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            position_socket_5.subtype = "NONE"
            position_socket_5.default_value = (0.0, 0.0, 0.0)
            position_socket_5.min_value = -3.4028234663852886e38
            position_socket_5.max_value = 3.4028234663852886e38
            position_socket_5.attribute_domain = "POINT"

            # Socket Tangent
            tangent_socket = mn_utils_curve_resample.interface.new_socket(
                name="Tangent", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            tangent_socket.subtype = "NONE"
            tangent_socket.default_value = (0.0, 0.0, 0.0)
            tangent_socket.min_value = -3.4028234663852886e38
            tangent_socket.max_value = 3.4028234663852886e38
            tangent_socket.attribute_domain = "POINT"

            # Socket Normal
            normal_socket = mn_utils_curve_resample.interface.new_socket(
                name="Normal", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            normal_socket.subtype = "NONE"
            normal_socket.default_value = (0.0, 0.0, 0.0)
            normal_socket.min_value = -3.4028234663852886e38
            normal_socket.max_value = 3.4028234663852886e38
            normal_socket.attribute_domain = "POINT"

            # Socket Field Float
            field_float_socket = mn_utils_curve_resample.interface.new_socket(
                name="Field Float", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            field_float_socket.subtype = "NONE"
            field_float_socket.default_value = 0.0
            field_float_socket.min_value = -3.4028234663852886e38
            field_float_socket.max_value = 3.4028234663852886e38
            field_float_socket.attribute_domain = "POINT"

            # Socket Field Int
            field_int_socket = mn_utils_curve_resample.interface.new_socket(
                name="Field Int", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            field_int_socket.subtype = "NONE"
            field_int_socket.default_value = 0
            field_int_socket.min_value = -2147483648
            field_int_socket.max_value = 2147483647
            field_int_socket.attribute_domain = "POINT"

            # Socket Field Vec
            field_vec_socket = mn_utils_curve_resample.interface.new_socket(
                name="Field Vec", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            field_vec_socket.subtype = "NONE"
            field_vec_socket.default_value = (0.0, 0.0, 0.0)
            field_vec_socket.min_value = -3.4028234663852886e38
            field_vec_socket.max_value = 3.4028234663852886e38
            field_vec_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_11 = mn_utils_curve_resample.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_11.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_7 = mn_utils_curve_resample.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            offset_socket_7.subtype = "NONE"
            offset_socket_7.default_value = 2.299999952316284
            offset_socket_7.min_value = -10000.0
            offset_socket_7.max_value = 10000.0
            offset_socket_7.attribute_domain = "POINT"

            # Socket Length
            length_socket = mn_utils_curve_resample.interface.new_socket(
                name="Length", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            length_socket.subtype = "DISTANCE"
            length_socket.default_value = 0.36000001430511475
            length_socket.min_value = 0.009999999776482582
            length_socket.max_value = 3.4028234663852886e38
            length_socket.attribute_domain = "POINT"

            # Socket Field Float
            field_float_socket_1 = mn_utils_curve_resample.interface.new_socket(
                name="Field Float", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            field_float_socket_1.subtype = "NONE"
            field_float_socket_1.default_value = 0.0
            field_float_socket_1.min_value = -3.4028234663852886e38
            field_float_socket_1.max_value = 3.4028234663852886e38
            field_float_socket_1.attribute_domain = "POINT"
            field_float_socket_1.hide_value = True

            # Socket Field Int
            field_int_socket_1 = mn_utils_curve_resample.interface.new_socket(
                name="Field Int", in_out="INPUT", socket_type="NodeSocketInt"
            )
            field_int_socket_1.subtype = "NONE"
            field_int_socket_1.default_value = 0
            field_int_socket_1.min_value = -2147483648
            field_int_socket_1.max_value = 2147483647
            field_int_socket_1.attribute_domain = "POINT"
            field_int_socket_1.hide_value = True

            # Socket Field Vec
            field_vec_socket_1 = mn_utils_curve_resample.interface.new_socket(
                name="Field Vec", in_out="INPUT", socket_type="NodeSocketVector"
            )
            field_vec_socket_1.subtype = "NONE"
            field_vec_socket_1.default_value = (0.0, 0.0, 0.0)
            field_vec_socket_1.min_value = -3.4028234663852886e38
            field_vec_socket_1.max_value = 3.4028234663852886e38
            field_vec_socket_1.attribute_domain = "POINT"
            field_vec_socket_1.hide_value = True

            # initialize mn_utils_curve_resample nodes
            # node Sample Curve.001
            sample_curve_001 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeSampleCurve"
            )
            sample_curve_001.name = "Sample Curve.001"
            sample_curve_001.data_type = "INT"
            sample_curve_001.mode = "LENGTH"
            sample_curve_001.use_all_curves = False

            # node Reroute.001
            reroute_001_12 = mn_utils_curve_resample.nodes.new("NodeReroute")
            reroute_001_12.name = "Reroute.001"
            # node Sample Curve.002
            sample_curve_002 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeSampleCurve"
            )
            sample_curve_002.name = "Sample Curve.002"
            sample_curve_002.data_type = "FLOAT_VECTOR"
            sample_curve_002.mode = "LENGTH"
            sample_curve_002.use_all_curves = False

            # node Index
            index_12 = mn_utils_curve_resample.nodes.new("GeometryNodeInputIndex")
            index_12.name = "Index"

            # node Capture Attribute
            capture_attribute_5 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_5.name = "Capture Attribute"
            capture_attribute_5.active_index = 0
            capture_attribute_5.capture_items.clear()
            capture_attribute_5.capture_items.new("FLOAT", "Value")
            capture_attribute_5.capture_items["Value"].data_type = "INT"
            capture_attribute_5.domain = "CURVE"

            # node Reroute.002
            reroute_002_10 = mn_utils_curve_resample.nodes.new("NodeReroute")
            reroute_002_10.name = "Reroute.002"
            # node Resample Curve
            resample_curve = mn_utils_curve_resample.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve.name = "Resample Curve"
            resample_curve.mode = "LENGTH"
            # Selection
            resample_curve.inputs[1].default_value = True

            # node Group Output
            group_output_85 = mn_utils_curve_resample.nodes.new("NodeGroupOutput")
            group_output_85.name = "Group Output"
            group_output_85.is_active_output = True

            # node Set Position
            set_position_2 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_2.name = "Set Position"
            # Selection
            set_position_2.inputs[1].default_value = True
            # Offset
            set_position_2.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Reroute
            reroute_20 = mn_utils_curve_resample.nodes.new("NodeReroute")
            reroute_20.name = "Reroute"
            # node Resample Curve.001
            resample_curve_001 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_001.name = "Resample Curve.001"
            resample_curve_001.mode = "COUNT"
            # Selection
            resample_curve_001.inputs[1].default_value = True

            # node Sample Curve
            sample_curve = mn_utils_curve_resample.nodes.new("GeometryNodeSampleCurve")
            sample_curve.name = "Sample Curve"
            sample_curve.data_type = "FLOAT"
            sample_curve.mode = "LENGTH"
            sample_curve.use_all_curves = False

            # node Group Input
            group_input_84 = mn_utils_curve_resample.nodes.new("NodeGroupInput")
            group_input_84.name = "Group Input"

            # node Reroute.003
            reroute_003_7 = mn_utils_curve_resample.nodes.new("NodeReroute")
            reroute_003_7.name = "Reroute.003"
            # node Spline Length.001
            spline_length_001 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeSplineLength"
            )
            spline_length_001.name = "Spline Length.001"

            # node Math
            math_18 = mn_utils_curve_resample.nodes.new("ShaderNodeMath")
            math_18.label = "x - 1"
            math_18.name = "Math"
            math_18.hide = True
            math_18.operation = "SUBTRACT"
            math_18.use_clamp = False
            # Value_001
            math_18.inputs[1].default_value = 1.0

            # node Math.001
            math_001_8 = mn_utils_curve_resample.nodes.new("ShaderNodeMath")
            math_001_8.name = "Math.001"
            math_001_8.operation = "WRAP"
            math_001_8.use_clamp = False
            # Value_002
            math_001_8.inputs[2].default_value = 0.0

            # node Spline Length
            spline_length = mn_utils_curve_resample.nodes.new(
                "GeometryNodeSplineLength"
            )
            spline_length.name = "Spline Length"

            # node Math.002
            math_002_6 = mn_utils_curve_resample.nodes.new("ShaderNodeMath")
            math_002_6.name = "Math.002"
            math_002_6.operation = "ADD"
            math_002_6.use_clamp = False

            # node Compare
            compare_24 = mn_utils_curve_resample.nodes.new("FunctionNodeCompare")
            compare_24.name = "Compare"
            compare_24.data_type = "FLOAT"
            compare_24.mode = "ELEMENT"
            compare_24.operation = "EQUAL"
            # B
            compare_24.inputs[1].default_value = 0.0
            # Epsilon
            compare_24.inputs[12].default_value = 0.0010000000474974513

            # node Switch
            switch_23 = mn_utils_curve_resample.nodes.new("GeometryNodeSwitch")
            switch_23.name = "Switch"
            switch_23.input_type = "FLOAT"

            # node Accumulate Field
            accumulate_field_5 = mn_utils_curve_resample.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_5.name = "Accumulate Field"
            accumulate_field_5.data_type = "FLOAT"
            accumulate_field_5.domain = "POINT"

            # Set locations
            sample_curve_001.location = (280.0, -160.0)
            reroute_001_12.location = (170.41610717773438, 56.029422760009766)
            sample_curve_002.location = (280.0, -460.0)
            index_12.location = (-468.85321044921875, -335.7737121582031)
            capture_attribute_5.location = (-466.8502197265625, -142.71517944335938)
            reroute_002_10.location = (-754.80029296875, -226.68231201171875)
            resample_curve.location = (-641.0833129882812, -111.3865966796875)
            group_output_85.location = (1082.3330078125, -91.4212875366211)
            set_position_2.location = (800.173095703125, -100.55831909179688)
            reroute_20.location = (75.4967041015625, -163.95921325683594)
            resample_curve_001.location = (526.7703247070312, -109.56268310546875)
            sample_curve.location = (260.0, 220.0)
            group_input_84.location = (-1054.9755859375, -86.68230438232422)
            reroute_003_7.location = (-498.3427429199219, 182.15419006347656)
            spline_length_001.location = (520.0, -320.0)
            math_18.location = (540.0, -280.0)
            math_001_8.location = (-60.0, 640.0)
            spline_length.location = (-60.0, 720.0)
            math_002_6.location = (-280.0, 620.0)
            compare_24.location = (-316.9455871582031, 279.42132568359375)
            switch_23.location = (-40.0, 280.0)
            accumulate_field_5.location = (-523.4389038085938, 432.5602722167969)

            # Set dimensions
            sample_curve_001.width, sample_curve_001.height = 140.0, 100.0
            reroute_001_12.width, reroute_001_12.height = 16.0, 100.0
            sample_curve_002.width, sample_curve_002.height = 140.0, 100.0
            index_12.width, index_12.height = 140.0, 100.0
            capture_attribute_5.width, capture_attribute_5.height = 140.0, 100.0
            reroute_002_10.width, reroute_002_10.height = 16.0, 100.0
            resample_curve.width, resample_curve.height = 140.0, 100.0
            group_output_85.width, group_output_85.height = 140.0, 100.0
            set_position_2.width, set_position_2.height = 140.0, 100.0
            reroute_20.width, reroute_20.height = 16.0, 100.0
            resample_curve_001.width, resample_curve_001.height = 140.0, 100.0
            sample_curve.width, sample_curve.height = 140.0, 100.0
            group_input_84.width, group_input_84.height = 140.0, 100.0
            reroute_003_7.width, reroute_003_7.height = 16.0, 100.0
            spline_length_001.width, spline_length_001.height = (
                151.61087036132812,
                100.0,
            )
            math_18.width, math_18.height = 140.0, 100.0
            math_001_8.width, math_001_8.height = 140.0, 100.0
            spline_length.width, spline_length.height = 140.0, 100.0
            math_002_6.width, math_002_6.height = 140.0, 100.0
            compare_24.width, compare_24.height = 140.0, 100.0
            switch_23.width, switch_23.height = 140.0, 100.0
            accumulate_field_5.width, accumulate_field_5.height = 140.0, 100.0

            # initialize mn_utils_curve_resample links
            # group_input_84.Geometry -> resample_curve.Curve
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[0], resample_curve.inputs[0]
            )
            # set_position_2.Geometry -> group_output_85.Geometry
            mn_utils_curve_resample.links.new(
                set_position_2.outputs[0], group_output_85.inputs[0]
            )
            # group_input_84.Length -> reroute_002_10.Input
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[2], reroute_002_10.inputs[0]
            )
            # reroute_20.Output -> sample_curve.Curves
            mn_utils_curve_resample.links.new(
                reroute_20.outputs[0], sample_curve.inputs[0]
            )
            # reroute_001_12.Output -> sample_curve.Length
            mn_utils_curve_resample.links.new(
                reroute_001_12.outputs[0], sample_curve.inputs[3]
            )
            # sample_curve.Position -> set_position_2.Position
            mn_utils_curve_resample.links.new(
                sample_curve.outputs[1], set_position_2.inputs[2]
            )
            # resample_curve.Curve -> capture_attribute_5.Geometry
            mn_utils_curve_resample.links.new(
                resample_curve.outputs[0], capture_attribute_5.inputs[0]
            )
            # index_12.Index -> capture_attribute_5.Value
            mn_utils_curve_resample.links.new(
                index_12.outputs[0], capture_attribute_5.inputs[1]
            )
            # capture_attribute_5.Geometry -> reroute_20.Input
            mn_utils_curve_resample.links.new(
                capture_attribute_5.outputs[0], reroute_20.inputs[0]
            )
            # capture_attribute_5.Value -> sample_curve.Curve Index
            mn_utils_curve_resample.links.new(
                capture_attribute_5.outputs[1], sample_curve.inputs[4]
            )
            # capture_attribute_5.Value -> accumulate_field_5.Group ID
            mn_utils_curve_resample.links.new(
                capture_attribute_5.outputs[1], accumulate_field_5.inputs[1]
            )
            # reroute_002_10.Output -> resample_curve.Length
            mn_utils_curve_resample.links.new(
                reroute_002_10.outputs[0], resample_curve.inputs[3]
            )
            # reroute_002_10.Output -> accumulate_field_5.Value
            mn_utils_curve_resample.links.new(
                reroute_002_10.outputs[0], accumulate_field_5.inputs[0]
            )
            # reroute_20.Output -> sample_curve_001.Curves
            mn_utils_curve_resample.links.new(
                reroute_20.outputs[0], sample_curve_001.inputs[0]
            )
            # reroute_001_12.Output -> sample_curve_001.Length
            mn_utils_curve_resample.links.new(
                reroute_001_12.outputs[0], sample_curve_001.inputs[3]
            )
            # capture_attribute_5.Value -> sample_curve_001.Curve Index
            mn_utils_curve_resample.links.new(
                capture_attribute_5.outputs[1], sample_curve_001.inputs[4]
            )
            # sample_curve.Position -> group_output_85.Position
            mn_utils_curve_resample.links.new(
                sample_curve.outputs[1], group_output_85.inputs[1]
            )
            # sample_curve.Tangent -> group_output_85.Tangent
            mn_utils_curve_resample.links.new(
                sample_curve.outputs[2], group_output_85.inputs[2]
            )
            # sample_curve.Normal -> group_output_85.Normal
            mn_utils_curve_resample.links.new(
                sample_curve.outputs[3], group_output_85.inputs[3]
            )
            # sample_curve.Value -> group_output_85.Field Float
            mn_utils_curve_resample.links.new(
                sample_curve.outputs[0], group_output_85.inputs[4]
            )
            # group_input_84.Field Float -> sample_curve.Value
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[3], sample_curve.inputs[1]
            )
            # sample_curve_001.Value -> group_output_85.Field Int
            mn_utils_curve_resample.links.new(
                sample_curve_001.outputs[0], group_output_85.inputs[5]
            )
            # group_input_84.Field Int -> sample_curve_001.Value
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[4], sample_curve_001.inputs[1]
            )
            # reroute_20.Output -> sample_curve_002.Curves
            mn_utils_curve_resample.links.new(
                reroute_20.outputs[0], sample_curve_002.inputs[0]
            )
            # reroute_001_12.Output -> sample_curve_002.Length
            mn_utils_curve_resample.links.new(
                reroute_001_12.outputs[0], sample_curve_002.inputs[3]
            )
            # capture_attribute_5.Value -> sample_curve_002.Curve Index
            mn_utils_curve_resample.links.new(
                capture_attribute_5.outputs[1], sample_curve_002.inputs[4]
            )
            # sample_curve_002.Value -> group_output_85.Field Vec
            mn_utils_curve_resample.links.new(
                sample_curve_002.outputs[0], group_output_85.inputs[6]
            )
            # group_input_84.Field Vec -> sample_curve_002.Value
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[5], sample_curve_002.inputs[1]
            )
            # reroute_20.Output -> resample_curve_001.Curve
            mn_utils_curve_resample.links.new(
                reroute_20.outputs[0], resample_curve_001.inputs[0]
            )
            # resample_curve_001.Curve -> set_position_2.Geometry
            mn_utils_curve_resample.links.new(
                resample_curve_001.outputs[0], set_position_2.inputs[0]
            )
            # math_18.Value -> resample_curve_001.Count
            mn_utils_curve_resample.links.new(
                math_18.outputs[0], resample_curve_001.inputs[2]
            )
            # math_002_6.Value -> math_001_8.Value
            mn_utils_curve_resample.links.new(
                math_002_6.outputs[0], math_001_8.inputs[0]
            )
            # spline_length.Length -> math_001_8.Value
            mn_utils_curve_resample.links.new(
                spline_length.outputs[0], math_001_8.inputs[1]
            )
            # accumulate_field_5.Trailing -> math_002_6.Value
            mn_utils_curve_resample.links.new(
                accumulate_field_5.outputs[1], math_002_6.inputs[0]
            )
            # reroute_003_7.Output -> math_002_6.Value
            mn_utils_curve_resample.links.new(
                reroute_003_7.outputs[0], math_002_6.inputs[1]
            )
            # compare_24.Result -> switch_23.Switch
            mn_utils_curve_resample.links.new(
                compare_24.outputs[0], switch_23.inputs[0]
            )
            # group_input_84.Offset -> reroute_003_7.Input
            mn_utils_curve_resample.links.new(
                group_input_84.outputs[1], reroute_003_7.inputs[0]
            )
            # reroute_003_7.Output -> compare_24.A
            mn_utils_curve_resample.links.new(
                reroute_003_7.outputs[0], compare_24.inputs[0]
            )
            # spline_length_001.Point Count -> math_18.Value
            mn_utils_curve_resample.links.new(
                spline_length_001.outputs[1], math_18.inputs[0]
            )
            # switch_23.Output -> reroute_001_12.Input
            mn_utils_curve_resample.links.new(
                switch_23.outputs[0], reroute_001_12.inputs[0]
            )
            # math_001_8.Value -> switch_23.False
            mn_utils_curve_resample.links.new(
                math_001_8.outputs[0], switch_23.inputs[1]
            )
            # accumulate_field_5.Trailing -> switch_23.True
            mn_utils_curve_resample.links.new(
                accumulate_field_5.outputs[1], switch_23.inputs[2]
            )
            return mn_utils_curve_resample

        mn_utils_curve_resample = mn_utils_curve_resample_node_group()

        # initialize animate_peptide_to_curve node group
        def animate_peptide_to_curve_node_group():
            animate_peptide_to_curve = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Peptide to Curve"
            )

            animate_peptide_to_curve.color_tag = "GEOMETRY"
            animate_peptide_to_curve.description = ""

            animate_peptide_to_curve.is_modifier = True

            # animate_peptide_to_curve interface
            # Socket Atoms
            atoms_socket_18 = animate_peptide_to_curve.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_18.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_19 = animate_peptide_to_curve.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_19.attribute_domain = "POINT"
            atoms_socket_19.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Curve
            curve_socket_1 = animate_peptide_to_curve.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_1.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_8 = animate_peptide_to_curve.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            offset_socket_8.subtype = "NONE"
            offset_socket_8.default_value = 0.0
            offset_socket_8.min_value = -10000.0
            offset_socket_8.max_value = 10000.0
            offset_socket_8.attribute_domain = "POINT"

            # Socket Start
            start_socket_1 = animate_peptide_to_curve.interface.new_socket(
                name="Start", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            start_socket_1.subtype = "FACTOR"
            start_socket_1.default_value = 0.0
            start_socket_1.min_value = 0.0
            start_socket_1.max_value = 1.0
            start_socket_1.attribute_domain = "POINT"

            # Socket End
            end_socket_1 = animate_peptide_to_curve.interface.new_socket(
                name="End", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            end_socket_1.subtype = "FACTOR"
            end_socket_1.default_value = 1.0
            end_socket_1.min_value = 0.0
            end_socket_1.max_value = 1.0
            end_socket_1.attribute_domain = "POINT"

            # Socket Rotate
            rotate_socket = animate_peptide_to_curve.interface.new_socket(
                name="Rotate", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotate_socket.subtype = "NONE"
            rotate_socket.default_value = 0.5
            rotate_socket.min_value = -10000.0
            rotate_socket.max_value = 10000.0
            rotate_socket.attribute_domain = "POINT"

            # Socket Twist
            twist_socket = animate_peptide_to_curve.interface.new_socket(
                name="Twist", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            twist_socket.subtype = "NONE"
            twist_socket.default_value = 1.0
            twist_socket.min_value = -10000.0
            twist_socket.max_value = 10000.0
            twist_socket.attribute_domain = "POINT"

            # initialize animate_peptide_to_curve nodes
            # node Frame
            frame_10 = animate_peptide_to_curve.nodes.new("NodeFrame")
            frame_10.label = "Initial setup and alignment of amino acids"
            frame_10.name = "Frame"
            frame_10.label_size = 20
            frame_10.shrink = True

            # node Frame.001
            frame_001_3 = animate_peptide_to_curve.nodes.new("NodeFrame")
            frame_001_3.label = "Placing and Aligning AA Along the Curve"
            frame_001_3.name = "Frame.001"
            frame_001_3.label_size = 20
            frame_001_3.shrink = True

            # node Group Output
            group_output_86 = animate_peptide_to_curve.nodes.new("NodeGroupOutput")
            group_output_86.name = "Group Output"
            group_output_86.is_active_output = True

            # node Vector Math
            vector_math_13 = animate_peptide_to_curve.nodes.new("ShaderNodeVectorMath")
            vector_math_13.name = "Vector Math"
            vector_math_13.operation = "SCALE"
            # Scale
            vector_math_13.inputs[3].default_value = -1.0

            # node Position
            position_6 = animate_peptide_to_curve.nodes.new("GeometryNodeInputPosition")
            position_6.name = "Position"

            # node Vector Rotate.005
            vector_rotate_005 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_005.name = "Vector Rotate.005"
            vector_rotate_005.invert = True
            vector_rotate_005.rotation_type = "Y_AXIS"
            # Center
            vector_rotate_005.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Angle
            vector_rotate_005.inputs[3].default_value = -0.5574581623077393

            # node Group.007
            group_007_3 = animate_peptide_to_curve.nodes.new("GeometryNodeGroup")
            group_007_3.name = "Group.007"
            group_007_3.node_tree = _mn_utils_aa_atom_pos
            # Input_2
            group_007_3.inputs[0].default_value = 1

            # node Set Position.006
            set_position_006 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_006.name = "Set Position.006"
            # Selection
            set_position_006.inputs[1].default_value = True
            # Offset
            set_position_006.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Set Position.005
            set_position_005 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_005.name = "Set Position.005"
            # Selection
            set_position_005.inputs[1].default_value = True
            # Offset
            set_position_005.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group.011
            group_011_2 = animate_peptide_to_curve.nodes.new("GeometryNodeGroup")
            group_011_2.name = "Group.011"
            group_011_2.node_tree = _mn_utils_aa_atom_pos
            # Input_2
            group_011_2.inputs[0].default_value = 4

            # node Align Euler to Vector.002
            align_euler_to_vector_002 = animate_peptide_to_curve.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_002.name = "Align Euler to Vector.002"
            align_euler_to_vector_002.axis = "Z"
            align_euler_to_vector_002.pivot_axis = "X"
            # Rotation
            align_euler_to_vector_002.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_002.inputs[1].default_value = 1.0

            # node Vector Rotate.004
            vector_rotate_004 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_004.name = "Vector Rotate.004"
            vector_rotate_004.invert = True
            vector_rotate_004.rotation_type = "EULER_XYZ"
            # Center
            vector_rotate_004.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Vector Rotate
            vector_rotate = animate_peptide_to_curve.nodes.new("ShaderNodeVectorRotate")
            vector_rotate.name = "Vector Rotate"
            vector_rotate.invert = True
            vector_rotate.rotation_type = "EULER_XYZ"
            # Center
            vector_rotate.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Set Position.004
            set_position_004 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_004.name = "Set Position.004"
            # Selection
            set_position_004.inputs[1].default_value = True
            # Offset
            set_position_004.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.001
            vector_math_001_9 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_9.name = "Vector Math.001"
            vector_math_001_9.operation = "SUBTRACT"

            # node Align Euler to Vector
            align_euler_to_vector_1 = animate_peptide_to_curve.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_1.name = "Align Euler to Vector"
            align_euler_to_vector_1.axis = "X"
            align_euler_to_vector_1.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_1.inputs[1].default_value = 1.0

            # node Set Position
            set_position_3 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_3.name = "Set Position"
            # Selection
            set_position_3.inputs[1].default_value = True
            # Position
            set_position_3.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Reroute.001
            reroute_001_13 = animate_peptide_to_curve.nodes.new("NodeReroute")
            reroute_001_13.name = "Reroute.001"
            # node Separate Geometry.001
            separate_geometry_001_3 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_3.name = "Separate Geometry.001"
            separate_geometry_001_3.domain = "POINT"

            # node Compare.001
            compare_001_11 = animate_peptide_to_curve.nodes.new("FunctionNodeCompare")
            compare_001_11.name = "Compare.001"
            compare_001_11.hide = True
            compare_001_11.data_type = "INT"
            compare_001_11.mode = "ELEMENT"
            compare_001_11.operation = "LESS_THAN"

            # node Group Input
            group_input_85 = animate_peptide_to_curve.nodes.new("NodeGroupInput")
            group_input_85.name = "Group Input"

            # node Trim Curve
            trim_curve = animate_peptide_to_curve.nodes.new("GeometryNodeTrimCurve")
            trim_curve.name = "Trim Curve"
            trim_curve.mode = "FACTOR"
            # Selection
            trim_curve.inputs[1].default_value = True

            # node Math.002
            math_002_7 = animate_peptide_to_curve.nodes.new("ShaderNodeMath")
            math_002_7.name = "Math.002"
            math_002_7.operation = "DIVIDE"
            math_002_7.use_clamp = False
            # Value
            math_002_7.inputs[0].default_value = 3.129999876022339
            # Value_001
            math_002_7.inputs[1].default_value = 100.0

            # node Sample Index
            sample_index_4 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_4.name = "Sample Index"
            sample_index_4.hide = True
            sample_index_4.clamp = False
            sample_index_4.data_type = "FLOAT_VECTOR"
            sample_index_4.domain = "POINT"

            # node Reroute.002
            reroute_002_11 = animate_peptide_to_curve.nodes.new("NodeReroute")
            reroute_002_11.name = "Reroute.002"
            # node Sample Index.001
            sample_index_001_4 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_4.name = "Sample Index.001"
            sample_index_001_4.hide = True
            sample_index_001_4.clamp = False
            sample_index_001_4.data_type = "FLOAT_VECTOR"
            sample_index_001_4.domain = "POINT"

            # node Set Curve Tilt
            set_curve_tilt = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetCurveTilt"
            )
            set_curve_tilt.name = "Set Curve Tilt"
            # Selection
            set_curve_tilt.inputs[1].default_value = True

            # node Curve Tilt
            curve_tilt = animate_peptide_to_curve.nodes.new(
                "GeometryNodeInputCurveTilt"
            )
            curve_tilt.name = "Curve Tilt"

            # node Sample Index.002
            sample_index_002_3 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002_3.name = "Sample Index.002"
            sample_index_002_3.clamp = False
            sample_index_002_3.data_type = "FLOAT"
            sample_index_002_3.domain = "POINT"

            # node Math
            math_19 = animate_peptide_to_curve.nodes.new("ShaderNodeMath")
            math_19.name = "Math"
            math_19.operation = "ADD"
            math_19.use_clamp = False

            # node Domain Size
            domain_size_4 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_4.name = "Domain Size"
            domain_size_4.hide = True
            domain_size_4.component = "CURVE"

            # node Accumulate Field.002
            accumulate_field_002_3 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_002_3.name = "Accumulate Field.002"
            accumulate_field_002_3.data_type = "FLOAT"
            accumulate_field_002_3.domain = "POINT"
            # Group Index
            accumulate_field_002_3.inputs[1].default_value = 0

            # node Math.001
            math_001_9 = animate_peptide_to_curve.nodes.new("ShaderNodeMath")
            math_001_9.name = "Math.001"
            math_001_9.operation = "MULTIPLY"
            math_001_9.use_clamp = False
            # Value
            math_001_9.inputs[0].default_value = 1.5707963705062866

            # node Reroute
            reroute_21 = animate_peptide_to_curve.nodes.new("NodeReroute")
            reroute_21.name = "Reroute"
            # node Reroute.003
            reroute_003_8 = animate_peptide_to_curve.nodes.new("NodeReroute")
            reroute_003_8.name = "Reroute.003"
            # node Reroute.004
            reroute_004_5 = animate_peptide_to_curve.nodes.new("NodeReroute")
            reroute_004_5.name = "Reroute.004"
            # node Vector Rotate.007
            vector_rotate_007 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_007.name = "Vector Rotate.007"
            vector_rotate_007.invert = False
            vector_rotate_007.rotation_type = "AXIS_ANGLE"

            # node Align Euler to Vector.003
            align_euler_to_vector_003 = animate_peptide_to_curve.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_003.name = "Align Euler to Vector.003"
            align_euler_to_vector_003.axis = "X"
            align_euler_to_vector_003.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_003.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_003.inputs[1].default_value = 1.0

            # node Vector Rotate.006
            vector_rotate_006 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_006.name = "Vector Rotate.006"
            vector_rotate_006.invert = False
            vector_rotate_006.rotation_type = "EULER_XYZ"

            # node Set Position.009
            set_position_009 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_009.name = "Set Position.009"
            # Selection
            set_position_009.inputs[1].default_value = True
            # Offset
            set_position_009.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Set Position.008
            set_position_008 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_008.name = "Set Position.008"
            # Selection
            set_position_008.inputs[1].default_value = True
            # Offset
            set_position_008.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.006
            vector_math_006 = animate_peptide_to_curve.nodes.new("ShaderNodeVectorMath")
            vector_math_006.name = "Vector Math.006"
            vector_math_006.hide = True
            vector_math_006.operation = "SCALE"
            # Scale
            vector_math_006.inputs[3].default_value = -1.0

            # node Position.002
            position_002_4 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_4.name = "Position.002"

            # node Set Position.007
            set_position_007 = animate_peptide_to_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_007.name = "Set Position.007"
            # Selection
            set_position_007.inputs[1].default_value = True
            # Position
            set_position_007.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.003
            vector_math_003_2 = animate_peptide_to_curve.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003_2.name = "Vector Math.003"
            vector_math_003_2.operation = "SUBTRACT"

            # node Group
            group_25 = animate_peptide_to_curve.nodes.new("GeometryNodeGroup")
            group_25.name = "Group"
            group_25.node_tree = mn_utils_curve_resample
            # Input_7
            group_25.inputs[3].default_value = 0.0
            # Input_9
            group_25.inputs[4].default_value = 0
            # Input_11
            group_25.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Group.008
            group_008_2 = animate_peptide_to_curve.nodes.new("GeometryNodeGroup")
            group_008_2.name = "Group.008"
            group_008_2.node_tree = _mn_utils_aa_atom_pos
            # Input_2
            group_008_2.inputs[0].default_value = 3

            # Set parents
            vector_math_13.parent = frame_10
            position_6.parent = frame_10
            vector_rotate_005.parent = frame_10
            group_007_3.parent = frame_10
            set_position_006.parent = frame_10
            set_position_005.parent = frame_10
            group_011_2.parent = frame_10
            align_euler_to_vector_002.parent = frame_10
            vector_rotate_004.parent = frame_10
            vector_rotate.parent = frame_10
            set_position_004.parent = frame_10
            vector_math_001_9.parent = frame_10
            align_euler_to_vector_1.parent = frame_10
            set_position_3.parent = frame_10
            reroute_001_13.parent = frame_10
            separate_geometry_001_3.parent = frame_10
            compare_001_11.parent = frame_10
            reroute_004_5.parent = frame_001_3
            vector_rotate_007.parent = frame_001_3
            align_euler_to_vector_003.parent = frame_001_3
            vector_rotate_006.parent = frame_001_3
            set_position_009.parent = frame_001_3
            set_position_008.parent = frame_001_3
            vector_math_006.parent = frame_001_3
            position_002_4.parent = frame_001_3
            set_position_007.parent = frame_001_3
            vector_math_003_2.parent = frame_001_3
            group_008_2.parent = frame_10

            # Set locations
            frame_10.location = (-27.07716941833496, -126.43952178955078)
            frame_001_3.location = (-4.24030876159668, 199.41973876953125)
            group_output_86.location = (2359.086181640625, 944.0341796875)
            vector_math_13.location = (-20.0, 400.0)
            position_6.location = (180.0, 240.0)
            vector_rotate_005.location = (820.0, 280.0)
            group_007_3.location = (-440.0, -20.0)
            set_position_006.location = (820.0, 500.0)
            set_position_005.location = (661.3526000976562, 501.8488464355469)
            group_011_2.location = (80.0, -20.0)
            align_euler_to_vector_002.location = (340.0, -20.0)
            vector_rotate_004.location = (500.0, 240.0)
            vector_rotate.location = (340.0, 240.0)
            set_position_004.location = (180.0, 540.0)
            vector_math_001_9.location = (-40.0, 135.8946990966797)
            align_euler_to_vector_1.location = (179.33258056640625, 170.79183959960938)
            set_position_3.location = (-20.0, 540.0)
            reroute_001_13.location = (-453.18798828125, 412.61907958984375)
            separate_geometry_001_3.location = (-200.0, 540.0)
            compare_001_11.location = (-192.92283630371094, 366.43951416015625)
            group_input_85.location = (-1060.0, 820.0)
            trim_curve.location = (-640.0, 840.0)
            math_002_7.location = (-640.0, 680.0)
            sample_index_4.location = (20.0, 760.0)
            reroute_002_11.location = (-40.0, 700.0)
            sample_index_001_4.location = (20.0, 680.0)
            set_curve_tilt.location = (-145.8927001953125, 1117.4552001953125)
            curve_tilt.location = (-145.8927001953125, 977.4552612304688)
            sample_index_002_3.location = (14.1072998046875, 1117.4552001953125)
            math_19.location = (-425.8927001953125, 1177.4552001953125)
            domain_size_4.location = (-400.0, 560.0)
            accumulate_field_002_3.location = (-640.0, 1180.0)
            math_001_9.location = (-800.0, 1180.0)
            reroute_21.location = (1260.0, 540.0)
            reroute_003_8.location = (1340.0, 440.0)
            reroute_004_5.location = (1860.0, 240.0)
            vector_rotate_007.location = (1980.0, 540.0)
            align_euler_to_vector_003.location = (1480.0, 520.0)
            vector_rotate_006.location = (1640.0, 580.0)
            set_position_009.location = (1980.0, 760.0)
            set_position_008.location = (1800.0, 760.0)
            vector_math_006.location = (1480.0, 320.0)
            position_002_4.location = (1480.0, 580.0)
            set_position_007.location = (1620.0, 760.0)
            vector_math_003_2.location = (1440.0, 780.0)
            group_25.location = (-400.0, 940.0)
            group_008_2.location = (-440.0, 180.0)

            # Set dimensions
            frame_10.width, frame_10.height = 1479.465087890625, 797.2000732421875
            frame_001_3.width, frame_001_3.height = 739.9998779296875, 616.1802978515625
            group_output_86.width, group_output_86.height = 140.0, 100.0
            vector_math_13.width, vector_math_13.height = 140.0, 100.0
            position_6.width, position_6.height = 140.0, 100.0
            vector_rotate_005.width, vector_rotate_005.height = 140.0, 100.0
            group_007_3.width, group_007_3.height = 217.1441650390625, 100.0
            set_position_006.width, set_position_006.height = 140.0, 100.0
            set_position_005.width, set_position_005.height = 140.0, 100.0
            group_011_2.width, group_011_2.height = 228.5245361328125, 100.0
            align_euler_to_vector_002.width, align_euler_to_vector_002.height = (
                140.0,
                100.0,
            )
            vector_rotate_004.width, vector_rotate_004.height = 140.0, 100.0
            vector_rotate.width, vector_rotate.height = 140.0, 100.0
            set_position_004.width, set_position_004.height = 140.0, 100.0
            vector_math_001_9.width, vector_math_001_9.height = 140.0, 100.0
            align_euler_to_vector_1.width, align_euler_to_vector_1.height = (
                125.64166259765625,
                100.0,
            )
            set_position_3.width, set_position_3.height = 140.0, 100.0
            reroute_001_13.width, reroute_001_13.height = 16.0, 100.0
            separate_geometry_001_3.width, separate_geometry_001_3.height = 140.0, 100.0
            compare_001_11.width, compare_001_11.height = 140.0, 100.0
            group_input_85.width, group_input_85.height = 140.0, 100.0
            trim_curve.width, trim_curve.height = 140.0, 100.0
            math_002_7.width, math_002_7.height = 140.0, 100.0
            sample_index_4.width, sample_index_4.height = 140.0, 100.0
            reroute_002_11.width, reroute_002_11.height = 16.0, 100.0
            sample_index_001_4.width, sample_index_001_4.height = 140.0, 100.0
            set_curve_tilt.width, set_curve_tilt.height = 140.0, 100.0
            curve_tilt.width, curve_tilt.height = 140.0, 100.0
            sample_index_002_3.width, sample_index_002_3.height = 140.0, 100.0
            math_19.width, math_19.height = 140.0, 100.0
            domain_size_4.width, domain_size_4.height = 140.0, 100.0
            accumulate_field_002_3.width, accumulate_field_002_3.height = 140.0, 100.0
            math_001_9.width, math_001_9.height = 140.0, 100.0
            reroute_21.width, reroute_21.height = 16.0, 100.0
            reroute_003_8.width, reroute_003_8.height = 16.0, 100.0
            reroute_004_5.width, reroute_004_5.height = 16.0, 100.0
            vector_rotate_007.width, vector_rotate_007.height = 140.0, 100.0
            align_euler_to_vector_003.width, align_euler_to_vector_003.height = (
                140.0,
                100.0,
            )
            vector_rotate_006.width, vector_rotate_006.height = 140.0, 100.0
            set_position_009.width, set_position_009.height = 140.0, 100.0
            set_position_008.width, set_position_008.height = 140.0, 100.0
            vector_math_006.width, vector_math_006.height = 140.0, 100.0
            position_002_4.width, position_002_4.height = 140.0, 100.0
            set_position_007.width, set_position_007.height = 140.0, 100.0
            vector_math_003_2.width, vector_math_003_2.height = 140.0, 100.0
            group_25.width, group_25.height = 200.0, 100.0
            group_008_2.width, group_008_2.height = 228.5245361328125, 100.0

            # initialize animate_peptide_to_curve links
            # set_position_009.Geometry -> group_output_86.Atoms
            animate_peptide_to_curve.links.new(
                set_position_009.outputs[0], group_output_86.inputs[0]
            )
            # separate_geometry_001_3.Selection -> set_position_3.Geometry
            animate_peptide_to_curve.links.new(
                separate_geometry_001_3.outputs[0], set_position_3.inputs[0]
            )
            # compare_001_11.Result -> separate_geometry_001_3.Selection
            animate_peptide_to_curve.links.new(
                compare_001_11.outputs[0], separate_geometry_001_3.inputs[1]
            )
            # group_input_85.Atoms -> separate_geometry_001_3.Geometry
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[0], separate_geometry_001_3.inputs[0]
            )
            # group_25.Position -> sample_index_4.Value
            animate_peptide_to_curve.links.new(
                group_25.outputs[1], sample_index_4.inputs[1]
            )
            # group_25.Geometry -> sample_index_4.Geometry
            animate_peptide_to_curve.links.new(
                group_25.outputs[0], sample_index_4.inputs[0]
            )
            # reroute_002_11.Output -> sample_index_4.Index
            animate_peptide_to_curve.links.new(
                reroute_002_11.outputs[0], sample_index_4.inputs[2]
            )
            # group_007_3.Group Index -> reroute_001_13.Input
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[1], reroute_001_13.inputs[0]
            )
            # reroute_001_13.Output -> compare_001_11.A
            animate_peptide_to_curve.links.new(
                reroute_001_13.outputs[0], compare_001_11.inputs[2]
            )
            # math_002_7.Value -> group_25.Length
            animate_peptide_to_curve.links.new(
                math_002_7.outputs[0], group_25.inputs[2]
            )
            # group_25.Geometry -> sample_index_001_4.Geometry
            animate_peptide_to_curve.links.new(
                group_25.outputs[0], sample_index_001_4.inputs[0]
            )
            # reroute_002_11.Output -> sample_index_001_4.Index
            animate_peptide_to_curve.links.new(
                reroute_002_11.outputs[0], sample_index_001_4.inputs[2]
            )
            # group_25.Tangent -> sample_index_001_4.Value
            animate_peptide_to_curve.links.new(
                group_25.outputs[2], sample_index_001_4.inputs[1]
            )
            # group_007_3.Position -> vector_math_13.Vector
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[0], vector_math_13.inputs[0]
            )
            # vector_math_13.Vector -> set_position_3.Offset
            animate_peptide_to_curve.links.new(
                vector_math_13.outputs[0], set_position_3.inputs[3]
            )
            # group_25.Geometry -> domain_size_4.Geometry
            animate_peptide_to_curve.links.new(
                group_25.outputs[0], domain_size_4.inputs[0]
            )
            # set_position_3.Geometry -> set_position_004.Geometry
            animate_peptide_to_curve.links.new(
                set_position_3.outputs[0], set_position_004.inputs[0]
            )
            # group_007_3.Position -> vector_math_001_9.Vector
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[0], vector_math_001_9.inputs[0]
            )
            # vector_math_001_9.Vector -> align_euler_to_vector_1.Vector
            animate_peptide_to_curve.links.new(
                vector_math_001_9.outputs[0], align_euler_to_vector_1.inputs[2]
            )
            # align_euler_to_vector_1.Rotation -> vector_rotate.Axis
            animate_peptide_to_curve.links.new(
                align_euler_to_vector_1.outputs[0], vector_rotate.inputs[2]
            )
            # position_6.Position -> vector_rotate.Vector
            animate_peptide_to_curve.links.new(
                position_6.outputs[0], vector_rotate.inputs[0]
            )
            # align_euler_to_vector_1.Rotation -> vector_rotate.Rotation
            animate_peptide_to_curve.links.new(
                align_euler_to_vector_1.outputs[0], vector_rotate.inputs[4]
            )
            # vector_rotate.Vector -> set_position_004.Position
            animate_peptide_to_curve.links.new(
                vector_rotate.outputs[0], set_position_004.inputs[2]
            )
            # group_008_2.Position -> vector_math_001_9.Vector
            animate_peptide_to_curve.links.new(
                group_008_2.outputs[0], vector_math_001_9.inputs[1]
            )
            # set_position_004.Geometry -> set_position_005.Geometry
            animate_peptide_to_curve.links.new(
                set_position_004.outputs[0], set_position_005.inputs[0]
            )
            # vector_rotate_004.Vector -> set_position_005.Position
            animate_peptide_to_curve.links.new(
                vector_rotate_004.outputs[0], set_position_005.inputs[2]
            )
            # position_6.Position -> vector_rotate_004.Vector
            animate_peptide_to_curve.links.new(
                position_6.outputs[0], vector_rotate_004.inputs[0]
            )
            # group_011_2.Position -> align_euler_to_vector_002.Vector
            animate_peptide_to_curve.links.new(
                group_011_2.outputs[0], align_euler_to_vector_002.inputs[2]
            )
            # align_euler_to_vector_002.Rotation -> vector_rotate_004.Rotation
            animate_peptide_to_curve.links.new(
                align_euler_to_vector_002.outputs[0], vector_rotate_004.inputs[4]
            )
            # set_position_005.Geometry -> set_position_006.Geometry
            animate_peptide_to_curve.links.new(
                set_position_005.outputs[0], set_position_006.inputs[0]
            )
            # position_6.Position -> vector_rotate_005.Vector
            animate_peptide_to_curve.links.new(
                position_6.outputs[0], vector_rotate_005.inputs[0]
            )
            # vector_rotate_005.Vector -> set_position_006.Position
            animate_peptide_to_curve.links.new(
                vector_rotate_005.outputs[0], set_position_006.inputs[2]
            )
            # domain_size_4.Point Count -> compare_001_11.B
            animate_peptide_to_curve.links.new(
                domain_size_4.outputs[0], compare_001_11.inputs[3]
            )
            # set_position_006.Geometry -> set_position_007.Geometry
            animate_peptide_to_curve.links.new(
                set_position_006.outputs[0], set_position_007.inputs[0]
            )
            # sample_index_4.Value -> vector_math_003_2.Vector
            animate_peptide_to_curve.links.new(
                sample_index_4.outputs[0], vector_math_003_2.inputs[0]
            )
            # group_007_3.Position -> vector_math_003_2.Vector
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[0], vector_math_003_2.inputs[1]
            )
            # vector_math_003_2.Vector -> set_position_007.Offset
            animate_peptide_to_curve.links.new(
                vector_math_003_2.outputs[0], set_position_007.inputs[3]
            )
            # set_position_007.Geometry -> set_position_008.Geometry
            animate_peptide_to_curve.links.new(
                set_position_007.outputs[0], set_position_008.inputs[0]
            )
            # position_002_4.Position -> vector_rotate_006.Vector
            animate_peptide_to_curve.links.new(
                position_002_4.outputs[0], vector_rotate_006.inputs[0]
            )
            # vector_rotate_006.Vector -> set_position_008.Position
            animate_peptide_to_curve.links.new(
                vector_rotate_006.outputs[0], set_position_008.inputs[2]
            )
            # align_euler_to_vector_003.Rotation -> vector_rotate_006.Rotation
            animate_peptide_to_curve.links.new(
                align_euler_to_vector_003.outputs[0], vector_rotate_006.inputs[4]
            )
            # group_007_3.Position -> vector_rotate_006.Center
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[0], vector_rotate_006.inputs[1]
            )
            # reroute_21.Output -> vector_math_006.Vector
            animate_peptide_to_curve.links.new(
                reroute_21.outputs[0], vector_math_006.inputs[0]
            )
            # vector_math_006.Vector -> align_euler_to_vector_003.Vector
            animate_peptide_to_curve.links.new(
                vector_math_006.outputs[0], align_euler_to_vector_003.inputs[2]
            )
            # group_25.Geometry -> set_curve_tilt.Curve
            animate_peptide_to_curve.links.new(
                group_25.outputs[0], set_curve_tilt.inputs[0]
            )
            # set_curve_tilt.Curve -> sample_index_002_3.Geometry
            animate_peptide_to_curve.links.new(
                set_curve_tilt.outputs[0], sample_index_002_3.inputs[0]
            )
            # reroute_001_13.Output -> reroute_002_11.Input
            animate_peptide_to_curve.links.new(
                reroute_001_13.outputs[0], reroute_002_11.inputs[0]
            )
            # reroute_002_11.Output -> sample_index_002_3.Index
            animate_peptide_to_curve.links.new(
                reroute_002_11.outputs[0], sample_index_002_3.inputs[2]
            )
            # set_position_008.Geometry -> set_position_009.Geometry
            animate_peptide_to_curve.links.new(
                set_position_008.outputs[0], set_position_009.inputs[0]
            )
            # position_002_4.Position -> vector_rotate_007.Vector
            animate_peptide_to_curve.links.new(
                position_002_4.outputs[0], vector_rotate_007.inputs[0]
            )
            # group_007_3.Position -> vector_rotate_007.Center
            animate_peptide_to_curve.links.new(
                group_007_3.outputs[0], vector_rotate_007.inputs[1]
            )
            # vector_rotate_007.Vector -> set_position_009.Position
            animate_peptide_to_curve.links.new(
                vector_rotate_007.outputs[0], set_position_009.inputs[2]
            )
            # curve_tilt.Tilt -> sample_index_002_3.Value
            animate_peptide_to_curve.links.new(
                curve_tilt.outputs[0], sample_index_002_3.inputs[1]
            )
            # sample_index_002_3.Value -> vector_rotate_007.Angle
            animate_peptide_to_curve.links.new(
                sample_index_002_3.outputs[0], vector_rotate_007.inputs[3]
            )
            # reroute_004_5.Output -> vector_rotate_007.Axis
            animate_peptide_to_curve.links.new(
                reroute_004_5.outputs[0], vector_rotate_007.inputs[2]
            )
            # group_input_85.Offset -> group_25.Offset
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[2], group_25.inputs[1]
            )
            # group_input_85.Curve -> trim_curve.Curve
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[1], trim_curve.inputs[0]
            )
            # trim_curve.Curve -> group_25.Geometry
            animate_peptide_to_curve.links.new(
                trim_curve.outputs[0], group_25.inputs[0]
            )
            # group_input_85.Start -> trim_curve.Start
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[3], trim_curve.inputs[2]
            )
            # group_input_85.End -> trim_curve.End
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[4], trim_curve.inputs[3]
            )
            # accumulate_field_002_3.Leading -> math_19.Value
            animate_peptide_to_curve.links.new(
                accumulate_field_002_3.outputs[0], math_19.inputs[0]
            )
            # math_19.Value -> set_curve_tilt.Tilt
            animate_peptide_to_curve.links.new(
                math_19.outputs[0], set_curve_tilt.inputs[2]
            )
            # group_input_85.Rotate -> math_19.Value
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[5], math_19.inputs[1]
            )
            # sample_index_001_4.Value -> reroute_21.Input
            animate_peptide_to_curve.links.new(
                sample_index_001_4.outputs[0], reroute_21.inputs[0]
            )
            # reroute_21.Output -> reroute_003_8.Input
            animate_peptide_to_curve.links.new(
                reroute_21.outputs[0], reroute_003_8.inputs[0]
            )
            # reroute_003_8.Output -> reroute_004_5.Input
            animate_peptide_to_curve.links.new(
                reroute_003_8.outputs[0], reroute_004_5.inputs[0]
            )
            # math_001_9.Value -> accumulate_field_002_3.Value
            animate_peptide_to_curve.links.new(
                math_001_9.outputs[0], accumulate_field_002_3.inputs[0]
            )
            # group_input_85.Twist -> math_001_9.Value
            animate_peptide_to_curve.links.new(
                group_input_85.outputs[6], math_001_9.inputs[1]
            )
            return animate_peptide_to_curve

        animate_peptide_to_curve = animate_peptide_to_curve_node_group()

        # initialize color_goodsell node group
        def color_goodsell_node_group():
            color_goodsell = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Goodsell"
            )

            color_goodsell.color_tag = "COLOR"
            color_goodsell.description = ""

            # color_goodsell interface
            # Socket Color
            color_socket_16 = color_goodsell.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_16.attribute_domain = "POINT"

            # Socket Invert
            invert_socket = color_goodsell.interface.new_socket(
                name="Invert", in_out="INPUT", socket_type="NodeSocketBool"
            )
            invert_socket.attribute_domain = "POINT"
            invert_socket.description = "Whether to invert the darkening of the colors"

            # Socket Factor
            factor_socket_1 = color_goodsell.interface.new_socket(
                name="Factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_1.subtype = "FACTOR"
            factor_socket_1.default_value = 0.5
            factor_socket_1.min_value = 0.0
            factor_socket_1.max_value = 1.0
            factor_socket_1.attribute_domain = "POINT"
            factor_socket_1.description = (
                "Amount to apply the 'Goodsell Style' coloring to"
            )

            # Socket Color
            color_socket_17 = color_goodsell.interface.new_socket(
                name="Color", in_out="INPUT", socket_type="NodeSocketColor"
            )
            color_socket_17.attribute_domain = "POINT"
            color_socket_17.description = "Color to apply 'Goodsell' style colors to"

            # initialize color_goodsell nodes
            # node Group Output
            group_output_87 = color_goodsell.nodes.new("NodeGroupOutput")
            group_output_87.name = "Group Output"
            group_output_87.is_active_output = True

            # node Group Input
            group_input_86 = color_goodsell.nodes.new("NodeGroupInput")
            group_input_86.name = "Group Input"

            # node Compare
            compare_25 = color_goodsell.nodes.new("FunctionNodeCompare")
            compare_25.name = "Compare"
            compare_25.data_type = "INT"
            compare_25.mode = "ELEMENT"
            compare_25.operation = "EQUAL"
            # B_INT
            compare_25.inputs[3].default_value = 6

            # node Named Attribute
            named_attribute_20 = color_goodsell.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_20.name = "Named Attribute"
            named_attribute_20.data_type = "INT"
            # Name
            named_attribute_20.inputs[0].default_value = "atomic_number"

            # node Mix
            mix_4 = color_goodsell.nodes.new("ShaderNodeMix")
            mix_4.name = "Mix"
            mix_4.blend_type = "MULTIPLY"
            mix_4.clamp_factor = False
            mix_4.clamp_result = False
            mix_4.data_type = "RGBA"
            mix_4.factor_mode = "UNIFORM"

            # node Mix.001
            mix_001_2 = color_goodsell.nodes.new("ShaderNodeMix")
            mix_001_2.name = "Mix.001"
            mix_001_2.blend_type = "MULTIPLY"
            mix_001_2.clamp_factor = False
            mix_001_2.clamp_result = False
            mix_001_2.data_type = "RGBA"
            mix_001_2.factor_mode = "UNIFORM"

            # node Switch
            switch_24 = color_goodsell.nodes.new("GeometryNodeSwitch")
            switch_24.name = "Switch"
            switch_24.input_type = "FLOAT"
            # False
            switch_24.inputs[1].default_value = 0.0

            # node Boolean Math
            boolean_math_22 = color_goodsell.nodes.new("FunctionNodeBooleanMath")
            boolean_math_22.name = "Boolean Math"
            boolean_math_22.operation = "NOT"

            # node Switch.001
            switch_001_15 = color_goodsell.nodes.new("GeometryNodeSwitch")
            switch_001_15.name = "Switch.001"
            switch_001_15.input_type = "BOOLEAN"

            # Set locations
            group_output_87.location = (440.0, -0.0)
            group_input_86.location = (-409.4183044433594, -118.92835998535156)
            compare_25.location = (-440.0, 100.0)
            named_attribute_20.location = (-600.0, 100.0)
            mix_4.location = (0.0, 0.0)
            mix_001_2.location = (160.0, 0.0)
            switch_24.location = (-196.15087890625, 16.81116485595703)
            boolean_math_22.location = (-440.0, 220.0)
            switch_001_15.location = (-213.6559295654297, 230.88919067382812)

            # Set dimensions
            group_output_87.width, group_output_87.height = 140.0, 100.0
            group_input_86.width, group_input_86.height = 140.0, 100.0
            compare_25.width, compare_25.height = 140.0, 100.0
            named_attribute_20.width, named_attribute_20.height = 140.0, 100.0
            mix_4.width, mix_4.height = 140.0, 100.0
            mix_001_2.width, mix_001_2.height = 140.0, 100.0
            switch_24.width, switch_24.height = 140.0, 100.0
            boolean_math_22.width, boolean_math_22.height = 140.0, 100.0
            switch_001_15.width, switch_001_15.height = 140.0, 100.0

            # initialize color_goodsell links
            # group_input_86.Color -> mix_4.A
            color_goodsell.links.new(group_input_86.outputs[2], mix_4.inputs[6])
            # mix_001_2.Result -> group_output_87.Color
            color_goodsell.links.new(mix_001_2.outputs[2], group_output_87.inputs[0])
            # group_input_86.Color -> mix_4.B
            color_goodsell.links.new(group_input_86.outputs[2], mix_4.inputs[7])
            # group_input_86.Factor -> switch_24.True
            color_goodsell.links.new(group_input_86.outputs[1], switch_24.inputs[2])
            # named_attribute_20.Attribute -> compare_25.A
            color_goodsell.links.new(
                named_attribute_20.outputs[0], compare_25.inputs[2]
            )
            # switch_24.Output -> mix_4.Factor
            color_goodsell.links.new(switch_24.outputs[0], mix_4.inputs[0])
            # mix_4.Result -> mix_001_2.A
            color_goodsell.links.new(mix_4.outputs[2], mix_001_2.inputs[6])
            # mix_4.Result -> mix_001_2.B
            color_goodsell.links.new(mix_4.outputs[2], mix_001_2.inputs[7])
            # switch_24.Output -> mix_001_2.Factor
            color_goodsell.links.new(switch_24.outputs[0], mix_001_2.inputs[0])
            # compare_25.Result -> boolean_math_22.Boolean
            color_goodsell.links.new(compare_25.outputs[0], boolean_math_22.inputs[0])
            # switch_001_15.Output -> switch_24.Switch
            color_goodsell.links.new(switch_001_15.outputs[0], switch_24.inputs[0])
            # group_input_86.Invert -> switch_001_15.Switch
            color_goodsell.links.new(group_input_86.outputs[0], switch_001_15.inputs[0])
            # boolean_math_22.Boolean -> switch_001_15.False
            color_goodsell.links.new(
                boolean_math_22.outputs[0], switch_001_15.inputs[1]
            )
            # compare_25.Result -> switch_001_15.True
            color_goodsell.links.new(compare_25.outputs[0], switch_001_15.inputs[2])
            return color_goodsell

        color_goodsell = color_goodsell_node_group()

        # initialize sample_mix_vector node group
        def sample_mix_vector_node_group():
            sample_mix_vector = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Sample Mix Vector"
            )

            sample_mix_vector.color_tag = "GEOMETRY"
            sample_mix_vector.description = ""

            # sample_mix_vector interface
            # Socket Vector
            vector_socket_7 = sample_mix_vector.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket_7.subtype = "NONE"
            vector_socket_7.default_value = (0.0, 0.0, 0.0)
            vector_socket_7.min_value = -3.4028234663852886e38
            vector_socket_7.max_value = 3.4028234663852886e38
            vector_socket_7.attribute_domain = "POINT"

            # Socket A
            a_socket_1 = sample_mix_vector.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            a_socket_1.attribute_domain = "POINT"

            # Socket B
            b_socket_2 = sample_mix_vector.interface.new_socket(
                name="B", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            b_socket_2.attribute_domain = "POINT"

            # Socket Factor
            factor_socket_2 = sample_mix_vector.interface.new_socket(
                name="Factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_2.subtype = "FACTOR"
            factor_socket_2.default_value = 0.5
            factor_socket_2.min_value = 0.0
            factor_socket_2.max_value = 1.0
            factor_socket_2.attribute_domain = "POINT"

            # Socket Position
            position_socket_6 = sample_mix_vector.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket_6.subtype = "NONE"
            position_socket_6.default_value = (0.0, 0.0, 0.0)
            position_socket_6.min_value = -3.4028234663852886e38
            position_socket_6.max_value = 3.4028234663852886e38
            position_socket_6.attribute_domain = "POINT"
            position_socket_6.hide_value = True

            # Socket Index
            index_socket_9 = sample_mix_vector.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_9.subtype = "NONE"
            index_socket_9.default_value = 0
            index_socket_9.min_value = -2147483648
            index_socket_9.max_value = 2147483647
            index_socket_9.attribute_domain = "POINT"

            # initialize sample_mix_vector nodes
            # node Group Output
            group_output_88 = sample_mix_vector.nodes.new("NodeGroupOutput")
            group_output_88.name = "Group Output"
            group_output_88.is_active_output = True

            # node Sample Index.002
            sample_index_002_4 = sample_mix_vector.nodes.new("GeometryNodeSampleIndex")
            sample_index_002_4.name = "Sample Index.002"
            sample_index_002_4.clamp = False
            sample_index_002_4.data_type = "FLOAT_VECTOR"
            sample_index_002_4.domain = "POINT"

            # node Sample Index.003
            sample_index_003_3 = sample_mix_vector.nodes.new("GeometryNodeSampleIndex")
            sample_index_003_3.name = "Sample Index.003"
            sample_index_003_3.clamp = False
            sample_index_003_3.data_type = "FLOAT_VECTOR"
            sample_index_003_3.domain = "POINT"

            # node Group Input
            group_input_87 = sample_mix_vector.nodes.new("NodeGroupInput")
            group_input_87.name = "Group Input"

            # node Mix.001
            mix_001_3 = sample_mix_vector.nodes.new("ShaderNodeMix")
            mix_001_3.name = "Mix.001"
            mix_001_3.blend_type = "MIX"
            mix_001_3.clamp_factor = True
            mix_001_3.clamp_result = False
            mix_001_3.data_type = "VECTOR"
            mix_001_3.factor_mode = "UNIFORM"

            # Set locations
            group_output_88.location = (360.0, 180.0)
            sample_index_002_4.location = (-40.0, 260.0)
            sample_index_003_3.location = (-40.0, 60.0)
            group_input_87.location = (-492.72479248046875, -5.606773376464844)
            mix_001_3.location = (140.0, 260.0)

            # Set dimensions
            group_output_88.width, group_output_88.height = 140.0, 100.0
            sample_index_002_4.width, sample_index_002_4.height = 140.0, 100.0
            sample_index_003_3.width, sample_index_003_3.height = 140.0, 100.0
            group_input_87.width, group_input_87.height = 140.0, 100.0
            mix_001_3.width, mix_001_3.height = 140.0, 100.0

            # initialize sample_mix_vector links
            # group_input_87.A -> sample_index_002_4.Geometry
            sample_mix_vector.links.new(
                group_input_87.outputs[0], sample_index_002_4.inputs[0]
            )
            # group_input_87.B -> sample_index_003_3.Geometry
            sample_mix_vector.links.new(
                group_input_87.outputs[1], sample_index_003_3.inputs[0]
            )
            # group_input_87.Position -> sample_index_002_4.Value
            sample_mix_vector.links.new(
                group_input_87.outputs[3], sample_index_002_4.inputs[1]
            )
            # group_input_87.Position -> sample_index_003_3.Value
            sample_mix_vector.links.new(
                group_input_87.outputs[3], sample_index_003_3.inputs[1]
            )
            # sample_index_002_4.Value -> mix_001_3.A
            sample_mix_vector.links.new(
                sample_index_002_4.outputs[0], mix_001_3.inputs[4]
            )
            # sample_index_003_3.Value -> mix_001_3.B
            sample_mix_vector.links.new(
                sample_index_003_3.outputs[0], mix_001_3.inputs[5]
            )
            # group_input_87.Factor -> mix_001_3.Factor
            sample_mix_vector.links.new(group_input_87.outputs[2], mix_001_3.inputs[0])
            # mix_001_3.Result -> group_output_88.Vector
            sample_mix_vector.links.new(mix_001_3.outputs[1], group_output_88.inputs[0])
            # group_input_87.Index -> sample_index_002_4.Index
            sample_mix_vector.links.new(
                group_input_87.outputs[4], sample_index_002_4.inputs[2]
            )
            # group_input_87.Index -> sample_index_003_3.Index
            sample_mix_vector.links.new(
                group_input_87.outputs[4], sample_index_003_3.inputs[2]
            )
            return sample_mix_vector

        sample_mix_vector = sample_mix_vector_node_group()

        # initialize animate_collection_pick node group
        def animate_collection_pick_node_group():
            animate_collection_pick = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Collection Pick"
            )

            animate_collection_pick.color_tag = "INPUT"
            animate_collection_pick.description = "Pick items from a collection based on the index given. The current and next items in the collection are given for interpolation"

            # animate_collection_pick interface
            # Socket Current
            current_socket = animate_collection_pick.interface.new_socket(
                name="Current", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            current_socket.attribute_domain = "POINT"

            # Socket Next
            next_socket = animate_collection_pick.interface.new_socket(
                name="Next", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            next_socket.attribute_domain = "POINT"

            # Socket Collection
            collection_socket = animate_collection_pick.interface.new_socket(
                name="Collection", in_out="INPUT", socket_type="NodeSocketCollection"
            )
            collection_socket.attribute_domain = "POINT"

            # Socket Realize Instances
            realize_instances_socket = animate_collection_pick.interface.new_socket(
                name="Realize Instances", in_out="INPUT", socket_type="NodeSocketBool"
            )
            realize_instances_socket.attribute_domain = "POINT"

            # Socket Item
            item_socket = animate_collection_pick.interface.new_socket(
                name="Item", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            item_socket.subtype = "NONE"
            item_socket.default_value = 1.0
            item_socket.min_value = 0.0
            item_socket.max_value = 10000.0
            item_socket.attribute_domain = "POINT"

            # initialize animate_collection_pick nodes
            # node Compare
            compare_26 = animate_collection_pick.nodes.new("FunctionNodeCompare")
            compare_26.name = "Compare"
            compare_26.data_type = "INT"
            compare_26.mode = "ELEMENT"
            compare_26.operation = "EQUAL"

            # node Separate Geometry
            separate_geometry_10 = animate_collection_pick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_10.name = "Separate Geometry"
            separate_geometry_10.domain = "INSTANCE"

            # node Compare.001
            compare_001_12 = animate_collection_pick.nodes.new("FunctionNodeCompare")
            compare_001_12.name = "Compare.001"
            compare_001_12.data_type = "INT"
            compare_001_12.mode = "ELEMENT"
            compare_001_12.operation = "EQUAL"

            # node Separate Geometry.001
            separate_geometry_001_4 = animate_collection_pick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_4.name = "Separate Geometry.001"
            separate_geometry_001_4.domain = "INSTANCE"

            # node Index.001
            index_001_2 = animate_collection_pick.nodes.new("GeometryNodeInputIndex")
            index_001_2.name = "Index.001"

            # node Reroute.001
            reroute_001_14 = animate_collection_pick.nodes.new("NodeReroute")
            reroute_001_14.name = "Reroute.001"
            # node Index
            index_13 = animate_collection_pick.nodes.new("GeometryNodeInputIndex")
            index_13.name = "Index"

            # node Math.006
            math_006_2 = animate_collection_pick.nodes.new("ShaderNodeMath")
            math_006_2.name = "Math.006"
            math_006_2.operation = "MINIMUM"
            math_006_2.use_clamp = False

            # node Group Output
            group_output_89 = animate_collection_pick.nodes.new("NodeGroupOutput")
            group_output_89.name = "Group Output"
            group_output_89.is_active_output = True

            # node Realize Instances
            realize_instances_2 = animate_collection_pick.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_2.name = "Realize Instances"
            # Selection
            realize_instances_2.inputs[1].default_value = True
            # Depth
            realize_instances_2.inputs[3].default_value = 0

            # node Realize Instances.001
            realize_instances_001_1 = animate_collection_pick.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_001_1.name = "Realize Instances.001"
            # Selection
            realize_instances_001_1.inputs[1].default_value = True
            # Depth
            realize_instances_001_1.inputs[3].default_value = 0

            # node Domain Size
            domain_size_5 = animate_collection_pick.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_5.name = "Domain Size"
            domain_size_5.component = "INSTANCES"

            # node Math.003
            math_003_5 = animate_collection_pick.nodes.new("ShaderNodeMath")
            math_003_5.label = "x - 1"
            math_003_5.name = "Math.003"
            math_003_5.hide = True
            math_003_5.operation = "SUBTRACT"
            math_003_5.use_clamp = False
            # Value_001
            math_003_5.inputs[1].default_value = 1.0

            # node Math
            math_20 = animate_collection_pick.nodes.new("ShaderNodeMath")
            math_20.label = "x + 1"
            math_20.name = "Math"
            math_20.hide = True
            math_20.operation = "ADD"
            math_20.use_clamp = False
            # Value_001
            math_20.inputs[1].default_value = 1.0

            # node Math.002
            math_002_8 = animate_collection_pick.nodes.new("ShaderNodeMath")
            math_002_8.name = "Math.002"
            math_002_8.operation = "FLOOR"
            math_002_8.use_clamp = False

            # node Float to Integer
            float_to_integer = animate_collection_pick.nodes.new(
                "FunctionNodeFloatToInt"
            )
            float_to_integer.name = "Float to Integer"
            float_to_integer.rounding_mode = "ROUND"

            # node Collection Info
            collection_info_1 = animate_collection_pick.nodes.new(
                "GeometryNodeCollectionInfo"
            )
            collection_info_1.name = "Collection Info"
            collection_info_1.transform_space = "RELATIVE"
            # Separate Children
            collection_info_1.inputs[1].default_value = True
            # Reset Children
            collection_info_1.inputs[2].default_value = False

            # node Group Input
            group_input_88 = animate_collection_pick.nodes.new("NodeGroupInput")
            group_input_88.name = "Group Input"

            # Set locations
            compare_26.location = (328.0, -140.0)
            separate_geometry_10.location = (328.0, 20.0)
            compare_001_12.location = (160.0, -500.0)
            separate_geometry_001_4.location = (328.0, -380.0)
            index_001_2.location = (-20.0, -560.0)
            reroute_001_14.location = (100.0, -240.0)
            index_13.location = (160.0, -220.0)
            math_006_2.location = (-20.0, -620.0)
            group_output_89.location = (791.573974609375, 55.48637390136719)
            realize_instances_2.location = (488.0, 20.0)
            realize_instances_001_1.location = (488.0, -380.0)
            domain_size_5.location = (-200.0, -780.0)
            math_003_5.location = (-200.0, -740.0)
            math_20.location = (-200.0, -680.0)
            math_002_8.location = (-600.0, -340.0)
            float_to_integer.location = (-420.0, -340.0)
            collection_info_1.location = (-420.0, -460.0)
            group_input_88.location = (-787.5955810546875, -365.5730895996094)

            # Set dimensions
            compare_26.width, compare_26.height = 140.0, 100.0
            separate_geometry_10.width, separate_geometry_10.height = 140.0, 100.0
            compare_001_12.width, compare_001_12.height = 140.0, 100.0
            separate_geometry_001_4.width, separate_geometry_001_4.height = 140.0, 100.0
            index_001_2.width, index_001_2.height = 140.0, 100.0
            reroute_001_14.width, reroute_001_14.height = 16.0, 100.0
            index_13.width, index_13.height = 140.0, 100.0
            math_006_2.width, math_006_2.height = 140.0, 100.0
            group_output_89.width, group_output_89.height = 140.0, 100.0
            realize_instances_2.width, realize_instances_2.height = (
                134.7681884765625,
                100.0,
            )
            realize_instances_001_1.width, realize_instances_001_1.height = 140.0, 100.0
            domain_size_5.width, domain_size_5.height = 140.0, 100.0
            math_003_5.width, math_003_5.height = 140.0, 100.0
            math_20.width, math_20.height = 140.0, 100.0
            math_002_8.width, math_002_8.height = 140.0, 100.0
            float_to_integer.width, float_to_integer.height = 140.0, 100.0
            collection_info_1.width, collection_info_1.height = 140.0, 100.0
            group_input_88.width, group_input_88.height = 140.0, 100.0

            # initialize animate_collection_pick links
            # group_input_88.Collection -> collection_info_1.Collection
            animate_collection_pick.links.new(
                group_input_88.outputs[0], collection_info_1.inputs[0]
            )
            # reroute_001_14.Output -> separate_geometry_10.Geometry
            animate_collection_pick.links.new(
                reroute_001_14.outputs[0], separate_geometry_10.inputs[0]
            )
            # index_13.Index -> compare_26.A
            animate_collection_pick.links.new(index_13.outputs[0], compare_26.inputs[2])
            # compare_26.Result -> separate_geometry_10.Selection
            animate_collection_pick.links.new(
                compare_26.outputs[0], separate_geometry_10.inputs[1]
            )
            # separate_geometry_10.Selection -> realize_instances_2.Geometry
            animate_collection_pick.links.new(
                separate_geometry_10.outputs[0], realize_instances_2.inputs[0]
            )
            # float_to_integer.Integer -> compare_26.B
            animate_collection_pick.links.new(
                float_to_integer.outputs[0], compare_26.inputs[3]
            )
            # float_to_integer.Integer -> math_20.Value
            animate_collection_pick.links.new(
                float_to_integer.outputs[0], math_20.inputs[0]
            )
            # reroute_001_14.Output -> separate_geometry_001_4.Geometry
            animate_collection_pick.links.new(
                reroute_001_14.outputs[0], separate_geometry_001_4.inputs[0]
            )
            # index_001_2.Index -> compare_001_12.A
            animate_collection_pick.links.new(
                index_001_2.outputs[0], compare_001_12.inputs[2]
            )
            # compare_001_12.Result -> separate_geometry_001_4.Selection
            animate_collection_pick.links.new(
                compare_001_12.outputs[0], separate_geometry_001_4.inputs[1]
            )
            # separate_geometry_001_4.Selection -> realize_instances_001_1.Geometry
            animate_collection_pick.links.new(
                separate_geometry_001_4.outputs[0], realize_instances_001_1.inputs[0]
            )
            # collection_info_1.Instances -> reroute_001_14.Input
            animate_collection_pick.links.new(
                collection_info_1.outputs[0], reroute_001_14.inputs[0]
            )
            # collection_info_1.Instances -> domain_size_5.Geometry
            animate_collection_pick.links.new(
                collection_info_1.outputs[0], domain_size_5.inputs[0]
            )
            # domain_size_5.Instance Count -> math_003_5.Value
            animate_collection_pick.links.new(
                domain_size_5.outputs[5], math_003_5.inputs[0]
            )
            # math_003_5.Value -> math_006_2.Value
            animate_collection_pick.links.new(
                math_003_5.outputs[0], math_006_2.inputs[0]
            )
            # math_20.Value -> math_006_2.Value
            animate_collection_pick.links.new(math_20.outputs[0], math_006_2.inputs[1])
            # math_006_2.Value -> compare_001_12.B
            animate_collection_pick.links.new(
                math_006_2.outputs[0], compare_001_12.inputs[3]
            )
            # realize_instances_2.Geometry -> group_output_89.Current
            animate_collection_pick.links.new(
                realize_instances_2.outputs[0], group_output_89.inputs[0]
            )
            # realize_instances_001_1.Geometry -> group_output_89.Next
            animate_collection_pick.links.new(
                realize_instances_001_1.outputs[0], group_output_89.inputs[1]
            )
            # group_input_88.Item -> math_002_8.Value
            animate_collection_pick.links.new(
                group_input_88.outputs[2], math_002_8.inputs[0]
            )
            # math_002_8.Value -> float_to_integer.Float
            animate_collection_pick.links.new(
                math_002_8.outputs[0], float_to_integer.inputs[0]
            )
            # group_input_88.Realize Instances -> realize_instances_2.Realize All
            animate_collection_pick.links.new(
                group_input_88.outputs[1], realize_instances_2.inputs[2]
            )
            # group_input_88.Realize Instances -> realize_instances_001_1.Realize All
            animate_collection_pick.links.new(
                group_input_88.outputs[1], realize_instances_001_1.inputs[2]
            )
            return animate_collection_pick

        animate_collection_pick = animate_collection_pick_node_group()

        # initialize animate_fraction node group
        def animate_fraction_node_group():
            animate_fraction = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Fraction"
            )

            animate_fraction.color_tag = "CONVERTER"
            animate_fraction.description = (
                "Interpolate the fraction component of a float"
            )

            # animate_fraction interface
            # Socket Float
            float_socket_3 = animate_fraction.interface.new_socket(
                name="Float", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            float_socket_3.subtype = "NONE"
            float_socket_3.default_value = 0.0
            float_socket_3.min_value = -3.4028234663852886e38
            float_socket_3.max_value = 3.4028234663852886e38
            float_socket_3.attribute_domain = "POINT"

            # Socket Interpolate
            interpolate_socket_1 = animate_fraction.interface.new_socket(
                name="Interpolate", in_out="INPUT", socket_type="NodeSocketBool"
            )
            interpolate_socket_1.attribute_domain = "POINT"

            # Socket Smoother Step
            smoother_step_socket_2 = animate_fraction.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket_2.attribute_domain = "POINT"

            # Socket Float
            float_socket_4 = animate_fraction.interface.new_socket(
                name="Float", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            float_socket_4.subtype = "NONE"
            float_socket_4.default_value = 0.0
            float_socket_4.min_value = -3.4028234663852886e38
            float_socket_4.max_value = 3.4028234663852886e38
            float_socket_4.attribute_domain = "POINT"

            # initialize animate_fraction nodes
            # node Group Output
            group_output_90 = animate_fraction.nodes.new("NodeGroupOutput")
            group_output_90.name = "Group Output"
            group_output_90.is_active_output = True

            # node Switch
            switch_25 = animate_fraction.nodes.new("GeometryNodeSwitch")
            switch_25.name = "Switch"
            switch_25.input_type = "FLOAT"

            # node Group Input
            group_input_89 = animate_fraction.nodes.new("NodeGroupInput")
            group_input_89.name = "Group Input"

            # node Switch.001
            switch_001_16 = animate_fraction.nodes.new("GeometryNodeSwitch")
            switch_001_16.name = "Switch.001"
            switch_001_16.input_type = "FLOAT"

            # node Map Range
            map_range_6 = animate_fraction.nodes.new("ShaderNodeMapRange")
            map_range_6.name = "Map Range"
            map_range_6.clamp = True
            map_range_6.data_type = "FLOAT"
            map_range_6.interpolation_type = "SMOOTHERSTEP"
            # From Min
            map_range_6.inputs[1].default_value = 0.0
            # From Max
            map_range_6.inputs[2].default_value = 1.0
            # To Min
            map_range_6.inputs[3].default_value = 0.0
            # To Max
            map_range_6.inputs[4].default_value = 1.0

            # node Math
            math_21 = animate_fraction.nodes.new("ShaderNodeMath")
            math_21.name = "Math"
            math_21.operation = "FLOOR"
            math_21.use_clamp = False

            # node Math.001
            math_001_10 = animate_fraction.nodes.new("ShaderNodeMath")
            math_001_10.name = "Math.001"
            math_001_10.operation = "FRACT"
            math_001_10.use_clamp = False

            # Set locations
            group_output_90.location = (-80.0, 160.0)
            switch_25.location = (-460.0, -80.0)
            group_input_89.location = (-860.0, 120.0)
            switch_001_16.location = (-260.0, 160.0)
            map_range_6.location = (-460.0, -240.0)
            math_21.location = (-460.0, 80.0)
            math_001_10.location = (-640.0, -140.0)

            # Set dimensions
            group_output_90.width, group_output_90.height = 140.0, 100.0
            switch_25.width, switch_25.height = 140.0, 100.0
            group_input_89.width, group_input_89.height = 140.0, 100.0
            switch_001_16.width, switch_001_16.height = 140.0, 100.0
            map_range_6.width, map_range_6.height = 140.0, 100.0
            math_21.width, math_21.height = 140.0, 100.0
            math_001_10.width, math_001_10.height = 140.0, 100.0

            # initialize animate_fraction links
            # group_input_89.Float -> math_001_10.Value
            animate_fraction.links.new(group_input_89.outputs[2], math_001_10.inputs[0])
            # math_001_10.Value -> map_range_6.Value
            animate_fraction.links.new(math_001_10.outputs[0], map_range_6.inputs[0])
            # map_range_6.Result -> switch_25.True
            animate_fraction.links.new(map_range_6.outputs[0], switch_25.inputs[2])
            # group_input_89.Smoother Step -> switch_25.Switch
            animate_fraction.links.new(group_input_89.outputs[1], switch_25.inputs[0])
            # math_001_10.Value -> switch_25.False
            animate_fraction.links.new(math_001_10.outputs[0], switch_25.inputs[1])
            # switch_25.Output -> switch_001_16.True
            animate_fraction.links.new(switch_25.outputs[0], switch_001_16.inputs[2])
            # group_input_89.Interpolate -> switch_001_16.Switch
            animate_fraction.links.new(
                group_input_89.outputs[0], switch_001_16.inputs[0]
            )
            # group_input_89.Float -> math_21.Value
            animate_fraction.links.new(group_input_89.outputs[2], math_21.inputs[0])
            # math_21.Value -> switch_001_16.False
            animate_fraction.links.new(math_21.outputs[0], switch_001_16.inputs[1])
            # switch_001_16.Output -> group_output_90.Float
            animate_fraction.links.new(
                switch_001_16.outputs[0], group_output_90.inputs[0]
            )
            return animate_fraction

        animate_fraction = animate_fraction_node_group()

        # initialize sample_mix_float node group
        def sample_mix_float_node_group():
            sample_mix_float = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Sample Mix Float"
            )

            sample_mix_float.color_tag = "GEOMETRY"
            sample_mix_float.description = ""

            # sample_mix_float interface
            # Socket Value
            value_socket_10 = sample_mix_float.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_10.subtype = "NONE"
            value_socket_10.default_value = 0.0
            value_socket_10.min_value = -3.4028234663852886e38
            value_socket_10.max_value = 3.4028234663852886e38
            value_socket_10.attribute_domain = "POINT"

            # Socket A
            a_socket_2 = sample_mix_float.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            a_socket_2.attribute_domain = "POINT"

            # Socket B
            b_socket_3 = sample_mix_float.interface.new_socket(
                name="B", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            b_socket_3.attribute_domain = "POINT"

            # Socket Factor
            factor_socket_3 = sample_mix_float.interface.new_socket(
                name="Factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_3.subtype = "FACTOR"
            factor_socket_3.default_value = 0.5
            factor_socket_3.min_value = 0.0
            factor_socket_3.max_value = 1.0
            factor_socket_3.attribute_domain = "POINT"

            # Socket Value
            value_socket_11 = sample_mix_float.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_11.subtype = "NONE"
            value_socket_11.default_value = 0.0
            value_socket_11.min_value = -3.4028234663852886e38
            value_socket_11.max_value = 3.4028234663852886e38
            value_socket_11.attribute_domain = "POINT"
            value_socket_11.hide_value = True

            # Socket Index
            index_socket_10 = sample_mix_float.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_10.subtype = "NONE"
            index_socket_10.default_value = 0
            index_socket_10.min_value = -2147483648
            index_socket_10.max_value = 2147483647
            index_socket_10.attribute_domain = "POINT"

            # initialize sample_mix_float nodes
            # node Group Output
            group_output_91 = sample_mix_float.nodes.new("NodeGroupOutput")
            group_output_91.name = "Group Output"
            group_output_91.is_active_output = True

            # node Sample Index.002
            sample_index_002_5 = sample_mix_float.nodes.new("GeometryNodeSampleIndex")
            sample_index_002_5.name = "Sample Index.002"
            sample_index_002_5.clamp = False
            sample_index_002_5.data_type = "FLOAT"
            sample_index_002_5.domain = "POINT"

            # node Sample Index.003
            sample_index_003_4 = sample_mix_float.nodes.new("GeometryNodeSampleIndex")
            sample_index_003_4.name = "Sample Index.003"
            sample_index_003_4.clamp = False
            sample_index_003_4.data_type = "FLOAT"
            sample_index_003_4.domain = "POINT"

            # node Group Input
            group_input_90 = sample_mix_float.nodes.new("NodeGroupInput")
            group_input_90.name = "Group Input"

            # node Mix
            mix_5 = sample_mix_float.nodes.new("ShaderNodeMix")
            mix_5.name = "Mix"
            mix_5.blend_type = "MIX"
            mix_5.clamp_factor = True
            mix_5.clamp_result = False
            mix_5.data_type = "FLOAT"
            mix_5.factor_mode = "UNIFORM"

            # Set locations
            group_output_91.location = (360.0, 180.0)
            sample_index_002_5.location = (-40.0, 260.0)
            sample_index_003_4.location = (-40.0, 60.0)
            group_input_90.location = (-492.72479248046875, -5.606773376464844)
            mix_5.location = (160.8731689453125, 214.3348846435547)

            # Set dimensions
            group_output_91.width, group_output_91.height = 140.0, 100.0
            sample_index_002_5.width, sample_index_002_5.height = 140.0, 100.0
            sample_index_003_4.width, sample_index_003_4.height = 140.0, 100.0
            group_input_90.width, group_input_90.height = 140.0, 100.0
            mix_5.width, mix_5.height = 140.0, 100.0

            # initialize sample_mix_float links
            # group_input_90.A -> sample_index_002_5.Geometry
            sample_mix_float.links.new(
                group_input_90.outputs[0], sample_index_002_5.inputs[0]
            )
            # group_input_90.B -> sample_index_003_4.Geometry
            sample_mix_float.links.new(
                group_input_90.outputs[1], sample_index_003_4.inputs[0]
            )
            # group_input_90.Value -> sample_index_002_5.Value
            sample_mix_float.links.new(
                group_input_90.outputs[3], sample_index_002_5.inputs[1]
            )
            # group_input_90.Value -> sample_index_003_4.Value
            sample_mix_float.links.new(
                group_input_90.outputs[3], sample_index_003_4.inputs[1]
            )
            # sample_index_002_5.Value -> mix_5.A
            sample_mix_float.links.new(sample_index_002_5.outputs[0], mix_5.inputs[2])
            # sample_index_003_4.Value -> mix_5.B
            sample_mix_float.links.new(sample_index_003_4.outputs[0], mix_5.inputs[3])
            # group_input_90.Factor -> mix_5.Factor
            sample_mix_float.links.new(group_input_90.outputs[2], mix_5.inputs[0])
            # mix_5.Result -> group_output_91.Value
            sample_mix_float.links.new(mix_5.outputs[0], group_output_91.inputs[0])
            # group_input_90.Index -> sample_index_002_5.Index
            sample_mix_float.links.new(
                group_input_90.outputs[4], sample_index_002_5.inputs[2]
            )
            # group_input_90.Index -> sample_index_003_4.Index
            sample_mix_float.links.new(
                group_input_90.outputs[4], sample_index_003_4.inputs[2]
            )
            return sample_mix_float

        sample_mix_float = sample_mix_float_node_group()

        # initialize animate_frames node group
        def animate_frames_node_group():
            animate_frames = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Frames"
            )

            animate_frames.color_tag = "GEOMETRY"
            animate_frames.description = ""

            animate_frames.is_modifier = True

            # animate_frames interface
            # Socket Atoms
            atoms_socket_20 = animate_frames.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_20.attribute_domain = "POINT"
            atoms_socket_20.description = (
                "Atomic geometry with new positions based on the trajectory"
            )

            # Socket Atoms
            atoms_socket_21 = animate_frames.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_21.attribute_domain = "POINT"
            atoms_socket_21.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_30 = animate_frames.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_30.attribute_domain = "POINT"
            selection_socket_30.hide_value = True
            selection_socket_30.description = "Selection of atoms to apply this node to"

            # Socket Frames
            frames_socket_1 = animate_frames.interface.new_socket(
                name="Frames", in_out="INPUT", socket_type="NodeSocketCollection"
            )
            frames_socket_1.attribute_domain = "POINT"
            frames_socket_1.description = (
                "Collection which holds the frames of the trajectory"
            )

            # Socket Smoother Step
            smoother_step_socket_3 = animate_frames.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket_3.attribute_domain = "POINT"
            smoother_step_socket_3.description = (
                "Ease in and out of the individual frames if interpolating"
            )

            # Socket Interpolate
            interpolate_socket_2 = animate_frames.interface.new_socket(
                name="Interpolate", in_out="INPUT", socket_type="NodeSocketBool"
            )
            interpolate_socket_2.attribute_domain = "POINT"
            interpolate_socket_2.description = (
                "Whether to interpolate between frames of a trajectory or snap"
            )

            # Socket Frame
            frame_socket = animate_frames.interface.new_socket(
                name="Frame", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            frame_socket.subtype = "NONE"
            frame_socket.default_value = 0.0
            frame_socket.min_value = 0.0
            frame_socket.max_value = 10000.0
            frame_socket.attribute_domain = "POINT"
            frame_socket.description = "Which frame to select from the collection. The fraction component of the float is how much to interpolate between the current and next frame"

            # initialize animate_frames nodes
            # node Named Attribute.001
            named_attribute_001_9 = animate_frames.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_9.name = "Named Attribute.001"
            named_attribute_001_9.data_type = "FLOAT"
            # Name
            named_attribute_001_9.inputs[0].default_value = "b_factor"

            # node Group Input
            group_input_91 = animate_frames.nodes.new("NodeGroupInput")
            group_input_91.name = "Group Input"

            # node Object Info
            object_info_2 = animate_frames.nodes.new("GeometryNodeObjectInfo")
            object_info_2.name = "Object Info"
            object_info_2.transform_space = "ORIGINAL"
            # As Instance
            object_info_2.inputs[1].default_value = False

            # node Transform
            transform_1 = animate_frames.nodes.new("GeometryNodeTransform")
            transform_1.name = "Transform"
            transform_1.mode = "COMPONENTS"

            # node Self Object
            self_object = animate_frames.nodes.new("GeometryNodeSelfObject")
            self_object.name = "Self Object"

            # node Group Output
            group_output_92 = animate_frames.nodes.new("NodeGroupOutput")
            group_output_92.name = "Group Output"
            group_output_92.is_active_output = True

            # node Group.002
            group_002_8 = animate_frames.nodes.new("GeometryNodeGroup")
            group_002_8.name = "Group.002"
            group_002_8.node_tree = sample_mix_vector
            # Socket_6
            group_002_8.inputs[3].default_value = (0.0, 0.0, 0.0)
            # Socket_9
            group_002_8.inputs[4].default_value = 0

            # node Set Position
            set_position_4 = animate_frames.nodes.new("GeometryNodeSetPosition")
            set_position_4.name = "Set Position"
            # Offset
            set_position_4.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group.001
            group_001_16 = animate_frames.nodes.new("GeometryNodeGroup")
            group_001_16.name = "Group.001"
            group_001_16.node_tree = animate_collection_pick
            # Socket_2
            group_001_16.inputs[1].default_value = True

            # node Group
            group_26 = animate_frames.nodes.new("GeometryNodeGroup")
            group_26.name = "Group"
            group_26.node_tree = animate_fraction

            # node Vector Math
            vector_math_14 = animate_frames.nodes.new("ShaderNodeVectorMath")
            vector_math_14.name = "Vector Math"
            vector_math_14.operation = "ABSOLUTE"

            # node Group.003
            group_003_3 = animate_frames.nodes.new("GeometryNodeGroup")
            group_003_3.name = "Group.003"
            group_003_3.node_tree = sample_mix_float
            # Socket_9
            group_003_3.inputs[4].default_value = 0

            # node Store Named Attribute
            store_named_attribute_8 = animate_frames.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_8.name = "Store Named Attribute"
            store_named_attribute_8.data_type = "FLOAT"
            store_named_attribute_8.domain = "POINT"
            # Selection
            store_named_attribute_8.inputs[1].default_value = True
            # Name
            store_named_attribute_8.inputs[2].default_value = "b_factor"

            # Set locations
            named_attribute_001_9.location = (-320.0, -220.0)
            group_input_91.location = (-720.0, 260.0)
            object_info_2.location = (540.0, 200.0)
            transform_1.location = (740.0, 300.0)
            self_object.location = (380.0, 40.0)
            group_output_92.location = (960.0, 280.0)
            group_002_8.location = (-100.0, 160.0)
            set_position_4.location = (180.0, 280.0)
            group_001_16.location = (-400.0, 100.0)
            group_26.location = (-400.0, -60.0)
            vector_math_14.location = (740.0, 120.0)
            group_003_3.location = (-100.0, -60.0)
            store_named_attribute_8.location = (360.0, 280.0)

            # Set dimensions
            named_attribute_001_9.width, named_attribute_001_9.height = 140.0, 100.0
            group_input_91.width, group_input_91.height = 140.0, 100.0
            object_info_2.width, object_info_2.height = 140.0, 100.0
            transform_1.width, transform_1.height = 140.0, 100.0
            self_object.width, self_object.height = 140.0, 100.0
            group_output_92.width, group_output_92.height = 140.0, 100.0
            group_002_8.width, group_002_8.height = 235.44537353515625, 100.0
            set_position_4.width, set_position_4.height = 140.0, 100.0
            group_001_16.width, group_001_16.height = 222.0662841796875, 100.0
            group_26.width, group_26.height = 214.65057373046875, 100.0
            vector_math_14.width, vector_math_14.height = 140.0, 100.0
            group_003_3.width, group_003_3.height = 235.44537353515625, 100.0
            store_named_attribute_8.width, store_named_attribute_8.height = 140.0, 100.0

            # initialize animate_frames links
            # transform_1.Geometry -> group_output_92.Atoms
            animate_frames.links.new(transform_1.outputs[0], group_output_92.inputs[0])
            # self_object.Self Object -> object_info_2.Object
            animate_frames.links.new(self_object.outputs[0], object_info_2.inputs[0])
            # object_info_2.Location -> transform_1.Translation
            animate_frames.links.new(object_info_2.outputs[1], transform_1.inputs[1])
            # object_info_2.Rotation -> transform_1.Rotation
            animate_frames.links.new(object_info_2.outputs[2], transform_1.inputs[2])
            # vector_math_14.Vector -> transform_1.Scale
            animate_frames.links.new(vector_math_14.outputs[0], transform_1.inputs[3])
            # store_named_attribute_8.Geometry -> transform_1.Geometry
            animate_frames.links.new(
                store_named_attribute_8.outputs[0], transform_1.inputs[0]
            )
            # group_input_91.Atoms -> set_position_4.Geometry
            animate_frames.links.new(
                group_input_91.outputs[0], set_position_4.inputs[0]
            )
            # group_input_91.Selection -> set_position_4.Selection
            animate_frames.links.new(
                group_input_91.outputs[1], set_position_4.inputs[1]
            )
            # group_001_16.Current -> group_002_8.A
            animate_frames.links.new(group_001_16.outputs[0], group_002_8.inputs[0])
            # group_001_16.Next -> group_002_8.B
            animate_frames.links.new(group_001_16.outputs[1], group_002_8.inputs[1])
            # group_input_91.Frame -> group_001_16.Item
            animate_frames.links.new(group_input_91.outputs[5], group_001_16.inputs[2])
            # group_002_8.Vector -> set_position_4.Position
            animate_frames.links.new(group_002_8.outputs[0], set_position_4.inputs[2])
            # group_26.Float -> group_002_8.Factor
            animate_frames.links.new(group_26.outputs[0], group_002_8.inputs[2])
            # group_input_91.Frame -> group_26.Float
            animate_frames.links.new(group_input_91.outputs[5], group_26.inputs[2])
            # group_input_91.Interpolate -> group_26.Interpolate
            animate_frames.links.new(group_input_91.outputs[4], group_26.inputs[0])
            # group_input_91.Smoother Step -> group_26.Smoother Step
            animate_frames.links.new(group_input_91.outputs[3], group_26.inputs[1])
            # object_info_2.Scale -> vector_math_14.Vector
            animate_frames.links.new(object_info_2.outputs[3], vector_math_14.inputs[0])
            # group_001_16.Current -> group_003_3.A
            animate_frames.links.new(group_001_16.outputs[0], group_003_3.inputs[0])
            # group_001_16.Next -> group_003_3.B
            animate_frames.links.new(group_001_16.outputs[1], group_003_3.inputs[1])
            # group_26.Float -> group_003_3.Factor
            animate_frames.links.new(group_26.outputs[0], group_003_3.inputs[2])
            # group_input_91.Frames -> group_001_16.Collection
            animate_frames.links.new(group_input_91.outputs[2], group_001_16.inputs[0])
            # named_attribute_001_9.Attribute -> group_003_3.Value
            animate_frames.links.new(
                named_attribute_001_9.outputs[0], group_003_3.inputs[3]
            )
            # set_position_4.Geometry -> store_named_attribute_8.Geometry
            animate_frames.links.new(
                set_position_4.outputs[0], store_named_attribute_8.inputs[0]
            )
            # group_003_3.Value -> store_named_attribute_8.Value
            animate_frames.links.new(
                group_003_3.outputs[0], store_named_attribute_8.inputs[3]
            )
            return animate_frames

        animate_frames = animate_frames_node_group()

        # initialize _mn_utils_split_instance node group
        def _mn_utils_split_instance_node_group():
            _mn_utils_split_instance = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_split_instance"
            )

            _mn_utils_split_instance.color_tag = "NONE"
            _mn_utils_split_instance.description = ""

            _mn_utils_split_instance.is_modifier = True

            # _mn_utils_split_instance interface
            # Socket Instance
            instance_socket = _mn_utils_split_instance.interface.new_socket(
                name="Instance", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instance_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_12 = _mn_utils_split_instance.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_12.attribute_domain = "POINT"

            # Socket Field
            field_socket_9 = _mn_utils_split_instance.interface.new_socket(
                name="Field", in_out="INPUT", socket_type="NodeSocketInt"
            )
            field_socket_9.subtype = "NONE"
            field_socket_9.default_value = 0
            field_socket_9.min_value = -2147483648
            field_socket_9.max_value = 2147483647
            field_socket_9.attribute_domain = "POINT"

            # Socket Group ID
            group_id_socket_5 = _mn_utils_split_instance.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_5.subtype = "NONE"
            group_id_socket_5.default_value = 0
            group_id_socket_5.min_value = -2147483648
            group_id_socket_5.max_value = 2147483647
            group_id_socket_5.attribute_domain = "POINT"

            # Socket Origin Offset
            origin_offset_socket = _mn_utils_split_instance.interface.new_socket(
                name="Origin Offset", in_out="INPUT", socket_type="NodeSocketVector"
            )
            origin_offset_socket.subtype = "NONE"
            origin_offset_socket.default_value = (0.0, 0.0, 0.0)
            origin_offset_socket.min_value = -10000.0
            origin_offset_socket.max_value = 10000.0
            origin_offset_socket.attribute_domain = "POINT"

            # initialize _mn_utils_split_instance nodes
            # node Compare
            compare_27 = _mn_utils_split_instance.nodes.new("FunctionNodeCompare")
            compare_27.name = "Compare"
            compare_27.data_type = "INT"
            compare_27.mode = "ELEMENT"
            compare_27.operation = "EQUAL"

            # node Bounding Box
            bounding_box = _mn_utils_split_instance.nodes.new("GeometryNodeBoundBox")
            bounding_box.name = "Bounding Box"

            # node Separate Geometry
            separate_geometry_11 = _mn_utils_split_instance.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_11.name = "Separate Geometry"
            separate_geometry_11.domain = "POINT"

            # node Mix
            mix_6 = _mn_utils_split_instance.nodes.new("ShaderNodeMix")
            mix_6.name = "Mix"
            mix_6.hide = True
            mix_6.blend_type = "MIX"
            mix_6.clamp_factor = True
            mix_6.clamp_result = False
            mix_6.data_type = "VECTOR"
            mix_6.factor_mode = "UNIFORM"
            # Factor_Float
            mix_6.inputs[0].default_value = 0.5

            # node Group Input
            group_input_92 = _mn_utils_split_instance.nodes.new("NodeGroupInput")
            group_input_92.name = "Group Input"

            # node Vector Math
            vector_math_15 = _mn_utils_split_instance.nodes.new("ShaderNodeVectorMath")
            vector_math_15.label = "-x"
            vector_math_15.name = "Vector Math"
            vector_math_15.hide = True
            vector_math_15.operation = "SCALE"
            # Scale
            vector_math_15.inputs[3].default_value = -1.0

            # node Vector Math.001
            vector_math_001_10 = _mn_utils_split_instance.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_10.name = "Vector Math.001"
            vector_math_001_10.hide = True
            vector_math_001_10.operation = "ADD"

            # node Transform Geometry
            transform_geometry_1 = _mn_utils_split_instance.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_1.name = "Transform Geometry"
            transform_geometry_1.mode = "COMPONENTS"
            # Rotation
            transform_geometry_1.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_1.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Geometry to Instance
            geometry_to_instance_1 = _mn_utils_split_instance.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_1.name = "Geometry to Instance"

            # node Translate Instances
            translate_instances = _mn_utils_split_instance.nodes.new(
                "GeometryNodeTranslateInstances"
            )
            translate_instances.name = "Translate Instances"
            # Selection
            translate_instances.inputs[1].default_value = True
            # Local Space
            translate_instances.inputs[3].default_value = True

            # node Group Output
            group_output_93 = _mn_utils_split_instance.nodes.new("NodeGroupOutput")
            group_output_93.name = "Group Output"
            group_output_93.is_active_output = True

            # Set locations
            compare_27.location = (-1.379150390625, -79.22293090820312)
            bounding_box.location = (0.0, 220.0)
            separate_geometry_11.location = (1.379150390625, 79.22293090820312)
            mix_6.location = (0.0, 260.0)
            group_input_92.location = (-201.379150390625, 0.0)
            vector_math_15.location = (0.0, 340.0)
            vector_math_001_10.location = (0.0, 300.0)
            transform_geometry_1.location = (160.0, 80.0)
            geometry_to_instance_1.location = (320.0, 80.0)
            translate_instances.location = (500.0, 80.0)
            group_output_93.location = (660.0, 80.0)

            # Set dimensions
            compare_27.width, compare_27.height = 140.0, 100.0
            bounding_box.width, bounding_box.height = 140.0, 100.0
            separate_geometry_11.width, separate_geometry_11.height = 140.0, 100.0
            mix_6.width, mix_6.height = 140.0, 100.0
            group_input_92.width, group_input_92.height = 140.0, 100.0
            vector_math_15.width, vector_math_15.height = 140.0, 100.0
            vector_math_001_10.width, vector_math_001_10.height = 140.0, 100.0
            transform_geometry_1.width, transform_geometry_1.height = 140.0, 100.0
            geometry_to_instance_1.width, geometry_to_instance_1.height = 160.0, 100.0
            translate_instances.width, translate_instances.height = 140.0, 100.0
            group_output_93.width, group_output_93.height = 140.0, 100.0

            # initialize _mn_utils_split_instance links
            # compare_27.Result -> separate_geometry_11.Selection
            _mn_utils_split_instance.links.new(
                compare_27.outputs[0], separate_geometry_11.inputs[1]
            )
            # group_input_92.Geometry -> separate_geometry_11.Geometry
            _mn_utils_split_instance.links.new(
                group_input_92.outputs[0], separate_geometry_11.inputs[0]
            )
            # group_input_92.Field -> compare_27.A
            _mn_utils_split_instance.links.new(
                group_input_92.outputs[1], compare_27.inputs[2]
            )
            # separate_geometry_11.Selection -> bounding_box.Geometry
            _mn_utils_split_instance.links.new(
                separate_geometry_11.outputs[0], bounding_box.inputs[0]
            )
            # bounding_box.Min -> mix_6.A
            _mn_utils_split_instance.links.new(bounding_box.outputs[1], mix_6.inputs[4])
            # bounding_box.Max -> mix_6.B
            _mn_utils_split_instance.links.new(bounding_box.outputs[2], mix_6.inputs[5])
            # separate_geometry_11.Selection -> transform_geometry_1.Geometry
            _mn_utils_split_instance.links.new(
                separate_geometry_11.outputs[0], transform_geometry_1.inputs[0]
            )
            # vector_math_001_10.Vector -> vector_math_15.Vector
            _mn_utils_split_instance.links.new(
                vector_math_001_10.outputs[0], vector_math_15.inputs[0]
            )
            # vector_math_15.Vector -> transform_geometry_1.Translation
            _mn_utils_split_instance.links.new(
                vector_math_15.outputs[0], transform_geometry_1.inputs[1]
            )
            # transform_geometry_1.Geometry -> geometry_to_instance_1.Geometry
            _mn_utils_split_instance.links.new(
                transform_geometry_1.outputs[0], geometry_to_instance_1.inputs[0]
            )
            # geometry_to_instance_1.Instances -> translate_instances.Instances
            _mn_utils_split_instance.links.new(
                geometry_to_instance_1.outputs[0], translate_instances.inputs[0]
            )
            # translate_instances.Instances -> group_output_93.Instance
            _mn_utils_split_instance.links.new(
                translate_instances.outputs[0], group_output_93.inputs[0]
            )
            # mix_6.Result -> vector_math_001_10.Vector
            _mn_utils_split_instance.links.new(
                mix_6.outputs[1], vector_math_001_10.inputs[0]
            )
            # group_input_92.Group ID -> compare_27.B
            _mn_utils_split_instance.links.new(
                group_input_92.outputs[2], compare_27.inputs[3]
            )
            # group_input_92.Origin Offset -> vector_math_001_10.Vector
            _mn_utils_split_instance.links.new(
                group_input_92.outputs[3], vector_math_001_10.inputs[1]
            )
            # vector_math_001_10.Vector -> translate_instances.Translation
            _mn_utils_split_instance.links.new(
                vector_math_001_10.outputs[0], translate_instances.inputs[2]
            )
            return _mn_utils_split_instance

        _mn_utils_split_instance = _mn_utils_split_instance_node_group()

        # initialize mn_assembly_ node group
        def mn_assembly__node_group():
            mn_assembly_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_assembly_"
            )

            mn_assembly_.color_tag = "NONE"
            mn_assembly_.description = ""

            mn_assembly_.is_modifier = True

            # mn_assembly_ interface
            # Socket Assembled Chain Instances
            assembled_chain_instances_socket = mn_assembly_.interface.new_socket(
                name="Assembled Chain Instances",
                in_out="OUTPUT",
                socket_type="NodeSocketGeometry",
            )
            assembled_chain_instances_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_13 = mn_assembly_.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_13.attribute_domain = "POINT"
            geometry_socket_13.description = (
                "Any geometry to separate into chains and instance"
            )

            # Socket Rotation
            rotation_socket = mn_assembly_.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_socket.subtype = "FACTOR"
            rotation_socket.default_value = 1.0
            rotation_socket.min_value = 0.0
            rotation_socket.max_value = 1.0
            rotation_socket.attribute_domain = "POINT"
            rotation_socket.description = "Amount to apply the rotation of the matrix"

            # Socket Translation
            translation_socket = mn_assembly_.interface.new_socket(
                name="Translation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            translation_socket.subtype = "FACTOR"
            translation_socket.default_value = 1.0
            translation_socket.min_value = 0.0
            translation_socket.max_value = 1.0
            translation_socket.attribute_domain = "POINT"
            translation_socket.description = (
                "Amount to apply the translation of the matrix"
            )

            # Socket assembly_id
            assembly_id_socket = mn_assembly_.interface.new_socket(
                name="assembly_id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            assembly_id_socket.subtype = "NONE"
            assembly_id_socket.default_value = 1
            assembly_id_socket.min_value = 1
            assembly_id_socket.max_value = 6
            assembly_id_socket.attribute_domain = "POINT"
            assembly_id_socket.description = "Which biological assembly to create"

            # initialize mn_assembly_ nodes
            # node Mix
            mix_7 = mn_assembly_.nodes.new("ShaderNodeMix")
            mix_7.name = "Mix"
            mix_7.blend_type = "MIX"
            mix_7.clamp_factor = True
            mix_7.clamp_result = False
            mix_7.data_type = "VECTOR"
            mix_7.factor_mode = "UNIFORM"
            # A_Vector
            mix_7.inputs[4].default_value = (0.0, 0.0, 0.0)

            # node Position
            position_7 = mn_assembly_.nodes.new("GeometryNodeInputPosition")
            position_7.name = "Position"

            # node Named Attribute
            named_attribute_21 = mn_assembly_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_21.name = "Named Attribute"
            named_attribute_21.data_type = "INT"
            # Name
            named_attribute_21.inputs[0].default_value = "chain_id"

            # node Named Attribute.001
            named_attribute_001_10 = mn_assembly_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_10.name = "Named Attribute.001"
            named_attribute_001_10.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_10.inputs[0].default_value = "assembly_rotation"

            # node Instance on Points
            instance_on_points_2 = mn_assembly_.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_2.name = "Instance on Points"
            # Selection
            instance_on_points_2.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_2.inputs[3].default_value = True
            # Scale
            instance_on_points_2.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Vector Math
            vector_math_16 = mn_assembly_.nodes.new("ShaderNodeVectorMath")
            vector_math_16.name = "Vector Math"
            vector_math_16.operation = "SCALE"

            # node Group Input.001
            group_input_001_11 = mn_assembly_.nodes.new("NodeGroupInput")
            group_input_001_11.name = "Group Input.001"

            # node Group Output
            group_output_94 = mn_assembly_.nodes.new("NodeGroupOutput")
            group_output_94.name = "Group Output"
            group_output_94.is_active_output = True

            # node Set Position
            set_position_5 = mn_assembly_.nodes.new("GeometryNodeSetPosition")
            set_position_5.name = "Set Position"
            # Selection
            set_position_5.inputs[1].default_value = True
            # Offset
            set_position_5.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Separate Geometry
            separate_geometry_12 = mn_assembly_.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_12.name = "Separate Geometry"
            separate_geometry_12.domain = "POINT"

            # node Compare
            compare_28 = mn_assembly_.nodes.new("FunctionNodeCompare")
            compare_28.name = "Compare"
            compare_28.data_type = "INT"
            compare_28.mode = "ELEMENT"
            compare_28.operation = "EQUAL"

            # node Group Input
            group_input_93 = mn_assembly_.nodes.new("NodeGroupInput")
            group_input_93.name = "Group Input"

            # node Named Attribute.002
            named_attribute_002_7 = mn_assembly_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_7.name = "Named Attribute.002"
            named_attribute_002_7.data_type = "INT"
            # Name
            named_attribute_002_7.inputs[0].default_value = "assembly_id"

            # node Object Info
            object_info_3 = mn_assembly_.nodes.new("GeometryNodeObjectInfo")
            object_info_3.name = "Object Info"
            object_info_3.transform_space = "ORIGINAL"
            # As Instance
            object_info_3.inputs[1].default_value = False

            # Set locations
            mix_7.location = (-522.4186401367188, -40.1860466003418)
            position_7.location = (-683.1627807617188, -221.02325439453125)
            named_attribute_21.location = (-341.5813903808594, -60.27907180786133)
            named_attribute_001_10.location = (-341.5813903808594, -200.93023681640625)
            instance_on_points_2.location = (-140.6511688232422, 241.1162872314453)
            vector_math_16.location = (-140.6511688232422, -60.27907180786133)
            group_input_001_11.location = (-140.6511688232422, -200.93023681640625)
            group_output_94.location = (40.1860466003418, 241.1162872314453)
            set_position_5.location = (-341.5813903808594, 160.7441864013672)
            separate_geometry_12.location = (-521.641357421875, 137.05740356445312)
            compare_28.location = (-743.44189453125, -40.1860466003418)
            group_input_93.location = (-1004.6511840820312, 261.2093200683594)
            named_attribute_002_7.location = (-924.2791137695312, -160.7441864013672)
            object_info_3.location = (-743.6431274414062, 169.9601287841797)

            # Set dimensions
            mix_7.width, mix_7.height = 140.0, 100.0
            position_7.width, position_7.height = 140.0, 100.0
            named_attribute_21.width, named_attribute_21.height = 140.0, 100.0
            named_attribute_001_10.width, named_attribute_001_10.height = 140.0, 100.0
            instance_on_points_2.width, instance_on_points_2.height = 140.0, 100.0
            vector_math_16.width, vector_math_16.height = 140.0, 100.0
            group_input_001_11.width, group_input_001_11.height = 140.0, 100.0
            group_output_94.width, group_output_94.height = 140.0, 100.0
            set_position_5.width, set_position_5.height = 140.0, 100.0
            separate_geometry_12.width, separate_geometry_12.height = 140.0, 100.0
            compare_28.width, compare_28.height = 140.0, 100.0
            group_input_93.width, group_input_93.height = 140.0, 100.0
            named_attribute_002_7.width, named_attribute_002_7.height = 140.0, 100.0
            object_info_3.width, object_info_3.height = 140.0, 100.0

            # initialize mn_assembly_ links
            # vector_math_16.Vector -> instance_on_points_2.Rotation
            mn_assembly_.links.new(
                vector_math_16.outputs[0], instance_on_points_2.inputs[5]
            )
            # named_attribute_001_10.Attribute -> vector_math_16.Vector
            mn_assembly_.links.new(
                named_attribute_001_10.outputs[0], vector_math_16.inputs[0]
            )
            # named_attribute_21.Attribute -> instance_on_points_2.Instance Index
            mn_assembly_.links.new(
                named_attribute_21.outputs[0], instance_on_points_2.inputs[4]
            )
            # group_input_93.Geometry -> instance_on_points_2.Instance
            mn_assembly_.links.new(
                group_input_93.outputs[0], instance_on_points_2.inputs[2]
            )
            # instance_on_points_2.Instances -> group_output_94.Assembled Chain Instances
            mn_assembly_.links.new(
                instance_on_points_2.outputs[0], group_output_94.inputs[0]
            )
            # mix_7.Result -> set_position_5.Position
            mn_assembly_.links.new(mix_7.outputs[1], set_position_5.inputs[2])
            # position_7.Position -> mix_7.B
            mn_assembly_.links.new(position_7.outputs[0], mix_7.inputs[5])
            # group_input_93.Translation -> mix_7.Factor
            mn_assembly_.links.new(group_input_93.outputs[2], mix_7.inputs[0])
            # group_input_001_11.Rotation -> vector_math_16.Scale
            mn_assembly_.links.new(
                group_input_001_11.outputs[1], vector_math_16.inputs[3]
            )
            # set_position_5.Geometry -> instance_on_points_2.Points
            mn_assembly_.links.new(
                set_position_5.outputs[0], instance_on_points_2.inputs[0]
            )
            # object_info_3.Geometry -> separate_geometry_12.Geometry
            mn_assembly_.links.new(
                object_info_3.outputs[4], separate_geometry_12.inputs[0]
            )
            # separate_geometry_12.Selection -> set_position_5.Geometry
            mn_assembly_.links.new(
                separate_geometry_12.outputs[0], set_position_5.inputs[0]
            )
            # compare_28.Result -> separate_geometry_12.Selection
            mn_assembly_.links.new(
                compare_28.outputs[0], separate_geometry_12.inputs[1]
            )
            # group_input_93.assembly_id -> compare_28.A
            mn_assembly_.links.new(group_input_93.outputs[3], compare_28.inputs[2])
            # named_attribute_002_7.Attribute -> compare_28.B
            mn_assembly_.links.new(
                named_attribute_002_7.outputs[0], compare_28.inputs[3]
            )
            return mn_assembly_

        mn_assembly_ = mn_assembly__node_group()

        # initialize mn_assembly_center node group
        def mn_assembly_center_node_group():
            mn_assembly_center = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_assembly_center"
            )

            mn_assembly_center.color_tag = "GEOMETRY"
            mn_assembly_center.description = ""

            mn_assembly_center.is_modifier = True

            # mn_assembly_center interface
            # Socket Assembly Instances
            assembly_instances_socket = mn_assembly_center.interface.new_socket(
                name="Assembly Instances",
                in_out="OUTPUT",
                socket_type="NodeSocketGeometry",
            )
            assembly_instances_socket.attribute_domain = "POINT"
            assembly_instances_socket.description = "The translated assembly"

            # Socket Old Centre
            old_centre_socket = mn_assembly_center.interface.new_socket(
                name="Old Centre", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            old_centre_socket.subtype = "NONE"
            old_centre_socket.default_value = (0.0, 0.0, 0.0)
            old_centre_socket.min_value = -3.4028234663852886e38
            old_centre_socket.max_value = 3.4028234663852886e38
            old_centre_socket.attribute_domain = "POINT"
            old_centre_socket.description = "The old centre point of the assembly"

            # Socket Transform Vector
            transform_vector_socket = mn_assembly_center.interface.new_socket(
                name="Transform Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            transform_vector_socket.subtype = "NONE"
            transform_vector_socket.default_value = (0.0, 0.0, 0.0)
            transform_vector_socket.min_value = -3.4028234663852886e38
            transform_vector_socket.max_value = 3.4028234663852886e38
            transform_vector_socket.attribute_domain = "POINT"
            transform_vector_socket.description = (
                "The transformation that was applied to the assembly"
            )

            # Socket Assembly Instances
            assembly_instances_socket_1 = mn_assembly_center.interface.new_socket(
                name="Assembly Instances",
                in_out="INPUT",
                socket_type="NodeSocketGeometry",
            )
            assembly_instances_socket_1.attribute_domain = "POINT"
            assembly_instances_socket_1.description = (
                "The instances of an assembly, the result of `MN_assembly`"
            )

            # Socket Center
            center_socket = mn_assembly_center.interface.new_socket(
                name="Center", in_out="INPUT", socket_type="NodeSocketBool"
            )
            center_socket.attribute_domain = "POINT"
            center_socket.description = "Whether to center the assembly"

            # Socket Translation
            translation_socket_1 = mn_assembly_center.interface.new_socket(
                name="Translation", in_out="INPUT", socket_type="NodeSocketVector"
            )
            translation_socket_1.subtype = "TRANSLATION"
            translation_socket_1.default_value = (0.0, 0.0, 0.0)
            translation_socket_1.min_value = -3.4028234663852886e38
            translation_socket_1.max_value = 3.4028234663852886e38
            translation_socket_1.attribute_domain = "POINT"
            translation_socket_1.description = (
                "Additional translation to apply to the centered assembly"
            )

            # initialize mn_assembly_center nodes
            # node Realize Instances
            realize_instances_3 = mn_assembly_center.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_3.name = "Realize Instances"
            # Selection
            realize_instances_3.inputs[1].default_value = True
            # Realize All
            realize_instances_3.inputs[2].default_value = True
            # Depth
            realize_instances_3.inputs[3].default_value = 0

            # node Bounding Box
            bounding_box_1 = mn_assembly_center.nodes.new("GeometryNodeBoundBox")
            bounding_box_1.name = "Bounding Box"

            # node Bounding Box.001
            bounding_box_001 = mn_assembly_center.nodes.new("GeometryNodeBoundBox")
            bounding_box_001.name = "Bounding Box.001"

            # node Reroute
            reroute_22 = mn_assembly_center.nodes.new("NodeReroute")
            reroute_22.name = "Reroute"
            # node Switch
            switch_26 = mn_assembly_center.nodes.new("GeometryNodeSwitch")
            switch_26.name = "Switch"
            switch_26.input_type = "GEOMETRY"

            # node Group Output
            group_output_95 = mn_assembly_center.nodes.new("NodeGroupOutput")
            group_output_95.name = "Group Output"
            group_output_95.is_active_output = True

            # node Mix
            mix_8 = mn_assembly_center.nodes.new("ShaderNodeMix")
            mix_8.name = "Mix"
            mix_8.blend_type = "MIX"
            mix_8.clamp_factor = True
            mix_8.clamp_result = False
            mix_8.data_type = "VECTOR"
            mix_8.factor_mode = "UNIFORM"
            # Factor_Float
            mix_8.inputs[0].default_value = 0.5

            # node Transform
            transform_2 = mn_assembly_center.nodes.new("GeometryNodeTransform")
            transform_2.name = "Transform"
            transform_2.mode = "COMPONENTS"
            # Rotation
            transform_2.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_2.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Vector Math
            vector_math_17 = mn_assembly_center.nodes.new("ShaderNodeVectorMath")
            vector_math_17.name = "Vector Math"
            vector_math_17.operation = "SCALE"
            # Scale
            vector_math_17.inputs[3].default_value = -1.0

            # node Group Input
            group_input_94 = mn_assembly_center.nodes.new("NodeGroupInput")
            group_input_94.name = "Group Input"

            # node Vector Math.001
            vector_math_001_11 = mn_assembly_center.nodes.new("ShaderNodeVectorMath")
            vector_math_001_11.name = "Vector Math.001"
            vector_math_001_11.operation = "ADD"

            # Set locations
            realize_instances_3.location = (-251.50982666015625, -44.62482452392578)
            bounding_box_1.location = (-411.50982666015625, -44.62482452392578)
            bounding_box_001.location = (-91.50982666015625, -44.62482452392578)
            reroute_22.location = (-381.8795471191406, -19.754844665527344)
            switch_26.location = (653.526611328125, 204.82861328125)
            group_output_95.location = (862.0359497070312, 127.03370666503906)
            mix_8.location = (68.49017333984375, -44.62482452392578)
            transform_2.location = (498.4442443847656, -47.385963439941406)
            vector_math_17.location = (240.0, -40.0)
            group_input_94.location = (-680.0, -160.0)
            vector_math_001_11.location = (240.0, -180.0)

            # Set dimensions
            realize_instances_3.width, realize_instances_3.height = 140.0, 100.0
            bounding_box_1.width, bounding_box_1.height = 140.0, 100.0
            bounding_box_001.width, bounding_box_001.height = 140.0, 100.0
            reroute_22.width, reroute_22.height = 16.0, 100.0
            switch_26.width, switch_26.height = 140.0, 100.0
            group_output_95.width, group_output_95.height = 140.0, 100.0
            mix_8.width, mix_8.height = 140.0, 100.0
            transform_2.width, transform_2.height = 140.0, 100.0
            vector_math_17.width, vector_math_17.height = 140.0, 100.0
            group_input_94.width, group_input_94.height = 140.0, 100.0
            vector_math_001_11.width, vector_math_001_11.height = 140.0, 100.0

            # initialize mn_assembly_center links
            # group_input_94.Assembly Instances -> reroute_22.Input
            mn_assembly_center.links.new(
                group_input_94.outputs[0], reroute_22.inputs[0]
            )
            # reroute_22.Output -> bounding_box_1.Geometry
            mn_assembly_center.links.new(
                reroute_22.outputs[0], bounding_box_1.inputs[0]
            )
            # bounding_box_1.Bounding Box -> realize_instances_3.Geometry
            mn_assembly_center.links.new(
                bounding_box_1.outputs[0], realize_instances_3.inputs[0]
            )
            # realize_instances_3.Geometry -> bounding_box_001.Geometry
            mn_assembly_center.links.new(
                realize_instances_3.outputs[0], bounding_box_001.inputs[0]
            )
            # bounding_box_001.Min -> mix_8.A
            mn_assembly_center.links.new(bounding_box_001.outputs[1], mix_8.inputs[4])
            # bounding_box_001.Max -> mix_8.B
            mn_assembly_center.links.new(bounding_box_001.outputs[2], mix_8.inputs[5])
            # mix_8.Result -> vector_math_17.Vector
            mn_assembly_center.links.new(mix_8.outputs[1], vector_math_17.inputs[0])
            # reroute_22.Output -> transform_2.Geometry
            mn_assembly_center.links.new(reroute_22.outputs[0], transform_2.inputs[0])
            # transform_2.Geometry -> switch_26.True
            mn_assembly_center.links.new(transform_2.outputs[0], switch_26.inputs[2])
            # group_input_94.Assembly Instances -> switch_26.False
            mn_assembly_center.links.new(group_input_94.outputs[0], switch_26.inputs[1])
            # group_input_94.Center -> switch_26.Switch
            mn_assembly_center.links.new(group_input_94.outputs[1], switch_26.inputs[0])
            # switch_26.Output -> group_output_95.Assembly Instances
            mn_assembly_center.links.new(
                switch_26.outputs[0], group_output_95.inputs[0]
            )
            # mix_8.Result -> group_output_95.Old Centre
            mn_assembly_center.links.new(mix_8.outputs[1], group_output_95.inputs[1])
            # vector_math_17.Vector -> group_output_95.Transform Vector
            mn_assembly_center.links.new(
                vector_math_17.outputs[0], group_output_95.inputs[2]
            )
            # vector_math_17.Vector -> vector_math_001_11.Vector
            mn_assembly_center.links.new(
                vector_math_17.outputs[0], vector_math_001_11.inputs[0]
            )
            # group_input_94.Translation -> vector_math_001_11.Vector
            mn_assembly_center.links.new(
                group_input_94.outputs[2], vector_math_001_11.inputs[1]
            )
            # vector_math_001_11.Vector -> transform_2.Translation
            mn_assembly_center.links.new(
                vector_math_001_11.outputs[0], transform_2.inputs[1]
            )
            return mn_assembly_center

        mn_assembly_center = mn_assembly_center_node_group()

        # initialize _mn_assembly_rotate node group
        def _mn_assembly_rotate_node_group():
            _mn_assembly_rotate = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_assembly_rotate"
            )

            _mn_assembly_rotate.color_tag = "NONE"
            _mn_assembly_rotate.description = ""

            _mn_assembly_rotate.is_modifier = True

            # _mn_assembly_rotate interface
            # Socket Instances
            instances_socket_1 = _mn_assembly_rotate.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_1.attribute_domain = "POINT"

            # Socket Instances
            instances_socket_2 = _mn_assembly_rotate.interface.new_socket(
                name="Instances", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_2.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_31 = _mn_assembly_rotate.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_31.attribute_domain = "POINT"
            selection_socket_31.hide_value = True
            selection_socket_31.description = "Selection of atoms to apply this node to"

            # Socket Rotation
            rotation_socket_1 = _mn_assembly_rotate.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketVector"
            )
            rotation_socket_1.subtype = "EULER"
            rotation_socket_1.default_value = (0.0, 0.0, 0.0)
            rotation_socket_1.min_value = -3.4028234663852886e38
            rotation_socket_1.max_value = 3.4028234663852886e38
            rotation_socket_1.attribute_domain = "POINT"

            # Socket com_offset
            com_offset_socket = _mn_assembly_rotate.interface.new_socket(
                name="com_offset", in_out="INPUT", socket_type="NodeSocketVector"
            )
            com_offset_socket.subtype = "NONE"
            com_offset_socket.default_value = (0.0, 0.0, 0.0)
            com_offset_socket.min_value = -10000.0
            com_offset_socket.max_value = 10000.0
            com_offset_socket.attribute_domain = "POINT"

            # initialize _mn_assembly_rotate nodes
            # node Accumulate Field
            accumulate_field_6 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_6.name = "Accumulate Field"
            accumulate_field_6.data_type = "FLOAT_VECTOR"
            accumulate_field_6.domain = "POINT"
            accumulate_field_6.outputs[0].hide = True
            accumulate_field_6.outputs[1].hide = True

            # node Accumulate Field.001
            accumulate_field_001_5 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_5.name = "Accumulate Field.001"
            accumulate_field_001_5.data_type = "INT"
            accumulate_field_001_5.domain = "POINT"
            accumulate_field_001_5.inputs[0].hide = True
            accumulate_field_001_5.outputs[0].hide = True
            accumulate_field_001_5.outputs[1].hide = True
            # Value
            accumulate_field_001_5.inputs[0].default_value = 1

            # node Vector Math
            vector_math_18 = _mn_assembly_rotate.nodes.new("ShaderNodeVectorMath")
            vector_math_18.name = "Vector Math"
            vector_math_18.hide = True
            vector_math_18.operation = "DIVIDE"

            # node Position.001
            position_001_3 = _mn_assembly_rotate.nodes.new("GeometryNodeInputPosition")
            position_001_3.name = "Position.001"

            # node Capture Attribute
            capture_attribute_6 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_6.name = "Capture Attribute"
            capture_attribute_6.active_index = 0
            capture_attribute_6.capture_items.clear()
            capture_attribute_6.capture_items.new("FLOAT", "Value")
            capture_attribute_6.capture_items["Value"].data_type = "INT"
            capture_attribute_6.domain = "INSTANCE"

            # node Reroute.001
            reroute_001_15 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_001_15.name = "Reroute.001"
            # node Index
            index_14 = _mn_assembly_rotate.nodes.new("GeometryNodeInputIndex")
            index_14.name = "Index"

            # node Realize Instances
            realize_instances_4 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_4.name = "Realize Instances"
            # Selection
            realize_instances_4.inputs[1].default_value = True
            # Realize All
            realize_instances_4.inputs[2].default_value = True
            # Depth
            realize_instances_4.inputs[3].default_value = 0

            # node Reroute.002
            reroute_002_12 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_002_12.name = "Reroute.002"
            # node Reroute
            reroute_23 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_23.name = "Reroute"
            # node Group Output
            group_output_96 = _mn_assembly_rotate.nodes.new("NodeGroupOutput")
            group_output_96.name = "Group Output"
            group_output_96.is_active_output = True

            # node Reroute.006
            reroute_006_4 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_006_4.name = "Reroute.006"
            # node Reroute.007
            reroute_007_4 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_007_4.name = "Reroute.007"
            # node Reroute.008
            reroute_008_2 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_008_2.name = "Reroute.008"
            # node Reroute.009
            reroute_009_2 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_009_2.name = "Reroute.009"
            # node Reroute.010
            reroute_010_2 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_010_2.name = "Reroute.010"
            # node Position.002
            position_002_5 = _mn_assembly_rotate.nodes.new("GeometryNodeInputPosition")
            position_002_5.name = "Position.002"

            # node Sample Index
            sample_index_5 = _mn_assembly_rotate.nodes.new("GeometryNodeSampleIndex")
            sample_index_5.name = "Sample Index"
            sample_index_5.clamp = True
            sample_index_5.data_type = "FLOAT_VECTOR"
            sample_index_5.domain = "POINT"

            # node Index.001
            index_001_3 = _mn_assembly_rotate.nodes.new("GeometryNodeInputIndex")
            index_001_3.name = "Index.001"

            # node String
            string = _mn_assembly_rotate.nodes.new("FunctionNodeInputString")
            string.name = "String"
            string.string = "centre_of_mass"

            # node Group Input
            group_input_95 = _mn_assembly_rotate.nodes.new("NodeGroupInput")
            group_input_95.name = "Group Input"

            # node Named Attribute
            named_attribute_22 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_22.name = "Named Attribute"
            named_attribute_22.data_type = "FLOAT_VECTOR"

            # node Vector Math.001
            vector_math_001_12 = _mn_assembly_rotate.nodes.new("ShaderNodeVectorMath")
            vector_math_001_12.name = "Vector Math.001"
            vector_math_001_12.operation = "SUBTRACT"

            # node Reroute.004
            reroute_004_6 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_004_6.name = "Reroute.004"
            # node Store Named Attribute.001
            store_named_attribute_001_2 = _mn_assembly_rotate.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_2.name = "Store Named Attribute.001"
            store_named_attribute_001_2.data_type = "FLOAT_VECTOR"
            store_named_attribute_001_2.domain = "INSTANCE"
            # Selection
            store_named_attribute_001_2.inputs[1].default_value = True

            # node Set Position
            set_position_6 = _mn_assembly_rotate.nodes.new("GeometryNodeSetPosition")
            set_position_6.name = "Set Position"
            # Selection
            set_position_6.inputs[1].default_value = True
            # Offset
            set_position_6.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Merge by Distance
            merge_by_distance = _mn_assembly_rotate.nodes.new(
                "GeometryNodeMergeByDistance"
            )
            merge_by_distance.name = "Merge by Distance"
            merge_by_distance.mode = "ALL"
            # Selection
            merge_by_distance.inputs[1].default_value = True
            # Distance
            merge_by_distance.inputs[2].default_value = 0.0010000000474974513

            # node Rotate Instances
            rotate_instances = _mn_assembly_rotate.nodes.new(
                "GeometryNodeRotateInstances"
            )
            rotate_instances.name = "Rotate Instances"
            # Local Space
            rotate_instances.inputs[4].default_value = False

            # node Bounding Box
            bounding_box_2 = _mn_assembly_rotate.nodes.new("GeometryNodeBoundBox")
            bounding_box_2.name = "Bounding Box"

            # node Reroute.003
            reroute_003_9 = _mn_assembly_rotate.nodes.new("NodeReroute")
            reroute_003_9.name = "Reroute.003"
            # node Euler to Rotation
            euler_to_rotation = _mn_assembly_rotate.nodes.new(
                "FunctionNodeEulerToRotation"
            )
            euler_to_rotation.name = "Euler to Rotation"

            # Set locations
            accumulate_field_6.location = (-480.0, 340.0)
            accumulate_field_001_5.location = (-480.0, 180.0)
            vector_math_18.location = (-320.0, 240.0)
            position_001_3.location = (-640.0, 340.0)
            capture_attribute_6.location = (-700.0, 140.0)
            reroute_001_15.location = (-500.0, 140.0)
            index_14.location = (-860.0, 0.0)
            realize_instances_4.location = (-480.0, 40.0)
            reroute_002_12.location = (-160.0, -220.0)
            reroute_23.location = (440.0, -220.0)
            group_output_96.location = (860.0, -40.0)
            reroute_006_4.location = (540.0, -140.0)
            reroute_007_4.location = (440.0, -200.0)
            reroute_008_2.location = (-360.0, -200.0)
            reroute_009_2.location = (-540.0, -220.0)
            reroute_010_2.location = (-540.0, -240.0)
            position_002_5.location = (40.0, 60.0)
            sample_index_5.location = (200.0, 220.0)
            index_001_3.location = (40.0, 0.0)
            string.location = (-60.0, -120.0)
            group_input_95.location = (-1100.0, -40.0)
            named_attribute_22.location = (140.0, -240.0)
            vector_math_001_12.location = (480.0, -220.0)
            reroute_004_6.location = (320.0, -160.0)
            store_named_attribute_001_2.location = (400.0, 200.0)
            set_position_6.location = (-120.0, 220.0)
            merge_by_distance.location = (40.0, 220.0)
            rotate_instances.location = (660.0, -40.0)
            bounding_box_2.location = (-860.0, 220.0)
            reroute_003_9.location = (320.0, -100.0)
            euler_to_rotation.location = (620.0, -40.0)

            # Set dimensions
            accumulate_field_6.width, accumulate_field_6.height = 140.0, 100.0
            accumulate_field_001_5.width, accumulate_field_001_5.height = 140.0, 100.0
            vector_math_18.width, vector_math_18.height = 140.0, 100.0
            position_001_3.width, position_001_3.height = 140.0, 100.0
            capture_attribute_6.width, capture_attribute_6.height = 140.0, 100.0
            reroute_001_15.width, reroute_001_15.height = 16.0, 100.0
            index_14.width, index_14.height = 140.0, 100.0
            realize_instances_4.width, realize_instances_4.height = 140.0, 100.0
            reroute_002_12.width, reroute_002_12.height = 16.0, 100.0
            reroute_23.width, reroute_23.height = 16.0, 100.0
            group_output_96.width, group_output_96.height = 140.0, 100.0
            reroute_006_4.width, reroute_006_4.height = 16.0, 100.0
            reroute_007_4.width, reroute_007_4.height = 16.0, 100.0
            reroute_008_2.width, reroute_008_2.height = 16.0, 100.0
            reroute_009_2.width, reroute_009_2.height = 16.0, 100.0
            reroute_010_2.width, reroute_010_2.height = 16.0, 100.0
            position_002_5.width, position_002_5.height = 140.0, 100.0
            sample_index_5.width, sample_index_5.height = 140.0, 100.0
            index_001_3.width, index_001_3.height = 140.0, 100.0
            string.width, string.height = 140.0, 100.0
            group_input_95.width, group_input_95.height = 140.0, 100.0
            named_attribute_22.width, named_attribute_22.height = 140.0, 100.0
            vector_math_001_12.width, vector_math_001_12.height = 140.0, 100.0
            reroute_004_6.width, reroute_004_6.height = 16.0, 100.0
            store_named_attribute_001_2.width, store_named_attribute_001_2.height = (
                140.0,
                100.0,
            )
            set_position_6.width, set_position_6.height = 140.0, 100.0
            merge_by_distance.width, merge_by_distance.height = 140.0, 100.0
            rotate_instances.width, rotate_instances.height = 140.0, 100.0
            bounding_box_2.width, bounding_box_2.height = 140.0, 100.0
            reroute_003_9.width, reroute_003_9.height = 16.0, 100.0
            euler_to_rotation.width, euler_to_rotation.height = 140.0, 100.0

            # initialize _mn_assembly_rotate links
            # rotate_instances.Instances -> group_output_96.Instances
            _mn_assembly_rotate.links.new(
                rotate_instances.outputs[0], group_output_96.inputs[0]
            )
            # bounding_box_2.Bounding Box -> capture_attribute_6.Geometry
            _mn_assembly_rotate.links.new(
                bounding_box_2.outputs[0], capture_attribute_6.inputs[0]
            )
            # index_14.Index -> capture_attribute_6.Value
            _mn_assembly_rotate.links.new(
                index_14.outputs[0], capture_attribute_6.inputs[1]
            )
            # position_001_3.Position -> accumulate_field_6.Value
            _mn_assembly_rotate.links.new(
                position_001_3.outputs[0], accumulate_field_6.inputs[0]
            )
            # reroute_001_15.Output -> accumulate_field_6.Group ID
            _mn_assembly_rotate.links.new(
                reroute_001_15.outputs[0], accumulate_field_6.inputs[1]
            )
            # capture_attribute_6.Geometry -> realize_instances_4.Geometry
            _mn_assembly_rotate.links.new(
                capture_attribute_6.outputs[0], realize_instances_4.inputs[0]
            )
            # realize_instances_4.Geometry -> set_position_6.Geometry
            _mn_assembly_rotate.links.new(
                realize_instances_4.outputs[0], set_position_6.inputs[0]
            )
            # accumulate_field_6.Total -> vector_math_18.Vector
            _mn_assembly_rotate.links.new(
                accumulate_field_6.outputs[2], vector_math_18.inputs[0]
            )
            # reroute_001_15.Output -> accumulate_field_001_5.Group ID
            _mn_assembly_rotate.links.new(
                reroute_001_15.outputs[0], accumulate_field_001_5.inputs[1]
            )
            # accumulate_field_001_5.Total -> vector_math_18.Vector
            _mn_assembly_rotate.links.new(
                accumulate_field_001_5.outputs[2], vector_math_18.inputs[1]
            )
            # capture_attribute_6.Value -> reroute_001_15.Input
            _mn_assembly_rotate.links.new(
                capture_attribute_6.outputs[1], reroute_001_15.inputs[0]
            )
            # vector_math_18.Vector -> set_position_6.Position
            _mn_assembly_rotate.links.new(
                vector_math_18.outputs[0], set_position_6.inputs[2]
            )
            # set_position_6.Geometry -> merge_by_distance.Geometry
            _mn_assembly_rotate.links.new(
                set_position_6.outputs[0], merge_by_distance.inputs[0]
            )
            # merge_by_distance.Geometry -> sample_index_5.Geometry
            _mn_assembly_rotate.links.new(
                merge_by_distance.outputs[0], sample_index_5.inputs[0]
            )
            # position_002_5.Position -> sample_index_5.Value
            _mn_assembly_rotate.links.new(
                position_002_5.outputs[0], sample_index_5.inputs[1]
            )
            # group_input_95.Instances -> bounding_box_2.Geometry
            _mn_assembly_rotate.links.new(
                group_input_95.outputs[0], bounding_box_2.inputs[0]
            )
            # store_named_attribute_001_2.Geometry -> rotate_instances.Instances
            _mn_assembly_rotate.links.new(
                store_named_attribute_001_2.outputs[0], rotate_instances.inputs[0]
            )
            # sample_index_5.Value -> store_named_attribute_001_2.Value
            _mn_assembly_rotate.links.new(
                sample_index_5.outputs[0], store_named_attribute_001_2.inputs[3]
            )
            # named_attribute_22.Attribute -> vector_math_001_12.Vector
            _mn_assembly_rotate.links.new(
                named_attribute_22.outputs[0], vector_math_001_12.inputs[0]
            )
            # reroute_010_2.Output -> vector_math_001_12.Vector
            _mn_assembly_rotate.links.new(
                reroute_010_2.outputs[0], vector_math_001_12.inputs[1]
            )
            # string.String -> named_attribute_22.Name
            _mn_assembly_rotate.links.new(
                string.outputs[0], named_attribute_22.inputs[0]
            )
            # reroute_004_6.Output -> store_named_attribute_001_2.Name
            _mn_assembly_rotate.links.new(
                reroute_004_6.outputs[0], store_named_attribute_001_2.inputs[2]
            )
            # reroute_009_2.Output -> reroute_002_12.Input
            _mn_assembly_rotate.links.new(
                reroute_009_2.outputs[0], reroute_002_12.inputs[0]
            )
            # group_input_95.Instances -> reroute_003_9.Input
            _mn_assembly_rotate.links.new(
                group_input_95.outputs[0], reroute_003_9.inputs[0]
            )
            # reroute_002_12.Output -> reroute_23.Input
            _mn_assembly_rotate.links.new(
                reroute_002_12.outputs[0], reroute_23.inputs[0]
            )
            # string.String -> reroute_004_6.Input
            _mn_assembly_rotate.links.new(string.outputs[0], reroute_004_6.inputs[0])
            # reroute_006_4.Output -> rotate_instances.Selection
            _mn_assembly_rotate.links.new(
                reroute_006_4.outputs[0], rotate_instances.inputs[1]
            )
            # reroute_007_4.Output -> reroute_006_4.Input
            _mn_assembly_rotate.links.new(
                reroute_007_4.outputs[0], reroute_006_4.inputs[0]
            )
            # reroute_008_2.Output -> reroute_007_4.Input
            _mn_assembly_rotate.links.new(
                reroute_008_2.outputs[0], reroute_007_4.inputs[0]
            )
            # group_input_95.Selection -> reroute_008_2.Input
            _mn_assembly_rotate.links.new(
                group_input_95.outputs[1], reroute_008_2.inputs[0]
            )
            # group_input_95.Rotation -> reroute_009_2.Input
            _mn_assembly_rotate.links.new(
                group_input_95.outputs[2], reroute_009_2.inputs[0]
            )
            # group_input_95.com_offset -> reroute_010_2.Input
            _mn_assembly_rotate.links.new(
                group_input_95.outputs[3], reroute_010_2.inputs[0]
            )
            # index_001_3.Index -> sample_index_5.Index
            _mn_assembly_rotate.links.new(
                index_001_3.outputs[0], sample_index_5.inputs[2]
            )
            # vector_math_001_12.Vector -> rotate_instances.Pivot Point
            _mn_assembly_rotate.links.new(
                vector_math_001_12.outputs[0], rotate_instances.inputs[3]
            )
            # reroute_23.Output -> euler_to_rotation.Euler
            _mn_assembly_rotate.links.new(
                reroute_23.outputs[0], euler_to_rotation.inputs[0]
            )
            # reroute_003_9.Output -> store_named_attribute_001_2.Geometry
            _mn_assembly_rotate.links.new(
                reroute_003_9.outputs[0], store_named_attribute_001_2.inputs[0]
            )
            # euler_to_rotation.Rotation -> rotate_instances.Rotation
            _mn_assembly_rotate.links.new(
                euler_to_rotation.outputs[0], rotate_instances.inputs[2]
            )
            return _mn_assembly_rotate

        _mn_assembly_rotate = _mn_assembly_rotate_node_group()

        # initialize _utils_oxdna_base node group
        def _utils_oxdna_base_node_group():
            _utils_oxdna_base = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".utils_oxdna_base"
            )

            _utils_oxdna_base.color_tag = "NONE"
            _utils_oxdna_base.description = ""

            _utils_oxdna_base.is_modifier = True

            # _utils_oxdna_base interface
            # Socket Geometry
            geometry_socket_14 = _utils_oxdna_base.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_14.attribute_domain = "POINT"

            # Socket Value
            value_socket_12 = _utils_oxdna_base.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_12.subtype = "NONE"
            value_socket_12.default_value = 0.5
            value_socket_12.min_value = -10000.0
            value_socket_12.max_value = 10000.0
            value_socket_12.attribute_domain = "POINT"

            # Socket Value
            value_socket_13 = _utils_oxdna_base.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_13.subtype = "NONE"
            value_socket_13.default_value = 0.5
            value_socket_13.min_value = -10000.0
            value_socket_13.max_value = 10000.0
            value_socket_13.attribute_domain = "POINT"

            # Socket Value
            value_socket_14 = _utils_oxdna_base.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_14.subtype = "NONE"
            value_socket_14.default_value = 0.5
            value_socket_14.min_value = -10000.0
            value_socket_14.max_value = 10000.0
            value_socket_14.attribute_domain = "POINT"

            # initialize _utils_oxdna_base nodes
            # node Group Output
            group_output_97 = _utils_oxdna_base.nodes.new("NodeGroupOutput")
            group_output_97.name = "Group Output"
            group_output_97.is_active_output = True

            # node Group Input
            group_input_96 = _utils_oxdna_base.nodes.new("NodeGroupInput")
            group_input_96.name = "Group Input"

            # node Math
            math_22 = _utils_oxdna_base.nodes.new("ShaderNodeMath")
            math_22.name = "Math"
            math_22.operation = "DIVIDE"
            math_22.use_clamp = False
            # Value_001
            math_22.inputs[1].default_value = 2.0

            # node Transform Geometry
            transform_geometry_2 = _utils_oxdna_base.nodes.new("GeometryNodeTransform")
            transform_geometry_2.name = "Transform Geometry"
            transform_geometry_2.mode = "COMPONENTS"
            # Rotation
            transform_geometry_2.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_2.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Cylinder
            cylinder_1 = _utils_oxdna_base.nodes.new("GeometryNodeMeshCylinder")
            cylinder_1.name = "Cylinder"
            cylinder_1.fill_type = "NGON"
            # Vertices
            cylinder_1.inputs[0].default_value = 4
            # Side Segments
            cylinder_1.inputs[1].default_value = 1
            # Fill Segments
            cylinder_1.inputs[2].default_value = 1

            # node Combine XYZ
            combine_xyz_3 = _utils_oxdna_base.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_3.name = "Combine XYZ"
            # X
            combine_xyz_3.inputs[0].default_value = 0.0
            # Y
            combine_xyz_3.inputs[1].default_value = 0.0

            # node Reroute
            reroute_24 = _utils_oxdna_base.nodes.new("NodeReroute")
            reroute_24.name = "Reroute"
            # node Math.002
            math_002_9 = _utils_oxdna_base.nodes.new("ShaderNodeMath")
            math_002_9.name = "Math.002"
            math_002_9.operation = "DIVIDE"
            math_002_9.use_clamp = False
            # Value_001
            math_002_9.inputs[1].default_value = 100.0

            # node Math.001
            math_001_11 = _utils_oxdna_base.nodes.new("ShaderNodeMath")
            math_001_11.name = "Math.001"
            math_001_11.operation = "DIVIDE"
            math_001_11.use_clamp = False
            # Value_001
            math_001_11.inputs[1].default_value = 100.0

            # node Math.003
            math_003_6 = _utils_oxdna_base.nodes.new("ShaderNodeMath")
            math_003_6.name = "Math.003"
            math_003_6.operation = "DIVIDE"
            math_003_6.use_clamp = False
            # Value_001
            math_003_6.inputs[1].default_value = 10.0

            # node Transform Geometry.001
            transform_geometry_001 = _utils_oxdna_base.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_001.name = "Transform Geometry.001"
            transform_geometry_001.mode = "COMPONENTS"
            # Translation
            transform_geometry_001.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_001.inputs[2].default_value = (
                0.0,
                0.0,
                0.7853981852531433,
            )
            # Scale
            transform_geometry_001.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Combine XYZ.001
            combine_xyz_001_2 = _utils_oxdna_base.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_001_2.name = "Combine XYZ.001"
            # Y
            combine_xyz_001_2.inputs[1].default_value = 1.0
            # Z
            combine_xyz_001_2.inputs[2].default_value = 1.0

            # node Transform Geometry.002
            transform_geometry_002 = _utils_oxdna_base.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_002.name = "Transform Geometry.002"
            transform_geometry_002.mode = "COMPONENTS"
            # Translation
            transform_geometry_002.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_002.inputs[2].default_value = (0.0, 0.0, 0.0)

            # Set locations
            group_output_97.location = (623.913818359375, 0.0)
            group_input_96.location = (-633.9136962890625, 0.0)
            math_22.location = (-39.2435302734375, -142.93002319335938)
            transform_geometry_2.location = (115.4232177734375, 243.7366180419922)
            cylinder_1.location = (-39.2435302734375, 243.7366180419922)
            combine_xyz_3.location = (-39.2435302734375, -26.9300537109375)
            reroute_24.location = (-210.3306884765625, -78.89993286132812)
            math_002_9.location = (-433.9136962890625, 97.47659301757812)
            math_001_11.location = (-430.997314453125, -65.59671020507812)
            math_003_6.location = (-432.2694091796875, -243.73660278320312)
            transform_geometry_001.location = (270.08984375, 243.7366180419922)
            combine_xyz_001_2.location = (265.00262451171875, -65.59671020507812)
            transform_geometry_002.location = (433.913818359375, 194.11192321777344)

            # Set dimensions
            group_output_97.width, group_output_97.height = 140.0, 100.0
            group_input_96.width, group_input_96.height = 140.0, 100.0
            math_22.width, math_22.height = 140.0, 100.0
            transform_geometry_2.width, transform_geometry_2.height = 140.0, 100.0
            cylinder_1.width, cylinder_1.height = 140.0, 100.0
            combine_xyz_3.width, combine_xyz_3.height = 140.0, 100.0
            reroute_24.width, reroute_24.height = 16.0, 100.0
            math_002_9.width, math_002_9.height = 140.0, 100.0
            math_001_11.width, math_001_11.height = 140.0, 100.0
            math_003_6.width, math_003_6.height = 140.0, 100.0
            transform_geometry_001.width, transform_geometry_001.height = 140.0, 100.0
            combine_xyz_001_2.width, combine_xyz_001_2.height = 140.0, 100.0
            transform_geometry_002.width, transform_geometry_002.height = 140.0, 100.0

            # initialize _utils_oxdna_base links
            # reroute_24.Output -> cylinder_1.Depth
            _utils_oxdna_base.links.new(reroute_24.outputs[0], cylinder_1.inputs[4])
            # transform_geometry_2.Geometry -> transform_geometry_001.Geometry
            _utils_oxdna_base.links.new(
                transform_geometry_2.outputs[0], transform_geometry_001.inputs[0]
            )
            # combine_xyz_001_2.Vector -> transform_geometry_002.Scale
            _utils_oxdna_base.links.new(
                combine_xyz_001_2.outputs[0], transform_geometry_002.inputs[3]
            )
            # cylinder_1.Mesh -> transform_geometry_2.Geometry
            _utils_oxdna_base.links.new(
                cylinder_1.outputs[0], transform_geometry_2.inputs[0]
            )
            # math_001_11.Value -> reroute_24.Input
            _utils_oxdna_base.links.new(math_001_11.outputs[0], reroute_24.inputs[0])
            # math_002_9.Value -> cylinder_1.Radius
            _utils_oxdna_base.links.new(math_002_9.outputs[0], cylinder_1.inputs[3])
            # combine_xyz_3.Vector -> transform_geometry_2.Translation
            _utils_oxdna_base.links.new(
                combine_xyz_3.outputs[0], transform_geometry_2.inputs[1]
            )
            # transform_geometry_001.Geometry -> transform_geometry_002.Geometry
            _utils_oxdna_base.links.new(
                transform_geometry_001.outputs[0], transform_geometry_002.inputs[0]
            )
            # math_003_6.Value -> combine_xyz_001_2.X
            _utils_oxdna_base.links.new(
                math_003_6.outputs[0], combine_xyz_001_2.inputs[0]
            )
            # reroute_24.Output -> math_22.Value
            _utils_oxdna_base.links.new(reroute_24.outputs[0], math_22.inputs[0])
            # math_22.Value -> combine_xyz_3.Z
            _utils_oxdna_base.links.new(math_22.outputs[0], combine_xyz_3.inputs[2])
            # group_input_96.Value -> math_002_9.Value
            _utils_oxdna_base.links.new(group_input_96.outputs[0], math_002_9.inputs[0])
            # group_input_96.Value -> math_001_11.Value
            _utils_oxdna_base.links.new(
                group_input_96.outputs[1], math_001_11.inputs[0]
            )
            # group_input_96.Value -> math_003_6.Value
            _utils_oxdna_base.links.new(group_input_96.outputs[2], math_003_6.inputs[0])
            # transform_geometry_002.Geometry -> group_output_97.Geometry
            _utils_oxdna_base.links.new(
                transform_geometry_002.outputs[0], group_output_97.inputs[0]
            )
            return _utils_oxdna_base

        _utils_oxdna_base = _utils_oxdna_base_node_group()

        # initialize color_res_name_nucleic node group
        def color_res_name_nucleic_node_group():
            color_res_name_nucleic = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Res Name Nucleic"
            )

            color_res_name_nucleic.color_tag = "NONE"
            color_res_name_nucleic.description = ""

            # color_res_name_nucleic interface
            # Socket Color
            color_socket_18 = color_res_name_nucleic.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_18.attribute_domain = "POINT"

            # Socket A
            a_socket_3 = color_res_name_nucleic.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketColor"
            )
            a_socket_3.attribute_domain = "POINT"

            # Socket C
            c_socket_2 = color_res_name_nucleic.interface.new_socket(
                name="C", in_out="INPUT", socket_type="NodeSocketColor"
            )
            c_socket_2.attribute_domain = "POINT"

            # Socket G
            g_socket = color_res_name_nucleic.interface.new_socket(
                name="G", in_out="INPUT", socket_type="NodeSocketColor"
            )
            g_socket.attribute_domain = "POINT"

            # Socket T / U
            t___u_socket = color_res_name_nucleic.interface.new_socket(
                name="T / U", in_out="INPUT", socket_type="NodeSocketColor"
            )
            t___u_socket.attribute_domain = "POINT"

            # initialize color_res_name_nucleic nodes
            # node Group Output
            group_output_98 = color_res_name_nucleic.nodes.new("NodeGroupOutput")
            group_output_98.name = "Group Output"
            group_output_98.is_active_output = True

            # node Switch.004
            switch_004_2 = color_res_name_nucleic.nodes.new("GeometryNodeSwitch")
            switch_004_2.name = "Switch.004"
            switch_004_2.input_type = "RGBA"

            # node Switch.001
            switch_001_17 = color_res_name_nucleic.nodes.new("GeometryNodeSwitch")
            switch_001_17.name = "Switch.001"
            switch_001_17.input_type = "RGBA"

            # node Switch.002
            switch_002_12 = color_res_name_nucleic.nodes.new("GeometryNodeSwitch")
            switch_002_12.name = "Switch.002"
            switch_002_12.input_type = "RGBA"

            # node Switch.003
            switch_003_4 = color_res_name_nucleic.nodes.new("GeometryNodeSwitch")
            switch_003_4.name = "Switch.003"
            switch_003_4.input_type = "RGBA"

            # node Boolean Math.017
            boolean_math_017 = color_res_name_nucleic.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_017.name = "Boolean Math.017"
            boolean_math_017.operation = "OR"

            # node Compare.013
            compare_013 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_013.name = "Compare.013"
            compare_013.data_type = "INT"
            compare_013.mode = "ELEMENT"
            compare_013.operation = "EQUAL"
            # B_INT
            compare_013.inputs[3].default_value = 33

            # node Compare.020
            compare_020 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_020.name = "Compare.020"
            compare_020.data_type = "INT"
            compare_020.mode = "ELEMENT"
            compare_020.operation = "EQUAL"
            # B_INT
            compare_020.inputs[3].default_value = 43

            # node Boolean Math.016
            boolean_math_016 = color_res_name_nucleic.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_016.name = "Boolean Math.016"
            boolean_math_016.operation = "OR"

            # node Compare.019
            compare_019 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_019.name = "Compare.019"
            compare_019.data_type = "INT"
            compare_019.mode = "ELEMENT"
            compare_019.operation = "EQUAL"
            # B_INT
            compare_019.inputs[3].default_value = 42

            # node Boolean Math.015
            boolean_math_015_1 = color_res_name_nucleic.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_015_1.name = "Boolean Math.015"
            boolean_math_015_1.operation = "OR"

            # node Compare.018
            compare_018_1 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_018_1.name = "Compare.018"
            compare_018_1.data_type = "INT"
            compare_018_1.mode = "ELEMENT"
            compare_018_1.operation = "EQUAL"
            # B_INT
            compare_018_1.inputs[3].default_value = 41

            # node Boolean Math.014
            boolean_math_014_1 = color_res_name_nucleic.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_014_1.name = "Boolean Math.014"
            boolean_math_014_1.operation = "OR"

            # node Compare.017
            compare_017_1 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_017_1.name = "Compare.017"
            compare_017_1.data_type = "INT"
            compare_017_1.mode = "ELEMENT"
            compare_017_1.operation = "EQUAL"
            # B_INT
            compare_017_1.inputs[3].default_value = 40

            # node Compare.010
            compare_010_2 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_010_2.name = "Compare.010"
            compare_010_2.data_type = "INT"
            compare_010_2.mode = "ELEMENT"
            compare_010_2.operation = "EQUAL"
            # B_INT
            compare_010_2.inputs[3].default_value = 30

            # node Compare.012
            compare_012_1 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_012_1.name = "Compare.012"
            compare_012_1.data_type = "INT"
            compare_012_1.mode = "ELEMENT"
            compare_012_1.operation = "EQUAL"
            # B_INT
            compare_012_1.inputs[3].default_value = 32

            # node Compare.011
            compare_011_1 = color_res_name_nucleic.nodes.new("FunctionNodeCompare")
            compare_011_1.name = "Compare.011"
            compare_011_1.data_type = "INT"
            compare_011_1.mode = "ELEMENT"
            compare_011_1.operation = "EQUAL"
            # B_INT
            compare_011_1.inputs[3].default_value = 31

            # node Named Attribute.009
            named_attribute_009_2 = color_res_name_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_009_2.name = "Named Attribute.009"
            named_attribute_009_2.data_type = "INT"
            # Name
            named_attribute_009_2.inputs[0].default_value = "res_name"

            # node Group Input
            group_input_97 = color_res_name_nucleic.nodes.new("NodeGroupInput")
            group_input_97.name = "Group Input"

            # node Named Attribute
            named_attribute_23 = color_res_name_nucleic.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_23.name = "Named Attribute"
            named_attribute_23.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_23.inputs[0].default_value = "Color"

            # Set locations
            group_output_98.location = (643.794677734375, 0.0)
            switch_004_2.location = (453.7947082519531, -246.83526611328125)
            switch_001_17.location = (286.0763854980469, -248.0322265625)
            switch_002_12.location = (99.95280456542969, -253.164794921875)
            switch_003_4.location = (-80.04719543457031, -253.164794921875)
            boolean_math_017.location = (293.7947082519531, 253.16473388671875)
            compare_013.location = (293.7947082519531, -66.83526611328125)
            compare_020.location = (293.7947082519531, 113.16473388671875)
            boolean_math_016.location = (93.79472351074219, 253.16473388671875)
            compare_019.location = (93.79472351074219, 113.16473388671875)
            boolean_math_015_1.location = (-86.20527648925781, 253.16473388671875)
            compare_018_1.location = (-86.20527648925781, 113.16473388671875)
            boolean_math_014_1.location = (-266.20526123046875, 253.16473388671875)
            compare_017_1.location = (-266.20526123046875, 113.16473388671875)
            compare_010_2.location = (-266.20526123046875, -66.83526611328125)
            compare_012_1.location = (106.20527648925781, -70.5985107421875)
            compare_011_1.location = (-73.79472351074219, -70.5985107421875)
            named_attribute_009_2.location = (-453.7947082519531, -70.5985107421875)
            group_input_97.location = (-460.0, -440.0)
            named_attribute_23.location = (-460.0, -300.0)

            # Set dimensions
            group_output_98.width, group_output_98.height = 140.0, 100.0
            switch_004_2.width, switch_004_2.height = 140.0, 100.0
            switch_001_17.width, switch_001_17.height = 140.0, 100.0
            switch_002_12.width, switch_002_12.height = 140.0, 100.0
            switch_003_4.width, switch_003_4.height = 140.0, 100.0
            boolean_math_017.width, boolean_math_017.height = 140.0, 100.0
            compare_013.width, compare_013.height = 140.0, 100.0
            compare_020.width, compare_020.height = 140.0, 100.0
            boolean_math_016.width, boolean_math_016.height = 140.0, 100.0
            compare_019.width, compare_019.height = 140.0, 100.0
            boolean_math_015_1.width, boolean_math_015_1.height = 140.0, 100.0
            compare_018_1.width, compare_018_1.height = 140.0, 100.0
            boolean_math_014_1.width, boolean_math_014_1.height = 140.0, 100.0
            compare_017_1.width, compare_017_1.height = 140.0, 100.0
            compare_010_2.width, compare_010_2.height = 140.0, 100.0
            compare_012_1.width, compare_012_1.height = 140.0, 100.0
            compare_011_1.width, compare_011_1.height = 140.0, 100.0
            named_attribute_009_2.width, named_attribute_009_2.height = 140.0, 100.0
            group_input_97.width, group_input_97.height = 140.0, 100.0
            named_attribute_23.width, named_attribute_23.height = 140.0, 100.0

            # initialize color_res_name_nucleic links
            # switch_003_4.Output -> switch_002_12.False
            color_res_name_nucleic.links.new(
                switch_003_4.outputs[0], switch_002_12.inputs[1]
            )
            # named_attribute_009_2.Attribute -> compare_011_1.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_011_1.inputs[2]
            )
            # switch_002_12.Output -> switch_001_17.False
            color_res_name_nucleic.links.new(
                switch_002_12.outputs[0], switch_001_17.inputs[1]
            )
            # boolean_math_015_1.Boolean -> switch_002_12.Switch
            color_res_name_nucleic.links.new(
                boolean_math_015_1.outputs[0], switch_002_12.inputs[0]
            )
            # named_attribute_009_2.Attribute -> compare_019.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_019.inputs[2]
            )
            # compare_011_1.Result -> boolean_math_015_1.Boolean
            color_res_name_nucleic.links.new(
                compare_011_1.outputs[0], boolean_math_015_1.inputs[1]
            )
            # compare_018_1.Result -> boolean_math_015_1.Boolean
            color_res_name_nucleic.links.new(
                compare_018_1.outputs[0], boolean_math_015_1.inputs[0]
            )
            # compare_013.Result -> boolean_math_017.Boolean
            color_res_name_nucleic.links.new(
                compare_013.outputs[0], boolean_math_017.inputs[1]
            )
            # named_attribute_009_2.Attribute -> compare_018_1.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_018_1.inputs[2]
            )
            # boolean_math_014_1.Boolean -> switch_003_4.Switch
            color_res_name_nucleic.links.new(
                boolean_math_014_1.outputs[0], switch_003_4.inputs[0]
            )
            # compare_010_2.Result -> boolean_math_014_1.Boolean
            color_res_name_nucleic.links.new(
                compare_010_2.outputs[0], boolean_math_014_1.inputs[1]
            )
            # named_attribute_009_2.Attribute -> compare_012_1.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_012_1.inputs[2]
            )
            # compare_017_1.Result -> boolean_math_014_1.Boolean
            color_res_name_nucleic.links.new(
                compare_017_1.outputs[0], boolean_math_014_1.inputs[0]
            )
            # named_attribute_009_2.Attribute -> compare_017_1.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_017_1.inputs[2]
            )
            # named_attribute_009_2.Attribute -> compare_010_2.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_010_2.inputs[2]
            )
            # named_attribute_009_2.Attribute -> compare_013.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_013.inputs[2]
            )
            # switch_001_17.Output -> switch_004_2.False
            color_res_name_nucleic.links.new(
                switch_001_17.outputs[0], switch_004_2.inputs[1]
            )
            # compare_020.Result -> boolean_math_017.Boolean
            color_res_name_nucleic.links.new(
                compare_020.outputs[0], boolean_math_017.inputs[0]
            )
            # named_attribute_009_2.Attribute -> compare_020.A
            color_res_name_nucleic.links.new(
                named_attribute_009_2.outputs[0], compare_020.inputs[2]
            )
            # compare_019.Result -> boolean_math_016.Boolean
            color_res_name_nucleic.links.new(
                compare_019.outputs[0], boolean_math_016.inputs[0]
            )
            # boolean_math_016.Boolean -> switch_001_17.Switch
            color_res_name_nucleic.links.new(
                boolean_math_016.outputs[0], switch_001_17.inputs[0]
            )
            # compare_012_1.Result -> boolean_math_016.Boolean
            color_res_name_nucleic.links.new(
                compare_012_1.outputs[0], boolean_math_016.inputs[1]
            )
            # boolean_math_017.Boolean -> switch_004_2.Switch
            color_res_name_nucleic.links.new(
                boolean_math_017.outputs[0], switch_004_2.inputs[0]
            )
            # switch_004_2.Output -> group_output_98.Color
            color_res_name_nucleic.links.new(
                switch_004_2.outputs[0], group_output_98.inputs[0]
            )
            # group_input_97.A -> switch_003_4.True
            color_res_name_nucleic.links.new(
                group_input_97.outputs[0], switch_003_4.inputs[2]
            )
            # group_input_97.C -> switch_002_12.True
            color_res_name_nucleic.links.new(
                group_input_97.outputs[1], switch_002_12.inputs[2]
            )
            # group_input_97.G -> switch_001_17.True
            color_res_name_nucleic.links.new(
                group_input_97.outputs[2], switch_001_17.inputs[2]
            )
            # group_input_97.T / U -> switch_004_2.True
            color_res_name_nucleic.links.new(
                group_input_97.outputs[3], switch_004_2.inputs[2]
            )
            # named_attribute_23.Attribute -> switch_003_4.False
            color_res_name_nucleic.links.new(
                named_attribute_23.outputs[0], switch_003_4.inputs[1]
            )
            return color_res_name_nucleic

        color_res_name_nucleic = color_res_name_nucleic_node_group()

        # initialize mn_oxdna_style_ribbon node group
        def mn_oxdna_style_ribbon_node_group():
            mn_oxdna_style_ribbon = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_oxdna_style_ribbon"
            )

            mn_oxdna_style_ribbon.color_tag = "NONE"
            mn_oxdna_style_ribbon.description = ""

            # mn_oxdna_style_ribbon interface
            # Socket DNA Mesh
            dna_mesh_socket = mn_oxdna_style_ribbon.interface.new_socket(
                name="DNA Mesh", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            dna_mesh_socket.attribute_domain = "POINT"

            # Socket DNA Bases
            dna_bases_socket = mn_oxdna_style_ribbon.interface.new_socket(
                name="DNA Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            dna_bases_socket.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_32 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_32.attribute_domain = "POINT"
            selection_socket_32.hide_value = True
            selection_socket_32.description = "Selection of atoms to apply this node to"

            # Socket Material
            material_socket_10 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_10.attribute_domain = "POINT"
            material_socket_10.description = (
                "Material to apply to the resulting geometry"
            )

            # Panel Base
            base_panel_1 = mn_oxdna_style_ribbon.interface.new_panel("Base")
            # Socket A
            a_socket_4 = mn_oxdna_style_ribbon.interface.new_socket(
                name="A",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=base_panel_1,
            )
            a_socket_4.attribute_domain = "POINT"

            # Socket C
            c_socket_3 = mn_oxdna_style_ribbon.interface.new_socket(
                name="C",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=base_panel_1,
            )
            c_socket_3.attribute_domain = "POINT"

            # Socket G
            g_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="G",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=base_panel_1,
            )
            g_socket_1.attribute_domain = "POINT"

            # Socket T / U
            t___u_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="T / U",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=base_panel_1,
            )
            t___u_socket_1.attribute_domain = "POINT"

            # Socket Base Scale
            base_scale_socket = mn_oxdna_style_ribbon.interface.new_socket(
                name="Base Scale",
                in_out="INPUT",
                socket_type="NodeSocketVector",
                parent=base_panel_1,
            )
            base_scale_socket.subtype = "XYZ"
            base_scale_socket.default_value = (1.0, 1.0, 1.0)
            base_scale_socket.min_value = -3.4028234663852886e38
            base_scale_socket.max_value = 3.4028234663852886e38
            base_scale_socket.attribute_domain = "POINT"

            # Panel Backbone
            backbone_panel_1 = mn_oxdna_style_ribbon.interface.new_panel("Backbone")
            # Socket Backbone Resolution
            backbone_resolution_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Backbone Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=backbone_panel_1,
            )
            backbone_resolution_socket_1.subtype = "NONE"
            backbone_resolution_socket_1.default_value = 6
            backbone_resolution_socket_1.min_value = 3
            backbone_resolution_socket_1.max_value = 512
            backbone_resolution_socket_1.attribute_domain = "POINT"

            # Socket Backbone Subdivisions
            backbone_subdivisions_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Backbone Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=backbone_panel_1,
            )
            backbone_subdivisions_socket_1.subtype = "NONE"
            backbone_subdivisions_socket_1.default_value = 1
            backbone_subdivisions_socket_1.min_value = 1
            backbone_subdivisions_socket_1.max_value = 2147483647
            backbone_subdivisions_socket_1.attribute_domain = "POINT"

            # Socket Backbone Radius
            backbone_radius_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Backbone Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=backbone_panel_1,
            )
            backbone_radius_socket_1.subtype = "NONE"
            backbone_radius_socket_1.default_value = 2.0
            backbone_radius_socket_1.min_value = 0.0
            backbone_radius_socket_1.max_value = 10000.0
            backbone_radius_socket_1.attribute_domain = "POINT"

            # Socket Backbone Shade Smooth
            backbone_shade_smooth_socket_1 = mn_oxdna_style_ribbon.interface.new_socket(
                name="Backbone Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=backbone_panel_1,
            )
            backbone_shade_smooth_socket_1.attribute_domain = "POINT"

            # initialize mn_oxdna_style_ribbon nodes
            # node Frame
            frame_11 = mn_oxdna_style_ribbon.nodes.new("NodeFrame")
            frame_11.label = "calculate backbone offset"
            frame_11.name = "Frame"
            frame_11.label_size = 20
            frame_11.shrink = True

            # node Group Output
            group_output_99 = mn_oxdna_style_ribbon.nodes.new("NodeGroupOutput")
            group_output_99.name = "Group Output"
            group_output_99.is_active_output = True

            # node Set Material
            set_material_7 = mn_oxdna_style_ribbon.nodes.new("GeometryNodeSetMaterial")
            set_material_7.name = "Set Material"
            # Selection
            set_material_7.inputs[1].default_value = True

            # node Join Geometry
            join_geometry_3 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_3.name = "Join Geometry"
            join_geometry_3.hide = True

            # node Group Input.003
            group_input_003_5 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_003_5.name = "Group Input.003"
            group_input_003_5.outputs[0].hide = True
            group_input_003_5.outputs[1].hide = True
            group_input_003_5.outputs[3].hide = True
            group_input_003_5.outputs[4].hide = True
            group_input_003_5.outputs[5].hide = True
            group_input_003_5.outputs[6].hide = True
            group_input_003_5.outputs[7].hide = True
            group_input_003_5.outputs[8].hide = True
            group_input_003_5.outputs[9].hide = True
            group_input_003_5.outputs[10].hide = True
            group_input_003_5.outputs[11].hide = True
            group_input_003_5.outputs[12].hide = True

            # node Capture Attribute
            capture_attribute_7 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_7.name = "Capture Attribute"
            capture_attribute_7.active_index = 0
            capture_attribute_7.capture_items.clear()
            capture_attribute_7.capture_items.new("FLOAT", "Value")
            capture_attribute_7.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_7.domain = "POINT"

            # node Separate Geometry
            separate_geometry_13 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_13.name = "Separate Geometry"
            separate_geometry_13.domain = "POINT"

            # node Reroute
            reroute_25 = mn_oxdna_style_ribbon.nodes.new("NodeReroute")
            reroute_25.name = "Reroute"
            # node Set Position.001
            set_position_001_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_1.name = "Set Position.001"
            # Selection
            set_position_001_1.inputs[1].default_value = True
            # Position
            set_position_001_1.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.004
            vector_math_004_3 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeVectorMath")
            vector_math_004_3.name = "Vector Math.004"
            vector_math_004_3.operation = "CROSS_PRODUCT"

            # node Vector Math.005
            vector_math_005_1 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeVectorMath")
            vector_math_005_1.name = "Vector Math.005"
            vector_math_005_1.operation = "SCALE"
            # Scale
            vector_math_005_1.inputs[3].default_value = 3.4079999923706055

            # node Vector Math.002
            vector_math_002_5 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeVectorMath")
            vector_math_002_5.name = "Vector Math.002"
            vector_math_002_5.operation = "ADD"

            # node Named Attribute.004
            named_attribute_004_2 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_2.name = "Named Attribute.004"
            named_attribute_004_2.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_004_2.inputs[0].default_value = "base_normal"

            # node Vector Math.003
            vector_math_003_3 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeVectorMath")
            vector_math_003_3.name = "Vector Math.003"
            vector_math_003_3.operation = "SCALE"
            # Scale
            vector_math_003_3.inputs[3].default_value = -0.3400000035762787

            # node Named Attribute.003
            named_attribute_003_3 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_3.name = "Named Attribute.003"
            named_attribute_003_3.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_003_3.inputs[0].default_value = "base_vector"

            # node Set Curve Radius
            set_curve_radius_3 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_3.name = "Set Curve Radius"
            # Selection
            set_curve_radius_3.inputs[1].default_value = True

            # node Math
            math_23 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeMath")
            math_23.name = "Math"
            math_23.operation = "DIVIDE"
            math_23.use_clamp = False
            # Value_001
            math_23.inputs[1].default_value = 100.0

            # node Points to Curves
            points_to_curves_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodePointsToCurves"
            )
            points_to_curves_1.name = "Points to Curves"
            # Weight
            points_to_curves_1.inputs[2].default_value = 0.0

            # node Mesh to Points
            mesh_to_points_2 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeMeshToPoints"
            )
            mesh_to_points_2.name = "Mesh to Points"
            mesh_to_points_2.mode = "VERTICES"
            # Selection
            mesh_to_points_2.inputs[1].default_value = True
            # Position
            mesh_to_points_2.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Radius
            mesh_to_points_2.inputs[3].default_value = 1.0

            # node Set Spline Type
            set_spline_type_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_1.name = "Set Spline Type"
            set_spline_type_1.spline_type = "BEZIER"
            # Selection
            set_spline_type_1.inputs[1].default_value = True

            # node Set Handle Type
            set_handle_type_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_1.name = "Set Handle Type"
            set_handle_type_1.handle_type = "AUTO"
            set_handle_type_1.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_1.inputs[1].default_value = True

            # node Curve to Mesh
            curve_to_mesh_5 = mn_oxdna_style_ribbon.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_5.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_5.inputs[2].default_value = True

            # node Set Spline Resolution
            set_spline_resolution_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_1.name = "Set Spline Resolution"
            # Selection
            set_spline_resolution_1.inputs[1].default_value = True

            # node Curve Circle
            curve_circle_4 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_4.name = "Curve Circle"
            curve_circle_4.mode = "RADIUS"
            # Radius
            curve_circle_4.inputs[4].default_value = 1.0

            # node Named Attribute.002
            named_attribute_002_8 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_8.name = "Named Attribute.002"
            named_attribute_002_8.data_type = "INT"
            # Name
            named_attribute_002_8.inputs[0].default_value = "chain_id"

            # node Group Input.005
            group_input_005_2 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_005_2.name = "Group Input.005"
            group_input_005_2.outputs[0].hide = True
            group_input_005_2.outputs[1].hide = True
            group_input_005_2.outputs[2].hide = True
            group_input_005_2.outputs[3].hide = True
            group_input_005_2.outputs[4].hide = True
            group_input_005_2.outputs[5].hide = True
            group_input_005_2.outputs[6].hide = True
            group_input_005_2.outputs[7].hide = True
            group_input_005_2.outputs[8].hide = True
            group_input_005_2.outputs[9].hide = True
            group_input_005_2.outputs[11].hide = True
            group_input_005_2.outputs[12].hide = True

            # node Group Input.006
            group_input_006_1 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_006_1.name = "Group Input.006"
            group_input_006_1.outputs[0].hide = True
            group_input_006_1.outputs[1].hide = True
            group_input_006_1.outputs[2].hide = True
            group_input_006_1.outputs[3].hide = True
            group_input_006_1.outputs[4].hide = True
            group_input_006_1.outputs[5].hide = True
            group_input_006_1.outputs[6].hide = True
            group_input_006_1.outputs[7].hide = True
            group_input_006_1.outputs[8].hide = True
            group_input_006_1.outputs[10].hide = True
            group_input_006_1.outputs[11].hide = True
            group_input_006_1.outputs[12].hide = True

            # node Group Input.002
            group_input_002_6 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_002_6.name = "Group Input.002"
            group_input_002_6.outputs[0].hide = True
            group_input_002_6.outputs[1].hide = True
            group_input_002_6.outputs[2].hide = True
            group_input_002_6.outputs[3].hide = True
            group_input_002_6.outputs[4].hide = True
            group_input_002_6.outputs[5].hide = True
            group_input_002_6.outputs[6].hide = True
            group_input_002_6.outputs[7].hide = True
            group_input_002_6.outputs[9].hide = True
            group_input_002_6.outputs[10].hide = True
            group_input_002_6.outputs[11].hide = True
            group_input_002_6.outputs[12].hide = True

            # node Set Shade Smooth
            set_shade_smooth_5 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_5.name = "Set Shade Smooth"
            set_shade_smooth_5.domain = "FACE"
            # Selection
            set_shade_smooth_5.inputs[1].default_value = True

            # node Group Input.001
            group_input_001_12 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_001_12.name = "Group Input.001"
            group_input_001_12.outputs[0].hide = True
            group_input_001_12.outputs[1].hide = True
            group_input_001_12.outputs[2].hide = True
            group_input_001_12.outputs[3].hide = True
            group_input_001_12.outputs[4].hide = True
            group_input_001_12.outputs[5].hide = True
            group_input_001_12.outputs[6].hide = True
            group_input_001_12.outputs[7].hide = True
            group_input_001_12.outputs[8].hide = True
            group_input_001_12.outputs[9].hide = True
            group_input_001_12.outputs[10].hide = True
            group_input_001_12.outputs[12].hide = True

            # node Instance on Points.001
            instance_on_points_001 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_001.name = "Instance on Points.001"
            # Selection
            instance_on_points_001.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_001.inputs[3].default_value = False
            # Instance Index
            instance_on_points_001.inputs[4].default_value = 0
            # Scale
            instance_on_points_001.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Align Euler to Vector.002
            align_euler_to_vector_002_1 = mn_oxdna_style_ribbon.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_002_1.name = "Align Euler to Vector.002"
            align_euler_to_vector_002_1.axis = "X"
            align_euler_to_vector_002_1.pivot_axis = "AUTO"
            # Factor
            align_euler_to_vector_002_1.inputs[1].default_value = 1.0

            # node Align Euler to Vector.003
            align_euler_to_vector_003_1 = mn_oxdna_style_ribbon.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_003_1.name = "Align Euler to Vector.003"
            align_euler_to_vector_003_1.axis = "Z"
            align_euler_to_vector_003_1.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_003_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_003_1.inputs[1].default_value = 1.0

            # node Vector Math
            vector_math_19 = mn_oxdna_style_ribbon.nodes.new("ShaderNodeVectorMath")
            vector_math_19.name = "Vector Math"
            vector_math_19.operation = "SCALE"
            # Scale
            vector_math_19.inputs[3].default_value = -1.0

            # node Group Input
            group_input_98 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_98.name = "Group Input"
            group_input_98.outputs[2].hide = True
            group_input_98.outputs[8].hide = True
            group_input_98.outputs[11].hide = True

            # node Group
            group_27 = mn_oxdna_style_ribbon.nodes.new("GeometryNodeGroup")
            group_27.name = "Group"
            group_27.node_tree = _utils_oxdna_base
            # Input_0
            group_27.inputs[0].default_value = 4.139998912811279
            # Input_1
            group_27.inputs[1].default_value = 5.420000076293945
            # Input_2
            group_27.inputs[2].default_value = 3.320000171661377

            # node Instance on Points
            instance_on_points_3 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_3.name = "Instance on Points"
            # Selection
            instance_on_points_3.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_3.inputs[3].default_value = False
            # Instance Index
            instance_on_points_3.inputs[4].default_value = 0

            # node Align Euler to Vector
            align_euler_to_vector_2 = mn_oxdna_style_ribbon.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_2.name = "Align Euler to Vector"
            align_euler_to_vector_2.axis = "X"
            align_euler_to_vector_2.pivot_axis = "AUTO"
            # Factor
            align_euler_to_vector_2.inputs[1].default_value = 1.0

            # node Align Euler to Vector.001
            align_euler_to_vector_001_1 = mn_oxdna_style_ribbon.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_001_1.name = "Align Euler to Vector.001"
            align_euler_to_vector_001_1.axis = "Z"
            align_euler_to_vector_001_1.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_001_1.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_001_1.inputs[1].default_value = 1.0

            # node Named Attribute.001
            named_attribute_001_11 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_11.name = "Named Attribute.001"
            named_attribute_001_11.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_11.inputs[0].default_value = "base_normal"

            # node Named Attribute
            named_attribute_24 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_24.name = "Named Attribute"
            named_attribute_24.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_24.inputs[0].default_value = "base_vector"

            # node Group Input.007
            group_input_007 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_007.name = "Group Input.007"
            group_input_007.outputs[0].hide = True
            group_input_007.outputs[1].hide = True
            group_input_007.outputs[2].hide = True
            group_input_007.outputs[3].hide = True
            group_input_007.outputs[4].hide = True
            group_input_007.outputs[5].hide = True
            group_input_007.outputs[6].hide = True
            group_input_007.outputs[8].hide = True
            group_input_007.outputs[9].hide = True
            group_input_007.outputs[10].hide = True
            group_input_007.outputs[11].hide = True
            group_input_007.outputs[12].hide = True

            # node Group.002
            group_002_9 = mn_oxdna_style_ribbon.nodes.new("GeometryNodeGroup")
            group_002_9.name = "Group.002"
            group_002_9.node_tree = _utils_oxdna_base
            # Input_0
            group_002_9.inputs[0].default_value = 1.4999992847442627
            # Input_1
            group_002_9.inputs[1].default_value = 6.119998931884766
            # Input_2
            group_002_9.inputs[2].default_value = 5.0

            # node Group Input.004
            group_input_004_4 = mn_oxdna_style_ribbon.nodes.new("NodeGroupInput")
            group_input_004_4.name = "Group Input.004"
            group_input_004_4.outputs[0].hide = True
            group_input_004_4.outputs[1].hide = True
            group_input_004_4.outputs[2].hide = True
            group_input_004_4.outputs[7].hide = True
            group_input_004_4.outputs[8].hide = True
            group_input_004_4.outputs[9].hide = True
            group_input_004_4.outputs[10].hide = True
            group_input_004_4.outputs[11].hide = True
            group_input_004_4.outputs[12].hide = True

            # node Group.001
            group_001_17 = mn_oxdna_style_ribbon.nodes.new("GeometryNodeGroup")
            group_001_17.label = "Res Name Nucleic"
            group_001_17.name = "Group.001"
            group_001_17.node_tree = color_res_name_nucleic

            # node Store Named Attribute
            store_named_attribute_9 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_9.name = "Store Named Attribute"
            store_named_attribute_9.data_type = "FLOAT_COLOR"
            store_named_attribute_9.domain = "POINT"
            # Selection
            store_named_attribute_9.inputs[1].default_value = True
            # Name
            store_named_attribute_9.inputs[2].default_value = "Color"

            # node Named Attribute.006
            named_attribute_006_1 = mn_oxdna_style_ribbon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_006_1.name = "Named Attribute.006"
            named_attribute_006_1.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_006_1.inputs[0].default_value = "base_normal"

            # Set parents
            vector_math_004_3.parent = frame_11
            vector_math_005_1.parent = frame_11
            vector_math_002_5.parent = frame_11
            named_attribute_004_2.parent = frame_11
            vector_math_003_3.parent = frame_11
            named_attribute_003_3.parent = frame_11

            # Set locations
            frame_11.location = (0.0, 0.0)
            group_output_99.location = (1850.05322265625, 0.0)
            set_material_7.location = (1660.05322265625, 118.50094604492188)
            join_geometry_3.location = (1140.0, 80.0)
            group_input_003_5.location = (1459.3980712890625, -5.569933891296387)
            capture_attribute_7.location = (-1220.0, 140.0)
            separate_geometry_13.location = (-1460.0, 20.0)
            reroute_25.location = (-920.0, 120.0)
            set_position_001_1.location = (-760.0, 420.0)
            vector_math_004_3.location = (-1760.0, 360.0)
            vector_math_005_1.location = (-1600.0, 360.0)
            vector_math_002_5.location = (-1600.0, 500.0)
            named_attribute_004_2.location = (-1980.0, 360.0)
            vector_math_003_3.location = (-1760.0, 500.0)
            named_attribute_003_3.location = (-1980.0, 500.0)
            set_curve_radius_3.location = (-40.0, 660.0)
            math_23.location = (-40.0, 520.0)
            points_to_curves_1.location = (-220.0, 660.0)
            mesh_to_points_2.location = (-380.0, 660.0)
            set_spline_type_1.location = (120.0, 660.0)
            set_handle_type_1.location = (300.0, 660.0)
            curve_to_mesh_5.location = (640.0, 660.0)
            set_spline_resolution_1.location = (460.0, 660.0)
            curve_circle_4.location = (640.0, 520.0)
            named_attribute_002_8.location = (-380.0, 480.0)
            group_input_005_2.location = (-200.0, 500.0)
            group_input_006_1.location = (460.0, 520.0)
            group_input_002_6.location = (460.0, 440.0)
            set_shade_smooth_5.location = (860.0, 660.0)
            group_input_001_12.location = (860.0, 500.0)
            instance_on_points_001.location = (660.0, 200.0)
            align_euler_to_vector_002_1.location = (220.0, 100.0)
            align_euler_to_vector_003_1.location = (40.0, 60.0)
            vector_math_19.location = (-140.0, 0.0)
            group_input_98.location = (-1660.0, 20.0)
            group_27.location = (700.0, -360.0)
            instance_on_points_3.location = (920.0, -260.0)
            align_euler_to_vector_2.location = (700.0, -520.0)
            align_euler_to_vector_001_1.location = (540.0, -520.0)
            named_attribute_001_11.location = (700.0, -700.0)
            named_attribute_24.location = (540.0, -720.0)
            group_input_007.location = (920.0, -480.0)
            group_002_9.location = (220.0, 260.0)
            group_input_004_4.location = (-116.71331787109375, -364.2935791015625)
            group_001_17.location = (80.0, -400.0)
            store_named_attribute_9.location = (480.0, -200.0)
            named_attribute_006_1.location = (180.28485107421875, -100.0)

            # Set dimensions
            frame_11.width, frame_11.height = 580.0, 336.0
            group_output_99.width, group_output_99.height = 140.0, 100.0
            set_material_7.width, set_material_7.height = 140.0, 100.0
            join_geometry_3.width, join_geometry_3.height = 140.0, 100.0
            group_input_003_5.width, group_input_003_5.height = 140.0, 100.0
            capture_attribute_7.width, capture_attribute_7.height = 140.0, 100.0
            separate_geometry_13.width, separate_geometry_13.height = 140.0, 100.0
            reroute_25.width, reroute_25.height = 16.0, 100.0
            set_position_001_1.width, set_position_001_1.height = 140.0, 100.0
            vector_math_004_3.width, vector_math_004_3.height = 140.0, 100.0
            vector_math_005_1.width, vector_math_005_1.height = 140.0, 100.0
            vector_math_002_5.width, vector_math_002_5.height = 140.0, 100.0
            named_attribute_004_2.width, named_attribute_004_2.height = (
                188.748779296875,
                100.0,
            )
            vector_math_003_3.width, vector_math_003_3.height = 140.0, 100.0
            named_attribute_003_3.width, named_attribute_003_3.height = (
                188.748779296875,
                100.0,
            )
            set_curve_radius_3.width, set_curve_radius_3.height = 140.0, 100.0
            math_23.width, math_23.height = 140.0, 100.0
            points_to_curves_1.width, points_to_curves_1.height = 140.0, 100.0
            mesh_to_points_2.width, mesh_to_points_2.height = 140.0, 100.0
            set_spline_type_1.width, set_spline_type_1.height = 140.0, 100.0
            set_handle_type_1.width, set_handle_type_1.height = 140.0, 100.0
            curve_to_mesh_5.width, curve_to_mesh_5.height = 140.0, 100.0
            set_spline_resolution_1.width, set_spline_resolution_1.height = 140.0, 100.0
            curve_circle_4.width, curve_circle_4.height = 140.0, 100.0
            named_attribute_002_8.width, named_attribute_002_8.height = 140.0, 100.0
            group_input_005_2.width, group_input_005_2.height = 141.8651123046875, 100.0
            group_input_006_1.width, group_input_006_1.height = 141.8651123046875, 100.0
            group_input_002_6.width, group_input_002_6.height = 140.0, 100.0
            set_shade_smooth_5.width, set_shade_smooth_5.height = 140.0, 100.0
            group_input_001_12.width, group_input_001_12.height = 140.0, 100.0
            instance_on_points_001.width, instance_on_points_001.height = 140.0, 100.0
            align_euler_to_vector_002_1.width, align_euler_to_vector_002_1.height = (
                140.0,
                100.0,
            )
            align_euler_to_vector_003_1.width, align_euler_to_vector_003_1.height = (
                140.0,
                100.0,
            )
            vector_math_19.width, vector_math_19.height = 140.0, 100.0
            group_input_98.width, group_input_98.height = 141.8651123046875, 100.0
            group_27.width, group_27.height = 140.0, 100.0
            instance_on_points_3.width, instance_on_points_3.height = (
                125.27001953125,
                100.0,
            )
            align_euler_to_vector_2.width, align_euler_to_vector_2.height = 140.0, 100.0
            align_euler_to_vector_001_1.width, align_euler_to_vector_001_1.height = (
                140.0,
                100.0,
            )
            named_attribute_001_11.width, named_attribute_001_11.height = 140.0, 100.0
            named_attribute_24.width, named_attribute_24.height = 140.0, 100.0
            group_input_007.width, group_input_007.height = 122.67431640625, 100.0
            group_002_9.width, group_002_9.height = 214.42431640625, 100.0
            group_input_004_4.width, group_input_004_4.height = 154.56005859375, 100.0
            group_001_17.width, group_001_17.height = 298.75079345703125, 100.0
            store_named_attribute_9.width, store_named_attribute_9.height = 140.0, 100.0
            named_attribute_006_1.width, named_attribute_006_1.height = (
                179.71514892578125,
                100.0,
            )

            # initialize mn_oxdna_style_ribbon links
            # join_geometry_3.Geometry -> set_material_7.Geometry
            mn_oxdna_style_ribbon.links.new(
                join_geometry_3.outputs[0], set_material_7.inputs[0]
            )
            # math_23.Value -> set_curve_radius_3.Radius
            mn_oxdna_style_ribbon.links.new(
                math_23.outputs[0], set_curve_radius_3.inputs[2]
            )
            # group_27.Geometry -> instance_on_points_3.Instance
            mn_oxdna_style_ribbon.links.new(
                group_27.outputs[0], instance_on_points_3.inputs[2]
            )
            # set_spline_resolution_1.Geometry -> curve_to_mesh_5.Curve
            mn_oxdna_style_ribbon.links.new(
                set_spline_resolution_1.outputs[0], curve_to_mesh_5.inputs[0]
            )
            # instance_on_points_3.Instances -> join_geometry_3.Geometry
            mn_oxdna_style_ribbon.links.new(
                instance_on_points_3.outputs[0], join_geometry_3.inputs[0]
            )
            # set_position_001_1.Geometry -> mesh_to_points_2.Mesh
            mn_oxdna_style_ribbon.links.new(
                set_position_001_1.outputs[0], mesh_to_points_2.inputs[0]
            )
            # align_euler_to_vector_2.Rotation -> instance_on_points_3.Rotation
            mn_oxdna_style_ribbon.links.new(
                align_euler_to_vector_2.outputs[0], instance_on_points_3.inputs[5]
            )
            # points_to_curves_1.Curves -> set_curve_radius_3.Curve
            mn_oxdna_style_ribbon.links.new(
                points_to_curves_1.outputs[0], set_curve_radius_3.inputs[0]
            )
            # mesh_to_points_2.Points -> points_to_curves_1.Points
            mn_oxdna_style_ribbon.links.new(
                mesh_to_points_2.outputs[0], points_to_curves_1.inputs[0]
            )
            # curve_circle_4.Curve -> curve_to_mesh_5.Profile Curve
            mn_oxdna_style_ribbon.links.new(
                curve_circle_4.outputs[0], curve_to_mesh_5.inputs[1]
            )
            # named_attribute_002_8.Attribute -> points_to_curves_1.Curve Group ID
            mn_oxdna_style_ribbon.links.new(
                named_attribute_002_8.outputs[0], points_to_curves_1.inputs[1]
            )
            # align_euler_to_vector_001_1.Rotation -> align_euler_to_vector_2.Rotation
            mn_oxdna_style_ribbon.links.new(
                align_euler_to_vector_001_1.outputs[0],
                align_euler_to_vector_2.inputs[0],
            )
            # set_material_7.Geometry -> group_output_99.DNA Mesh
            mn_oxdna_style_ribbon.links.new(
                set_material_7.outputs[0], group_output_99.inputs[0]
            )
            # set_curve_radius_3.Curve -> set_spline_type_1.Curve
            mn_oxdna_style_ribbon.links.new(
                set_curve_radius_3.outputs[0], set_spline_type_1.inputs[0]
            )
            # set_handle_type_1.Curve -> set_spline_resolution_1.Geometry
            mn_oxdna_style_ribbon.links.new(
                set_handle_type_1.outputs[0], set_spline_resolution_1.inputs[0]
            )
            # set_spline_type_1.Curve -> set_handle_type_1.Curve
            mn_oxdna_style_ribbon.links.new(
                set_spline_type_1.outputs[0], set_handle_type_1.inputs[0]
            )
            # curve_to_mesh_5.Mesh -> set_shade_smooth_5.Geometry
            mn_oxdna_style_ribbon.links.new(
                curve_to_mesh_5.outputs[0], set_shade_smooth_5.inputs[0]
            )
            # group_input_001_12.Backbone Shade Smooth -> set_shade_smooth_5.Shade Smooth
            mn_oxdna_style_ribbon.links.new(
                group_input_001_12.outputs[11], set_shade_smooth_5.inputs[2]
            )
            # group_input_98.DNA Bases -> separate_geometry_13.Geometry
            mn_oxdna_style_ribbon.links.new(
                group_input_98.outputs[0], separate_geometry_13.inputs[0]
            )
            # group_input_98.Selection -> separate_geometry_13.Selection
            mn_oxdna_style_ribbon.links.new(
                group_input_98.outputs[1], separate_geometry_13.inputs[1]
            )
            # group_input_002_6.Backbone Resolution -> curve_circle_4.Resolution
            mn_oxdna_style_ribbon.links.new(
                group_input_002_6.outputs[8], curve_circle_4.inputs[0]
            )
            # group_input_003_5.Material -> set_material_7.Material
            mn_oxdna_style_ribbon.links.new(
                group_input_003_5.outputs[2], set_material_7.inputs[2]
            )
            # named_attribute_001_11.Attribute -> align_euler_to_vector_2.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_001_11.outputs[0], align_euler_to_vector_2.inputs[2]
            )
            # named_attribute_24.Attribute -> align_euler_to_vector_001_1.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_24.outputs[0], align_euler_to_vector_001_1.inputs[2]
            )
            # store_named_attribute_9.Geometry -> instance_on_points_3.Points
            mn_oxdna_style_ribbon.links.new(
                store_named_attribute_9.outputs[0], instance_on_points_3.inputs[0]
            )
            # reroute_25.Output -> set_position_001_1.Geometry
            mn_oxdna_style_ribbon.links.new(
                reroute_25.outputs[0], set_position_001_1.inputs[0]
            )
            # vector_math_003_3.Vector -> vector_math_002_5.Vector
            mn_oxdna_style_ribbon.links.new(
                vector_math_003_3.outputs[0], vector_math_002_5.inputs[0]
            )
            # vector_math_005_1.Vector -> vector_math_002_5.Vector
            mn_oxdna_style_ribbon.links.new(
                vector_math_005_1.outputs[0], vector_math_002_5.inputs[1]
            )
            # named_attribute_003_3.Attribute -> vector_math_003_3.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_003_3.outputs[0], vector_math_003_3.inputs[0]
            )
            # named_attribute_004_2.Attribute -> vector_math_004_3.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_004_2.outputs[0], vector_math_004_3.inputs[1]
            )
            # named_attribute_003_3.Attribute -> vector_math_004_3.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_003_3.outputs[0], vector_math_004_3.inputs[0]
            )
            # vector_math_004_3.Vector -> vector_math_005_1.Vector
            mn_oxdna_style_ribbon.links.new(
                vector_math_004_3.outputs[0], vector_math_005_1.inputs[0]
            )
            # group_input_004_4.A -> group_001_17.A
            mn_oxdna_style_ribbon.links.new(
                group_input_004_4.outputs[3], group_001_17.inputs[0]
            )
            # group_input_004_4.C -> group_001_17.C
            mn_oxdna_style_ribbon.links.new(
                group_input_004_4.outputs[4], group_001_17.inputs[1]
            )
            # group_input_004_4.G -> group_001_17.G
            mn_oxdna_style_ribbon.links.new(
                group_input_004_4.outputs[5], group_001_17.inputs[2]
            )
            # group_input_004_4.T / U -> group_001_17.T / U
            mn_oxdna_style_ribbon.links.new(
                group_input_004_4.outputs[6], group_001_17.inputs[3]
            )
            # set_position_001_1.Geometry -> instance_on_points_001.Points
            mn_oxdna_style_ribbon.links.new(
                set_position_001_1.outputs[0], instance_on_points_001.inputs[0]
            )
            # group_002_9.Geometry -> instance_on_points_001.Instance
            mn_oxdna_style_ribbon.links.new(
                group_002_9.outputs[0], instance_on_points_001.inputs[2]
            )
            # align_euler_to_vector_003_1.Rotation -> align_euler_to_vector_002_1.Rotation
            mn_oxdna_style_ribbon.links.new(
                align_euler_to_vector_003_1.outputs[0],
                align_euler_to_vector_002_1.inputs[0],
            )
            # named_attribute_006_1.Attribute -> align_euler_to_vector_002_1.Vector
            mn_oxdna_style_ribbon.links.new(
                named_attribute_006_1.outputs[0], align_euler_to_vector_002_1.inputs[2]
            )
            # align_euler_to_vector_002_1.Rotation -> instance_on_points_001.Rotation
            mn_oxdna_style_ribbon.links.new(
                align_euler_to_vector_002_1.outputs[0], instance_on_points_001.inputs[5]
            )
            # vector_math_19.Vector -> align_euler_to_vector_003_1.Vector
            mn_oxdna_style_ribbon.links.new(
                vector_math_19.outputs[0], align_euler_to_vector_003_1.inputs[2]
            )
            # group_input_005_2.Backbone Radius -> math_23.Value
            mn_oxdna_style_ribbon.links.new(
                group_input_005_2.outputs[10], math_23.inputs[0]
            )
            # group_input_006_1.Backbone Subdivisions -> set_spline_resolution_1.Resolution
            mn_oxdna_style_ribbon.links.new(
                group_input_006_1.outputs[9], set_spline_resolution_1.inputs[2]
            )
            # capture_attribute_7.Geometry -> reroute_25.Input
            mn_oxdna_style_ribbon.links.new(
                capture_attribute_7.outputs[0], reroute_25.inputs[0]
            )
            # separate_geometry_13.Selection -> capture_attribute_7.Geometry
            mn_oxdna_style_ribbon.links.new(
                separate_geometry_13.outputs[0], capture_attribute_7.inputs[0]
            )
            # vector_math_002_5.Vector -> capture_attribute_7.Value
            mn_oxdna_style_ribbon.links.new(
                vector_math_002_5.outputs[0], capture_attribute_7.inputs[1]
            )
            # capture_attribute_7.Value -> set_position_001_1.Offset
            mn_oxdna_style_ribbon.links.new(
                capture_attribute_7.outputs[1], set_position_001_1.inputs[3]
            )
            # capture_attribute_7.Value -> vector_math_19.Vector
            mn_oxdna_style_ribbon.links.new(
                capture_attribute_7.outputs[1], vector_math_19.inputs[0]
            )
            # group_input_007.Base Scale -> instance_on_points_3.Scale
            mn_oxdna_style_ribbon.links.new(
                group_input_007.outputs[7], instance_on_points_3.inputs[6]
            )
            # reroute_25.Output -> store_named_attribute_9.Geometry
            mn_oxdna_style_ribbon.links.new(
                reroute_25.outputs[0], store_named_attribute_9.inputs[0]
            )
            # group_001_17.Color -> store_named_attribute_9.Value
            mn_oxdna_style_ribbon.links.new(
                group_001_17.outputs[0], store_named_attribute_9.inputs[3]
            )
            # set_shade_smooth_5.Geometry -> join_geometry_3.Geometry
            mn_oxdna_style_ribbon.links.new(
                set_shade_smooth_5.outputs[0], join_geometry_3.inputs[0]
            )
            # instance_on_points_001.Instances -> join_geometry_3.Geometry
            mn_oxdna_style_ribbon.links.new(
                instance_on_points_001.outputs[0], join_geometry_3.inputs[0]
            )
            return mn_oxdna_style_ribbon

        mn_oxdna_style_ribbon = mn_oxdna_style_ribbon_node_group()

        # initialize _mn_assembly_instance_chains node group
        def _mn_assembly_instance_chains_node_group():
            _mn_assembly_instance_chains = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_assembly_instance_chains"
            )

            _mn_assembly_instance_chains.color_tag = "NONE"
            _mn_assembly_instance_chains.description = ""

            _mn_assembly_instance_chains.is_modifier = True

            # _mn_assembly_instance_chains interface
            # Socket Assembled Chain Instances
            assembled_chain_instances_socket_1 = (
                _mn_assembly_instance_chains.interface.new_socket(
                    name="Assembled Chain Instances",
                    in_out="OUTPUT",
                    socket_type="NodeSocketGeometry",
                )
            )
            assembled_chain_instances_socket_1.attribute_domain = "POINT"

            # Socket Chain Instances
            chain_instances_socket = _mn_assembly_instance_chains.interface.new_socket(
                name="Chain Instances", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            chain_instances_socket.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_2 = _mn_assembly_instance_chains.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_socket_2.subtype = "FACTOR"
            rotation_socket_2.default_value = 1.0
            rotation_socket_2.min_value = 0.0
            rotation_socket_2.max_value = 1.0
            rotation_socket_2.attribute_domain = "POINT"

            # Socket Translation
            translation_socket_2 = _mn_assembly_instance_chains.interface.new_socket(
                name="Translation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            translation_socket_2.subtype = "FACTOR"
            translation_socket_2.default_value = 1.0
            translation_socket_2.min_value = 0.0
            translation_socket_2.max_value = 1.0
            translation_socket_2.attribute_domain = "POINT"

            # Socket assembly_id
            assembly_id_socket_1 = _mn_assembly_instance_chains.interface.new_socket(
                name="assembly_id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            assembly_id_socket_1.subtype = "NONE"
            assembly_id_socket_1.default_value = 0
            assembly_id_socket_1.min_value = -2147483648
            assembly_id_socket_1.max_value = 2147483647
            assembly_id_socket_1.attribute_domain = "POINT"

            # Socket data_object
            data_object_socket = _mn_assembly_instance_chains.interface.new_socket(
                name="data_object", in_out="INPUT", socket_type="NodeSocketObject"
            )
            data_object_socket.attribute_domain = "POINT"

            # initialize _mn_assembly_instance_chains nodes
            # node Mix
            mix_9 = _mn_assembly_instance_chains.nodes.new("ShaderNodeMix")
            mix_9.name = "Mix"
            mix_9.blend_type = "MIX"
            mix_9.clamp_factor = True
            mix_9.clamp_result = False
            mix_9.data_type = "VECTOR"
            mix_9.factor_mode = "UNIFORM"
            # A_Vector
            mix_9.inputs[4].default_value = (0.0, 0.0, 0.0)

            # node Position
            position_8 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_8.name = "Position"

            # node Named Attribute
            named_attribute_25 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_25.name = "Named Attribute"
            named_attribute_25.data_type = "INT"
            # Name
            named_attribute_25.inputs[0].default_value = "chain_id"

            # node Instance on Points
            instance_on_points_4 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_4.name = "Instance on Points"
            # Selection
            instance_on_points_4.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_4.inputs[3].default_value = True
            # Scale
            instance_on_points_4.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Group Output
            group_output_100 = _mn_assembly_instance_chains.nodes.new("NodeGroupOutput")
            group_output_100.name = "Group Output"
            group_output_100.is_active_output = True

            # node Set Position
            set_position_7 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_7.name = "Set Position"
            # Selection
            set_position_7.inputs[1].default_value = True
            # Offset
            set_position_7.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Separate Geometry
            separate_geometry_14 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_14.name = "Separate Geometry"
            separate_geometry_14.domain = "POINT"

            # node Compare
            compare_29 = _mn_assembly_instance_chains.nodes.new("FunctionNodeCompare")
            compare_29.name = "Compare"
            compare_29.data_type = "INT"
            compare_29.mode = "ELEMENT"
            compare_29.operation = "EQUAL"

            # node Group Input
            group_input_99 = _mn_assembly_instance_chains.nodes.new("NodeGroupInput")
            group_input_99.name = "Group Input"

            # node Named Attribute.002
            named_attribute_002_9 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_9.name = "Named Attribute.002"
            named_attribute_002_9.data_type = "INT"
            # Name
            named_attribute_002_9.inputs[0].default_value = "assembly_id"

            # node Object Info
            object_info_4 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeObjectInfo"
            )
            object_info_4.name = "Object Info"
            object_info_4.transform_space = "ORIGINAL"
            # As Instance
            object_info_4.inputs[1].default_value = False

            # node Named Attribute.001
            named_attribute_001_12 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_12.name = "Named Attribute.001"
            named_attribute_001_12.data_type = "QUATERNION"
            # Name
            named_attribute_001_12.inputs[0].default_value = "rotation"

            # node Group Input.001
            group_input_001_13 = _mn_assembly_instance_chains.nodes.new(
                "NodeGroupInput"
            )
            group_input_001_13.name = "Group Input.001"
            group_input_001_13.outputs[0].hide = True
            group_input_001_13.outputs[2].hide = True
            group_input_001_13.outputs[3].hide = True
            group_input_001_13.outputs[4].hide = True
            group_input_001_13.outputs[5].hide = True

            # node Domain Size
            domain_size_6 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_6.name = "Domain Size"
            domain_size_6.component = "INSTANCES"

            # node Compare.001
            compare_001_13 = _mn_assembly_instance_chains.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_13.name = "Compare.001"
            compare_001_13.data_type = "INT"
            compare_001_13.mode = "ELEMENT"
            compare_001_13.operation = "LESS_THAN"

            # node Named Attribute.003
            named_attribute_003_4 = _mn_assembly_instance_chains.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_4.name = "Named Attribute.003"
            named_attribute_003_4.data_type = "INT"
            # Name
            named_attribute_003_4.inputs[0].default_value = "chain_id"

            # node Boolean Math
            boolean_math_23 = _mn_assembly_instance_chains.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_23.name = "Boolean Math"
            boolean_math_23.operation = "AND"

            # node Mix.001
            mix_001_4 = _mn_assembly_instance_chains.nodes.new("ShaderNodeMix")
            mix_001_4.name = "Mix.001"
            mix_001_4.blend_type = "MIX"
            mix_001_4.clamp_factor = True
            mix_001_4.clamp_result = False
            mix_001_4.data_type = "ROTATION"
            mix_001_4.factor_mode = "UNIFORM"
            # A_Rotation
            mix_001_4.inputs[8].default_value = (0.0, 0.0, 0.0)

            # Set locations
            mix_9.location = (-520.0, -20.0)
            position_8.location = (-680.0, -220.0)
            named_attribute_25.location = (-341.5813903808594, -60.27907180786133)
            instance_on_points_4.location = (-140.6511688232422, 241.1162872314453)
            group_output_100.location = (40.1860466003418, 241.1162872314453)
            set_position_7.location = (-341.5813903808594, 160.7441864013672)
            separate_geometry_14.location = (-521.641357421875, 137.05740356445312)
            compare_29.location = (-960.0, -220.0)
            group_input_99.location = (-1220.0, 220.0)
            named_attribute_002_9.location = (-1160.0, -340.0)
            object_info_4.location = (-800.0, 160.0)
            named_attribute_001_12.location = (-340.0, -260.0)
            group_input_001_13.location = (-340.0, -200.0)
            domain_size_6.location = (-1160.0, -80.0)
            compare_001_13.location = (-960.0, -60.0)
            named_attribute_003_4.location = (-1160.0, -200.0)
            boolean_math_23.location = (-800.0, -60.0)
            mix_001_4.location = (-180.0, -160.0)

            # Set dimensions
            mix_9.width, mix_9.height = 140.0, 100.0
            position_8.width, position_8.height = 140.0, 100.0
            named_attribute_25.width, named_attribute_25.height = 140.0, 100.0
            instance_on_points_4.width, instance_on_points_4.height = 140.0, 100.0
            group_output_100.width, group_output_100.height = 140.0, 100.0
            set_position_7.width, set_position_7.height = 140.0, 100.0
            separate_geometry_14.width, separate_geometry_14.height = 140.0, 100.0
            compare_29.width, compare_29.height = 140.0, 100.0
            group_input_99.width, group_input_99.height = 140.0, 100.0
            named_attribute_002_9.width, named_attribute_002_9.height = 140.0, 100.0
            object_info_4.width, object_info_4.height = 140.0, 100.0
            named_attribute_001_12.width, named_attribute_001_12.height = 140.0, 100.0
            group_input_001_13.width, group_input_001_13.height = 140.0, 100.0
            domain_size_6.width, domain_size_6.height = 140.0, 100.0
            compare_001_13.width, compare_001_13.height = 140.0, 100.0
            named_attribute_003_4.width, named_attribute_003_4.height = 140.0, 100.0
            boolean_math_23.width, boolean_math_23.height = 140.0, 100.0
            mix_001_4.width, mix_001_4.height = 140.0, 100.0

            # initialize _mn_assembly_instance_chains links
            # named_attribute_25.Attribute -> instance_on_points_4.Instance Index
            _mn_assembly_instance_chains.links.new(
                named_attribute_25.outputs[0], instance_on_points_4.inputs[4]
            )
            # group_input_99.Chain Instances -> instance_on_points_4.Instance
            _mn_assembly_instance_chains.links.new(
                group_input_99.outputs[0], instance_on_points_4.inputs[2]
            )
            # instance_on_points_4.Instances -> group_output_100.Assembled Chain Instances
            _mn_assembly_instance_chains.links.new(
                instance_on_points_4.outputs[0], group_output_100.inputs[0]
            )
            # mix_9.Result -> set_position_7.Position
            _mn_assembly_instance_chains.links.new(
                mix_9.outputs[1], set_position_7.inputs[2]
            )
            # position_8.Position -> mix_9.B
            _mn_assembly_instance_chains.links.new(
                position_8.outputs[0], mix_9.inputs[5]
            )
            # group_input_99.Translation -> mix_9.Factor
            _mn_assembly_instance_chains.links.new(
                group_input_99.outputs[2], mix_9.inputs[0]
            )
            # set_position_7.Geometry -> instance_on_points_4.Points
            _mn_assembly_instance_chains.links.new(
                set_position_7.outputs[0], instance_on_points_4.inputs[0]
            )
            # object_info_4.Geometry -> separate_geometry_14.Geometry
            _mn_assembly_instance_chains.links.new(
                object_info_4.outputs[4], separate_geometry_14.inputs[0]
            )
            # separate_geometry_14.Selection -> set_position_7.Geometry
            _mn_assembly_instance_chains.links.new(
                separate_geometry_14.outputs[0], set_position_7.inputs[0]
            )
            # group_input_99.assembly_id -> compare_29.A
            _mn_assembly_instance_chains.links.new(
                group_input_99.outputs[3], compare_29.inputs[2]
            )
            # named_attribute_002_9.Attribute -> compare_29.B
            _mn_assembly_instance_chains.links.new(
                named_attribute_002_9.outputs[0], compare_29.inputs[3]
            )
            # group_input_99.data_object -> object_info_4.Object
            _mn_assembly_instance_chains.links.new(
                group_input_99.outputs[4], object_info_4.inputs[0]
            )
            # group_input_99.Chain Instances -> domain_size_6.Geometry
            _mn_assembly_instance_chains.links.new(
                group_input_99.outputs[0], domain_size_6.inputs[0]
            )
            # named_attribute_003_4.Attribute -> compare_001_13.A
            _mn_assembly_instance_chains.links.new(
                named_attribute_003_4.outputs[0], compare_001_13.inputs[2]
            )
            # domain_size_6.Instance Count -> compare_001_13.B
            _mn_assembly_instance_chains.links.new(
                domain_size_6.outputs[5], compare_001_13.inputs[3]
            )
            # compare_001_13.Result -> boolean_math_23.Boolean
            _mn_assembly_instance_chains.links.new(
                compare_001_13.outputs[0], boolean_math_23.inputs[0]
            )
            # compare_29.Result -> boolean_math_23.Boolean
            _mn_assembly_instance_chains.links.new(
                compare_29.outputs[0], boolean_math_23.inputs[1]
            )
            # boolean_math_23.Boolean -> separate_geometry_14.Selection
            _mn_assembly_instance_chains.links.new(
                boolean_math_23.outputs[0], separate_geometry_14.inputs[1]
            )
            # named_attribute_001_12.Attribute -> mix_001_4.B
            _mn_assembly_instance_chains.links.new(
                named_attribute_001_12.outputs[0], mix_001_4.inputs[9]
            )
            # group_input_001_13.Rotation -> mix_001_4.Factor
            _mn_assembly_instance_chains.links.new(
                group_input_001_13.outputs[1], mix_001_4.inputs[0]
            )
            # mix_001_4.Result -> instance_on_points_4.Rotation
            _mn_assembly_instance_chains.links.new(
                mix_001_4.outputs[3], instance_on_points_4.inputs[5]
            )
            return _mn_assembly_instance_chains

        _mn_assembly_instance_chains = _mn_assembly_instance_chains_node_group()

        # initialize _mn_utils_bio_assembly node group
        def _mn_utils_bio_assembly_node_group():
            _mn_utils_bio_assembly = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_bio_assembly"
            )

            _mn_utils_bio_assembly.color_tag = "NONE"
            _mn_utils_bio_assembly.description = ""

            _mn_utils_bio_assembly.is_modifier = True

            # _mn_utils_bio_assembly interface
            # Socket Instances
            instances_socket_3 = _mn_utils_bio_assembly.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_3.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_15 = _mn_utils_bio_assembly.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_15.attribute_domain = "POINT"

            # Socket RotTransMat
            rottransmat_socket = _mn_utils_bio_assembly.interface.new_socket(
                name="RotTransMat", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            rottransmat_socket.attribute_domain = "POINT"

            # Socket Scale Rotation
            scale_rotation_socket = _mn_utils_bio_assembly.interface.new_socket(
                name="Scale Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_rotation_socket.subtype = "NONE"
            scale_rotation_socket.default_value = 1.0
            scale_rotation_socket.min_value = -10000.0
            scale_rotation_socket.max_value = 10000.0
            scale_rotation_socket.attribute_domain = "POINT"

            # Socket Scale Translation
            scale_translation_socket = _mn_utils_bio_assembly.interface.new_socket(
                name="Scale Translation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_translation_socket.subtype = "NONE"
            scale_translation_socket.default_value = 1.0
            scale_translation_socket.min_value = -10000.0
            scale_translation_socket.max_value = 10000.0
            scale_translation_socket.attribute_domain = "POINT"

            # initialize _mn_utils_bio_assembly nodes
            # node Frame.001
            frame_001_4 = _mn_utils_bio_assembly.nodes.new("NodeFrame")
            frame_001_4.label = "Handle the Instances"
            frame_001_4.name = "Frame.001"
            frame_001_4.label_size = 20
            frame_001_4.shrink = True

            # node Frame
            frame_12 = _mn_utils_bio_assembly.nodes.new("NodeFrame")
            frame_12.label = "Transfer and Scale th e Rotations and Transformations"
            frame_12.name = "Frame"
            frame_12.label_size = 20
            frame_12.shrink = True

            # node Group Output
            group_output_101 = _mn_utils_bio_assembly.nodes.new("NodeGroupOutput")
            group_output_101.name = "Group Output"
            group_output_101.is_active_output = True

            # node Reroute.002
            reroute_002_13 = _mn_utils_bio_assembly.nodes.new("NodeReroute")
            reroute_002_13.name = "Reroute.002"
            # node Named Attribute.001
            named_attribute_001_13 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_13.name = "Named Attribute.001"
            named_attribute_001_13.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_13.inputs[0].default_value = "rot"

            # node Reroute.001
            reroute_001_16 = _mn_utils_bio_assembly.nodes.new("NodeReroute")
            reroute_001_16.name = "Reroute.001"
            # node Domain Size
            domain_size_7 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_7.name = "Domain Size"
            domain_size_7.component = "POINTCLOUD"

            # node Geometry to Instance
            geometry_to_instance_2 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_2.name = "Geometry to Instance"

            # node Group Input
            group_input_100 = _mn_utils_bio_assembly.nodes.new("NodeGroupInput")
            group_input_100.name = "Group Input"

            # node Reroute
            reroute_26 = _mn_utils_bio_assembly.nodes.new("NodeReroute")
            reroute_26.name = "Reroute"
            # node Duplicate Elements
            duplicate_elements_1 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeDuplicateElements"
            )
            duplicate_elements_1.name = "Duplicate Elements"
            duplicate_elements_1.domain = "INSTANCE"
            # Selection
            duplicate_elements_1.inputs[1].default_value = True

            # node Sample Index.001
            sample_index_001_5 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_5.name = "Sample Index.001"
            sample_index_001_5.clamp = True
            sample_index_001_5.data_type = "FLOAT_VECTOR"
            sample_index_001_5.domain = "POINT"

            # node Index.001
            index_001_4 = _mn_utils_bio_assembly.nodes.new("GeometryNodeInputIndex")
            index_001_4.name = "Index.001"

            # node Index
            index_15 = _mn_utils_bio_assembly.nodes.new("GeometryNodeInputIndex")
            index_15.name = "Index"

            # node Position
            position_9 = _mn_utils_bio_assembly.nodes.new("GeometryNodeInputPosition")
            position_9.name = "Position"

            # node Sample Index
            sample_index_6 = _mn_utils_bio_assembly.nodes.new("GeometryNodeSampleIndex")
            sample_index_6.name = "Sample Index"
            sample_index_6.clamp = True
            sample_index_6.data_type = "FLOAT_VECTOR"
            sample_index_6.domain = "POINT"

            # node Vector Math.001
            vector_math_001_13 = _mn_utils_bio_assembly.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_13.name = "Vector Math.001"
            vector_math_001_13.operation = "SCALE"

            # node Reroute.005
            reroute_005_5 = _mn_utils_bio_assembly.nodes.new("NodeReroute")
            reroute_005_5.name = "Reroute.005"
            # node Vector Math
            vector_math_20 = _mn_utils_bio_assembly.nodes.new("ShaderNodeVectorMath")
            vector_math_20.name = "Vector Math"
            vector_math_20.operation = "SCALE"

            # node Reroute.003
            reroute_003_10 = _mn_utils_bio_assembly.nodes.new("NodeReroute")
            reroute_003_10.name = "Reroute.003"
            # node Rotate Instances
            rotate_instances_1 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeRotateInstances"
            )
            rotate_instances_1.name = "Rotate Instances"
            # Selection
            rotate_instances_1.inputs[1].default_value = True
            # Pivot Point
            rotate_instances_1.inputs[3].default_value = (0.0, 0.0, 0.0)
            # Local Space
            rotate_instances_1.inputs[4].default_value = True

            # node Translate Instances
            translate_instances_1 = _mn_utils_bio_assembly.nodes.new(
                "GeometryNodeTranslateInstances"
            )
            translate_instances_1.name = "Translate Instances"
            # Selection
            translate_instances_1.inputs[1].default_value = True
            # Local Space
            translate_instances_1.inputs[3].default_value = False

            # Set parents
            reroute_002_13.parent = frame_12
            named_attribute_001_13.parent = frame_12
            reroute_001_16.parent = frame_12
            domain_size_7.parent = frame_001_4
            geometry_to_instance_2.parent = frame_001_4
            group_input_100.parent = frame_001_4
            reroute_26.parent = frame_001_4
            duplicate_elements_1.parent = frame_001_4
            sample_index_001_5.parent = frame_12
            index_001_4.parent = frame_12
            index_15.parent = frame_12
            position_9.parent = frame_12
            sample_index_6.parent = frame_12
            vector_math_001_13.parent = frame_12
            reroute_005_5.parent = frame_12
            vector_math_20.parent = frame_12
            reroute_003_10.parent = frame_12
            rotate_instances_1.parent = frame_001_4
            translate_instances_1.parent = frame_001_4

            # Set locations
            frame_001_4.location = (-30.0, 10.0)
            frame_12.location = (101.3235855102539, -114.33607482910156)
            group_output_101.location = (1200.7205810546875, 342.195556640625)
            reroute_002_13.location = (50.0, -590.0)
            named_attribute_001_13.location = (-110.0, -470.0)
            reroute_001_16.location = (-270.0, -590.0)
            domain_size_7.location = (-670.0, 210.0)
            geometry_to_instance_2.location = (-670.0, 310.0)
            group_input_100.location = (-1010.0, 90.0)
            reroute_26.location = (-750.0, 50.0)
            duplicate_elements_1.location = (-350.0, 250.0)
            sample_index_001_5.location = (-110.0, -250.0)
            index_001_4.location = (-301.3235778808594, -365.6639404296875)
            index_15.location = (78.6764144897461, -525.6639404296875)
            position_9.location = (78.6764144897461, -465.6639404296875)
            sample_index_6.location = (78.6764144897461, -245.66392517089844)
            vector_math_001_13.location = (78.6764144897461, -105.66392517089844)
            reroute_005_5.location = (58.676414489746094, -245.66392517089844)
            vector_math_20.location = (-121.3235855102539, -105.66392517089844)
            reroute_003_10.location = (-121.3235855102539, -245.66392517089844)
            rotate_instances_1.location = (50.0, 210.0)
            translate_instances_1.location = (230.0, 210.0)

            # Set dimensions
            frame_001_4.width, frame_001_4.height = 1440.0, 428.0
            frame_12.width, frame_12.height = 580.0, 558.3360595703125
            group_output_101.width, group_output_101.height = 140.0, 100.0
            reroute_002_13.width, reroute_002_13.height = 16.0, 100.0
            named_attribute_001_13.width, named_attribute_001_13.height = 140.0, 100.0
            reroute_001_16.width, reroute_001_16.height = 16.0, 100.0
            domain_size_7.width, domain_size_7.height = 140.0, 100.0
            geometry_to_instance_2.width, geometry_to_instance_2.height = 160.0, 100.0
            group_input_100.width, group_input_100.height = 140.0, 100.0
            reroute_26.width, reroute_26.height = 16.0, 100.0
            duplicate_elements_1.width, duplicate_elements_1.height = 140.0, 100.0
            sample_index_001_5.width, sample_index_001_5.height = 140.0, 100.0
            index_001_4.width, index_001_4.height = 140.0, 100.0
            index_15.width, index_15.height = 140.0, 100.0
            position_9.width, position_9.height = 140.0, 100.0
            sample_index_6.width, sample_index_6.height = 140.0, 100.0
            vector_math_001_13.width, vector_math_001_13.height = 140.0, 100.0
            reroute_005_5.width, reroute_005_5.height = 16.0, 100.0
            vector_math_20.width, vector_math_20.height = 140.0, 100.0
            reroute_003_10.width, reroute_003_10.height = 16.0, 100.0
            rotate_instances_1.width, rotate_instances_1.height = 140.0, 100.0
            translate_instances_1.width, translate_instances_1.height = 140.0, 100.0

            # initialize _mn_utils_bio_assembly links
            # geometry_to_instance_2.Instances -> duplicate_elements_1.Geometry
            _mn_utils_bio_assembly.links.new(
                geometry_to_instance_2.outputs[0], duplicate_elements_1.inputs[0]
            )
            # reroute_26.Output -> domain_size_7.Geometry
            _mn_utils_bio_assembly.links.new(
                reroute_26.outputs[0], domain_size_7.inputs[0]
            )
            # domain_size_7.Point Count -> duplicate_elements_1.Amount
            _mn_utils_bio_assembly.links.new(
                domain_size_7.outputs[0], duplicate_elements_1.inputs[2]
            )
            # duplicate_elements_1.Geometry -> rotate_instances_1.Instances
            _mn_utils_bio_assembly.links.new(
                duplicate_elements_1.outputs[0], rotate_instances_1.inputs[0]
            )
            # reroute_001_16.Output -> sample_index_001_5.Geometry
            _mn_utils_bio_assembly.links.new(
                reroute_001_16.outputs[0], sample_index_001_5.inputs[0]
            )
            # named_attribute_001_13.Attribute -> sample_index_001_5.Value
            _mn_utils_bio_assembly.links.new(
                named_attribute_001_13.outputs[0], sample_index_001_5.inputs[1]
            )
            # reroute_002_13.Output -> sample_index_6.Geometry
            _mn_utils_bio_assembly.links.new(
                reroute_002_13.outputs[0], sample_index_6.inputs[0]
            )
            # position_9.Position -> sample_index_6.Value
            _mn_utils_bio_assembly.links.new(
                position_9.outputs[0], sample_index_6.inputs[1]
            )
            # vector_math_001_13.Vector -> translate_instances_1.Translation
            _mn_utils_bio_assembly.links.new(
                vector_math_001_13.outputs[0], translate_instances_1.inputs[2]
            )
            # rotate_instances_1.Instances -> translate_instances_1.Instances
            _mn_utils_bio_assembly.links.new(
                rotate_instances_1.outputs[0], translate_instances_1.inputs[0]
            )
            # translate_instances_1.Instances -> group_output_101.Instances
            _mn_utils_bio_assembly.links.new(
                translate_instances_1.outputs[0], group_output_101.inputs[0]
            )
            # group_input_100.RotTransMat -> reroute_26.Input
            _mn_utils_bio_assembly.links.new(
                group_input_100.outputs[1], reroute_26.inputs[0]
            )
            # reroute_26.Output -> reroute_001_16.Input
            _mn_utils_bio_assembly.links.new(
                reroute_26.outputs[0], reroute_001_16.inputs[0]
            )
            # reroute_001_16.Output -> reroute_002_13.Input
            _mn_utils_bio_assembly.links.new(
                reroute_001_16.outputs[0], reroute_002_13.inputs[0]
            )
            # sample_index_001_5.Value -> vector_math_20.Vector
            _mn_utils_bio_assembly.links.new(
                sample_index_001_5.outputs[0], vector_math_20.inputs[0]
            )
            # vector_math_20.Vector -> rotate_instances_1.Rotation
            _mn_utils_bio_assembly.links.new(
                vector_math_20.outputs[0], rotate_instances_1.inputs[2]
            )
            # sample_index_6.Value -> vector_math_001_13.Vector
            _mn_utils_bio_assembly.links.new(
                sample_index_6.outputs[0], vector_math_001_13.inputs[0]
            )
            # group_input_100.Scale Rotation -> vector_math_20.Scale
            _mn_utils_bio_assembly.links.new(
                group_input_100.outputs[2], vector_math_20.inputs[3]
            )
            # reroute_005_5.Output -> vector_math_001_13.Scale
            _mn_utils_bio_assembly.links.new(
                reroute_005_5.outputs[0], vector_math_001_13.inputs[3]
            )
            # group_input_100.Geometry -> geometry_to_instance_2.Geometry
            _mn_utils_bio_assembly.links.new(
                group_input_100.outputs[0], geometry_to_instance_2.inputs[0]
            )
            # reroute_003_10.Output -> reroute_005_5.Input
            _mn_utils_bio_assembly.links.new(
                reroute_003_10.outputs[0], reroute_005_5.inputs[0]
            )
            # index_001_4.Index -> sample_index_001_5.Index
            _mn_utils_bio_assembly.links.new(
                index_001_4.outputs[0], sample_index_001_5.inputs[2]
            )
            # index_15.Index -> sample_index_6.Index
            _mn_utils_bio_assembly.links.new(
                index_15.outputs[0], sample_index_6.inputs[2]
            )
            # group_input_100.Scale Translation -> reroute_003_10.Input
            _mn_utils_bio_assembly.links.new(
                group_input_100.outputs[3], reroute_003_10.inputs[0]
            )
            return _mn_utils_bio_assembly

        _mn_utils_bio_assembly = _mn_utils_bio_assembly_node_group()

        # initialize mn_dna_style_spheres_eevee node group
        def mn_dna_style_spheres_eevee_node_group():
            mn_dna_style_spheres_eevee = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_style_spheres_eevee"
            )

            mn_dna_style_spheres_eevee.color_tag = "NONE"
            mn_dna_style_spheres_eevee.description = ""

            mn_dna_style_spheres_eevee.is_modifier = True

            # mn_dna_style_spheres_eevee interface
            # Socket Bases
            bases_socket = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket.attribute_domain = "POINT"

            # Socket Bases
            bases_socket_1 = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_1.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_33 = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_33.attribute_domain = "POINT"
            selection_socket_33.hide_value = True
            selection_socket_33.description = "Selection of atoms to apply this node to"

            # Socket Scale Radii
            scale_radii_socket = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Scale Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_radii_socket.subtype = "NONE"
            scale_radii_socket.default_value = 1.0
            scale_radii_socket.min_value = -10000.0
            scale_radii_socket.max_value = 10000.0
            scale_radii_socket.attribute_domain = "POINT"

            # Socket Subdivisions
            subdivisions_socket_1 = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Subdivisions", in_out="INPUT", socket_type="NodeSocketInt"
            )
            subdivisions_socket_1.subtype = "NONE"
            subdivisions_socket_1.default_value = 2
            subdivisions_socket_1.min_value = 1
            subdivisions_socket_1.max_value = 7
            subdivisions_socket_1.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_7 = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_7.attribute_domain = "POINT"
            shade_smooth_socket_7.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_11 = mn_dna_style_spheres_eevee.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_11.attribute_domain = "POINT"
            material_socket_11.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize mn_dna_style_spheres_eevee nodes
            # node Named Attribute.002
            named_attribute_002_10 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_10.name = "Named Attribute.002"
            named_attribute_002_10.data_type = "INT"
            # Name
            named_attribute_002_10.inputs[0].default_value = "res_name"

            # node Compare.001
            compare_001_14 = mn_dna_style_spheres_eevee.nodes.new("FunctionNodeCompare")
            compare_001_14.name = "Compare.001"
            compare_001_14.data_type = "INT"
            compare_001_14.mode = "ELEMENT"
            compare_001_14.operation = "EQUAL"
            # B_INT
            compare_001_14.inputs[3].default_value = 30

            # node Compare.004
            compare_004_5 = mn_dna_style_spheres_eevee.nodes.new("FunctionNodeCompare")
            compare_004_5.name = "Compare.004"
            compare_004_5.data_type = "INT"
            compare_004_5.mode = "ELEMENT"
            compare_004_5.operation = "EQUAL"
            # B_INT
            compare_004_5.inputs[3].default_value = 33

            # node Separate Geometry.001
            separate_geometry_001_5 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_5.name = "Separate Geometry.001"
            separate_geometry_001_5.domain = "POINT"

            # node Geometry to Instance
            geometry_to_instance_3 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_3.name = "Geometry to Instance"

            # node Group Output
            group_output_102 = mn_dna_style_spheres_eevee.nodes.new("NodeGroupOutput")
            group_output_102.name = "Group Output"
            group_output_102.is_active_output = True

            # node Group.005
            group_005_3 = mn_dna_style_spheres_eevee.nodes.new("GeometryNodeGroup")
            group_005_3.name = "Group.005"
            group_005_3.node_tree = _mn_utils_style_spheres_icosphere

            # node Separate Geometry.004
            separate_geometry_004 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_004.name = "Separate Geometry.004"
            separate_geometry_004.domain = "POINT"

            # node Group.004
            group_004_2 = mn_dna_style_spheres_eevee.nodes.new("GeometryNodeGroup")
            group_004_2.name = "Group.004"
            group_004_2.node_tree = _mn_utils_style_spheres_icosphere

            # node Compare.002
            compare_002_8 = mn_dna_style_spheres_eevee.nodes.new("FunctionNodeCompare")
            compare_002_8.name = "Compare.002"
            compare_002_8.data_type = "INT"
            compare_002_8.mode = "ELEMENT"
            compare_002_8.operation = "EQUAL"
            # B_INT
            compare_002_8.inputs[3].default_value = 31

            # node Compare.003
            compare_003_7 = mn_dna_style_spheres_eevee.nodes.new("FunctionNodeCompare")
            compare_003_7.name = "Compare.003"
            compare_003_7.data_type = "INT"
            compare_003_7.mode = "ELEMENT"
            compare_003_7.operation = "EQUAL"
            # B_INT
            compare_003_7.inputs[3].default_value = 32

            # node Realize Instances
            realize_instances_5 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_5.name = "Realize Instances"
            # Selection
            realize_instances_5.inputs[1].default_value = True
            # Realize All
            realize_instances_5.inputs[2].default_value = True
            # Depth
            realize_instances_5.inputs[3].default_value = 0

            # node Separate Geometry.002
            separate_geometry_002_1 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_1.name = "Separate Geometry.002"
            separate_geometry_002_1.domain = "POINT"

            # node Separate Geometry.003
            separate_geometry_003_1 = mn_dna_style_spheres_eevee.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003_1.name = "Separate Geometry.003"
            separate_geometry_003_1.domain = "POINT"

            # node Group.006
            group_006_3 = mn_dna_style_spheres_eevee.nodes.new("GeometryNodeGroup")
            group_006_3.name = "Group.006"
            group_006_3.node_tree = _mn_utils_style_spheres_icosphere

            # node Group.007
            group_007_4 = mn_dna_style_spheres_eevee.nodes.new("GeometryNodeGroup")
            group_007_4.name = "Group.007"
            group_007_4.node_tree = _mn_utils_style_spheres_icosphere

            # node Group Input
            group_input_101 = mn_dna_style_spheres_eevee.nodes.new("NodeGroupInput")
            group_input_101.name = "Group Input"

            # Set locations
            named_attribute_002_10.location = (-271.8153076171875, 270.0)
            compare_001_14.location = (-73.56605529785156, 281.95001220703125)
            compare_004_5.location = (-71.81532287597656, -250.0)
            separate_geometry_001_5.location = (108.18467712402344, 290.0)
            geometry_to_instance_3.location = (1054.298828125, 134.12643432617188)
            group_output_102.location = (1401.4302978515625, 100.53022766113281)
            group_005_3.location = (300.0, 80.0)
            separate_geometry_004.location = (108.18467712402344, -230.0)
            group_004_2.location = (300.0, 320.0)
            compare_002_8.location = (-71.81532287597656, 110.0)
            compare_003_7.location = (-71.81532287597656, -70.0)
            realize_instances_5.location = (-280.0, 120.0)
            separate_geometry_002_1.location = (108.18467712402344, 130.0)
            separate_geometry_003_1.location = (108.18467712402344, -50.0)
            group_006_3.location = (300.0, -200.0)
            group_007_4.location = (300.0, -420.0)
            group_input_101.location = (-508.1846923828125, -0.0)

            # Set dimensions
            named_attribute_002_10.width, named_attribute_002_10.height = 140.0, 100.0
            compare_001_14.width, compare_001_14.height = 140.0, 100.0
            compare_004_5.width, compare_004_5.height = 140.0, 100.0
            separate_geometry_001_5.width, separate_geometry_001_5.height = 140.0, 100.0
            geometry_to_instance_3.width, geometry_to_instance_3.height = 160.0, 100.0
            group_output_102.width, group_output_102.height = 140.0, 100.0
            group_005_3.width, group_005_3.height = 140.24298095703125, 100.0
            separate_geometry_004.width, separate_geometry_004.height = 140.0, 100.0
            group_004_2.width, group_004_2.height = 140.24298095703125, 100.0
            compare_002_8.width, compare_002_8.height = 140.0, 100.0
            compare_003_7.width, compare_003_7.height = 140.0, 100.0
            realize_instances_5.width, realize_instances_5.height = 140.0, 100.0
            separate_geometry_002_1.width, separate_geometry_002_1.height = 140.0, 100.0
            separate_geometry_003_1.width, separate_geometry_003_1.height = 140.0, 100.0
            group_006_3.width, group_006_3.height = 140.24298095703125, 100.0
            group_007_4.width, group_007_4.height = 140.24298095703125, 100.0
            group_input_101.width, group_input_101.height = 140.0, 100.0

            # initialize mn_dna_style_spheres_eevee links
            # group_input_101.Bases -> realize_instances_5.Geometry
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[0], realize_instances_5.inputs[0]
            )
            # realize_instances_5.Geometry -> separate_geometry_001_5.Geometry
            mn_dna_style_spheres_eevee.links.new(
                realize_instances_5.outputs[0], separate_geometry_001_5.inputs[0]
            )
            # compare_001_14.Result -> separate_geometry_001_5.Selection
            mn_dna_style_spheres_eevee.links.new(
                compare_001_14.outputs[0], separate_geometry_001_5.inputs[1]
            )
            # named_attribute_002_10.Attribute -> compare_001_14.A
            mn_dna_style_spheres_eevee.links.new(
                named_attribute_002_10.outputs[0], compare_001_14.inputs[2]
            )
            # realize_instances_5.Geometry -> separate_geometry_002_1.Geometry
            mn_dna_style_spheres_eevee.links.new(
                realize_instances_5.outputs[0], separate_geometry_002_1.inputs[0]
            )
            # compare_002_8.Result -> separate_geometry_002_1.Selection
            mn_dna_style_spheres_eevee.links.new(
                compare_002_8.outputs[0], separate_geometry_002_1.inputs[1]
            )
            # named_attribute_002_10.Attribute -> compare_002_8.A
            mn_dna_style_spheres_eevee.links.new(
                named_attribute_002_10.outputs[0], compare_002_8.inputs[2]
            )
            # realize_instances_5.Geometry -> separate_geometry_003_1.Geometry
            mn_dna_style_spheres_eevee.links.new(
                realize_instances_5.outputs[0], separate_geometry_003_1.inputs[0]
            )
            # compare_003_7.Result -> separate_geometry_003_1.Selection
            mn_dna_style_spheres_eevee.links.new(
                compare_003_7.outputs[0], separate_geometry_003_1.inputs[1]
            )
            # named_attribute_002_10.Attribute -> compare_003_7.A
            mn_dna_style_spheres_eevee.links.new(
                named_attribute_002_10.outputs[0], compare_003_7.inputs[2]
            )
            # realize_instances_5.Geometry -> separate_geometry_004.Geometry
            mn_dna_style_spheres_eevee.links.new(
                realize_instances_5.outputs[0], separate_geometry_004.inputs[0]
            )
            # compare_004_5.Result -> separate_geometry_004.Selection
            mn_dna_style_spheres_eevee.links.new(
                compare_004_5.outputs[0], separate_geometry_004.inputs[1]
            )
            # named_attribute_002_10.Attribute -> compare_004_5.A
            mn_dna_style_spheres_eevee.links.new(
                named_attribute_002_10.outputs[0], compare_004_5.inputs[2]
            )
            # separate_geometry_001_5.Selection -> group_004_2.Atoms
            mn_dna_style_spheres_eevee.links.new(
                separate_geometry_001_5.outputs[0], group_004_2.inputs[0]
            )
            # group_input_101.Selection -> group_004_2.Selection
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[1], group_004_2.inputs[1]
            )
            # group_input_101.Scale Radii -> group_004_2.Radii
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[2], group_004_2.inputs[2]
            )
            # group_input_101.Material -> group_004_2.Material
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[5], group_004_2.inputs[5]
            )
            # geometry_to_instance_3.Instances -> group_output_102.Bases
            mn_dna_style_spheres_eevee.links.new(
                geometry_to_instance_3.outputs[0], group_output_102.inputs[0]
            )
            # group_input_101.Subdivisions -> group_004_2.Subdivisions
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[3], group_004_2.inputs[3]
            )
            # group_input_101.Selection -> group_005_3.Selection
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[1], group_005_3.inputs[1]
            )
            # group_input_101.Scale Radii -> group_005_3.Radii
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[2], group_005_3.inputs[2]
            )
            # group_input_101.Material -> group_005_3.Material
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[5], group_005_3.inputs[5]
            )
            # group_input_101.Subdivisions -> group_005_3.Subdivisions
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[3], group_005_3.inputs[3]
            )
            # group_input_101.Selection -> group_006_3.Selection
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[1], group_006_3.inputs[1]
            )
            # group_input_101.Scale Radii -> group_006_3.Radii
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[2], group_006_3.inputs[2]
            )
            # group_input_101.Material -> group_006_3.Material
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[5], group_006_3.inputs[5]
            )
            # group_input_101.Subdivisions -> group_006_3.Subdivisions
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[3], group_006_3.inputs[3]
            )
            # group_input_101.Selection -> group_007_4.Selection
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[1], group_007_4.inputs[1]
            )
            # group_input_101.Scale Radii -> group_007_4.Radii
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[2], group_007_4.inputs[2]
            )
            # group_input_101.Material -> group_007_4.Material
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[5], group_007_4.inputs[5]
            )
            # group_input_101.Subdivisions -> group_007_4.Subdivisions
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[3], group_007_4.inputs[3]
            )
            # separate_geometry_002_1.Selection -> group_005_3.Atoms
            mn_dna_style_spheres_eevee.links.new(
                separate_geometry_002_1.outputs[0], group_005_3.inputs[0]
            )
            # separate_geometry_003_1.Selection -> group_006_3.Atoms
            mn_dna_style_spheres_eevee.links.new(
                separate_geometry_003_1.outputs[0], group_006_3.inputs[0]
            )
            # separate_geometry_004.Selection -> group_007_4.Atoms
            mn_dna_style_spheres_eevee.links.new(
                separate_geometry_004.outputs[0], group_007_4.inputs[0]
            )
            # group_007_4.Instances -> geometry_to_instance_3.Geometry
            mn_dna_style_spheres_eevee.links.new(
                group_007_4.outputs[0], geometry_to_instance_3.inputs[0]
            )
            # group_input_101.Shade Smooth -> group_004_2.Shade Smooth
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[4], group_004_2.inputs[4]
            )
            # group_input_101.Shade Smooth -> group_005_3.Shade Smooth
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[4], group_005_3.inputs[4]
            )
            # group_input_101.Shade Smooth -> group_006_3.Shade Smooth
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[4], group_006_3.inputs[4]
            )
            # group_input_101.Shade Smooth -> group_007_4.Shade Smooth
            mn_dna_style_spheres_eevee.links.new(
                group_input_101.outputs[4], group_007_4.inputs[4]
            )
            # group_006_3.Instances -> geometry_to_instance_3.Geometry
            mn_dna_style_spheres_eevee.links.new(
                group_006_3.outputs[0], geometry_to_instance_3.inputs[0]
            )
            # group_005_3.Instances -> geometry_to_instance_3.Geometry
            mn_dna_style_spheres_eevee.links.new(
                group_005_3.outputs[0], geometry_to_instance_3.inputs[0]
            )
            # group_004_2.Instances -> geometry_to_instance_3.Geometry
            mn_dna_style_spheres_eevee.links.new(
                group_004_2.outputs[0], geometry_to_instance_3.inputs[0]
            )
            return mn_dna_style_spheres_eevee

        mn_dna_style_spheres_eevee = mn_dna_style_spheres_eevee_node_group()

        # initialize mn_dna_style_spheres_cycles node group
        def mn_dna_style_spheres_cycles_node_group():
            mn_dna_style_spheres_cycles = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_style_spheres_cycles"
            )

            mn_dna_style_spheres_cycles.color_tag = "NONE"
            mn_dna_style_spheres_cycles.description = ""

            mn_dna_style_spheres_cycles.is_modifier = True

            # mn_dna_style_spheres_cycles interface
            # Socket Bases
            bases_socket_2 = mn_dna_style_spheres_cycles.interface.new_socket(
                name="Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_2.attribute_domain = "POINT"

            # Socket Bases
            bases_socket_3 = mn_dna_style_spheres_cycles.interface.new_socket(
                name="Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_3.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_34 = mn_dna_style_spheres_cycles.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_34.attribute_domain = "POINT"
            selection_socket_34.hide_value = True
            selection_socket_34.description = "Selection of atoms to apply this node to"

            # Socket Scale Radii
            scale_radii_socket_1 = mn_dna_style_spheres_cycles.interface.new_socket(
                name="Scale Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_radii_socket_1.subtype = "NONE"
            scale_radii_socket_1.default_value = 1.0
            scale_radii_socket_1.min_value = -10000.0
            scale_radii_socket_1.max_value = 10000.0
            scale_radii_socket_1.attribute_domain = "POINT"

            # Socket Material
            material_socket_12 = mn_dna_style_spheres_cycles.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_12.attribute_domain = "POINT"
            material_socket_12.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize mn_dna_style_spheres_cycles nodes
            # node Named Attribute.002
            named_attribute_002_11 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_11.name = "Named Attribute.002"
            named_attribute_002_11.data_type = "INT"
            # Name
            named_attribute_002_11.inputs[0].default_value = "res_name"

            # node Compare.001
            compare_001_15 = mn_dna_style_spheres_cycles.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_15.name = "Compare.001"
            compare_001_15.data_type = "INT"
            compare_001_15.mode = "ELEMENT"
            compare_001_15.operation = "EQUAL"
            # B_INT
            compare_001_15.inputs[3].default_value = 30

            # node Compare.002
            compare_002_9 = mn_dna_style_spheres_cycles.nodes.new("FunctionNodeCompare")
            compare_002_9.name = "Compare.002"
            compare_002_9.data_type = "INT"
            compare_002_9.mode = "ELEMENT"
            compare_002_9.operation = "EQUAL"
            # B_INT
            compare_002_9.inputs[3].default_value = 31

            # node Compare.003
            compare_003_8 = mn_dna_style_spheres_cycles.nodes.new("FunctionNodeCompare")
            compare_003_8.name = "Compare.003"
            compare_003_8.data_type = "INT"
            compare_003_8.mode = "ELEMENT"
            compare_003_8.operation = "EQUAL"
            # B_INT
            compare_003_8.inputs[3].default_value = 32

            # node Compare.004
            compare_004_6 = mn_dna_style_spheres_cycles.nodes.new("FunctionNodeCompare")
            compare_004_6.name = "Compare.004"
            compare_004_6.data_type = "INT"
            compare_004_6.mode = "ELEMENT"
            compare_004_6.operation = "EQUAL"
            # B_INT
            compare_004_6.inputs[3].default_value = 33

            # node Group.005
            group_005_4 = mn_dna_style_spheres_cycles.nodes.new("GeometryNodeGroup")
            group_005_4.name = "Group.005"
            group_005_4.node_tree = _mn_utils_style_spheres_points

            # node Group Input
            group_input_102 = mn_dna_style_spheres_cycles.nodes.new("NodeGroupInput")
            group_input_102.name = "Group Input"

            # node Group.006
            group_006_4 = mn_dna_style_spheres_cycles.nodes.new("GeometryNodeGroup")
            group_006_4.name = "Group.006"
            group_006_4.node_tree = _mn_utils_style_spheres_points

            # node Group.007
            group_007_5 = mn_dna_style_spheres_cycles.nodes.new("GeometryNodeGroup")
            group_007_5.name = "Group.007"
            group_007_5.node_tree = _mn_utils_style_spheres_points

            # node Geometry to Instance
            geometry_to_instance_4 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_4.name = "Geometry to Instance"

            # node Group Output
            group_output_103 = mn_dna_style_spheres_cycles.nodes.new("NodeGroupOutput")
            group_output_103.name = "Group Output"
            group_output_103.is_active_output = True

            # node Realize Instances
            realize_instances_6 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_6.name = "Realize Instances"
            # Selection
            realize_instances_6.inputs[1].default_value = True
            # Realize All
            realize_instances_6.inputs[2].default_value = True
            # Depth
            realize_instances_6.inputs[3].default_value = 0

            # node Group.004
            group_004_3 = mn_dna_style_spheres_cycles.nodes.new("GeometryNodeGroup")
            group_004_3.name = "Group.004"
            group_004_3.node_tree = _mn_utils_style_spheres_points

            # node Separate Geometry.004
            separate_geometry_004_1 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_004_1.name = "Separate Geometry.004"
            separate_geometry_004_1.domain = "POINT"

            # node Separate Geometry.003
            separate_geometry_003_2 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003_2.name = "Separate Geometry.003"
            separate_geometry_003_2.domain = "POINT"

            # node Separate Geometry.002
            separate_geometry_002_2 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_2.name = "Separate Geometry.002"
            separate_geometry_002_2.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001_6 = mn_dna_style_spheres_cycles.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_6.name = "Separate Geometry.001"
            separate_geometry_001_6.domain = "POINT"

            # Set locations
            named_attribute_002_11.location = (-271.8153076171875, 270.0)
            compare_001_15.location = (-73.56605529785156, 281.95001220703125)
            compare_002_9.location = (-71.81532287597656, 110.0)
            compare_003_8.location = (-71.81532287597656, -70.0)
            compare_004_6.location = (-71.81532287597656, -250.0)
            group_005_4.location = (308.1846923828125, 90.0)
            group_input_102.location = (-508.1846923828125, -0.0)
            group_006_4.location = (308.1846923828125, -110.0)
            group_007_5.location = (308.1846923828125, -290.0)
            geometry_to_instance_4.location = (600.0, 100.0)
            group_output_103.location = (947.1314086914062, 66.40379333496094)
            realize_instances_6.location = (-280.0, 120.0)
            group_004_3.location = (308.1846923828125, 290.0)
            separate_geometry_004_1.location = (108.18467712402344, -230.0)
            separate_geometry_003_2.location = (108.18467712402344, -50.0)
            separate_geometry_002_2.location = (108.18467712402344, 130.0)
            separate_geometry_001_6.location = (108.18467712402344, 290.0)

            # Set dimensions
            named_attribute_002_11.width, named_attribute_002_11.height = 140.0, 100.0
            compare_001_15.width, compare_001_15.height = 140.0, 100.0
            compare_002_9.width, compare_002_9.height = 140.0, 100.0
            compare_003_8.width, compare_003_8.height = 140.0, 100.0
            compare_004_6.width, compare_004_6.height = 140.0, 100.0
            group_005_4.width, group_005_4.height = 140.0, 100.0
            group_input_102.width, group_input_102.height = 140.0, 100.0
            group_006_4.width, group_006_4.height = 140.0, 100.0
            group_007_5.width, group_007_5.height = 140.0, 100.0
            geometry_to_instance_4.width, geometry_to_instance_4.height = 160.0, 100.0
            group_output_103.width, group_output_103.height = 140.0, 100.0
            realize_instances_6.width, realize_instances_6.height = 140.0, 100.0
            group_004_3.width, group_004_3.height = 140.0, 100.0
            separate_geometry_004_1.width, separate_geometry_004_1.height = 140.0, 100.0
            separate_geometry_003_2.width, separate_geometry_003_2.height = 140.0, 100.0
            separate_geometry_002_2.width, separate_geometry_002_2.height = 140.0, 100.0
            separate_geometry_001_6.width, separate_geometry_001_6.height = 140.0, 100.0

            # initialize mn_dna_style_spheres_cycles links
            # group_input_102.Bases -> realize_instances_6.Geometry
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[0], realize_instances_6.inputs[0]
            )
            # realize_instances_6.Geometry -> separate_geometry_001_6.Geometry
            mn_dna_style_spheres_cycles.links.new(
                realize_instances_6.outputs[0], separate_geometry_001_6.inputs[0]
            )
            # compare_001_15.Result -> separate_geometry_001_6.Selection
            mn_dna_style_spheres_cycles.links.new(
                compare_001_15.outputs[0], separate_geometry_001_6.inputs[1]
            )
            # named_attribute_002_11.Attribute -> compare_001_15.A
            mn_dna_style_spheres_cycles.links.new(
                named_attribute_002_11.outputs[0], compare_001_15.inputs[2]
            )
            # realize_instances_6.Geometry -> separate_geometry_002_2.Geometry
            mn_dna_style_spheres_cycles.links.new(
                realize_instances_6.outputs[0], separate_geometry_002_2.inputs[0]
            )
            # compare_002_9.Result -> separate_geometry_002_2.Selection
            mn_dna_style_spheres_cycles.links.new(
                compare_002_9.outputs[0], separate_geometry_002_2.inputs[1]
            )
            # named_attribute_002_11.Attribute -> compare_002_9.A
            mn_dna_style_spheres_cycles.links.new(
                named_attribute_002_11.outputs[0], compare_002_9.inputs[2]
            )
            # realize_instances_6.Geometry -> separate_geometry_003_2.Geometry
            mn_dna_style_spheres_cycles.links.new(
                realize_instances_6.outputs[0], separate_geometry_003_2.inputs[0]
            )
            # compare_003_8.Result -> separate_geometry_003_2.Selection
            mn_dna_style_spheres_cycles.links.new(
                compare_003_8.outputs[0], separate_geometry_003_2.inputs[1]
            )
            # named_attribute_002_11.Attribute -> compare_003_8.A
            mn_dna_style_spheres_cycles.links.new(
                named_attribute_002_11.outputs[0], compare_003_8.inputs[2]
            )
            # realize_instances_6.Geometry -> separate_geometry_004_1.Geometry
            mn_dna_style_spheres_cycles.links.new(
                realize_instances_6.outputs[0], separate_geometry_004_1.inputs[0]
            )
            # compare_004_6.Result -> separate_geometry_004_1.Selection
            mn_dna_style_spheres_cycles.links.new(
                compare_004_6.outputs[0], separate_geometry_004_1.inputs[1]
            )
            # named_attribute_002_11.Attribute -> compare_004_6.A
            mn_dna_style_spheres_cycles.links.new(
                named_attribute_002_11.outputs[0], compare_004_6.inputs[2]
            )
            # separate_geometry_001_6.Selection -> group_004_3.Atoms
            mn_dna_style_spheres_cycles.links.new(
                separate_geometry_001_6.outputs[0], group_004_3.inputs[0]
            )
            # separate_geometry_004_1.Selection -> group_007_5.Atoms
            mn_dna_style_spheres_cycles.links.new(
                separate_geometry_004_1.outputs[0], group_007_5.inputs[0]
            )
            # group_input_102.Selection -> group_004_3.Selection
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[1], group_004_3.inputs[1]
            )
            # group_input_102.Selection -> group_005_4.Selection
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[1], group_005_4.inputs[1]
            )
            # group_input_102.Selection -> group_006_4.Selection
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[1], group_006_4.inputs[1]
            )
            # group_input_102.Scale Radii -> group_004_3.Radii
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[2], group_004_3.inputs[2]
            )
            # group_input_102.Scale Radii -> group_005_4.Radii
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[2], group_005_4.inputs[2]
            )
            # group_input_102.Selection -> group_007_5.Selection
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[1], group_007_5.inputs[1]
            )
            # group_input_102.Material -> group_004_3.Material
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[3], group_004_3.inputs[3]
            )
            # group_input_102.Material -> group_005_4.Material
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[3], group_005_4.inputs[3]
            )
            # group_input_102.Scale Radii -> group_007_5.Radii
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[2], group_007_5.inputs[2]
            )
            # group_input_102.Scale Radii -> group_006_4.Radii
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[2], group_006_4.inputs[2]
            )
            # group_input_102.Material -> group_006_4.Material
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[3], group_006_4.inputs[3]
            )
            # group_input_102.Material -> group_007_5.Material
            mn_dna_style_spheres_cycles.links.new(
                group_input_102.outputs[3], group_007_5.inputs[3]
            )
            # geometry_to_instance_4.Instances -> group_output_103.Bases
            mn_dna_style_spheres_cycles.links.new(
                geometry_to_instance_4.outputs[0], group_output_103.inputs[0]
            )
            # group_007_5.Point Cloud -> geometry_to_instance_4.Geometry
            mn_dna_style_spheres_cycles.links.new(
                group_007_5.outputs[0], geometry_to_instance_4.inputs[0]
            )
            # separate_geometry_002_2.Selection -> group_005_4.Atoms
            mn_dna_style_spheres_cycles.links.new(
                separate_geometry_002_2.outputs[0], group_005_4.inputs[0]
            )
            # separate_geometry_003_2.Selection -> group_006_4.Atoms
            mn_dna_style_spheres_cycles.links.new(
                separate_geometry_003_2.outputs[0], group_006_4.inputs[0]
            )
            # group_006_4.Point Cloud -> geometry_to_instance_4.Geometry
            mn_dna_style_spheres_cycles.links.new(
                group_006_4.outputs[0], geometry_to_instance_4.inputs[0]
            )
            # group_005_4.Point Cloud -> geometry_to_instance_4.Geometry
            mn_dna_style_spheres_cycles.links.new(
                group_005_4.outputs[0], geometry_to_instance_4.inputs[0]
            )
            # group_004_3.Point Cloud -> geometry_to_instance_4.Geometry
            mn_dna_style_spheres_cycles.links.new(
                group_004_3.outputs[0], geometry_to_instance_4.inputs[0]
            )
            return mn_dna_style_spheres_cycles

        mn_dna_style_spheres_cycles = mn_dna_style_spheres_cycles_node_group()

        # initialize select_bonded node group
        def select_bonded_node_group():
            select_bonded = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Bonded"
            )

            select_bonded.color_tag = "INPUT"
            select_bonded.description = ""

            # select_bonded interface
            # Socket Selection
            selection_socket_35 = select_bonded.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_35.attribute_domain = "POINT"
            selection_socket_35.description = (
                "Expanded selection that includes the original selection"
            )

            # Socket Bonded
            bonded_socket = select_bonded.interface.new_socket(
                name="Bonded", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            bonded_socket.attribute_domain = "POINT"
            bonded_socket.description = (
                "Expanded Selection that excludes the original selection"
            )

            # Socket Selection
            selection_socket_36 = select_bonded.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_36.attribute_domain = "POINT"
            selection_socket_36.hide_value = True
            selection_socket_36.description = "Selection of atoms to apply this node to"

            # Socket Depth
            depth_socket = select_bonded.interface.new_socket(
                name="Depth", in_out="INPUT", socket_type="NodeSocketInt"
            )
            depth_socket.subtype = "NONE"
            depth_socket.default_value = 1
            depth_socket.min_value = 0
            depth_socket.max_value = 2147483647
            depth_socket.attribute_domain = "POINT"
            depth_socket.description = "Number of bonds to expand the selection by"

            # initialize select_bonded nodes
            # node Group Input
            group_input_103 = select_bonded.nodes.new("NodeGroupInput")
            group_input_103.name = "Group Input"

            # node Reroute
            reroute_27 = select_bonded.nodes.new("NodeReroute")
            reroute_27.name = "Reroute"
            # node Shortest Edge Paths
            shortest_edge_paths = select_bonded.nodes.new(
                "GeometryNodeInputShortestEdgePaths"
            )
            shortest_edge_paths.name = "Shortest Edge Paths"
            # Edge Cost
            shortest_edge_paths.inputs[1].default_value = 1.0

            # node Compare
            compare_30 = select_bonded.nodes.new("FunctionNodeCompare")
            compare_30.name = "Compare"
            compare_30.data_type = "INT"
            compare_30.mode = "ELEMENT"
            compare_30.operation = "LESS_EQUAL"

            # node Compare.001
            compare_001_16 = select_bonded.nodes.new("FunctionNodeCompare")
            compare_001_16.name = "Compare.001"
            compare_001_16.data_type = "INT"
            compare_001_16.mode = "ELEMENT"
            compare_001_16.operation = "GREATER_THAN"
            # B_INT
            compare_001_16.inputs[3].default_value = 0

            # node Boolean Math.001
            boolean_math_001_20 = select_bonded.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_20.name = "Boolean Math.001"
            boolean_math_001_20.operation = "AND"

            # node Group Output
            group_output_104 = select_bonded.nodes.new("NodeGroupOutput")
            group_output_104.name = "Group Output"
            group_output_104.is_active_output = True

            # node Boolean Math
            boolean_math_24 = select_bonded.nodes.new("FunctionNodeBooleanMath")
            boolean_math_24.name = "Boolean Math"
            boolean_math_24.operation = "OR"

            # Set locations
            group_input_103.location = (-285.96417236328125, -95.72706604003906)
            reroute_27.location = (-60.0, 20.0)
            shortest_edge_paths.location = (0.0, 0.0)
            compare_30.location = (280.0, -60.0)
            compare_001_16.location = (280.0, -240.0)
            boolean_math_001_20.location = (480.0, -80.0)
            group_output_104.location = (940.080078125, -20.0)
            boolean_math_24.location = (700.0, 100.0)

            # Set dimensions
            group_input_103.width, group_input_103.height = 140.0, 100.0
            reroute_27.width, reroute_27.height = 16.0, 100.0
            shortest_edge_paths.width, shortest_edge_paths.height = 140.0, 100.0
            compare_30.width, compare_30.height = 140.0, 100.0
            compare_001_16.width, compare_001_16.height = 140.0, 100.0
            boolean_math_001_20.width, boolean_math_001_20.height = 140.0, 100.0
            group_output_104.width, group_output_104.height = 140.0, 100.0
            boolean_math_24.width, boolean_math_24.height = 140.0, 100.0

            # initialize select_bonded links
            # reroute_27.Output -> shortest_edge_paths.End Vertex
            select_bonded.links.new(
                reroute_27.outputs[0], shortest_edge_paths.inputs[0]
            )
            # shortest_edge_paths.Total Cost -> compare_30.A
            select_bonded.links.new(
                shortest_edge_paths.outputs[1], compare_30.inputs[0]
            )
            # shortest_edge_paths.Total Cost -> compare_30.A
            select_bonded.links.new(
                shortest_edge_paths.outputs[1], compare_30.inputs[2]
            )
            # group_input_103.Depth -> compare_30.B
            select_bonded.links.new(group_input_103.outputs[1], compare_30.inputs[3])
            # reroute_27.Output -> boolean_math_24.Boolean
            select_bonded.links.new(reroute_27.outputs[0], boolean_math_24.inputs[0])
            # group_input_103.Selection -> reroute_27.Input
            select_bonded.links.new(group_input_103.outputs[0], reroute_27.inputs[0])
            # boolean_math_24.Boolean -> group_output_104.Selection
            select_bonded.links.new(
                boolean_math_24.outputs[0], group_output_104.inputs[0]
            )
            # boolean_math_001_20.Boolean -> group_output_104.Bonded
            select_bonded.links.new(
                boolean_math_001_20.outputs[0], group_output_104.inputs[1]
            )
            # compare_30.Result -> boolean_math_001_20.Boolean
            select_bonded.links.new(
                compare_30.outputs[0], boolean_math_001_20.inputs[0]
            )
            # shortest_edge_paths.Total Cost -> compare_001_16.A
            select_bonded.links.new(
                shortest_edge_paths.outputs[1], compare_001_16.inputs[0]
            )
            # shortest_edge_paths.Total Cost -> compare_001_16.A
            select_bonded.links.new(
                shortest_edge_paths.outputs[1], compare_001_16.inputs[2]
            )
            # compare_001_16.Result -> boolean_math_001_20.Boolean
            select_bonded.links.new(
                compare_001_16.outputs[0], boolean_math_001_20.inputs[1]
            )
            # boolean_math_001_20.Boolean -> boolean_math_24.Boolean
            select_bonded.links.new(
                boolean_math_001_20.outputs[0], boolean_math_24.inputs[1]
            )
            return select_bonded

        select_bonded = select_bonded_node_group()

        # initialize mn_dna_bases node group
        def mn_dna_bases_node_group():
            mn_dna_bases = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_bases"
            )

            mn_dna_bases.color_tag = "NONE"
            mn_dna_bases.description = ""

            mn_dna_bases.is_modifier = True

            # mn_dna_bases interface
            # Socket Bases
            bases_socket_4 = mn_dna_bases.interface.new_socket(
                name="Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_4.attribute_domain = "POINT"

            # Socket Color
            color_socket_19 = mn_dna_bases.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_19.attribute_domain = "POINT"

            # Socket Collection
            collection_socket_1 = mn_dna_bases.interface.new_socket(
                name="Collection", in_out="INPUT", socket_type="NodeSocketCollection"
            )
            collection_socket_1.attribute_domain = "POINT"

            # Socket dA
            da_socket = mn_dna_bases.interface.new_socket(
                name="dA", in_out="INPUT", socket_type="NodeSocketColor"
            )
            da_socket.attribute_domain = "POINT"

            # Socket dC
            dc_socket = mn_dna_bases.interface.new_socket(
                name="dC", in_out="INPUT", socket_type="NodeSocketColor"
            )
            dc_socket.attribute_domain = "POINT"

            # Socket dG
            dg_socket = mn_dna_bases.interface.new_socket(
                name="dG", in_out="INPUT", socket_type="NodeSocketColor"
            )
            dg_socket.attribute_domain = "POINT"

            # Socket dT
            dt_socket = mn_dna_bases.interface.new_socket(
                name="dT", in_out="INPUT", socket_type="NodeSocketColor"
            )
            dt_socket.attribute_domain = "POINT"

            # Socket Backbone Color
            backbone_color_socket = mn_dna_bases.interface.new_socket(
                name="Backbone Color", in_out="INPUT", socket_type="NodeSocketBool"
            )
            backbone_color_socket.attribute_domain = "POINT"

            # Socket Backbone
            backbone_socket_1 = mn_dna_bases.interface.new_socket(
                name="Backbone", in_out="INPUT", socket_type="NodeSocketColor"
            )
            backbone_socket_1.attribute_domain = "POINT"

            # initialize mn_dna_bases nodes
            # node Named Attribute
            named_attribute_26 = mn_dna_bases.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_26.name = "Named Attribute"
            named_attribute_26.data_type = "INT"
            # Name
            named_attribute_26.inputs[0].default_value = "res_name"

            # node Compare
            compare_31 = mn_dna_bases.nodes.new("FunctionNodeCompare")
            compare_31.name = "Compare"
            compare_31.data_type = "INT"
            compare_31.mode = "ELEMENT"
            compare_31.operation = "EQUAL"
            # B_INT
            compare_31.inputs[3].default_value = 30

            # node Switch
            switch_27 = mn_dna_bases.nodes.new("GeometryNodeSwitch")
            switch_27.name = "Switch"
            switch_27.input_type = "RGBA"
            # False
            switch_27.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Compare.002
            compare_002_10 = mn_dna_bases.nodes.new("FunctionNodeCompare")
            compare_002_10.name = "Compare.002"
            compare_002_10.data_type = "INT"
            compare_002_10.mode = "ELEMENT"
            compare_002_10.operation = "EQUAL"
            # B_INT
            compare_002_10.inputs[3].default_value = 32

            # node Compare.003
            compare_003_9 = mn_dna_bases.nodes.new("FunctionNodeCompare")
            compare_003_9.name = "Compare.003"
            compare_003_9.data_type = "INT"
            compare_003_9.mode = "ELEMENT"
            compare_003_9.operation = "EQUAL"
            # B_INT
            compare_003_9.inputs[3].default_value = 33

            # node Compare.001
            compare_001_17 = mn_dna_bases.nodes.new("FunctionNodeCompare")
            compare_001_17.name = "Compare.001"
            compare_001_17.data_type = "INT"
            compare_001_17.mode = "ELEMENT"
            compare_001_17.operation = "EQUAL"
            # B_INT
            compare_001_17.inputs[3].default_value = 31

            # node Switch.001
            switch_001_18 = mn_dna_bases.nodes.new("GeometryNodeSwitch")
            switch_001_18.name = "Switch.001"
            switch_001_18.input_type = "RGBA"

            # node Switch.002
            switch_002_13 = mn_dna_bases.nodes.new("GeometryNodeSwitch")
            switch_002_13.name = "Switch.002"
            switch_002_13.input_type = "RGBA"

            # node Collection Info
            collection_info_2 = mn_dna_bases.nodes.new("GeometryNodeCollectionInfo")
            collection_info_2.name = "Collection Info"
            collection_info_2.transform_space = "ORIGINAL"
            # Separate Children
            collection_info_2.inputs[1].default_value = True
            # Reset Children
            collection_info_2.inputs[2].default_value = False

            # node Group Output
            group_output_105 = mn_dna_bases.nodes.new("NodeGroupOutput")
            group_output_105.name = "Group Output"
            group_output_105.is_active_output = True

            # node Switch.003
            switch_003_5 = mn_dna_bases.nodes.new("GeometryNodeSwitch")
            switch_003_5.name = "Switch.003"
            switch_003_5.input_type = "RGBA"

            # node Group.001
            group_001_18 = mn_dna_bases.nodes.new("GeometryNodeGroup")
            group_001_18.name = "Group.001"
            group_001_18.node_tree = set_color

            # node Named Attribute.002
            named_attribute_002_12 = mn_dna_bases.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_12.name = "Named Attribute.002"
            named_attribute_002_12.data_type = "BOOLEAN"
            # Name
            named_attribute_002_12.inputs[0].default_value = "is_backbone"

            # node Group
            group_28 = mn_dna_bases.nodes.new("GeometryNodeGroup")
            group_28.name = "Group"
            group_28.node_tree = select_bonded
            # Input_1
            group_28.inputs[1].default_value = 2

            # node Switch.004
            switch_004_3 = mn_dna_bases.nodes.new("GeometryNodeSwitch")
            switch_004_3.name = "Switch.004"
            switch_004_3.input_type = "GEOMETRY"

            # node Store Named Attribute
            store_named_attribute_10 = mn_dna_bases.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_10.name = "Store Named Attribute"
            store_named_attribute_10.data_type = "FLOAT_COLOR"
            store_named_attribute_10.domain = "POINT"
            # Selection
            store_named_attribute_10.inputs[1].default_value = True
            # Name
            store_named_attribute_10.inputs[2].default_value = "Color"

            # node Group Input
            group_input_104 = mn_dna_bases.nodes.new("NodeGroupInput")
            group_input_104.name = "Group Input"

            # node Named Attribute.001
            named_attribute_001_14 = mn_dna_bases.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_14.name = "Named Attribute.001"
            named_attribute_001_14.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_001_14.inputs[0].default_value = "Color"

            # Set locations
            named_attribute_26.location = (-272.771484375, 400.0)
            compare_31.location = (-72.771484375, 100.0)
            switch_27.location = (-72.771484375, -100.0)
            compare_002_10.location = (287.228515625, 100.0)
            compare_003_9.location = (467.228515625, 100.0)
            compare_001_17.location = (107.228515625, 100.0)
            switch_001_18.location = (107.228515625, -100.0)
            switch_002_13.location = (287.228515625, -100.0)
            collection_info_2.location = (-346.82159423828125, 9.090608596801758)
            group_output_105.location = (1471.3358154296875, 168.6637420654297)
            switch_003_5.location = (467.228515625, -80.0)
            group_001_18.location = (957.656982421875, -33.819366455078125)
            named_attribute_002_12.location = (487.228515625, -260.0)
            group_28.location = (687.228515625, -260.0)
            switch_004_3.location = (1237.228515625, 65.311767578125)
            store_named_attribute_10.location = (657.68212890625, 232.44857788085938)
            group_input_104.location = (-500.955810546875, -237.814453125)
            named_attribute_001_14.location = (1240.0, -100.0)

            # Set dimensions
            named_attribute_26.width, named_attribute_26.height = 140.0, 100.0
            compare_31.width, compare_31.height = 140.0, 100.0
            switch_27.width, switch_27.height = 140.0, 100.0
            compare_002_10.width, compare_002_10.height = 140.0, 100.0
            compare_003_9.width, compare_003_9.height = 140.0, 100.0
            compare_001_17.width, compare_001_17.height = 140.0, 100.0
            switch_001_18.width, switch_001_18.height = 140.0, 100.0
            switch_002_13.width, switch_002_13.height = 140.0, 100.0
            collection_info_2.width, collection_info_2.height = 140.0, 100.0
            group_output_105.width, group_output_105.height = 140.0, 100.0
            switch_003_5.width, switch_003_5.height = 140.0, 100.0
            group_001_18.width, group_001_18.height = 200.0, 100.0
            named_attribute_002_12.width, named_attribute_002_12.height = 140.0, 100.0
            group_28.width, group_28.height = 140.0, 100.0
            switch_004_3.width, switch_004_3.height = 140.0, 100.0
            store_named_attribute_10.width, store_named_attribute_10.height = (
                140.0,
                100.0,
            )
            group_input_104.width, group_input_104.height = 140.0, 100.0
            named_attribute_001_14.width, named_attribute_001_14.height = 140.0, 100.0

            # initialize mn_dna_bases links
            # named_attribute_26.Attribute -> compare_31.A
            mn_dna_bases.links.new(named_attribute_26.outputs[0], compare_31.inputs[2])
            # group_input_104.dA -> switch_27.True
            mn_dna_bases.links.new(group_input_104.outputs[1], switch_27.inputs[2])
            # compare_31.Result -> switch_27.Switch
            mn_dna_bases.links.new(compare_31.outputs[0], switch_27.inputs[0])
            # named_attribute_26.Attribute -> compare_001_17.A
            mn_dna_bases.links.new(
                named_attribute_26.outputs[0], compare_001_17.inputs[2]
            )
            # group_input_104.dC -> switch_001_18.True
            mn_dna_bases.links.new(group_input_104.outputs[2], switch_001_18.inputs[2])
            # compare_001_17.Result -> switch_001_18.Switch
            mn_dna_bases.links.new(compare_001_17.outputs[0], switch_001_18.inputs[0])
            # switch_27.Output -> switch_001_18.False
            mn_dna_bases.links.new(switch_27.outputs[0], switch_001_18.inputs[1])
            # named_attribute_26.Attribute -> compare_002_10.A
            mn_dna_bases.links.new(
                named_attribute_26.outputs[0], compare_002_10.inputs[2]
            )
            # compare_002_10.Result -> switch_002_13.Switch
            mn_dna_bases.links.new(compare_002_10.outputs[0], switch_002_13.inputs[0])
            # named_attribute_26.Attribute -> compare_003_9.A
            mn_dna_bases.links.new(
                named_attribute_26.outputs[0], compare_003_9.inputs[2]
            )
            # compare_003_9.Result -> switch_003_5.Switch
            mn_dna_bases.links.new(compare_003_9.outputs[0], switch_003_5.inputs[0])
            # switch_001_18.Output -> switch_002_13.False
            mn_dna_bases.links.new(switch_001_18.outputs[0], switch_002_13.inputs[1])
            # group_input_104.dG -> switch_002_13.True
            mn_dna_bases.links.new(group_input_104.outputs[3], switch_002_13.inputs[2])
            # switch_002_13.Output -> switch_003_5.False
            mn_dna_bases.links.new(switch_002_13.outputs[0], switch_003_5.inputs[1])
            # group_input_104.dT -> switch_003_5.True
            mn_dna_bases.links.new(group_input_104.outputs[4], switch_003_5.inputs[2])
            # group_input_104.Collection -> collection_info_2.Collection
            mn_dna_bases.links.new(
                group_input_104.outputs[0], collection_info_2.inputs[0]
            )
            # collection_info_2.Instances -> store_named_attribute_10.Geometry
            mn_dna_bases.links.new(
                collection_info_2.outputs[0], store_named_attribute_10.inputs[0]
            )
            # switch_003_5.Output -> store_named_attribute_10.Value
            mn_dna_bases.links.new(
                switch_003_5.outputs[0], store_named_attribute_10.inputs[3]
            )
            # switch_004_3.Output -> group_output_105.Bases
            mn_dna_bases.links.new(switch_004_3.outputs[0], group_output_105.inputs[0])
            # named_attribute_002_12.Attribute -> group_28.Selection
            mn_dna_bases.links.new(
                named_attribute_002_12.outputs[0], group_28.inputs[0]
            )
            # store_named_attribute_10.Geometry -> group_001_18.Atoms
            mn_dna_bases.links.new(
                store_named_attribute_10.outputs[0], group_001_18.inputs[0]
            )
            # group_28.Selection -> group_001_18.Selection
            mn_dna_bases.links.new(group_28.outputs[0], group_001_18.inputs[1])
            # group_001_18.Atoms -> switch_004_3.True
            mn_dna_bases.links.new(group_001_18.outputs[0], switch_004_3.inputs[2])
            # store_named_attribute_10.Geometry -> switch_004_3.False
            mn_dna_bases.links.new(
                store_named_attribute_10.outputs[0], switch_004_3.inputs[1]
            )
            # group_input_104.Backbone Color -> switch_004_3.Switch
            mn_dna_bases.links.new(group_input_104.outputs[5], switch_004_3.inputs[0])
            # group_input_104.Backbone -> group_001_18.Color
            mn_dna_bases.links.new(group_input_104.outputs[6], group_001_18.inputs[2])
            # named_attribute_001_14.Attribute -> group_output_105.Color
            mn_dna_bases.links.new(
                named_attribute_001_14.outputs[0], group_output_105.inputs[1]
            )
            return mn_dna_bases

        mn_dna_bases = mn_dna_bases_node_group()

        # initialize _surface_blur_color node group
        def _surface_blur_color_node_group():
            _surface_blur_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".surface_blur_color"
            )

            _surface_blur_color.color_tag = "NONE"
            _surface_blur_color.description = ""

            _surface_blur_color.is_modifier = True

            # _surface_blur_color interface
            # Socket Geometry
            geometry_socket_16 = _surface_blur_color.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_16.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_17 = _surface_blur_color.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_17.attribute_domain = "POINT"

            # Socket Blur Iterations
            blur_iterations_socket = _surface_blur_color.interface.new_socket(
                name="Blur Iterations", in_out="INPUT", socket_type="NodeSocketInt"
            )
            blur_iterations_socket.subtype = "NONE"
            blur_iterations_socket.default_value = 0
            blur_iterations_socket.min_value = -2147483648
            blur_iterations_socket.max_value = 2147483647
            blur_iterations_socket.attribute_domain = "POINT"

            # Socket Color
            color_socket_20 = _surface_blur_color.interface.new_socket(
                name="Color", in_out="INPUT", socket_type="NodeSocketColor"
            )
            color_socket_20.attribute_domain = "POINT"
            color_socket_20.hide_value = True

            # initialize _surface_blur_color nodes
            # node Group Output
            group_output_106 = _surface_blur_color.nodes.new("NodeGroupOutput")
            group_output_106.name = "Group Output"
            group_output_106.is_active_output = True

            # node Group Input
            group_input_105 = _surface_blur_color.nodes.new("NodeGroupInput")
            group_input_105.name = "Group Input"

            # node Store Named Attribute
            store_named_attribute_11 = _surface_blur_color.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_11.name = "Store Named Attribute"
            store_named_attribute_11.data_type = "FLOAT_COLOR"
            store_named_attribute_11.domain = "POINT"
            # Selection
            store_named_attribute_11.inputs[1].default_value = True
            # Name
            store_named_attribute_11.inputs[2].default_value = "Color"

            # node Store Named Attribute.001
            store_named_attribute_001_3 = _surface_blur_color.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_3.name = "Store Named Attribute.001"
            store_named_attribute_001_3.data_type = "FLOAT_COLOR"
            store_named_attribute_001_3.domain = "FACE"
            # Selection
            store_named_attribute_001_3.inputs[1].default_value = True
            # Name
            store_named_attribute_001_3.inputs[2].default_value = "Color"

            # node Reroute.005
            reroute_005_6 = _surface_blur_color.nodes.new("NodeReroute")
            reroute_005_6.name = "Reroute.005"
            # node Blur Attribute.002
            blur_attribute_002 = _surface_blur_color.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_002.name = "Blur Attribute.002"
            blur_attribute_002.data_type = "FLOAT_COLOR"
            # Weight
            blur_attribute_002.inputs[2].default_value = 1.0

            # node Reroute.009
            reroute_009_3 = _surface_blur_color.nodes.new("NodeReroute")
            reroute_009_3.name = "Reroute.009"
            # node Reroute.010
            reroute_010_3 = _surface_blur_color.nodes.new("NodeReroute")
            reroute_010_3.name = "Reroute.010"
            # node Switch.002
            switch_002_14 = _surface_blur_color.nodes.new("GeometryNodeSwitch")
            switch_002_14.name = "Switch.002"
            switch_002_14.input_type = "GEOMETRY"

            # node Compare.003
            compare_003_10 = _surface_blur_color.nodes.new("FunctionNodeCompare")
            compare_003_10.name = "Compare.003"
            compare_003_10.data_type = "INT"
            compare_003_10.mode = "ELEMENT"
            compare_003_10.operation = "NOT_EQUAL"
            # B_INT
            compare_003_10.inputs[3].default_value = 0

            # node Math
            math_24 = _surface_blur_color.nodes.new("ShaderNodeMath")
            math_24.name = "Math"
            math_24.operation = "SUBTRACT"
            math_24.use_clamp = False
            # Value_001
            math_24.inputs[1].default_value = 1.0

            # Set locations
            group_output_106.location = (490.0, 0.0)
            group_input_105.location = (-500.0, 0.0)
            store_named_attribute_11.location = (68.0, -120.0)
            store_named_attribute_001_3.location = (68.0, 100.0)
            reroute_005_6.location = (0.0, -120.0)
            blur_attribute_002.location = (-180.0, -100.0)
            reroute_009_3.location = (-20.0, -60.0)
            reroute_010_3.location = (-300.0, -80.0)
            switch_002_14.location = (300.0, 20.0)
            compare_003_10.location = (-180.0, 120.0)
            math_24.location = (-480.0, -140.0)

            # Set dimensions
            group_output_106.width, group_output_106.height = 140.0, 100.0
            group_input_105.width, group_input_105.height = 140.0, 100.0
            store_named_attribute_11.width, store_named_attribute_11.height = (
                140.0,
                100.0,
            )
            store_named_attribute_001_3.width, store_named_attribute_001_3.height = (
                140.0,
                100.0,
            )
            reroute_005_6.width, reroute_005_6.height = 16.0, 100.0
            blur_attribute_002.width, blur_attribute_002.height = 140.0, 100.0
            reroute_009_3.width, reroute_009_3.height = 16.0, 100.0
            reroute_010_3.width, reroute_010_3.height = 16.0, 100.0
            switch_002_14.width, switch_002_14.height = 140.0, 100.0
            compare_003_10.width, compare_003_10.height = 140.0, 100.0
            math_24.width, math_24.height = 140.0, 100.0

            # initialize _surface_blur_color links
            # reroute_010_3.Output -> compare_003_10.A
            _surface_blur_color.links.new(
                reroute_010_3.outputs[0], compare_003_10.inputs[2]
            )
            # reroute_009_3.Output -> store_named_attribute_001_3.Geometry
            _surface_blur_color.links.new(
                reroute_009_3.outputs[0], store_named_attribute_001_3.inputs[0]
            )
            # store_named_attribute_11.Geometry -> switch_002_14.True
            _surface_blur_color.links.new(
                store_named_attribute_11.outputs[0], switch_002_14.inputs[2]
            )
            # store_named_attribute_001_3.Geometry -> switch_002_14.False
            _surface_blur_color.links.new(
                store_named_attribute_001_3.outputs[0], switch_002_14.inputs[1]
            )
            # blur_attribute_002.Value -> reroute_005_6.Input
            _surface_blur_color.links.new(
                blur_attribute_002.outputs[0], reroute_005_6.inputs[0]
            )
            # reroute_009_3.Output -> store_named_attribute_11.Geometry
            _surface_blur_color.links.new(
                reroute_009_3.outputs[0], store_named_attribute_11.inputs[0]
            )
            # reroute_005_6.Output -> store_named_attribute_001_3.Value
            _surface_blur_color.links.new(
                reroute_005_6.outputs[0], store_named_attribute_001_3.inputs[3]
            )
            # compare_003_10.Result -> switch_002_14.Switch
            _surface_blur_color.links.new(
                compare_003_10.outputs[0], switch_002_14.inputs[0]
            )
            # reroute_005_6.Output -> store_named_attribute_11.Value
            _surface_blur_color.links.new(
                reroute_005_6.outputs[0], store_named_attribute_11.inputs[3]
            )
            # group_input_105.Color -> blur_attribute_002.Value
            _surface_blur_color.links.new(
                group_input_105.outputs[2], blur_attribute_002.inputs[0]
            )
            # group_input_105.Blur Iterations -> reroute_010_3.Input
            _surface_blur_color.links.new(
                group_input_105.outputs[1], reroute_010_3.inputs[0]
            )
            # group_input_105.Geometry -> reroute_009_3.Input
            _surface_blur_color.links.new(
                group_input_105.outputs[0], reroute_009_3.inputs[0]
            )
            # switch_002_14.Output -> group_output_106.Geometry
            _surface_blur_color.links.new(
                switch_002_14.outputs[0], group_output_106.inputs[0]
            )
            # reroute_010_3.Output -> math_24.Value
            _surface_blur_color.links.new(reroute_010_3.outputs[0], math_24.inputs[0])
            # math_24.Value -> blur_attribute_002.Iterations
            _surface_blur_color.links.new(
                math_24.outputs[0], blur_attribute_002.inputs[1]
            )
            return _surface_blur_color

        _surface_blur_color = _surface_blur_color_node_group()

        # initialize _surface_sample_color node group
        def _surface_sample_color_node_group():
            _surface_sample_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".surface_sample_color"
            )

            _surface_sample_color.color_tag = "NONE"
            _surface_sample_color.description = ""

            # _surface_sample_color interface
            # Socket Color
            color_socket_21 = _surface_sample_color.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_21.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_22 = _surface_sample_color.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_22.attribute_domain = "POINT"
            atoms_socket_22.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Sample CA
            sample_ca_socket = _surface_sample_color.interface.new_socket(
                name="Sample CA", in_out="INPUT", socket_type="NodeSocketBool"
            )
            sample_ca_socket.attribute_domain = "POINT"

            # initialize _surface_sample_color nodes
            # node Group Output
            group_output_107 = _surface_sample_color.nodes.new("NodeGroupOutput")
            group_output_107.name = "Group Output"
            group_output_107.is_active_output = True

            # node Group Input
            group_input_106 = _surface_sample_color.nodes.new("NodeGroupInput")
            group_input_106.name = "Group Input"

            # node Switch
            switch_28 = _surface_sample_color.nodes.new("GeometryNodeSwitch")
            switch_28.name = "Switch"
            switch_28.input_type = "GEOMETRY"

            # node Sample Index.001
            sample_index_001_6 = _surface_sample_color.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_6.name = "Sample Index.001"
            sample_index_001_6.clamp = False
            sample_index_001_6.data_type = "FLOAT_COLOR"
            sample_index_001_6.domain = "POINT"

            # node Named Attribute.002
            named_attribute_002_13 = _surface_sample_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_13.name = "Named Attribute.002"
            named_attribute_002_13.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_002_13.inputs[0].default_value = "Color"

            # node Sample Nearest.001
            sample_nearest_001 = _surface_sample_color.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_001.name = "Sample Nearest.001"
            sample_nearest_001.domain = "POINT"
            # Sample Position
            sample_nearest_001.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Separate Geometry.001
            separate_geometry_001_7 = _surface_sample_color.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_7.name = "Separate Geometry.001"
            separate_geometry_001_7.domain = "POINT"

            # node Reroute.006
            reroute_006_5 = _surface_sample_color.nodes.new("NodeReroute")
            reroute_006_5.name = "Reroute.006"
            # node Compare
            compare_32 = _surface_sample_color.nodes.new("FunctionNodeCompare")
            compare_32.name = "Compare"
            compare_32.data_type = "INT"
            compare_32.mode = "ELEMENT"
            compare_32.operation = "EQUAL"
            # B_INT
            compare_32.inputs[3].default_value = 61

            # node Boolean Math
            boolean_math_25 = _surface_sample_color.nodes.new("FunctionNodeBooleanMath")
            boolean_math_25.name = "Boolean Math"
            boolean_math_25.operation = "OR"

            # node Named Attribute.003
            named_attribute_003_5 = _surface_sample_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_5.name = "Named Attribute.003"
            named_attribute_003_5.data_type = "INT"
            # Name
            named_attribute_003_5.inputs[0].default_value = "atom_name"

            # node Named Attribute.001
            named_attribute_001_15 = _surface_sample_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_15.name = "Named Attribute.001"
            named_attribute_001_15.data_type = "BOOLEAN"
            # Name
            named_attribute_001_15.inputs[0].default_value = "is_alpha_carbon"

            # Set locations
            group_output_107.location = (366.8493957519531, 0.7877547144889832)
            group_input_106.location = (-383.1506042480469, 0.7877547144889832)
            switch_28.location = (-80.39474487304688, 78.26654815673828)
            sample_index_001_6.location = (176.84939575195312, 260.7877502441406)
            named_attribute_002_13.location = (176.84939575195312, 40.78775405883789)
            sample_nearest_001.location = (-83.15060424804688, 220.78775024414062)
            separate_geometry_001_7.location = (-83.15060424804688, -99.21224212646484)
            reroute_006_5.location = (-183.15060424804688, -99.21224212646484)
            compare_32.location = (-260.0, -380.0)
            boolean_math_25.location = (-80.0, -260.0)
            named_attribute_003_5.location = (-460.0, -380.0)
            named_attribute_001_15.location = (-455.15753173828125, -240.0)

            # Set dimensions
            group_output_107.width, group_output_107.height = 140.0, 100.0
            group_input_106.width, group_input_106.height = 140.0, 100.0
            switch_28.width, switch_28.height = 140.0, 100.0
            sample_index_001_6.width, sample_index_001_6.height = 140.0, 100.0
            named_attribute_002_13.width, named_attribute_002_13.height = 140.0, 100.0
            sample_nearest_001.width, sample_nearest_001.height = 140.0, 100.0
            separate_geometry_001_7.width, separate_geometry_001_7.height = 140.0, 100.0
            reroute_006_5.width, reroute_006_5.height = 16.0, 100.0
            compare_32.width, compare_32.height = 140.0, 100.0
            boolean_math_25.width, boolean_math_25.height = 140.0, 100.0
            named_attribute_003_5.width, named_attribute_003_5.height = (
                172.52069091796875,
                100.0,
            )
            named_attribute_001_15.width, named_attribute_001_15.height = (
                162.8524169921875,
                100.0,
            )

            # initialize _surface_sample_color links
            # reroute_006_5.Output -> switch_28.False
            _surface_sample_color.links.new(
                reroute_006_5.outputs[0], switch_28.inputs[1]
            )
            # separate_geometry_001_7.Selection -> switch_28.True
            _surface_sample_color.links.new(
                separate_geometry_001_7.outputs[0], switch_28.inputs[2]
            )
            # switch_28.Output -> sample_index_001_6.Geometry
            _surface_sample_color.links.new(
                switch_28.outputs[0], sample_index_001_6.inputs[0]
            )
            # sample_nearest_001.Index -> sample_index_001_6.Index
            _surface_sample_color.links.new(
                sample_nearest_001.outputs[0], sample_index_001_6.inputs[2]
            )
            # named_attribute_002_13.Attribute -> sample_index_001_6.Value
            _surface_sample_color.links.new(
                named_attribute_002_13.outputs[0], sample_index_001_6.inputs[1]
            )
            # reroute_006_5.Output -> separate_geometry_001_7.Geometry
            _surface_sample_color.links.new(
                reroute_006_5.outputs[0], separate_geometry_001_7.inputs[0]
            )
            # switch_28.Output -> sample_nearest_001.Geometry
            _surface_sample_color.links.new(
                switch_28.outputs[0], sample_nearest_001.inputs[0]
            )
            # group_input_106.Atoms -> reroute_006_5.Input
            _surface_sample_color.links.new(
                group_input_106.outputs[0], reroute_006_5.inputs[0]
            )
            # sample_index_001_6.Value -> group_output_107.Color
            _surface_sample_color.links.new(
                sample_index_001_6.outputs[0], group_output_107.inputs[0]
            )
            # named_attribute_003_5.Attribute -> compare_32.A
            _surface_sample_color.links.new(
                named_attribute_003_5.outputs[0], compare_32.inputs[2]
            )
            # compare_32.Result -> boolean_math_25.Boolean
            _surface_sample_color.links.new(
                compare_32.outputs[0], boolean_math_25.inputs[1]
            )
            # named_attribute_001_15.Attribute -> boolean_math_25.Boolean
            _surface_sample_color.links.new(
                named_attribute_001_15.outputs[0], boolean_math_25.inputs[0]
            )
            # boolean_math_25.Boolean -> separate_geometry_001_7.Selection
            _surface_sample_color.links.new(
                boolean_math_25.outputs[0], separate_geometry_001_7.inputs[1]
            )
            # group_input_106.Sample CA -> switch_28.Switch
            _surface_sample_color.links.new(
                group_input_106.outputs[1], switch_28.inputs[0]
            )
            return _surface_sample_color

        _surface_sample_color = _surface_sample_color_node_group()

        # initialize _surface_blur_postion node group
        def _surface_blur_postion_node_group():
            _surface_blur_postion = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".surface_blur_postion"
            )

            _surface_blur_postion.color_tag = "NONE"
            _surface_blur_postion.description = ""

            _surface_blur_postion.is_modifier = True

            # _surface_blur_postion interface
            # Socket Geometry
            geometry_socket_18 = _surface_blur_postion.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_18.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_19 = _surface_blur_postion.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_19.attribute_domain = "POINT"

            # Socket Iterations
            iterations_socket_1 = _surface_blur_postion.interface.new_socket(
                name="Iterations", in_out="INPUT", socket_type="NodeSocketInt"
            )
            iterations_socket_1.subtype = "NONE"
            iterations_socket_1.default_value = 2
            iterations_socket_1.min_value = 0
            iterations_socket_1.max_value = 2147483647
            iterations_socket_1.attribute_domain = "POINT"

            # initialize _surface_blur_postion nodes
            # node Frame
            frame_13 = _surface_blur_postion.nodes.new("NodeFrame")
            frame_13.label = "Smoothen out weird bumps from meshing"
            frame_13.name = "Frame"
            frame_13.label_size = 20
            frame_13.shrink = True

            # node Group Input
            group_input_107 = _surface_blur_postion.nodes.new("NodeGroupInput")
            group_input_107.name = "Group Input"

            # node Blur Attribute.001
            blur_attribute_001_1 = _surface_blur_postion.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_001_1.name = "Blur Attribute.001"
            blur_attribute_001_1.data_type = "FLOAT_VECTOR"
            # Weight
            blur_attribute_001_1.inputs[2].default_value = 1.0

            # node Evaluate on Domain
            evaluate_on_domain_2 = _surface_blur_postion.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_2.name = "Evaluate on Domain"
            evaluate_on_domain_2.data_type = "FLOAT_VECTOR"
            evaluate_on_domain_2.domain = "FACE"

            # node Position.002
            position_002_6 = _surface_blur_postion.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_6.name = "Position.002"

            # node Evaluate on Domain.001
            evaluate_on_domain_001_1 = _surface_blur_postion.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_001_1.name = "Evaluate on Domain.001"
            evaluate_on_domain_001_1.data_type = "FLOAT_VECTOR"
            evaluate_on_domain_001_1.domain = "POINT"

            # node Set Position
            set_position_8 = _surface_blur_postion.nodes.new("GeometryNodeSetPosition")
            set_position_8.name = "Set Position"
            # Selection
            set_position_8.inputs[1].default_value = True
            # Offset
            set_position_8.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group Output
            group_output_108 = _surface_blur_postion.nodes.new("NodeGroupOutput")
            group_output_108.name = "Group Output"
            group_output_108.is_active_output = True

            # node Blur Attribute
            blur_attribute_1 = _surface_blur_postion.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_1.name = "Blur Attribute"
            blur_attribute_1.data_type = "FLOAT_VECTOR"
            # Iterations
            blur_attribute_1.inputs[1].default_value = 4
            # Weight
            blur_attribute_1.inputs[2].default_value = 1.0

            # node Position
            position_10 = _surface_blur_postion.nodes.new("GeometryNodeInputPosition")
            position_10.name = "Position"

            # node Set Position.001
            set_position_001_2 = _surface_blur_postion.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_2.name = "Set Position.001"
            # Offset
            set_position_001_2.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Compare
            compare_33 = _surface_blur_postion.nodes.new("FunctionNodeCompare")
            compare_33.name = "Compare"
            compare_33.data_type = "INT"
            compare_33.mode = "ELEMENT"
            compare_33.operation = "EQUAL"
            # B_INT
            compare_33.inputs[3].default_value = 3

            # node Vertex Neighbors
            vertex_neighbors = _surface_blur_postion.nodes.new(
                "GeometryNodeInputMeshVertexNeighbors"
            )
            vertex_neighbors.name = "Vertex Neighbors"

            # node Edge Vertices
            edge_vertices_3 = _surface_blur_postion.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_3.name = "Edge Vertices"

            # node Evaluate at Index.001
            evaluate_at_index_001_6 = _surface_blur_postion.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_6.name = "Evaluate at Index.001"
            evaluate_at_index_001_6.data_type = "BOOLEAN"
            evaluate_at_index_001_6.domain = "POINT"

            # node Boolean Math
            boolean_math_26 = _surface_blur_postion.nodes.new("FunctionNodeBooleanMath")
            boolean_math_26.name = "Boolean Math"
            boolean_math_26.operation = "AND"

            # node Edges to Face Groups
            edges_to_face_groups = _surface_blur_postion.nodes.new(
                "GeometryNodeEdgesToFaceGroups"
            )
            edges_to_face_groups.name = "Edges to Face Groups"

            # node Evaluate at Index
            evaluate_at_index_11 = _surface_blur_postion.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_11.name = "Evaluate at Index"
            evaluate_at_index_11.data_type = "BOOLEAN"
            evaluate_at_index_11.domain = "POINT"

            # node Face Group Boundaries
            face_group_boundaries = _surface_blur_postion.nodes.new(
                "GeometryNodeMeshFaceSetBoundaries"
            )
            face_group_boundaries.name = "Face Group Boundaries"

            # Set parents
            compare_33.parent = frame_13
            vertex_neighbors.parent = frame_13
            edge_vertices_3.parent = frame_13
            evaluate_at_index_001_6.parent = frame_13
            boolean_math_26.parent = frame_13
            edges_to_face_groups.parent = frame_13
            evaluate_at_index_11.parent = frame_13
            face_group_boundaries.parent = frame_13

            # Set locations
            frame_13.location = (0.0, 0.0)
            group_input_107.location = (-610.1629638671875, 0.0)
            blur_attribute_001_1.location = (-299.5, -120.0)
            evaluate_on_domain_2.location = (-459.5, -120.0)
            position_002_6.location = (-619.5, -120.0)
            evaluate_on_domain_001_1.location = (-119.5, -120.0)
            set_position_8.location = (60.5, 20.0)
            group_output_108.location = (680.947509765625, -17.612947463989258)
            blur_attribute_1.location = (460.0, -200.0)
            position_10.location = (460.0, -360.0)
            set_position_001_2.location = (460.784423828125, 10.757638931274414)
            compare_33.location = (-220.0, -560.0)
            vertex_neighbors.location = (-380.0, -560.0)
            edge_vertices_3.location = (-220.0, -420.0)
            evaluate_at_index_001_6.location = (-60.0, -580.0)
            boolean_math_26.location = (100.0, -420.0)
            edges_to_face_groups.location = (100.0, -560.0)
            evaluate_at_index_11.location = (-60.0, -420.0)
            face_group_boundaries.location = (100.0, -660.0)

            # Set dimensions
            frame_13.width, frame_13.height = 690.0, 385.0
            group_input_107.width, group_input_107.height = 140.0, 100.0
            blur_attribute_001_1.width, blur_attribute_001_1.height = 140.0, 100.0
            evaluate_on_domain_2.width, evaluate_on_domain_2.height = 140.0, 100.0
            position_002_6.width, position_002_6.height = 140.0, 100.0
            evaluate_on_domain_001_1.width, evaluate_on_domain_001_1.height = (
                140.0,
                100.0,
            )
            set_position_8.width, set_position_8.height = 140.0, 100.0
            group_output_108.width, group_output_108.height = 140.0, 100.0
            blur_attribute_1.width, blur_attribute_1.height = 140.0, 100.0
            position_10.width, position_10.height = 140.0, 100.0
            set_position_001_2.width, set_position_001_2.height = 140.0, 100.0
            compare_33.width, compare_33.height = 140.0, 100.0
            vertex_neighbors.width, vertex_neighbors.height = 140.0, 100.0
            edge_vertices_3.width, edge_vertices_3.height = 140.0, 100.0
            evaluate_at_index_001_6.width, evaluate_at_index_001_6.height = 140.0, 100.0
            boolean_math_26.width, boolean_math_26.height = 140.0, 100.0
            edges_to_face_groups.width, edges_to_face_groups.height = 140.0, 100.0
            evaluate_at_index_11.width, evaluate_at_index_11.height = 140.0, 100.0
            face_group_boundaries.width, face_group_boundaries.height = 150.0, 100.0

            # initialize _surface_blur_postion links
            # evaluate_on_domain_001_1.Value -> set_position_8.Position
            _surface_blur_postion.links.new(
                evaluate_on_domain_001_1.outputs[0], set_position_8.inputs[2]
            )
            # position_002_6.Position -> evaluate_on_domain_2.Value
            _surface_blur_postion.links.new(
                position_002_6.outputs[0], evaluate_on_domain_2.inputs[0]
            )
            # blur_attribute_001_1.Value -> evaluate_on_domain_001_1.Value
            _surface_blur_postion.links.new(
                blur_attribute_001_1.outputs[0], evaluate_on_domain_001_1.inputs[0]
            )
            # evaluate_on_domain_2.Value -> blur_attribute_001_1.Value
            _surface_blur_postion.links.new(
                evaluate_on_domain_2.outputs[0], blur_attribute_001_1.inputs[0]
            )
            # group_input_107.Geometry -> set_position_8.Geometry
            _surface_blur_postion.links.new(
                group_input_107.outputs[0], set_position_8.inputs[0]
            )
            # set_position_001_2.Geometry -> group_output_108.Geometry
            _surface_blur_postion.links.new(
                set_position_001_2.outputs[0], group_output_108.inputs[0]
            )
            # group_input_107.Iterations -> blur_attribute_001_1.Iterations
            _surface_blur_postion.links.new(
                group_input_107.outputs[1], blur_attribute_001_1.inputs[1]
            )
            # set_position_8.Geometry -> set_position_001_2.Geometry
            _surface_blur_postion.links.new(
                set_position_8.outputs[0], set_position_001_2.inputs[0]
            )
            # vertex_neighbors.Vertex Count -> compare_33.A
            _surface_blur_postion.links.new(
                vertex_neighbors.outputs[0], compare_33.inputs[2]
            )
            # compare_33.Result -> evaluate_at_index_11.Value
            _surface_blur_postion.links.new(
                compare_33.outputs[0], evaluate_at_index_11.inputs[1]
            )
            # compare_33.Result -> evaluate_at_index_001_6.Value
            _surface_blur_postion.links.new(
                compare_33.outputs[0], evaluate_at_index_001_6.inputs[1]
            )
            # edge_vertices_3.Vertex Index 1 -> evaluate_at_index_11.Index
            _surface_blur_postion.links.new(
                edge_vertices_3.outputs[0], evaluate_at_index_11.inputs[0]
            )
            # edge_vertices_3.Vertex Index 2 -> evaluate_at_index_001_6.Index
            _surface_blur_postion.links.new(
                edge_vertices_3.outputs[1], evaluate_at_index_001_6.inputs[0]
            )
            # evaluate_at_index_11.Value -> boolean_math_26.Boolean
            _surface_blur_postion.links.new(
                evaluate_at_index_11.outputs[0], boolean_math_26.inputs[0]
            )
            # evaluate_at_index_001_6.Value -> boolean_math_26.Boolean
            _surface_blur_postion.links.new(
                evaluate_at_index_001_6.outputs[0], boolean_math_26.inputs[1]
            )
            # boolean_math_26.Boolean -> edges_to_face_groups.Boundary Edges
            _surface_blur_postion.links.new(
                boolean_math_26.outputs[0], edges_to_face_groups.inputs[0]
            )
            # edges_to_face_groups.Face Group ID -> face_group_boundaries.Face Group ID
            _surface_blur_postion.links.new(
                edges_to_face_groups.outputs[0], face_group_boundaries.inputs[0]
            )
            # blur_attribute_1.Value -> set_position_001_2.Position
            _surface_blur_postion.links.new(
                blur_attribute_1.outputs[0], set_position_001_2.inputs[2]
            )
            # position_10.Position -> blur_attribute_1.Value
            _surface_blur_postion.links.new(
                position_10.outputs[0], blur_attribute_1.inputs[0]
            )
            # face_group_boundaries.Boundary Edges -> set_position_001_2.Selection
            _surface_blur_postion.links.new(
                face_group_boundaries.outputs[0], set_position_001_2.inputs[1]
            )
            return _surface_blur_postion

        _surface_blur_postion = _surface_blur_postion_node_group()

        # initialize _surface_compute_density_from_points node group
        def _surface_compute_density_from_points_node_group():
            _surface_compute_density_from_points = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".surface_compute_density_from_points"
            )

            _surface_compute_density_from_points.color_tag = "NONE"
            _surface_compute_density_from_points.description = ""

            # _surface_compute_density_from_points interface
            # Socket Result
            result_socket = _surface_compute_density_from_points.interface.new_socket(
                name="Result", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            result_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_23 = _surface_compute_density_from_points.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_23.attribute_domain = "POINT"
            atoms_socket_23.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Scale Radius
            scale_radius_socket = (
                _surface_compute_density_from_points.interface.new_socket(
                    name="Scale Radius", in_out="INPUT", socket_type="NodeSocketFloat"
                )
            )
            scale_radius_socket.subtype = "NONE"
            scale_radius_socket.default_value = 1.0
            scale_radius_socket.min_value = -10000.0
            scale_radius_socket.max_value = 10000.0
            scale_radius_socket.attribute_domain = "POINT"

            # Socket Probe Size
            probe_size_socket = (
                _surface_compute_density_from_points.interface.new_socket(
                    name="Probe Size", in_out="INPUT", socket_type="NodeSocketFloat"
                )
            )
            probe_size_socket.subtype = "NONE"
            probe_size_socket.default_value = 0.0
            probe_size_socket.min_value = 0.0
            probe_size_socket.max_value = 10000.0
            probe_size_socket.attribute_domain = "POINT"

            # initialize _surface_compute_density_from_points nodes
            # node Sample Index.002
            sample_index_002_6 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002_6.name = "Sample Index.002"
            sample_index_002_6.clamp = False
            sample_index_002_6.data_type = "FLOAT_VECTOR"
            sample_index_002_6.domain = "POINT"

            # node Position.001
            position_001_4 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_4.name = "Position.001"

            # node Reroute
            reroute_28 = _surface_compute_density_from_points.nodes.new("NodeReroute")
            reroute_28.name = "Reroute"
            # node Group Output
            group_output_109 = _surface_compute_density_from_points.nodes.new(
                "NodeGroupOutput"
            )
            group_output_109.name = "Group Output"
            group_output_109.is_active_output = True

            # node Compare.001
            compare_001_18 = _surface_compute_density_from_points.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_18.name = "Compare.001"
            compare_001_18.data_type = "FLOAT"
            compare_001_18.mode = "ELEMENT"
            compare_001_18.operation = "GREATER_THAN"
            # B
            compare_001_18.inputs[1].default_value = 0.0

            # node Vector Math.004
            vector_math_004_4 = _surface_compute_density_from_points.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_4.name = "Vector Math.004"
            vector_math_004_4.operation = "DISTANCE"

            # node Math.008
            math_008_1 = _surface_compute_density_from_points.nodes.new(
                "ShaderNodeMath"
            )
            math_008_1.name = "Math.008"
            math_008_1.operation = "SUBTRACT"
            math_008_1.use_clamp = False

            # node Math.009
            math_009_1 = _surface_compute_density_from_points.nodes.new(
                "ShaderNodeMath"
            )
            math_009_1.name = "Math.009"
            math_009_1.operation = "ADD"
            math_009_1.use_clamp = False

            # node Math.001
            math_001_12 = _surface_compute_density_from_points.nodes.new(
                "ShaderNodeMath"
            )
            math_001_12.name = "Math.001"
            math_001_12.operation = "DIVIDE"
            math_001_12.use_clamp = False
            # Value_001
            math_001_12.inputs[1].default_value = 100.0

            # node Sample Index
            sample_index_7 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_7.name = "Sample Index"
            sample_index_7.clamp = False
            sample_index_7.data_type = "FLOAT"
            sample_index_7.domain = "POINT"

            # node Reroute.007
            reroute_007_5 = _surface_compute_density_from_points.nodes.new(
                "NodeReroute"
            )
            reroute_007_5.name = "Reroute.007"
            # node Math.003
            math_003_7 = _surface_compute_density_from_points.nodes.new(
                "ShaderNodeMath"
            )
            math_003_7.name = "Math.003"
            math_003_7.operation = "MULTIPLY"
            math_003_7.use_clamp = False

            # node Sample Index.001
            sample_index_001_7 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_7.name = "Sample Index.001"
            sample_index_001_7.clamp = False
            sample_index_001_7.data_type = "FLOAT"
            sample_index_001_7.domain = "POINT"

            # node Named Attribute
            named_attribute_27 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_27.name = "Named Attribute"
            named_attribute_27.data_type = "FLOAT"
            # Name
            named_attribute_27.inputs[0].default_value = "vdw_radii"

            # node Reroute.002
            reroute_002_14 = _surface_compute_density_from_points.nodes.new(
                "NodeReroute"
            )
            reroute_002_14.name = "Reroute.002"
            # node Sample Index.003
            sample_index_003_5 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_003_5.name = "Sample Index.003"
            sample_index_003_5.clamp = False
            sample_index_003_5.data_type = "FLOAT"
            sample_index_003_5.domain = "POINT"

            # node Reroute.003
            reroute_003_11 = _surface_compute_density_from_points.nodes.new(
                "NodeReroute"
            )
            reroute_003_11.name = "Reroute.003"
            # node Reroute.001
            reroute_001_17 = _surface_compute_density_from_points.nodes.new(
                "NodeReroute"
            )
            reroute_001_17.name = "Reroute.001"
            # node Group Input
            group_input_108 = _surface_compute_density_from_points.nodes.new(
                "NodeGroupInput"
            )
            group_input_108.name = "Group Input"

            # node Sample Nearest
            sample_nearest_1 = _surface_compute_density_from_points.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_1.name = "Sample Nearest"
            sample_nearest_1.domain = "POINT"
            # Sample Position
            sample_nearest_1.inputs[1].default_value = (0.0, 0.0, 0.0)

            # Set locations
            sample_index_002_6.location = (-300.0, -60.0)
            position_001_4.location = (-460.0, -240.0)
            reroute_28.location = (-140.0, -280.0)
            group_output_109.location = (562.0, 220.0)
            compare_001_18.location = (382.0, 220.0)
            vector_math_004_4.location = (-140.0, -60.0)
            math_008_1.location = (162.0, 180.0)
            math_009_1.location = (-58.0, 216.76718139648438)
            math_001_12.location = (-280.0, 380.0)
            sample_index_7.location = (-278.0, 180.0)
            reroute_007_5.location = (-900.0, 60.0)
            math_003_7.location = (-780.0, 60.0)
            sample_index_001_7.location = (-840.0, 300.0)
            named_attribute_27.location = (-940.0, 60.0)
            reroute_002_14.location = (-1034.125244140625, 60.0)
            sample_index_003_5.location = (-940.0, -80.0)
            reroute_003_11.location = (-440.0, 180.0)
            reroute_001_17.location = (-1280.0, 60.0)
            group_input_108.location = (-1560.0, 100.0)
            sample_nearest_1.location = (-1260.0, 220.0)

            # Set dimensions
            sample_index_002_6.width, sample_index_002_6.height = 140.0, 100.0
            position_001_4.width, position_001_4.height = 140.0, 100.0
            reroute_28.width, reroute_28.height = 16.0, 100.0
            group_output_109.width, group_output_109.height = 140.0, 100.0
            compare_001_18.width, compare_001_18.height = 140.0, 100.0
            vector_math_004_4.width, vector_math_004_4.height = 140.0, 100.0
            math_008_1.width, math_008_1.height = 140.0, 100.0
            math_009_1.width, math_009_1.height = 140.0, 100.0
            math_001_12.width, math_001_12.height = 140.0, 100.0
            sample_index_7.width, sample_index_7.height = 140.0, 100.0
            reroute_007_5.width, reroute_007_5.height = 16.0, 100.0
            math_003_7.width, math_003_7.height = 140.0, 100.0
            sample_index_001_7.width, sample_index_001_7.height = 140.0, 100.0
            named_attribute_27.width, named_attribute_27.height = 140.0, 100.0
            reroute_002_14.width, reroute_002_14.height = 16.0, 100.0
            sample_index_003_5.width, sample_index_003_5.height = 140.0, 100.0
            reroute_003_11.width, reroute_003_11.height = 16.0, 100.0
            reroute_001_17.width, reroute_001_17.height = 16.0, 100.0
            group_input_108.width, group_input_108.height = 140.0, 100.0
            sample_nearest_1.width, sample_nearest_1.height = 140.0, 100.0

            # initialize _surface_compute_density_from_points links
            # reroute_003_11.Output -> sample_index_7.Index
            _surface_compute_density_from_points.links.new(
                reroute_003_11.outputs[0], sample_index_7.inputs[2]
            )
            # math_008_1.Value -> compare_001_18.A
            _surface_compute_density_from_points.links.new(
                math_008_1.outputs[0], compare_001_18.inputs[0]
            )
            # sample_index_002_6.Value -> vector_math_004_4.Vector
            _surface_compute_density_from_points.links.new(
                sample_index_002_6.outputs[0], vector_math_004_4.inputs[0]
            )
            # reroute_003_11.Output -> sample_index_002_6.Index
            _surface_compute_density_from_points.links.new(
                reroute_003_11.outputs[0], sample_index_002_6.inputs[2]
            )
            # reroute_28.Output -> vector_math_004_4.Vector
            _surface_compute_density_from_points.links.new(
                reroute_28.outputs[0], vector_math_004_4.inputs[1]
            )
            # reroute_007_5.Output -> sample_index_7.Geometry
            _surface_compute_density_from_points.links.new(
                reroute_007_5.outputs[0], sample_index_7.inputs[0]
            )
            # math_003_7.Value -> sample_index_7.Value
            _surface_compute_density_from_points.links.new(
                math_003_7.outputs[0], sample_index_7.inputs[1]
            )
            # reroute_007_5.Output -> sample_index_002_6.Geometry
            _surface_compute_density_from_points.links.new(
                reroute_007_5.outputs[0], sample_index_002_6.inputs[0]
            )
            # position_001_4.Position -> sample_index_002_6.Value
            _surface_compute_density_from_points.links.new(
                position_001_4.outputs[0], sample_index_002_6.inputs[1]
            )
            # reroute_002_14.Output -> reroute_007_5.Input
            _surface_compute_density_from_points.links.new(
                reroute_002_14.outputs[0], reroute_007_5.inputs[0]
            )
            # compare_001_18.Result -> group_output_109.Result
            _surface_compute_density_from_points.links.new(
                compare_001_18.outputs[0], group_output_109.inputs[0]
            )
            # named_attribute_27.Attribute -> math_003_7.Value
            _surface_compute_density_from_points.links.new(
                named_attribute_27.outputs[0], math_003_7.inputs[0]
            )
            # position_001_4.Position -> reroute_28.Input
            _surface_compute_density_from_points.links.new(
                position_001_4.outputs[0], reroute_28.inputs[0]
            )
            # vector_math_004_4.Value -> math_008_1.Value
            _surface_compute_density_from_points.links.new(
                vector_math_004_4.outputs[1], math_008_1.inputs[1]
            )
            # math_009_1.Value -> math_008_1.Value
            _surface_compute_density_from_points.links.new(
                math_009_1.outputs[0], math_008_1.inputs[0]
            )
            # sample_index_7.Value -> math_009_1.Value
            _surface_compute_density_from_points.links.new(
                sample_index_7.outputs[0], math_009_1.inputs[0]
            )
            # math_001_12.Value -> math_009_1.Value
            _surface_compute_density_from_points.links.new(
                math_001_12.outputs[0], math_009_1.inputs[1]
            )
            # reroute_007_5.Output -> sample_index_001_7.Geometry
            _surface_compute_density_from_points.links.new(
                reroute_007_5.outputs[0], sample_index_001_7.inputs[0]
            )
            # reroute_001_17.Output -> sample_nearest_1.Geometry
            _surface_compute_density_from_points.links.new(
                reroute_001_17.outputs[0], sample_nearest_1.inputs[0]
            )
            # group_input_108.Atoms -> reroute_001_17.Input
            _surface_compute_density_from_points.links.new(
                group_input_108.outputs[0], reroute_001_17.inputs[0]
            )
            # sample_nearest_1.Index -> sample_index_001_7.Index
            _surface_compute_density_from_points.links.new(
                sample_nearest_1.outputs[0], sample_index_001_7.inputs[2]
            )
            # group_input_108.Probe Size -> sample_index_001_7.Value
            _surface_compute_density_from_points.links.new(
                group_input_108.outputs[2], sample_index_001_7.inputs[1]
            )
            # sample_index_001_7.Value -> math_001_12.Value
            _surface_compute_density_from_points.links.new(
                sample_index_001_7.outputs[0], math_001_12.inputs[0]
            )
            # sample_nearest_1.Index -> sample_index_003_5.Index
            _surface_compute_density_from_points.links.new(
                sample_nearest_1.outputs[0], sample_index_003_5.inputs[2]
            )
            # group_input_108.Scale Radius -> sample_index_003_5.Value
            _surface_compute_density_from_points.links.new(
                group_input_108.outputs[1], sample_index_003_5.inputs[1]
            )
            # sample_index_003_5.Value -> math_003_7.Value
            _surface_compute_density_from_points.links.new(
                sample_index_003_5.outputs[0], math_003_7.inputs[1]
            )
            # reroute_001_17.Output -> reroute_002_14.Input
            _surface_compute_density_from_points.links.new(
                reroute_001_17.outputs[0], reroute_002_14.inputs[0]
            )
            # reroute_002_14.Output -> sample_index_003_5.Geometry
            _surface_compute_density_from_points.links.new(
                reroute_002_14.outputs[0], sample_index_003_5.inputs[0]
            )
            # sample_nearest_1.Index -> reroute_003_11.Input
            _surface_compute_density_from_points.links.new(
                sample_nearest_1.outputs[0], reroute_003_11.inputs[0]
            )
            return _surface_compute_density_from_points

        _surface_compute_density_from_points = (
            _surface_compute_density_from_points_node_group()
        )

        # initialize _utils_bounding_box node group
        def _utils_bounding_box_node_group():
            _utils_bounding_box = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".utils_bounding_box"
            )

            _utils_bounding_box.color_tag = "NONE"
            _utils_bounding_box.description = ""

            # _utils_bounding_box interface
            # Socket Min
            min_socket = _utils_bounding_box.interface.new_socket(
                name="Min", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            min_socket.subtype = "NONE"
            min_socket.default_value = (0.0, 0.0, 0.0)
            min_socket.min_value = -3.4028234663852886e38
            min_socket.max_value = 3.4028234663852886e38
            min_socket.attribute_domain = "POINT"

            # Socket Max
            max_socket = _utils_bounding_box.interface.new_socket(
                name="Max", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            max_socket.subtype = "NONE"
            max_socket.default_value = (0.0, 0.0, 0.0)
            max_socket.min_value = -3.4028234663852886e38
            max_socket.max_value = 3.4028234663852886e38
            max_socket.attribute_domain = "POINT"

            # Socket X
            x_socket = _utils_bounding_box.interface.new_socket(
                name="X", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            x_socket.subtype = "NONE"
            x_socket.default_value = 0
            x_socket.min_value = -2147483648
            x_socket.max_value = 2147483647
            x_socket.attribute_domain = "POINT"

            # Socket Y
            y_socket = _utils_bounding_box.interface.new_socket(
                name="Y", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            y_socket.subtype = "NONE"
            y_socket.default_value = 0
            y_socket.min_value = -2147483648
            y_socket.max_value = 2147483647
            y_socket.attribute_domain = "POINT"

            # Socket Z
            z_socket = _utils_bounding_box.interface.new_socket(
                name="Z", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            z_socket.subtype = "NONE"
            z_socket.default_value = 0
            z_socket.min_value = -2147483648
            z_socket.max_value = 2147483647
            z_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_20 = _utils_bounding_box.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_20.attribute_domain = "POINT"

            # Socket Subdivisions
            subdivisions_socket_2 = _utils_bounding_box.interface.new_socket(
                name="Subdivisions", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            subdivisions_socket_2.subtype = "NONE"
            subdivisions_socket_2.default_value = 16.700000762939453
            subdivisions_socket_2.min_value = -10000.0
            subdivisions_socket_2.max_value = 10000.0
            subdivisions_socket_2.attribute_domain = "POINT"

            # initialize _utils_bounding_box nodes
            # node Vector Math.002
            vector_math_002_6 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_002_6.name = "Vector Math.002"
            vector_math_002_6.operation = "SUBTRACT"

            # node Vector Math.003
            vector_math_003_4 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_003_4.name = "Vector Math.003"
            vector_math_003_4.operation = "SCALE"

            # node Reroute
            reroute_29 = _utils_bounding_box.nodes.new("NodeReroute")
            reroute_29.name = "Reroute"
            # node Reroute.002
            reroute_002_15 = _utils_bounding_box.nodes.new("NodeReroute")
            reroute_002_15.name = "Reroute.002"
            # node Group Output
            group_output_110 = _utils_bounding_box.nodes.new("NodeGroupOutput")
            group_output_110.name = "Group Output"
            group_output_110.is_active_output = True

            # node Separate XYZ
            separate_xyz_1 = _utils_bounding_box.nodes.new("ShaderNodeSeparateXYZ")
            separate_xyz_1.name = "Separate XYZ"

            # node Math
            math_25 = _utils_bounding_box.nodes.new("ShaderNodeMath")
            math_25.name = "Math"
            math_25.hide = True
            math_25.operation = "MAXIMUM"
            math_25.use_clamp = False
            # Value_001
            math_25.inputs[1].default_value = 2.0

            # node Math.001
            math_001_13 = _utils_bounding_box.nodes.new("ShaderNodeMath")
            math_001_13.name = "Math.001"
            math_001_13.hide = True
            math_001_13.operation = "MAXIMUM"
            math_001_13.use_clamp = False
            # Value_001
            math_001_13.inputs[1].default_value = 2.0

            # node Math.002
            math_002_10 = _utils_bounding_box.nodes.new("ShaderNodeMath")
            math_002_10.name = "Math.002"
            math_002_10.hide = True
            math_002_10.operation = "MAXIMUM"
            math_002_10.use_clamp = False
            # Value_001
            math_002_10.inputs[1].default_value = 2.0

            # node Group Input
            group_input_109 = _utils_bounding_box.nodes.new("NodeGroupInput")
            group_input_109.name = "Group Input"

            # node Bounding Box
            bounding_box_3 = _utils_bounding_box.nodes.new("GeometryNodeBoundBox")
            bounding_box_3.name = "Bounding Box"

            # node Value
            value_3 = _utils_bounding_box.nodes.new("ShaderNodeValue")
            value_3.name = "Value"

            value_3.outputs[0].default_value = 0.009999999776482582
            # node Reroute.001
            reroute_001_18 = _utils_bounding_box.nodes.new("NodeReroute")
            reroute_001_18.name = "Reroute.001"
            # node Vector Math
            vector_math_21 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_21.name = "Vector Math"
            vector_math_21.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_14 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_001_14.name = "Vector Math.001"
            vector_math_001_14.operation = "ADD"

            # node Vector Math.004
            vector_math_004_5 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_004_5.name = "Vector Math.004"
            vector_math_004_5.operation = "SNAP"

            # node Vector Math.005
            vector_math_005_2 = _utils_bounding_box.nodes.new("ShaderNodeVectorMath")
            vector_math_005_2.name = "Vector Math.005"
            vector_math_005_2.operation = "SNAP"

            # node Math.003
            math_003_8 = _utils_bounding_box.nodes.new("ShaderNodeMath")
            math_003_8.name = "Math.003"
            math_003_8.operation = "MULTIPLY"
            math_003_8.use_clamp = False
            # Value_001
            math_003_8.inputs[1].default_value = 2.0

            # Set locations
            vector_math_002_6.location = (-36.8055419921875, 112.27713012695312)
            vector_math_003_4.location = (123.1944580078125, 112.27713012695312)
            reroute_29.location = (40.0, 160.0)
            reroute_002_15.location = (60.0, 140.0)
            group_output_110.location = (700.0, 200.0)
            separate_xyz_1.location = (283.1944580078125, 112.27713012695312)
            math_25.location = (480.0, 120.0)
            math_001_13.location = (480.0, 80.0)
            math_002_10.location = (480.0, 40.0)
            group_input_109.location = (-1065.6466064453125, 104.66636657714844)
            bounding_box_3.location = (-885.6466064453125, 44.6663703918457)
            value_3.location = (-1025.04443359375, -182.63922119140625)
            reroute_001_18.location = (-439.06280517578125, -225.71304321289062)
            vector_math_21.location = (-313.41741943359375, 140.0)
            vector_math_001_14.location = (-313.41741943359375, 0.0)
            vector_math_004_5.location = (-564.7015380859375, 104.61347961425781)
            vector_math_005_2.location = (-563.52734375, -39.964500427246094)
            math_003_8.location = (-640.0, -200.0)

            # Set dimensions
            vector_math_002_6.width, vector_math_002_6.height = 140.0, 100.0
            vector_math_003_4.width, vector_math_003_4.height = 140.0, 100.0
            reroute_29.width, reroute_29.height = 16.0, 100.0
            reroute_002_15.width, reroute_002_15.height = 16.0, 100.0
            group_output_110.width, group_output_110.height = 140.0, 100.0
            separate_xyz_1.width, separate_xyz_1.height = 116.41741943359375, 100.0
            math_25.width, math_25.height = 140.0, 100.0
            math_001_13.width, math_001_13.height = 140.0, 100.0
            math_002_10.width, math_002_10.height = 140.0, 100.0
            group_input_109.width, group_input_109.height = 140.0, 100.0
            bounding_box_3.width, bounding_box_3.height = 140.0, 100.0
            value_3.width, value_3.height = 140.0, 100.0
            reroute_001_18.width, reroute_001_18.height = 16.0, 100.0
            vector_math_21.width, vector_math_21.height = 140.0, 100.0
            vector_math_001_14.width, vector_math_001_14.height = 140.0, 100.0
            vector_math_004_5.width, vector_math_004_5.height = 140.0, 100.0
            vector_math_005_2.width, vector_math_005_2.height = 140.0, 100.0
            math_003_8.width, math_003_8.height = 140.0, 100.0

            # initialize _utils_bounding_box links
            # vector_math_002_6.Vector -> vector_math_003_4.Vector
            _utils_bounding_box.links.new(
                vector_math_002_6.outputs[0], vector_math_003_4.inputs[0]
            )
            # vector_math_001_14.Vector -> vector_math_002_6.Vector
            _utils_bounding_box.links.new(
                vector_math_001_14.outputs[0], vector_math_002_6.inputs[0]
            )
            # vector_math_003_4.Vector -> separate_xyz_1.Vector
            _utils_bounding_box.links.new(
                vector_math_003_4.outputs[0], separate_xyz_1.inputs[0]
            )
            # reroute_001_18.Output -> vector_math_21.Vector
            _utils_bounding_box.links.new(
                reroute_001_18.outputs[0], vector_math_21.inputs[1]
            )
            # vector_math_21.Vector -> vector_math_002_6.Vector
            _utils_bounding_box.links.new(
                vector_math_21.outputs[0], vector_math_002_6.inputs[1]
            )
            # reroute_001_18.Output -> vector_math_001_14.Vector
            _utils_bounding_box.links.new(
                reroute_001_18.outputs[0], vector_math_001_14.inputs[1]
            )
            # group_input_109.Subdivisions -> vector_math_003_4.Scale
            _utils_bounding_box.links.new(
                group_input_109.outputs[1], vector_math_003_4.inputs[3]
            )
            # group_input_109.Geometry -> bounding_box_3.Geometry
            _utils_bounding_box.links.new(
                group_input_109.outputs[0], bounding_box_3.inputs[0]
            )
            # reroute_29.Output -> group_output_110.Min
            _utils_bounding_box.links.new(
                reroute_29.outputs[0], group_output_110.inputs[0]
            )
            # reroute_002_15.Output -> group_output_110.Max
            _utils_bounding_box.links.new(
                reroute_002_15.outputs[0], group_output_110.inputs[1]
            )
            # math_001_13.Value -> group_output_110.Y
            _utils_bounding_box.links.new(
                math_001_13.outputs[0], group_output_110.inputs[3]
            )
            # math_002_10.Value -> group_output_110.Z
            _utils_bounding_box.links.new(
                math_002_10.outputs[0], group_output_110.inputs[4]
            )
            # vector_math_21.Vector -> reroute_29.Input
            _utils_bounding_box.links.new(
                vector_math_21.outputs[0], reroute_29.inputs[0]
            )
            # vector_math_001_14.Vector -> reroute_002_15.Input
            _utils_bounding_box.links.new(
                vector_math_001_14.outputs[0], reroute_002_15.inputs[0]
            )
            # separate_xyz_1.X -> math_25.Value
            _utils_bounding_box.links.new(separate_xyz_1.outputs[0], math_25.inputs[0])
            # math_25.Value -> group_output_110.X
            _utils_bounding_box.links.new(
                math_25.outputs[0], group_output_110.inputs[2]
            )
            # separate_xyz_1.Y -> math_001_13.Value
            _utils_bounding_box.links.new(
                separate_xyz_1.outputs[1], math_001_13.inputs[0]
            )
            # separate_xyz_1.Z -> math_002_10.Value
            _utils_bounding_box.links.new(
                separate_xyz_1.outputs[2], math_002_10.inputs[0]
            )
            # value_3.Value -> vector_math_004_5.Vector
            _utils_bounding_box.links.new(
                value_3.outputs[0], vector_math_004_5.inputs[1]
            )
            # bounding_box_3.Min -> vector_math_004_5.Vector
            _utils_bounding_box.links.new(
                bounding_box_3.outputs[1], vector_math_004_5.inputs[0]
            )
            # vector_math_004_5.Vector -> vector_math_21.Vector
            _utils_bounding_box.links.new(
                vector_math_004_5.outputs[0], vector_math_21.inputs[0]
            )
            # vector_math_005_2.Vector -> vector_math_001_14.Vector
            _utils_bounding_box.links.new(
                vector_math_005_2.outputs[0], vector_math_001_14.inputs[0]
            )
            # bounding_box_3.Max -> vector_math_005_2.Vector
            _utils_bounding_box.links.new(
                bounding_box_3.outputs[2], vector_math_005_2.inputs[0]
            )
            # value_3.Value -> math_003_8.Value
            _utils_bounding_box.links.new(value_3.outputs[0], math_003_8.inputs[0])
            # value_3.Value -> vector_math_005_2.Vector
            _utils_bounding_box.links.new(
                value_3.outputs[0], vector_math_005_2.inputs[1]
            )
            # math_003_8.Value -> reroute_001_18.Input
            _utils_bounding_box.links.new(
                math_003_8.outputs[0], reroute_001_18.inputs[0]
            )
            return _utils_bounding_box

        _utils_bounding_box = _utils_bounding_box_node_group()

        # initialize _mn_utils_style_surface_old node group
        def _mn_utils_style_surface_old_node_group():
            _mn_utils_style_surface_old = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_surface_old"
            )

            _mn_utils_style_surface_old.color_tag = "NONE"
            _mn_utils_style_surface_old.description = ""

            _mn_utils_style_surface_old.is_modifier = True

            # _mn_utils_style_surface_old interface
            # Socket Geometry
            geometry_socket_21 = _mn_utils_style_surface_old.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_21.attribute_domain = "POINT"

            # Socket Volume
            volume_socket_2 = _mn_utils_style_surface_old.interface.new_socket(
                name="Volume", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            volume_socket_2.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_24 = _mn_utils_style_surface_old.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_24.attribute_domain = "POINT"
            atoms_socket_24.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_37 = _mn_utils_style_surface_old.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_37.attribute_domain = "POINT"
            selection_socket_37.hide_value = True
            selection_socket_37.description = "Selection of atoms to apply this node to"

            # Socket Quality
            quality_socket_3 = _mn_utils_style_surface_old.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_3.subtype = "NONE"
            quality_socket_3.default_value = 12
            quality_socket_3.min_value = 1
            quality_socket_3.max_value = 15
            quality_socket_3.attribute_domain = "POINT"

            # Socket Scale Radii
            scale_radii_socket_2 = _mn_utils_style_surface_old.interface.new_socket(
                name="Scale Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_radii_socket_2.subtype = "NONE"
            scale_radii_socket_2.default_value = 1.0
            scale_radii_socket_2.min_value = 0.0
            scale_radii_socket_2.max_value = 10.0
            scale_radii_socket_2.attribute_domain = "POINT"

            # Socket Probe Size
            probe_size_socket_1 = _mn_utils_style_surface_old.interface.new_socket(
                name="Probe Size", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            probe_size_socket_1.subtype = "NONE"
            probe_size_socket_1.default_value = 0.6000000238418579
            probe_size_socket_1.min_value = 0.0
            probe_size_socket_1.max_value = 10000.0
            probe_size_socket_1.attribute_domain = "POINT"

            # Socket Surface Smoothing
            surface_smoothing_socket = _mn_utils_style_surface_old.interface.new_socket(
                name="Surface Smoothing", in_out="INPUT", socket_type="NodeSocketInt"
            )
            surface_smoothing_socket.subtype = "NONE"
            surface_smoothing_socket.default_value = 2
            surface_smoothing_socket.min_value = 0
            surface_smoothing_socket.max_value = 20
            surface_smoothing_socket.attribute_domain = "POINT"

            # Socket Color by CA
            color_by_ca_socket = _mn_utils_style_surface_old.interface.new_socket(
                name="Color by CA", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_by_ca_socket.attribute_domain = "POINT"

            # Socket Interpolate Color
            interpolate_color_socket_2 = (
                _mn_utils_style_surface_old.interface.new_socket(
                    name="Interpolate Color",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                )
            )
            interpolate_color_socket_2.subtype = "NONE"
            interpolate_color_socket_2.default_value = 1
            interpolate_color_socket_2.min_value = 0
            interpolate_color_socket_2.max_value = 20
            interpolate_color_socket_2.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_8 = _mn_utils_style_surface_old.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_8.attribute_domain = "POINT"
            shade_smooth_socket_8.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_13 = _mn_utils_style_surface_old.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_13.attribute_domain = "POINT"
            material_socket_13.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize _mn_utils_style_surface_old nodes
            # node Frame.002
            frame_002_3 = _mn_utils_style_surface_old.nodes.new("NodeFrame")
            frame_002_3.label = "Generate Surface from Measurements"
            frame_002_3.name = "Frame.002"
            frame_002_3.label_size = 20
            frame_002_3.shrink = True

            # node Reroute.009
            reroute_009_4 = _mn_utils_style_surface_old.nodes.new("NodeReroute")
            reroute_009_4.name = "Reroute.009"
            # node Group Output
            group_output_111 = _mn_utils_style_surface_old.nodes.new("NodeGroupOutput")
            group_output_111.name = "Group Output"
            group_output_111.is_active_output = True

            # node Math.001
            math_001_14 = _mn_utils_style_surface_old.nodes.new("ShaderNodeMath")
            math_001_14.label = "x * 10"
            math_001_14.name = "Math.001"
            math_001_14.operation = "MULTIPLY"
            math_001_14.use_clamp = False
            # Value_001
            math_001_14.inputs[1].default_value = 10.0

            # node Reroute.001
            reroute_001_19 = _mn_utils_style_surface_old.nodes.new("NodeReroute")
            reroute_001_19.name = "Reroute.001"
            # node Set Material
            set_material_8 = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_8.name = "Set Material"
            # Selection
            set_material_8.inputs[1].default_value = True

            # node Group Input.002
            group_input_002_7 = _mn_utils_style_surface_old.nodes.new("NodeGroupInput")
            group_input_002_7.name = "Group Input.002"

            # node Set Shade Smooth
            set_shade_smooth_6 = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_6.name = "Set Shade Smooth"
            set_shade_smooth_6.domain = "FACE"
            # Selection
            set_shade_smooth_6.inputs[1].default_value = True

            # node Reroute.006
            reroute_006_6 = _mn_utils_style_surface_old.nodes.new("NodeReroute")
            reroute_006_6.name = "Reroute.006"
            # node Reroute.004
            reroute_004_7 = _mn_utils_style_surface_old.nodes.new("NodeReroute")
            reroute_004_7.name = "Reroute.004"
            # node Reroute.005
            reroute_005_7 = _mn_utils_style_surface_old.nodes.new("NodeReroute")
            reroute_005_7.name = "Reroute.005"
            # node Group Input
            group_input_110 = _mn_utils_style_surface_old.nodes.new("NodeGroupInput")
            group_input_110.name = "Group Input"

            # node Volume Cube
            volume_cube = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeVolumeCube"
            )
            volume_cube.name = "Volume Cube"
            # Background
            volume_cube.inputs[1].default_value = 0.0

            # node Separate Geometry
            separate_geometry_15 = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_15.name = "Separate Geometry"
            separate_geometry_15.domain = "POINT"

            # node Mesh to Points
            mesh_to_points_3 = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeMeshToPoints"
            )
            mesh_to_points_3.name = "Mesh to Points"
            mesh_to_points_3.mode = "VERTICES"
            # Selection
            mesh_to_points_3.inputs[1].default_value = True
            # Position
            mesh_to_points_3.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Radius
            mesh_to_points_3.inputs[3].default_value = 0.05000000074505806

            # node Group.001
            group_001_19 = _mn_utils_style_surface_old.nodes.new("GeometryNodeGroup")
            group_001_19.name = "Group.001"
            group_001_19.node_tree = _surface_blur_color

            # node Group.002
            group_002_10 = _mn_utils_style_surface_old.nodes.new("GeometryNodeGroup")
            group_002_10.name = "Group.002"
            group_002_10.node_tree = _surface_sample_color

            # node Group.003
            group_003_4 = _mn_utils_style_surface_old.nodes.new("GeometryNodeGroup")
            group_003_4.name = "Group.003"
            group_003_4.node_tree = _surface_blur_postion

            # node Volume to Mesh
            volume_to_mesh_2 = _mn_utils_style_surface_old.nodes.new(
                "GeometryNodeVolumeToMesh"
            )
            volume_to_mesh_2.name = "Volume to Mesh"
            volume_to_mesh_2.resolution_mode = "GRID"
            # Threshold
            volume_to_mesh_2.inputs[3].default_value = 0.10000000149011612
            # Adaptivity
            volume_to_mesh_2.inputs[4].default_value = 0.0

            # node Group.005
            group_005_5 = _mn_utils_style_surface_old.nodes.new("GeometryNodeGroup")
            group_005_5.name = "Group.005"
            group_005_5.node_tree = _surface_compute_density_from_points

            # node Group.004
            group_004_4 = _mn_utils_style_surface_old.nodes.new("GeometryNodeGroup")
            group_004_4.name = "Group.004"
            group_004_4.node_tree = _utils_bounding_box

            # Set parents
            volume_cube.parent = frame_002_3
            volume_to_mesh_2.parent = frame_002_3

            # Set locations
            frame_002_3.location = (670.7268676757812, 112.1966552734375)
            reroute_009_4.location = (3420.0, 420.0)
            group_output_111.location = (3600.0, 240.0)
            math_001_14.location = (1080.0, 180.0)
            reroute_001_19.location = (1000.0, 380.0)
            set_material_8.location = (3300.0, 360.0)
            group_input_002_7.location = (1920.0, 240.0)
            set_shade_smooth_6.location = (2320.0, 360.0)
            reroute_006_6.location = (3240.0, 0.0)
            reroute_004_7.location = (980.0, -20.0)
            reroute_005_7.location = (2660.0, -60.0)
            group_input_110.location = (300.0, 320.0)
            volume_cube.location = (890.0, 370.0)
            separate_geometry_15.location = (580.0, 420.0)
            mesh_to_points_3.location = (740.0, 420.0)
            group_001_19.location = (2820.0, 340.0)
            group_002_10.location = (2820.0, 160.0)
            group_003_4.location = (2520.0, 360.0)
            volume_to_mesh_2.location = (1069.273193359375, 307.8033447265625)
            group_005_5.location = (1080.0, 580.0)
            group_004_4.location = (1080.0, 420.0)

            # Set dimensions
            frame_002_3.width, frame_002_3.height = 409.50006103515625, 277.0
            reroute_009_4.width, reroute_009_4.height = 16.0, 100.0
            group_output_111.width, group_output_111.height = 140.0, 100.0
            math_001_14.width, math_001_14.height = 140.0, 100.0
            reroute_001_19.width, reroute_001_19.height = 16.0, 100.0
            set_material_8.width, set_material_8.height = 140.0, 100.0
            group_input_002_7.width, group_input_002_7.height = (
                154.36306762695312,
                100.0,
            )
            set_shade_smooth_6.width, set_shade_smooth_6.height = 140.0, 100.0
            reroute_006_6.width, reroute_006_6.height = 16.0, 100.0
            reroute_004_7.width, reroute_004_7.height = 16.0, 100.0
            reroute_005_7.width, reroute_005_7.height = 16.0, 100.0
            group_input_110.width, group_input_110.height = 140.0, 100.0
            volume_cube.width, volume_cube.height = 140.0, 100.0
            separate_geometry_15.width, separate_geometry_15.height = 140.0, 100.0
            mesh_to_points_3.width, mesh_to_points_3.height = 140.0, 100.0
            group_001_19.width, group_001_19.height = 400.0, 100.0
            group_002_10.width, group_002_10.height = 400.0, 100.0
            group_003_4.width, group_003_4.height = 271.52978515625, 100.0
            volume_to_mesh_2.width, volume_to_mesh_2.height = 170.0, 100.0
            group_005_5.width, group_005_5.height = 400.0, 100.0
            group_004_4.width, group_004_4.height = 400.0, 100.0

            # initialize _mn_utils_style_surface_old links
            # volume_cube.Volume -> volume_to_mesh_2.Volume
            _mn_utils_style_surface_old.links.new(
                volume_cube.outputs[0], volume_to_mesh_2.inputs[0]
            )
            # group_004_4.Min -> volume_cube.Min
            _mn_utils_style_surface_old.links.new(
                group_004_4.outputs[0], volume_cube.inputs[2]
            )
            # group_004_4.Max -> volume_cube.Max
            _mn_utils_style_surface_old.links.new(
                group_004_4.outputs[1], volume_cube.inputs[3]
            )
            # group_004_4.X -> volume_cube.Resolution X
            _mn_utils_style_surface_old.links.new(
                group_004_4.outputs[2], volume_cube.inputs[4]
            )
            # group_004_4.Y -> volume_cube.Resolution Y
            _mn_utils_style_surface_old.links.new(
                group_004_4.outputs[3], volume_cube.inputs[5]
            )
            # group_004_4.Z -> volume_cube.Resolution Z
            _mn_utils_style_surface_old.links.new(
                group_004_4.outputs[4], volume_cube.inputs[6]
            )
            # reroute_006_6.Output -> set_material_8.Material
            _mn_utils_style_surface_old.links.new(
                reroute_006_6.outputs[0], set_material_8.inputs[2]
            )
            # mesh_to_points_3.Points -> reroute_004_7.Input
            _mn_utils_style_surface_old.links.new(
                mesh_to_points_3.outputs[0], reroute_004_7.inputs[0]
            )
            # set_material_8.Geometry -> group_output_111.Geometry
            _mn_utils_style_surface_old.links.new(
                set_material_8.outputs[0], group_output_111.inputs[0]
            )
            # reroute_009_4.Output -> group_output_111.Volume
            _mn_utils_style_surface_old.links.new(
                reroute_009_4.outputs[0], group_output_111.inputs[1]
            )
            # separate_geometry_15.Selection -> mesh_to_points_3.Mesh
            _mn_utils_style_surface_old.links.new(
                separate_geometry_15.outputs[0], mesh_to_points_3.inputs[0]
            )
            # group_001_19.Geometry -> set_material_8.Geometry
            _mn_utils_style_surface_old.links.new(
                group_001_19.outputs[0], set_material_8.inputs[0]
            )
            # group_002_10.Color -> group_001_19.Color
            _mn_utils_style_surface_old.links.new(
                group_002_10.outputs[0], group_001_19.inputs[2]
            )
            # group_003_4.Geometry -> group_001_19.Geometry
            _mn_utils_style_surface_old.links.new(
                group_003_4.outputs[0], group_001_19.inputs[0]
            )
            # group_input_002_7.Color by CA -> group_002_10.Sample CA
            _mn_utils_style_surface_old.links.new(
                group_input_002_7.outputs[6], group_002_10.inputs[1]
            )
            # reroute_005_7.Output -> group_002_10.Atoms
            _mn_utils_style_surface_old.links.new(
                reroute_005_7.outputs[0], group_002_10.inputs[0]
            )
            # set_shade_smooth_6.Geometry -> group_003_4.Geometry
            _mn_utils_style_surface_old.links.new(
                set_shade_smooth_6.outputs[0], group_003_4.inputs[0]
            )
            # group_input_002_7.Interpolate Color -> group_001_19.Blur Iterations
            _mn_utils_style_surface_old.links.new(
                group_input_002_7.outputs[7], group_001_19.inputs[1]
            )
            # group_input_002_7.Surface Smoothing -> group_003_4.Iterations
            _mn_utils_style_surface_old.links.new(
                group_input_002_7.outputs[5], group_003_4.inputs[1]
            )
            # reroute_004_7.Output -> reroute_005_7.Input
            _mn_utils_style_surface_old.links.new(
                reroute_004_7.outputs[0], reroute_005_7.inputs[0]
            )
            # group_input_002_7.Material -> reroute_006_6.Input
            _mn_utils_style_surface_old.links.new(
                group_input_002_7.outputs[9], reroute_006_6.inputs[0]
            )
            # group_input_002_7.Shade Smooth -> set_shade_smooth_6.Shade Smooth
            _mn_utils_style_surface_old.links.new(
                group_input_002_7.outputs[8], set_shade_smooth_6.inputs[2]
            )
            # math_001_14.Value -> group_004_4.Subdivisions
            _mn_utils_style_surface_old.links.new(
                math_001_14.outputs[0], group_004_4.inputs[1]
            )
            # reroute_001_19.Output -> group_004_4.Geometry
            _mn_utils_style_surface_old.links.new(
                reroute_001_19.outputs[0], group_004_4.inputs[0]
            )
            # reroute_001_19.Output -> group_005_5.Atoms
            _mn_utils_style_surface_old.links.new(
                reroute_001_19.outputs[0], group_005_5.inputs[0]
            )
            # group_input_110.Scale Radii -> group_005_5.Scale Radius
            _mn_utils_style_surface_old.links.new(
                group_input_110.outputs[3], group_005_5.inputs[1]
            )
            # group_input_110.Atoms -> separate_geometry_15.Geometry
            _mn_utils_style_surface_old.links.new(
                group_input_110.outputs[0], separate_geometry_15.inputs[0]
            )
            # group_input_110.Selection -> separate_geometry_15.Selection
            _mn_utils_style_surface_old.links.new(
                group_input_110.outputs[1], separate_geometry_15.inputs[1]
            )
            # mesh_to_points_3.Points -> reroute_001_19.Input
            _mn_utils_style_surface_old.links.new(
                mesh_to_points_3.outputs[0], reroute_001_19.inputs[0]
            )
            # group_input_110.Quality -> math_001_14.Value
            _mn_utils_style_surface_old.links.new(
                group_input_110.outputs[2], math_001_14.inputs[0]
            )
            # group_input_110.Probe Size -> group_005_5.Probe Size
            _mn_utils_style_surface_old.links.new(
                group_input_110.outputs[4], group_005_5.inputs[2]
            )
            # volume_to_mesh_2.Mesh -> set_shade_smooth_6.Geometry
            _mn_utils_style_surface_old.links.new(
                volume_to_mesh_2.outputs[0], set_shade_smooth_6.inputs[0]
            )
            # volume_cube.Volume -> reroute_009_4.Input
            _mn_utils_style_surface_old.links.new(
                volume_cube.outputs[0], reroute_009_4.inputs[0]
            )
            # group_005_5.Result -> volume_cube.Density
            _mn_utils_style_surface_old.links.new(
                group_005_5.outputs[0], volume_cube.inputs[0]
            )
            return _mn_utils_style_surface_old

        _mn_utils_style_surface_old = _mn_utils_style_surface_old_node_group()

        # initialize mn_dna_style_surface node group
        def mn_dna_style_surface_node_group():
            mn_dna_style_surface = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_style_surface"
            )

            mn_dna_style_surface.color_tag = "NONE"
            mn_dna_style_surface.description = ""

            mn_dna_style_surface.is_modifier = True

            # mn_dna_style_surface interface
            # Socket Bases
            bases_socket_5 = mn_dna_style_surface.interface.new_socket(
                name="Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_5.attribute_domain = "POINT"

            # Socket Bases
            bases_socket_6 = mn_dna_style_surface.interface.new_socket(
                name="Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_6.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_38 = mn_dna_style_surface.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_38.attribute_domain = "POINT"
            selection_socket_38.hide_value = True
            selection_socket_38.description = "Selection of atoms to apply this node to"

            # Socket Resolution
            resolution_socket_1 = mn_dna_style_surface.interface.new_socket(
                name="Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            resolution_socket_1.subtype = "NONE"
            resolution_socket_1.default_value = 8
            resolution_socket_1.min_value = 1
            resolution_socket_1.max_value = 15
            resolution_socket_1.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_4 = mn_dna_style_surface.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_4.subtype = "NONE"
            radius_socket_4.default_value = 1.0
            radius_socket_4.min_value = 0.0
            radius_socket_4.max_value = 10.0
            radius_socket_4.attribute_domain = "POINT"

            # Socket Probe Size
            probe_size_socket_2 = mn_dna_style_surface.interface.new_socket(
                name="Probe Size", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            probe_size_socket_2.subtype = "NONE"
            probe_size_socket_2.default_value = 0.0
            probe_size_socket_2.min_value = 0.0
            probe_size_socket_2.max_value = 10000.0
            probe_size_socket_2.attribute_domain = "POINT"

            # Socket Subdivision Surface
            subdivision_surface_socket = mn_dna_style_surface.interface.new_socket(
                name="Subdivision Surface", in_out="INPUT", socket_type="NodeSocketInt"
            )
            subdivision_surface_socket.subtype = "NONE"
            subdivision_surface_socket.default_value = 0
            subdivision_surface_socket.min_value = 0
            subdivision_surface_socket.max_value = 6
            subdivision_surface_socket.attribute_domain = "POINT"

            # Socket Color by CA
            color_by_ca_socket_1 = mn_dna_style_surface.interface.new_socket(
                name="Color by CA", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_by_ca_socket_1.attribute_domain = "POINT"

            # Socket Interpolate Color
            interpolate_color_socket_3 = mn_dna_style_surface.interface.new_socket(
                name="Interpolate Color", in_out="INPUT", socket_type="NodeSocketInt"
            )
            interpolate_color_socket_3.subtype = "NONE"
            interpolate_color_socket_3.default_value = 0
            interpolate_color_socket_3.min_value = -2147483648
            interpolate_color_socket_3.max_value = 2147483647
            interpolate_color_socket_3.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_9 = mn_dna_style_surface.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_9.attribute_domain = "POINT"
            shade_smooth_socket_9.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_14 = mn_dna_style_surface.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_14.attribute_domain = "POINT"
            material_socket_14.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize mn_dna_style_surface nodes
            # node Named Attribute.002
            named_attribute_002_14 = mn_dna_style_surface.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_14.name = "Named Attribute.002"
            named_attribute_002_14.data_type = "INT"
            # Name
            named_attribute_002_14.inputs[0].default_value = "res_name"

            # node Compare.001
            compare_001_19 = mn_dna_style_surface.nodes.new("FunctionNodeCompare")
            compare_001_19.name = "Compare.001"
            compare_001_19.data_type = "INT"
            compare_001_19.mode = "ELEMENT"
            compare_001_19.operation = "EQUAL"
            # B_INT
            compare_001_19.inputs[3].default_value = 30

            # node Separate Geometry.001
            separate_geometry_001_8 = mn_dna_style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_8.name = "Separate Geometry.001"
            separate_geometry_001_8.domain = "POINT"

            # node Compare.002
            compare_002_11 = mn_dna_style_surface.nodes.new("FunctionNodeCompare")
            compare_002_11.name = "Compare.002"
            compare_002_11.data_type = "INT"
            compare_002_11.mode = "ELEMENT"
            compare_002_11.operation = "EQUAL"
            # B_INT
            compare_002_11.inputs[3].default_value = 31

            # node Compare.003
            compare_003_11 = mn_dna_style_surface.nodes.new("FunctionNodeCompare")
            compare_003_11.name = "Compare.003"
            compare_003_11.data_type = "INT"
            compare_003_11.mode = "ELEMENT"
            compare_003_11.operation = "EQUAL"
            # B_INT
            compare_003_11.inputs[3].default_value = 32

            # node Compare.004
            compare_004_7 = mn_dna_style_surface.nodes.new("FunctionNodeCompare")
            compare_004_7.name = "Compare.004"
            compare_004_7.data_type = "INT"
            compare_004_7.mode = "ELEMENT"
            compare_004_7.operation = "EQUAL"
            # B_INT
            compare_004_7.inputs[3].default_value = 33

            # node Realize Instances
            realize_instances_7 = mn_dna_style_surface.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_7.name = "Realize Instances"
            # Selection
            realize_instances_7.inputs[1].default_value = True
            # Realize All
            realize_instances_7.inputs[2].default_value = True
            # Depth
            realize_instances_7.inputs[3].default_value = 0

            # node Separate Geometry.002
            separate_geometry_002_3 = mn_dna_style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_3.name = "Separate Geometry.002"
            separate_geometry_002_3.domain = "POINT"

            # node Group Input
            group_input_111 = mn_dna_style_surface.nodes.new("NodeGroupInput")
            group_input_111.name = "Group Input"

            # node Separate Geometry.003
            separate_geometry_003_3 = mn_dna_style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003_3.name = "Separate Geometry.003"
            separate_geometry_003_3.domain = "POINT"

            # node Separate Geometry.004
            separate_geometry_004_2 = mn_dna_style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_004_2.name = "Separate Geometry.004"
            separate_geometry_004_2.domain = "POINT"

            # node Group
            group_29 = mn_dna_style_surface.nodes.new("GeometryNodeGroup")
            group_29.name = "Group"
            group_29.node_tree = _mn_utils_style_surface_old

            # node Group.001
            group_001_20 = mn_dna_style_surface.nodes.new("GeometryNodeGroup")
            group_001_20.name = "Group.001"
            group_001_20.node_tree = _mn_utils_style_surface_old

            # node Group.002
            group_002_11 = mn_dna_style_surface.nodes.new("GeometryNodeGroup")
            group_002_11.name = "Group.002"
            group_002_11.node_tree = _mn_utils_style_surface_old

            # node Group.003
            group_003_5 = mn_dna_style_surface.nodes.new("GeometryNodeGroup")
            group_003_5.name = "Group.003"
            group_003_5.node_tree = _mn_utils_style_surface_old

            # node Geometry to Instance
            geometry_to_instance_5 = mn_dna_style_surface.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_5.name = "Geometry to Instance"

            # node Group Output
            group_output_112 = mn_dna_style_surface.nodes.new("NodeGroupOutput")
            group_output_112.name = "Group Output"
            group_output_112.is_active_output = True

            # Set locations
            named_attribute_002_14.location = (-271.8153076171875, 270.0)
            compare_001_19.location = (-73.56605529785156, 281.95001220703125)
            separate_geometry_001_8.location = (108.18467712402344, 290.0)
            compare_002_11.location = (-60.0, -200.0)
            compare_003_11.location = (-60.0, -620.0)
            compare_004_7.location = (-60.0, -1040.0)
            realize_instances_7.location = (-280.0, 120.0)
            separate_geometry_002_3.location = (120.0, -180.0)
            group_input_111.location = (-508.1846923828125, -0.0)
            separate_geometry_003_3.location = (120.0, -600.0)
            separate_geometry_004_2.location = (120.0, -1020.0)
            group_29.location = (440.0, 220.0)
            group_001_20.location = (440.0, -120.0)
            group_002_11.location = (440.0, -460.0)
            group_003_5.location = (440.0, -800.0)
            geometry_to_instance_5.location = (1000.0, -320.0)
            group_output_112.location = (1240.0, -300.0)

            # Set dimensions
            named_attribute_002_14.width, named_attribute_002_14.height = 140.0, 100.0
            compare_001_19.width, compare_001_19.height = 140.0, 100.0
            separate_geometry_001_8.width, separate_geometry_001_8.height = 140.0, 100.0
            compare_002_11.width, compare_002_11.height = 140.0, 100.0
            compare_003_11.width, compare_003_11.height = 140.0, 100.0
            compare_004_7.width, compare_004_7.height = 140.0, 100.0
            realize_instances_7.width, realize_instances_7.height = 140.0, 100.0
            separate_geometry_002_3.width, separate_geometry_002_3.height = 140.0, 100.0
            group_input_111.width, group_input_111.height = 140.0, 100.0
            separate_geometry_003_3.width, separate_geometry_003_3.height = 140.0, 100.0
            separate_geometry_004_2.width, separate_geometry_004_2.height = 140.0, 100.0
            group_29.width, group_29.height = 282.4818115234375, 100.0
            group_001_20.width, group_001_20.height = 282.4818115234375, 100.0
            group_002_11.width, group_002_11.height = 282.4818115234375, 100.0
            group_003_5.width, group_003_5.height = 282.4818115234375, 100.0
            geometry_to_instance_5.width, geometry_to_instance_5.height = 160.0, 100.0
            group_output_112.width, group_output_112.height = 140.0, 100.0

            # initialize mn_dna_style_surface links
            # group_input_111.Bases -> realize_instances_7.Geometry
            mn_dna_style_surface.links.new(
                group_input_111.outputs[0], realize_instances_7.inputs[0]
            )
            # realize_instances_7.Geometry -> separate_geometry_001_8.Geometry
            mn_dna_style_surface.links.new(
                realize_instances_7.outputs[0], separate_geometry_001_8.inputs[0]
            )
            # compare_001_19.Result -> separate_geometry_001_8.Selection
            mn_dna_style_surface.links.new(
                compare_001_19.outputs[0], separate_geometry_001_8.inputs[1]
            )
            # named_attribute_002_14.Attribute -> compare_001_19.A
            mn_dna_style_surface.links.new(
                named_attribute_002_14.outputs[0], compare_001_19.inputs[2]
            )
            # realize_instances_7.Geometry -> separate_geometry_002_3.Geometry
            mn_dna_style_surface.links.new(
                realize_instances_7.outputs[0], separate_geometry_002_3.inputs[0]
            )
            # compare_002_11.Result -> separate_geometry_002_3.Selection
            mn_dna_style_surface.links.new(
                compare_002_11.outputs[0], separate_geometry_002_3.inputs[1]
            )
            # named_attribute_002_14.Attribute -> compare_002_11.A
            mn_dna_style_surface.links.new(
                named_attribute_002_14.outputs[0], compare_002_11.inputs[2]
            )
            # realize_instances_7.Geometry -> separate_geometry_003_3.Geometry
            mn_dna_style_surface.links.new(
                realize_instances_7.outputs[0], separate_geometry_003_3.inputs[0]
            )
            # compare_003_11.Result -> separate_geometry_003_3.Selection
            mn_dna_style_surface.links.new(
                compare_003_11.outputs[0], separate_geometry_003_3.inputs[1]
            )
            # named_attribute_002_14.Attribute -> compare_003_11.A
            mn_dna_style_surface.links.new(
                named_attribute_002_14.outputs[0], compare_003_11.inputs[2]
            )
            # realize_instances_7.Geometry -> separate_geometry_004_2.Geometry
            mn_dna_style_surface.links.new(
                realize_instances_7.outputs[0], separate_geometry_004_2.inputs[0]
            )
            # compare_004_7.Result -> separate_geometry_004_2.Selection
            mn_dna_style_surface.links.new(
                compare_004_7.outputs[0], separate_geometry_004_2.inputs[1]
            )
            # named_attribute_002_14.Attribute -> compare_004_7.A
            mn_dna_style_surface.links.new(
                named_attribute_002_14.outputs[0], compare_004_7.inputs[2]
            )
            # geometry_to_instance_5.Instances -> group_output_112.Bases
            mn_dna_style_surface.links.new(
                geometry_to_instance_5.outputs[0], group_output_112.inputs[0]
            )
            # separate_geometry_001_8.Selection -> group_29.Atoms
            mn_dna_style_surface.links.new(
                separate_geometry_001_8.outputs[0], group_29.inputs[0]
            )
            # group_input_111.Selection -> group_29.Selection
            mn_dna_style_surface.links.new(
                group_input_111.outputs[1], group_29.inputs[1]
            )
            # group_input_111.Resolution -> group_29.Quality
            mn_dna_style_surface.links.new(
                group_input_111.outputs[2], group_29.inputs[2]
            )
            # group_input_111.Radius -> group_29.Scale Radii
            mn_dna_style_surface.links.new(
                group_input_111.outputs[3], group_29.inputs[3]
            )
            # group_input_111.Subdivision Surface -> group_29.Surface Smoothing
            mn_dna_style_surface.links.new(
                group_input_111.outputs[5], group_29.inputs[5]
            )
            # group_input_111.Shade Smooth -> group_29.Shade Smooth
            mn_dna_style_surface.links.new(
                group_input_111.outputs[8], group_29.inputs[8]
            )
            # group_input_111.Color by CA -> group_29.Color by CA
            mn_dna_style_surface.links.new(
                group_input_111.outputs[6], group_29.inputs[6]
            )
            # group_input_111.Material -> group_29.Material
            mn_dna_style_surface.links.new(
                group_input_111.outputs[9], group_29.inputs[9]
            )
            # group_003_5.Geometry -> geometry_to_instance_5.Geometry
            mn_dna_style_surface.links.new(
                group_003_5.outputs[0], geometry_to_instance_5.inputs[0]
            )
            # group_input_111.Interpolate Color -> group_29.Interpolate Color
            mn_dna_style_surface.links.new(
                group_input_111.outputs[7], group_29.inputs[7]
            )
            # group_input_111.Probe Size -> group_29.Probe Size
            mn_dna_style_surface.links.new(
                group_input_111.outputs[4], group_29.inputs[4]
            )
            # group_input_111.Selection -> group_001_20.Selection
            mn_dna_style_surface.links.new(
                group_input_111.outputs[1], group_001_20.inputs[1]
            )
            # group_input_111.Resolution -> group_001_20.Quality
            mn_dna_style_surface.links.new(
                group_input_111.outputs[2], group_001_20.inputs[2]
            )
            # group_input_111.Radius -> group_001_20.Scale Radii
            mn_dna_style_surface.links.new(
                group_input_111.outputs[3], group_001_20.inputs[3]
            )
            # group_input_111.Subdivision Surface -> group_001_20.Surface Smoothing
            mn_dna_style_surface.links.new(
                group_input_111.outputs[5], group_001_20.inputs[5]
            )
            # group_input_111.Shade Smooth -> group_001_20.Shade Smooth
            mn_dna_style_surface.links.new(
                group_input_111.outputs[8], group_001_20.inputs[8]
            )
            # group_input_111.Color by CA -> group_001_20.Color by CA
            mn_dna_style_surface.links.new(
                group_input_111.outputs[6], group_001_20.inputs[6]
            )
            # group_input_111.Material -> group_001_20.Material
            mn_dna_style_surface.links.new(
                group_input_111.outputs[9], group_001_20.inputs[9]
            )
            # group_input_111.Interpolate Color -> group_001_20.Interpolate Color
            mn_dna_style_surface.links.new(
                group_input_111.outputs[7], group_001_20.inputs[7]
            )
            # group_input_111.Probe Size -> group_001_20.Probe Size
            mn_dna_style_surface.links.new(
                group_input_111.outputs[4], group_001_20.inputs[4]
            )
            # separate_geometry_002_3.Selection -> group_001_20.Atoms
            mn_dna_style_surface.links.new(
                separate_geometry_002_3.outputs[0], group_001_20.inputs[0]
            )
            # group_input_111.Selection -> group_002_11.Selection
            mn_dna_style_surface.links.new(
                group_input_111.outputs[1], group_002_11.inputs[1]
            )
            # group_input_111.Resolution -> group_002_11.Quality
            mn_dna_style_surface.links.new(
                group_input_111.outputs[2], group_002_11.inputs[2]
            )
            # group_input_111.Radius -> group_002_11.Scale Radii
            mn_dna_style_surface.links.new(
                group_input_111.outputs[3], group_002_11.inputs[3]
            )
            # group_input_111.Subdivision Surface -> group_002_11.Surface Smoothing
            mn_dna_style_surface.links.new(
                group_input_111.outputs[5], group_002_11.inputs[5]
            )
            # group_input_111.Shade Smooth -> group_002_11.Shade Smooth
            mn_dna_style_surface.links.new(
                group_input_111.outputs[8], group_002_11.inputs[8]
            )
            # group_input_111.Color by CA -> group_002_11.Color by CA
            mn_dna_style_surface.links.new(
                group_input_111.outputs[6], group_002_11.inputs[6]
            )
            # group_input_111.Material -> group_002_11.Material
            mn_dna_style_surface.links.new(
                group_input_111.outputs[9], group_002_11.inputs[9]
            )
            # group_input_111.Interpolate Color -> group_002_11.Interpolate Color
            mn_dna_style_surface.links.new(
                group_input_111.outputs[7], group_002_11.inputs[7]
            )
            # group_input_111.Probe Size -> group_002_11.Probe Size
            mn_dna_style_surface.links.new(
                group_input_111.outputs[4], group_002_11.inputs[4]
            )
            # separate_geometry_003_3.Selection -> group_002_11.Atoms
            mn_dna_style_surface.links.new(
                separate_geometry_003_3.outputs[0], group_002_11.inputs[0]
            )
            # group_input_111.Selection -> group_003_5.Selection
            mn_dna_style_surface.links.new(
                group_input_111.outputs[1], group_003_5.inputs[1]
            )
            # group_input_111.Resolution -> group_003_5.Quality
            mn_dna_style_surface.links.new(
                group_input_111.outputs[2], group_003_5.inputs[2]
            )
            # group_input_111.Radius -> group_003_5.Scale Radii
            mn_dna_style_surface.links.new(
                group_input_111.outputs[3], group_003_5.inputs[3]
            )
            # group_input_111.Subdivision Surface -> group_003_5.Surface Smoothing
            mn_dna_style_surface.links.new(
                group_input_111.outputs[5], group_003_5.inputs[5]
            )
            # group_input_111.Shade Smooth -> group_003_5.Shade Smooth
            mn_dna_style_surface.links.new(
                group_input_111.outputs[8], group_003_5.inputs[8]
            )
            # group_input_111.Color by CA -> group_003_5.Color by CA
            mn_dna_style_surface.links.new(
                group_input_111.outputs[6], group_003_5.inputs[6]
            )
            # group_input_111.Material -> group_003_5.Material
            mn_dna_style_surface.links.new(
                group_input_111.outputs[9], group_003_5.inputs[9]
            )
            # group_input_111.Interpolate Color -> group_003_5.Interpolate Color
            mn_dna_style_surface.links.new(
                group_input_111.outputs[7], group_003_5.inputs[7]
            )
            # group_input_111.Probe Size -> group_003_5.Probe Size
            mn_dna_style_surface.links.new(
                group_input_111.outputs[4], group_003_5.inputs[4]
            )
            # separate_geometry_004_2.Selection -> group_003_5.Atoms
            mn_dna_style_surface.links.new(
                separate_geometry_004_2.outputs[0], group_003_5.inputs[0]
            )
            # group_002_11.Geometry -> geometry_to_instance_5.Geometry
            mn_dna_style_surface.links.new(
                group_002_11.outputs[0], geometry_to_instance_5.inputs[0]
            )
            # group_001_20.Geometry -> geometry_to_instance_5.Geometry
            mn_dna_style_surface.links.new(
                group_001_20.outputs[0], geometry_to_instance_5.inputs[0]
            )
            # group_29.Geometry -> geometry_to_instance_5.Geometry
            mn_dna_style_surface.links.new(
                group_29.outputs[0], geometry_to_instance_5.inputs[0]
            )
            return mn_dna_style_surface

        mn_dna_style_surface = mn_dna_style_surface_node_group()

        # initialize mn_utils_helix node group
        def mn_utils_helix_node_group():
            mn_utils_helix = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_utils_helix"
            )

            mn_utils_helix.color_tag = "NONE"
            mn_utils_helix.description = ""

            mn_utils_helix.is_modifier = True

            # mn_utils_helix interface
            # Socket Curve
            curve_socket_2 = mn_utils_helix.interface.new_socket(
                name="Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_2.attribute_domain = "POINT"

            # Socket pos_old - pos_new
            pos_old___pos_new_socket = mn_utils_helix.interface.new_socket(
                name="pos_old - pos_new",
                in_out="OUTPUT",
                socket_type="NodeSocketVector",
            )
            pos_old___pos_new_socket.subtype = "NONE"
            pos_old___pos_new_socket.default_value = (0.0, 0.0, 0.0)
            pos_old___pos_new_socket.min_value = -3.4028234663852886e38
            pos_old___pos_new_socket.max_value = 3.4028234663852886e38
            pos_old___pos_new_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_22 = mn_utils_helix.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_22.attribute_domain = "POINT"

            # Socket Value
            value_socket_15 = mn_utils_helix.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_15.subtype = "NONE"
            value_socket_15.default_value = 0.5711986422538757
            value_socket_15.min_value = -3.4028234663852886e38
            value_socket_15.max_value = 3.4028234663852886e38
            value_socket_15.attribute_domain = "POINT"

            # Socket Scale
            scale_socket_2 = mn_utils_helix.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_socket_2.subtype = "NONE"
            scale_socket_2.default_value = 0.10000000149011612
            scale_socket_2.min_value = -10000.0
            scale_socket_2.max_value = 10000.0
            scale_socket_2.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_3 = mn_utils_helix.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_socket_3.subtype = "NONE"
            rotation_socket_3.default_value = 0.5
            rotation_socket_3.min_value = -10000.0
            rotation_socket_3.max_value = 10000.0
            rotation_socket_3.attribute_domain = "POINT"

            # Socket Angle
            angle_socket_4 = mn_utils_helix.interface.new_socket(
                name="Angle", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_4.subtype = "ANGLE"
            angle_socket_4.default_value = -0.8028512597084045
            angle_socket_4.min_value = -3.4028234663852886e38
            angle_socket_4.max_value = 3.4028234663852886e38
            angle_socket_4.attribute_domain = "POINT"

            # Socket Unwind
            unwind_socket = mn_utils_helix.interface.new_socket(
                name="Unwind", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            unwind_socket.subtype = "NONE"
            unwind_socket.default_value = 1.0
            unwind_socket.min_value = -10000.0
            unwind_socket.max_value = 10000.0
            unwind_socket.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_9 = mn_utils_helix.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            offset_socket_9.subtype = "NONE"
            offset_socket_9.default_value = 0.009999999776482582
            offset_socket_9.min_value = -10000.0
            offset_socket_9.max_value = 10000.0
            offset_socket_9.attribute_domain = "POINT"

            # Socket Length
            length_socket_1 = mn_utils_helix.interface.new_socket(
                name="Length", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            length_socket_1.subtype = "DISTANCE"
            length_socket_1.default_value = 0.04000002145767212
            length_socket_1.min_value = 0.009999999776482582
            length_socket_1.max_value = 3.4028234663852886e38
            length_socket_1.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_10 = mn_utils_helix.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_10.subtype = "NONE"
            offset_socket_10.default_value = 2
            offset_socket_10.min_value = -2147483648
            offset_socket_10.max_value = 2147483647
            offset_socket_10.attribute_domain = "POINT"

            # initialize mn_utils_helix nodes
            # node Index
            index_16 = mn_utils_helix.nodes.new("GeometryNodeInputIndex")
            index_16.name = "Index"

            # node Capture Attribute
            capture_attribute_8 = mn_utils_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_8.name = "Capture Attribute"
            capture_attribute_8.active_index = 0
            capture_attribute_8.capture_items.clear()
            capture_attribute_8.capture_items.new("FLOAT", "Value")
            capture_attribute_8.capture_items["Value"].data_type = "INT"
            capture_attribute_8.domain = "CURVE"

            # node Group Output
            group_output_113 = mn_utils_helix.nodes.new("NodeGroupOutput")
            group_output_113.name = "Group Output"
            group_output_113.is_active_output = True

            # node Store Named Attribute
            store_named_attribute_12 = mn_utils_helix.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_12.name = "Store Named Attribute"
            store_named_attribute_12.data_type = "FLOAT_VECTOR"
            store_named_attribute_12.domain = "POINT"
            # Selection
            store_named_attribute_12.inputs[1].default_value = True
            # Name
            store_named_attribute_12.inputs[2].default_value = "rot"

            # node Vector Math.003
            vector_math_003_5 = mn_utils_helix.nodes.new("ShaderNodeVectorMath")
            vector_math_003_5.name = "Vector Math.003"
            vector_math_003_5.operation = "SUBTRACT"

            # node Align Euler to Vector.002
            align_euler_to_vector_002_2 = mn_utils_helix.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_002_2.name = "Align Euler to Vector.002"
            align_euler_to_vector_002_2.axis = "X"
            align_euler_to_vector_002_2.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_002_2.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_002_2.inputs[1].default_value = 1.0

            # node Align Euler to Vector.001
            align_euler_to_vector_001_2 = mn_utils_helix.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_001_2.name = "Align Euler to Vector.001"
            align_euler_to_vector_001_2.axis = "Z"
            align_euler_to_vector_001_2.pivot_axis = "AUTO"
            # Factor
            align_euler_to_vector_001_2.inputs[1].default_value = 1.0

            # node Position.001
            position_001_5 = mn_utils_helix.nodes.new("GeometryNodeInputPosition")
            position_001_5.name = "Position.001"

            # node Set Curve Tilt
            set_curve_tilt_1 = mn_utils_helix.nodes.new("GeometryNodeSetCurveTilt")
            set_curve_tilt_1.name = "Set Curve Tilt"
            # Selection
            set_curve_tilt_1.inputs[1].default_value = True

            # node Capture Attribute.001
            capture_attribute_001_3 = mn_utils_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_3.name = "Capture Attribute.001"
            capture_attribute_001_3.active_index = 0
            capture_attribute_001_3.capture_items.clear()
            capture_attribute_001_3.capture_items.new("FLOAT", "Value")
            capture_attribute_001_3.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_001_3.domain = "POINT"

            # node Capture Attribute.003
            capture_attribute_003_1 = mn_utils_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_003_1.name = "Capture Attribute.003"
            capture_attribute_003_1.active_index = 0
            capture_attribute_003_1.capture_items.clear()
            capture_attribute_003_1.capture_items.new("FLOAT", "Value")
            capture_attribute_003_1.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_003_1.domain = "POINT"

            # node Vector Math.001
            vector_math_001_15 = mn_utils_helix.nodes.new("ShaderNodeVectorMath")
            vector_math_001_15.name = "Vector Math.001"
            vector_math_001_15.operation = "SCALE"

            # node Curve Tangent
            curve_tangent = mn_utils_helix.nodes.new("GeometryNodeInputTangent")
            curve_tangent.name = "Curve Tangent"

            # node Capture Attribute.002
            capture_attribute_002_1 = mn_utils_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_002_1.name = "Capture Attribute.002"
            capture_attribute_002_1.active_index = 0
            capture_attribute_002_1.capture_items.clear()
            capture_attribute_002_1.capture_items.new("FLOAT", "Value")
            capture_attribute_002_1.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_002_1.domain = "POINT"

            # node Vector Math
            vector_math_22 = mn_utils_helix.nodes.new("ShaderNodeVectorMath")
            vector_math_22.name = "Vector Math"
            vector_math_22.operation = "SUBTRACT"

            # node Position
            position_11 = mn_utils_helix.nodes.new("GeometryNodeInputPosition")
            position_11.name = "Position"

            # node Normal
            normal = mn_utils_helix.nodes.new("GeometryNodeInputNormal")
            normal.name = "Normal"

            # node Reroute
            reroute_30 = mn_utils_helix.nodes.new("NodeReroute")
            reroute_30.name = "Reroute"
            # node Vector Math.002
            vector_math_002_7 = mn_utils_helix.nodes.new("ShaderNodeVectorMath")
            vector_math_002_7.name = "Vector Math.002"
            vector_math_002_7.operation = "SCALE"
            # Scale
            vector_math_002_7.inputs[3].default_value = -1.0

            # node Math
            math_26 = mn_utils_helix.nodes.new("ShaderNodeMath")
            math_26.name = "Math"
            math_26.operation = "ADD"
            math_26.use_clamp = False

            # node Math.002
            math_002_11 = mn_utils_helix.nodes.new("ShaderNodeMath")
            math_002_11.name = "Math.002"
            math_002_11.operation = "RADIANS"
            math_002_11.use_clamp = False
            # Value
            math_002_11.inputs[0].default_value = -38.29999923706055

            # node Group Input.001
            group_input_001_14 = mn_utils_helix.nodes.new("NodeGroupInput")
            group_input_001_14.name = "Group Input.001"

            # node Rotate Euler
            rotate_euler = mn_utils_helix.nodes.new("FunctionNodeRotateEuler")
            rotate_euler.name = "Rotate Euler"
            rotate_euler.rotation_type = "AXIS_ANGLE"
            rotate_euler.space = "OBJECT"

            # node Accumulate Field
            accumulate_field_7 = mn_utils_helix.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_7.name = "Accumulate Field"
            accumulate_field_7.data_type = "FLOAT"
            accumulate_field_7.domain = "POINT"

            # node Math.001
            math_001_15 = mn_utils_helix.nodes.new("ShaderNodeMath")
            math_001_15.name = "Math.001"
            math_001_15.operation = "ADD"
            math_001_15.use_clamp = False

            # node Math.003
            math_003_9 = mn_utils_helix.nodes.new("ShaderNodeMath")
            math_003_9.name = "Math.003"
            math_003_9.operation = "MULTIPLY"
            math_003_9.use_clamp = False

            # node Group
            group_30 = mn_utils_helix.nodes.new("GeometryNodeGroup")
            group_30.name = "Group"
            group_30.node_tree = mn_utils_curve_resample
            # Input_7
            group_30.inputs[3].default_value = 0.0
            # Input_9
            group_30.inputs[4].default_value = 0
            # Input_11
            group_30.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Set Position
            set_position_9 = mn_utils_helix.nodes.new("GeometryNodeSetPosition")
            set_position_9.name = "Set Position"
            # Selection
            set_position_9.inputs[1].default_value = True
            # Position
            set_position_9.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Field at Index
            field_at_index_4 = mn_utils_helix.nodes.new("GeometryNodeFieldAtIndex")
            field_at_index_4.name = "Field at Index"
            field_at_index_4.data_type = "FLOAT_VECTOR"
            field_at_index_4.domain = "POINT"

            # node Group Input
            group_input_112 = mn_utils_helix.nodes.new("NodeGroupInput")
            group_input_112.name = "Group Input"

            # node Group Input.002
            group_input_002_8 = mn_utils_helix.nodes.new("NodeGroupInput")
            group_input_002_8.name = "Group Input.002"

            # node Offset Point in Curve
            offset_point_in_curve_1 = mn_utils_helix.nodes.new(
                "GeometryNodeOffsetPointInCurve"
            )
            offset_point_in_curve_1.name = "Offset Point in Curve"
            # Point Index
            offset_point_in_curve_1.inputs[0].default_value = 0

            # node Position.002
            position_002_7 = mn_utils_helix.nodes.new("GeometryNodeInputPosition")
            position_002_7.name = "Position.002"

            # node Set Position.001
            set_position_001_3 = mn_utils_helix.nodes.new("GeometryNodeSetPosition")
            set_position_001_3.name = "Set Position.001"
            # Selection
            set_position_001_3.inputs[1].default_value = True
            # Offset
            set_position_001_3.inputs[3].default_value = (0.0, 0.0, 0.0)

            # Set locations
            index_16.location = (-560.0, 20.0)
            capture_attribute_8.location = (-560.0, 200.0)
            group_output_113.location = (2257.435546875, 345.3393249511719)
            store_named_attribute_12.location = (1994.75, 344.0044860839844)
            vector_math_003_5.location = (1301.4031982421875, -185.31683349609375)
            align_euler_to_vector_002_2.location = (1380.0, 160.0)
            align_euler_to_vector_001_2.location = (1540.0, 100.0)
            position_001_5.location = (1140.0, -180.0)
            set_curve_tilt_1.location = (40.0, 320.0)
            capture_attribute_001_3.location = (200.0, 320.0)
            capture_attribute_003_1.location = (600.0, 420.0)
            vector_math_001_15.location = (600.0, 580.0)
            curve_tangent.location = (920.0, 260.0)
            capture_attribute_002_1.location = (920.0, 460.0)
            vector_math_22.location = (1124.8154296875, 255.56277465820312)
            position_11.location = (217.16098022460938, 21.72336196899414)
            normal.location = (200.0, 120.0)
            reroute_30.location = (520.0, 80.0)
            vector_math_002_7.location = (980.0, 0.0)
            math_26.location = (1878.1685791015625, -206.32203674316406)
            math_002_11.location = (1880.0, -380.0)
            group_input_001_14.location = (1700.0, -220.0)
            rotate_euler.location = (2076.991455078125, 26.95979881286621)
            accumulate_field_7.location = (-320.0, 120.0)
            math_001_15.location = (-120.0, 40.0)
            math_003_9.location = (-560.0, -40.0)
            group_30.location = (-1056.075439453125, 420.99871826171875)
            set_position_9.location = (1140.0, 460.0)
            field_at_index_4.location = (1223.470947265625, 713.5252685546875)
            group_input_112.location = (-1289.128662109375, 9.68197250366211)
            group_input_002_8.location = (533.52392578125, 971.9088134765625)
            offset_point_in_curve_1.location = (1015.572509765625, 759.9798583984375)
            position_002_7.location = (1020.0, 620.0)
            set_position_001_3.location = (1340.0, 480.0)

            # Set dimensions
            index_16.width, index_16.height = 140.0, 100.0
            capture_attribute_8.width, capture_attribute_8.height = 140.0, 100.0
            group_output_113.width, group_output_113.height = 140.0, 100.0
            store_named_attribute_12.width, store_named_attribute_12.height = (
                140.0,
                100.0,
            )
            vector_math_003_5.width, vector_math_003_5.height = 140.0, 100.0
            align_euler_to_vector_002_2.width, align_euler_to_vector_002_2.height = (
                140.0,
                100.0,
            )
            align_euler_to_vector_001_2.width, align_euler_to_vector_001_2.height = (
                140.0,
                100.0,
            )
            position_001_5.width, position_001_5.height = 140.0, 100.0
            set_curve_tilt_1.width, set_curve_tilt_1.height = 140.0, 100.0
            capture_attribute_001_3.width, capture_attribute_001_3.height = 140.0, 100.0
            capture_attribute_003_1.width, capture_attribute_003_1.height = 140.0, 100.0
            vector_math_001_15.width, vector_math_001_15.height = 140.0, 100.0
            curve_tangent.width, curve_tangent.height = 140.0, 100.0
            capture_attribute_002_1.width, capture_attribute_002_1.height = 140.0, 100.0
            vector_math_22.width, vector_math_22.height = 140.0, 100.0
            position_11.width, position_11.height = 140.0, 100.0
            normal.width, normal.height = 140.0, 100.0
            reroute_30.width, reroute_30.height = 16.0, 100.0
            vector_math_002_7.width, vector_math_002_7.height = 140.0, 100.0
            math_26.width, math_26.height = 140.0, 100.0
            math_002_11.width, math_002_11.height = 140.0, 100.0
            group_input_001_14.width, group_input_001_14.height = 140.0, 100.0
            rotate_euler.width, rotate_euler.height = 140.0, 100.0
            accumulate_field_7.width, accumulate_field_7.height = 140.0, 100.0
            math_001_15.width, math_001_15.height = 140.0, 100.0
            math_003_9.width, math_003_9.height = 140.0, 100.0
            group_30.width, group_30.height = 315.14581298828125, 100.0
            set_position_9.width, set_position_9.height = 140.0, 100.0
            field_at_index_4.width, field_at_index_4.height = 140.0, 100.0
            group_input_112.width, group_input_112.height = 140.0, 100.0
            group_input_002_8.width, group_input_002_8.height = 140.0, 100.0
            offset_point_in_curve_1.width, offset_point_in_curve_1.height = 140.0, 100.0
            position_002_7.width, position_002_7.height = 140.0, 100.0
            set_position_001_3.width, set_position_001_3.height = 140.0, 100.0

            # initialize mn_utils_helix links
            # capture_attribute_8.Geometry -> set_curve_tilt_1.Curve
            mn_utils_helix.links.new(
                capture_attribute_8.outputs[0], set_curve_tilt_1.inputs[0]
            )
            # math_001_15.Value -> set_curve_tilt_1.Tilt
            mn_utils_helix.links.new(math_001_15.outputs[0], set_curve_tilt_1.inputs[2])
            # capture_attribute_002_1.Geometry -> set_position_9.Geometry
            mn_utils_helix.links.new(
                capture_attribute_002_1.outputs[0], set_position_9.inputs[0]
            )
            # vector_math_001_15.Vector -> set_position_9.Offset
            mn_utils_helix.links.new(
                vector_math_001_15.outputs[0], set_position_9.inputs[3]
            )
            # normal.Normal -> vector_math_001_15.Vector
            mn_utils_helix.links.new(normal.outputs[0], vector_math_001_15.inputs[0])
            # store_named_attribute_12.Geometry -> group_output_113.Curve
            mn_utils_helix.links.new(
                store_named_attribute_12.outputs[0], group_output_113.inputs[0]
            )
            # index_16.Index -> capture_attribute_8.Value
            mn_utils_helix.links.new(index_16.outputs[0], capture_attribute_8.inputs[1])
            # capture_attribute_8.Value -> accumulate_field_7.Group ID
            mn_utils_helix.links.new(
                capture_attribute_8.outputs[1], accumulate_field_7.inputs[1]
            )
            # math_003_9.Value -> accumulate_field_7.Value
            mn_utils_helix.links.new(
                math_003_9.outputs[0], accumulate_field_7.inputs[0]
            )
            # group_input_112.Scale -> vector_math_001_15.Scale
            mn_utils_helix.links.new(
                group_input_112.outputs[2], vector_math_001_15.inputs[3]
            )
            # accumulate_field_7.Leading -> math_001_15.Value
            mn_utils_helix.links.new(
                accumulate_field_7.outputs[0], math_001_15.inputs[0]
            )
            # group_input_112.Rotation -> math_001_15.Value
            mn_utils_helix.links.new(group_input_112.outputs[3], math_001_15.inputs[1])
            # set_curve_tilt_1.Curve -> capture_attribute_001_3.Geometry
            mn_utils_helix.links.new(
                set_curve_tilt_1.outputs[0], capture_attribute_001_3.inputs[0]
            )
            # vector_math_22.Vector -> group_output_113.pos_old - pos_new
            mn_utils_helix.links.new(
                vector_math_22.outputs[0], group_output_113.inputs[1]
            )
            # set_position_001_3.Geometry -> store_named_attribute_12.Geometry
            mn_utils_helix.links.new(
                set_position_001_3.outputs[0], store_named_attribute_12.inputs[0]
            )
            # reroute_30.Output -> vector_math_22.Vector
            mn_utils_helix.links.new(reroute_30.outputs[0], vector_math_22.inputs[0])
            # rotate_euler.Rotation -> store_named_attribute_12.Value
            mn_utils_helix.links.new(
                rotate_euler.outputs[0], store_named_attribute_12.inputs[3]
            )
            # align_euler_to_vector_002_2.Rotation -> align_euler_to_vector_001_2.Rotation
            mn_utils_helix.links.new(
                align_euler_to_vector_002_2.outputs[0],
                align_euler_to_vector_001_2.inputs[0],
            )
            # capture_attribute_003_1.Geometry -> capture_attribute_002_1.Geometry
            mn_utils_helix.links.new(
                capture_attribute_003_1.outputs[0], capture_attribute_002_1.inputs[0]
            )
            # curve_tangent.Tangent -> capture_attribute_002_1.Value
            mn_utils_helix.links.new(
                curve_tangent.outputs[0], capture_attribute_002_1.inputs[1]
            )
            # capture_attribute_002_1.Value -> align_euler_to_vector_002_2.Vector
            mn_utils_helix.links.new(
                capture_attribute_002_1.outputs[1],
                align_euler_to_vector_002_2.inputs[2],
            )
            # capture_attribute_001_3.Value -> reroute_30.Input
            mn_utils_helix.links.new(
                capture_attribute_001_3.outputs[1], reroute_30.inputs[0]
            )
            # align_euler_to_vector_001_2.Rotation -> rotate_euler.Rotation
            mn_utils_helix.links.new(
                align_euler_to_vector_001_2.outputs[0], rotate_euler.inputs[0]
            )
            # position_001_5.Position -> vector_math_003_5.Vector
            mn_utils_helix.links.new(
                position_001_5.outputs[0], vector_math_003_5.inputs[0]
            )
            # capture_attribute_001_3.Geometry -> capture_attribute_003_1.Geometry
            mn_utils_helix.links.new(
                capture_attribute_001_3.outputs[0], capture_attribute_003_1.inputs[0]
            )
            # position_11.Position -> capture_attribute_003_1.Value
            mn_utils_helix.links.new(
                position_11.outputs[0], capture_attribute_003_1.inputs[1]
            )
            # capture_attribute_003_1.Value -> vector_math_003_5.Vector
            mn_utils_helix.links.new(
                capture_attribute_003_1.outputs[1], vector_math_003_5.inputs[1]
            )
            # vector_math_003_5.Vector -> rotate_euler.Axis
            mn_utils_helix.links.new(
                vector_math_003_5.outputs[0], rotate_euler.inputs[2]
            )
            # normal.Normal -> capture_attribute_001_3.Value
            mn_utils_helix.links.new(
                normal.outputs[0], capture_attribute_001_3.inputs[1]
            )
            # position_11.Position -> vector_math_22.Vector
            mn_utils_helix.links.new(position_11.outputs[0], vector_math_22.inputs[1])
            # reroute_30.Output -> vector_math_002_7.Vector
            mn_utils_helix.links.new(reroute_30.outputs[0], vector_math_002_7.inputs[0])
            # vector_math_002_7.Vector -> align_euler_to_vector_001_2.Vector
            mn_utils_helix.links.new(
                vector_math_002_7.outputs[0], align_euler_to_vector_001_2.inputs[2]
            )
            # math_26.Value -> rotate_euler.Angle
            mn_utils_helix.links.new(math_26.outputs[0], rotate_euler.inputs[3])
            # math_002_11.Value -> math_26.Value
            mn_utils_helix.links.new(math_002_11.outputs[0], math_26.inputs[1])
            # group_input_001_14.Angle -> math_26.Value
            mn_utils_helix.links.new(group_input_001_14.outputs[4], math_26.inputs[0])
            # group_input_112.Value -> math_003_9.Value
            mn_utils_helix.links.new(group_input_112.outputs[1], math_003_9.inputs[0])
            # group_input_112.Unwind -> math_003_9.Value
            mn_utils_helix.links.new(group_input_112.outputs[5], math_003_9.inputs[1])
            # group_input_112.Geometry -> group_30.Geometry
            mn_utils_helix.links.new(group_input_112.outputs[0], group_30.inputs[0])
            # group_input_112.Offset -> group_30.Offset
            mn_utils_helix.links.new(group_input_112.outputs[6], group_30.inputs[1])
            # group_input_112.Length -> group_30.Length
            mn_utils_helix.links.new(group_input_112.outputs[7], group_30.inputs[2])
            # group_input_112.Geometry -> capture_attribute_8.Geometry
            mn_utils_helix.links.new(
                group_input_112.outputs[0], capture_attribute_8.inputs[0]
            )
            # set_position_9.Geometry -> set_position_001_3.Geometry
            mn_utils_helix.links.new(
                set_position_9.outputs[0], set_position_001_3.inputs[0]
            )
            # position_002_7.Position -> field_at_index_4.Value
            mn_utils_helix.links.new(
                position_002_7.outputs[0], field_at_index_4.inputs[1]
            )
            # offset_point_in_curve_1.Point Index -> field_at_index_4.Index
            mn_utils_helix.links.new(
                offset_point_in_curve_1.outputs[1], field_at_index_4.inputs[0]
            )
            # field_at_index_4.Value -> set_position_001_3.Position
            mn_utils_helix.links.new(
                field_at_index_4.outputs[0], set_position_001_3.inputs[2]
            )
            # group_input_002_8.Offset -> offset_point_in_curve_1.Offset
            mn_utils_helix.links.new(
                group_input_002_8.outputs[8], offset_point_in_curve_1.inputs[1]
            )
            return mn_utils_helix

        mn_utils_helix = mn_utils_helix_node_group()

        # initialize mn_dna_double_helix node group
        def mn_dna_double_helix_node_group():
            mn_dna_double_helix = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_double_helix"
            )

            mn_dna_double_helix.color_tag = "NONE"
            mn_dna_double_helix.description = ""

            mn_dna_double_helix.is_modifier = True

            # mn_dna_double_helix interface
            # Socket Base Instances
            base_instances_socket = mn_dna_double_helix.interface.new_socket(
                name="Base Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            base_instances_socket.attribute_domain = "POINT"

            # Socket Helix Curve
            helix_curve_socket = mn_dna_double_helix.interface.new_socket(
                name="Helix Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            helix_curve_socket.attribute_domain = "POINT"

            # Socket Curve
            curve_socket_3 = mn_dna_double_helix.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_3.attribute_domain = "POINT"

            # Socket Bases
            bases_socket_7 = mn_dna_double_helix.interface.new_socket(
                name="Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_7.attribute_domain = "POINT"

            # Socket Rot. Sec. Strand
            rot__sec__strand_socket = mn_dna_double_helix.interface.new_socket(
                name="Rot. Sec. Strand", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rot__sec__strand_socket.subtype = "NONE"
            rot__sec__strand_socket.default_value = 0.0
            rot__sec__strand_socket.min_value = -10000.0
            rot__sec__strand_socket.max_value = 10000.0
            rot__sec__strand_socket.attribute_domain = "POINT"

            # Socket Unzip
            unzip_socket = mn_dna_double_helix.interface.new_socket(
                name="Unzip", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            unzip_socket.subtype = "NONE"
            unzip_socket.default_value = 1.0
            unzip_socket.min_value = -10000.0
            unzip_socket.max_value = 10000.0
            unzip_socket.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_4 = mn_dna_double_helix.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_socket_4.subtype = "NONE"
            rotation_socket_4.default_value = 0.0
            rotation_socket_4.min_value = -3.4028234663852886e38
            rotation_socket_4.max_value = 3.4028234663852886e38
            rotation_socket_4.attribute_domain = "POINT"

            # Socket Unwind
            unwind_socket_1 = mn_dna_double_helix.interface.new_socket(
                name="Unwind", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            unwind_socket_1.subtype = "NONE"
            unwind_socket_1.default_value = 1.0
            unwind_socket_1.min_value = -10000.0
            unwind_socket_1.max_value = 10000.0
            unwind_socket_1.attribute_domain = "POINT"

            # initialize mn_dna_double_helix nodes
            # node Reroute.002
            reroute_002_16 = mn_dna_double_helix.nodes.new("NodeReroute")
            reroute_002_16.name = "Reroute.002"
            # node Instance on Points.001
            instance_on_points_001_1 = mn_dna_double_helix.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_001_1.name = "Instance on Points.001"
            # Selection
            instance_on_points_001_1.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_001_1.inputs[3].default_value = True
            # Scale
            instance_on_points_001_1.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Named Attribute
            named_attribute_28 = mn_dna_double_helix.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_28.name = "Named Attribute"
            named_attribute_28.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_28.inputs[0].default_value = "rot"

            # node Reroute
            reroute_31 = mn_dna_double_helix.nodes.new("NodeReroute")
            reroute_31.name = "Reroute"
            # node Value.001
            value_001_1 = mn_dna_double_helix.nodes.new("ShaderNodeValue")
            value_001_1.label = "tau / 11"
            value_001_1.name = "Value.001"

            value_001_1.outputs[0].default_value = 0.5711986422538757
            # node Math.004
            math_004_3 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_004_3.name = "Math.004"
            math_004_3.operation = "MULTIPLY"
            math_004_3.use_clamp = False

            # node Math.003
            math_003_10 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_003_10.name = "Math.003"
            math_003_10.operation = "DIVIDE"
            math_003_10.use_clamp = False
            # Value
            math_003_10.inputs[0].default_value = 0.9200000166893005
            # Value_001
            math_003_10.inputs[1].default_value = 10.0

            # node Value.004
            value_004 = mn_dna_double_helix.nodes.new("ShaderNodeValue")
            value_004.name = "Value.004"

            value_004.outputs[0].default_value = 1.6766369342803955
            # node Math.002
            math_002_12 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_002_12.name = "Math.002"
            math_002_12.operation = "ADD"
            math_002_12.use_clamp = False

            # node Math.001
            math_001_16 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_001_16.name = "Math.001"
            math_001_16.operation = "ADD"
            math_001_16.use_clamp = False

            # node Math.005
            math_005_2 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_005_2.name = "Math.005"
            math_005_2.operation = "DIVIDE"
            math_005_2.use_clamp = False
            # Value_001
            math_005_2.inputs[1].default_value = 100.0

            # node Group
            group_31 = mn_dna_double_helix.nodes.new("GeometryNodeGroup")
            group_31.name = "Group"
            group_31.node_tree = mn_utils_curve_resample
            # Input_12
            group_31.inputs[1].default_value = 0.0
            # Input_7
            group_31.inputs[3].default_value = 0.0
            # Input_9
            group_31.inputs[4].default_value = 0
            # Input_11
            group_31.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Random Value
            random_value_2 = mn_dna_double_helix.nodes.new("FunctionNodeRandomValue")
            random_value_2.name = "Random Value"
            random_value_2.data_type = "INT"
            # Min_002
            random_value_2.inputs[4].default_value = 0
            # Max_002
            random_value_2.inputs[5].default_value = 3
            # ID
            random_value_2.inputs[7].default_value = 0
            # Seed
            random_value_2.inputs[8].default_value = 1

            # node Join Geometry.001
            join_geometry_001_1 = mn_dna_double_helix.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_1.name = "Join Geometry.001"
            join_geometry_001_1.hide = True

            # node Index.001
            index_001_5 = mn_dna_double_helix.nodes.new("GeometryNodeInputIndex")
            index_001_5.name = "Index.001"

            # node Capture Attribute
            capture_attribute_9 = mn_dna_double_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_9.name = "Capture Attribute"
            capture_attribute_9.active_index = 0
            capture_attribute_9.capture_items.clear()
            capture_attribute_9.capture_items.new("FLOAT", "Value")
            capture_attribute_9.capture_items["Value"].data_type = "INT"
            capture_attribute_9.domain = "CURVE"

            # node Group Input.001
            group_input_001_15 = mn_dna_double_helix.nodes.new("NodeGroupInput")
            group_input_001_15.name = "Group Input.001"

            # node Capture Attribute.001
            capture_attribute_001_4 = mn_dna_double_helix.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_4.name = "Capture Attribute.001"
            capture_attribute_001_4.active_index = 0
            capture_attribute_001_4.capture_items.clear()
            capture_attribute_001_4.capture_items.new("FLOAT", "Value")
            capture_attribute_001_4.capture_items["Value"].data_type = "INT"
            capture_attribute_001_4.domain = "POINT"

            # node Switch
            switch_29 = mn_dna_double_helix.nodes.new("GeometryNodeSwitch")
            switch_29.name = "Switch"
            switch_29.input_type = "INT"

            # node Named Attribute.001
            named_attribute_001_16 = mn_dna_double_helix.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_16.name = "Named Attribute.001"
            named_attribute_001_16.data_type = "INT"
            # Name
            named_attribute_001_16.inputs[0].default_value = "chain_id"

            # node Compare.001
            compare_001_20 = mn_dna_double_helix.nodes.new("FunctionNodeCompare")
            compare_001_20.name = "Compare.001"
            compare_001_20.data_type = "INT"
            compare_001_20.mode = "ELEMENT"
            compare_001_20.operation = "EQUAL"
            # B_INT
            compare_001_20.inputs[3].default_value = 0

            # node Reroute.001
            reroute_001_20 = mn_dna_double_helix.nodes.new("NodeReroute")
            reroute_001_20.name = "Reroute.001"
            # node Math.007
            math_007 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_007.name = "Math.007"
            math_007.operation = "SUBTRACT"
            math_007.use_clamp = False
            # Value_001
            math_007.inputs[1].default_value = 3.0

            # node Math.008
            math_008_2 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_008_2.name = "Math.008"
            math_008_2.operation = "ABSOLUTE"
            math_008_2.use_clamp = False

            # node Math.006
            math_006_3 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_006_3.name = "Math.006"
            math_006_3.operation = "DIVIDE"
            math_006_3.use_clamp = False
            # Value
            math_006_3.inputs[0].default_value = -3.0
            # Value_001
            math_006_3.inputs[1].default_value = 100.0

            # node Group Input
            group_input_113 = mn_dna_double_helix.nodes.new("NodeGroupInput")
            group_input_113.name = "Group Input"

            # node Math
            math_27 = mn_dna_double_helix.nodes.new("ShaderNodeMath")
            math_27.name = "Math"
            math_27.operation = "DIVIDE"
            math_27.use_clamp = False
            # Value_001
            math_27.inputs[1].default_value = 100.0

            # node Value
            value_4 = mn_dna_double_helix.nodes.new("ShaderNodeValue")
            value_4.name = "Value"

            value_4.outputs[0].default_value = 3.780000686645508
            # node Group.001
            group_001_21 = mn_dna_double_helix.nodes.new("GeometryNodeGroup")
            group_001_21.name = "Group.001"
            group_001_21.node_tree = mn_utils_helix
            # Input_8
            group_001_21.inputs[4].default_value = 0.0
            # Input_10
            group_001_21.inputs[6].default_value = 0.009999999776482582
            # Input_12
            group_001_21.inputs[8].default_value = 0

            # node Group Output
            group_output_114 = mn_dna_double_helix.nodes.new("NodeGroupOutput")
            group_output_114.name = "Group Output"
            group_output_114.is_active_output = True

            # node Named Attribute.002
            named_attribute_002_15 = mn_dna_double_helix.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_15.name = "Named Attribute.002"
            named_attribute_002_15.data_type = "INT"
            # Name
            named_attribute_002_15.inputs[0].default_value = "chain_id"

            # node Compare
            compare_34 = mn_dna_double_helix.nodes.new("FunctionNodeCompare")
            compare_34.name = "Compare"
            compare_34.data_type = "INT"
            compare_34.mode = "ELEMENT"
            compare_34.operation = "EQUAL"
            # B_INT
            compare_34.inputs[3].default_value = 0

            # node Translate Instances
            translate_instances_2 = mn_dna_double_helix.nodes.new(
                "GeometryNodeTranslateInstances"
            )
            translate_instances_2.name = "Translate Instances"
            # Local Space
            translate_instances_2.inputs[3].default_value = True

            # node Vector Math
            vector_math_23 = mn_dna_double_helix.nodes.new("ShaderNodeVectorMath")
            vector_math_23.name = "Vector Math"
            vector_math_23.operation = "SCALE"
            # Vector
            vector_math_23.inputs[0].default_value = (
                -3.5799994468688965,
                -3.2300000190734863,
                0.010000228881835938,
            )
            # Scale
            vector_math_23.inputs[3].default_value = 0.009999999776482582

            # node Rotate Instances
            rotate_instances_2 = mn_dna_double_helix.nodes.new(
                "GeometryNodeRotateInstances"
            )
            rotate_instances_2.name = "Rotate Instances"
            # Selection
            rotate_instances_2.inputs[1].default_value = True
            # Rotation
            rotate_instances_2.inputs[2].default_value = (
                0.2010618895292282,
                0.24678947031497955,
                1.8921113014221191,
            )
            # Pivot Point
            rotate_instances_2.inputs[3].default_value = (0.0, 0.0, 0.0)
            # Local Space
            rotate_instances_2.inputs[4].default_value = True

            # node Group.002
            group_002_12 = mn_dna_double_helix.nodes.new("GeometryNodeGroup")
            group_002_12.name = "Group.002"
            group_002_12.node_tree = mn_utils_helix
            # Input_8
            group_002_12.inputs[4].default_value = 3.148574113845825
            # Input_12
            group_002_12.inputs[8].default_value = 0

            # node Store Named Attribute
            store_named_attribute_13 = mn_dna_double_helix.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_13.name = "Store Named Attribute"
            store_named_attribute_13.data_type = "INT"
            store_named_attribute_13.domain = "POINT"
            # Selection
            store_named_attribute_13.inputs[1].default_value = True
            # Name
            store_named_attribute_13.inputs[2].default_value = "chain_id"

            # Set locations
            reroute_002_16.location = (-402.0, 120.0)
            instance_on_points_001_1.location = (798.0, 260.0)
            named_attribute_28.location = (798.0, -20.0)
            reroute_31.location = (-464.8250732421875, -118.33726501464844)
            value_001_1.location = (-622.0, 240.0)
            math_004_3.location = (-682.0, 80.0)
            math_003_10.location = (-682.0, -80.0)
            value_004.location = (-882.0, -260.0)
            math_002_12.location = (-682.0, -260.0)
            math_001_16.location = (-502.0, -260.0)
            math_005_2.location = (-504.94775390625, -435.8669128417969)
            group_31.location = (-1162.56884765625, 195.8053741455078)
            random_value_2.location = (-1060.4847412109375, 435.9537048339844)
            join_geometry_001_1.location = (18.0, 260.0)
            index_001_5.location = (18.0, 220.0)
            capture_attribute_9.location = (198.0, 360.0)
            group_input_001_15.location = (358.0, 160.0)
            capture_attribute_001_4.location = (-813.2508544921875, 494.56048583984375)
            switch_29.location = (518.0, -40.0)
            named_attribute_001_16.location = (158.0, -40.0)
            compare_001_20.location = (318.0, -40.0)
            reroute_001_20.location = (142.068115234375, -25.483333587646484)
            math_007.location = (318.0, -220.0)
            math_008_2.location = (518.0, -220.0)
            math_006_3.location = (-502.0, -620.0)
            group_input_113.location = (-1574.67822265625, 110.0733642578125)
            math_27.location = (-1422.0, -100.0)
            value_4.location = (-1582.0, -100.0)
            group_001_21.location = (-262.0, 280.0)
            group_output_114.location = (1780.26904296875, 177.51312255859375)
            named_attribute_002_15.location = (1043.337158203125, -57.230098724365234)
            compare_34.location = (1201.8712158203125, -58.711971282958984)
            translate_instances_2.location = (1340.243896484375, 257.7772216796875)
            vector_math_23.location = (1168.5482177734375, 170.97555541992188)
            rotate_instances_2.location = (966.5189208984375, 263.74462890625)
            group_002_12.location = (-262.0, -80.0)
            store_named_attribute_13.location = (358.0, 360.0)

            # Set dimensions
            reroute_002_16.width, reroute_002_16.height = 16.0, 100.0
            instance_on_points_001_1.width, instance_on_points_001_1.height = (
                140.0,
                100.0,
            )
            named_attribute_28.width, named_attribute_28.height = 140.0, 100.0
            reroute_31.width, reroute_31.height = 16.0, 100.0
            value_001_1.width, value_001_1.height = 140.0, 100.0
            math_004_3.width, math_004_3.height = 140.0, 100.0
            math_003_10.width, math_003_10.height = 140.0, 100.0
            value_004.width, value_004.height = 140.0, 100.0
            math_002_12.width, math_002_12.height = 140.0, 100.0
            math_001_16.width, math_001_16.height = 140.0, 100.0
            math_005_2.width, math_005_2.height = 140.0, 100.0
            group_31.width, group_31.height = 277.358154296875, 100.0
            random_value_2.width, random_value_2.height = 140.0, 100.0
            join_geometry_001_1.width, join_geometry_001_1.height = 140.0, 100.0
            index_001_5.width, index_001_5.height = 140.0, 100.0
            capture_attribute_9.width, capture_attribute_9.height = 140.0, 100.0
            group_input_001_15.width, group_input_001_15.height = 140.0, 100.0
            capture_attribute_001_4.width, capture_attribute_001_4.height = 140.0, 100.0
            switch_29.width, switch_29.height = 140.0, 100.0
            named_attribute_001_16.width, named_attribute_001_16.height = 140.0, 100.0
            compare_001_20.width, compare_001_20.height = 140.0, 100.0
            reroute_001_20.width, reroute_001_20.height = 16.0, 100.0
            math_007.width, math_007.height = 140.0, 100.0
            math_008_2.width, math_008_2.height = 140.0, 100.0
            math_006_3.width, math_006_3.height = 140.0, 100.0
            group_input_113.width, group_input_113.height = 140.0, 100.0
            math_27.width, math_27.height = 140.0, 100.0
            value_4.width, value_4.height = 140.0, 100.0
            group_001_21.width, group_001_21.height = 229.2681884765625, 100.0
            group_output_114.width, group_output_114.height = 140.0, 100.0
            named_attribute_002_15.width, named_attribute_002_15.height = 140.0, 100.0
            compare_34.width, compare_34.height = 140.0, 100.0
            translate_instances_2.width, translate_instances_2.height = 140.0, 100.0
            vector_math_23.width, vector_math_23.height = 140.0, 100.0
            rotate_instances_2.width, rotate_instances_2.height = 140.0, 100.0
            group_002_12.width, group_002_12.height = 232.57440185546875, 100.0
            store_named_attribute_13.width, store_named_attribute_13.height = (
                140.0,
                100.0,
            )

            # initialize mn_dna_double_helix links
            # group_input_113.Curve -> group_31.Geometry
            mn_dna_double_helix.links.new(
                group_input_113.outputs[0], group_31.inputs[0]
            )
            # translate_instances_2.Instances -> group_output_114.Base Instances
            mn_dna_double_helix.links.new(
                translate_instances_2.outputs[0], group_output_114.inputs[0]
            )
            # reroute_002_16.Output -> group_001_21.Geometry
            mn_dna_double_helix.links.new(
                reroute_002_16.outputs[0], group_001_21.inputs[0]
            )
            # math_27.Value -> group_31.Length
            mn_dna_double_helix.links.new(math_27.outputs[0], group_31.inputs[2])
            # value_4.Value -> math_27.Value
            mn_dna_double_helix.links.new(value_4.outputs[0], math_27.inputs[0])
            # reroute_002_16.Output -> group_002_12.Geometry
            mn_dna_double_helix.links.new(
                reroute_002_16.outputs[0], group_002_12.inputs[0]
            )
            # group_002_12.Curve -> join_geometry_001_1.Geometry
            mn_dna_double_helix.links.new(
                group_002_12.outputs[0], join_geometry_001_1.inputs[0]
            )
            # value_001_1.Value -> group_001_21.Value
            mn_dna_double_helix.links.new(
                value_001_1.outputs[0], group_001_21.inputs[1]
            )
            # value_001_1.Value -> group_002_12.Value
            mn_dna_double_helix.links.new(
                value_001_1.outputs[0], group_002_12.inputs[1]
            )
            # math_004_3.Value -> group_001_21.Scale
            mn_dna_double_helix.links.new(math_004_3.outputs[0], group_001_21.inputs[2])
            # math_004_3.Value -> group_002_12.Scale
            mn_dna_double_helix.links.new(math_004_3.outputs[0], group_002_12.inputs[2])
            # reroute_31.Output -> group_001_21.Rotation
            mn_dna_double_helix.links.new(reroute_31.outputs[0], group_001_21.inputs[3])
            # reroute_31.Output -> math_001_16.Value
            mn_dna_double_helix.links.new(reroute_31.outputs[0], math_001_16.inputs[0])
            # math_001_16.Value -> group_002_12.Rotation
            mn_dna_double_helix.links.new(
                math_001_16.outputs[0], group_002_12.inputs[3]
            )
            # math_002_12.Value -> math_001_16.Value
            mn_dna_double_helix.links.new(math_002_12.outputs[0], math_001_16.inputs[1])
            # store_named_attribute_13.Geometry -> instance_on_points_001_1.Points
            mn_dna_double_helix.links.new(
                store_named_attribute_13.outputs[0], instance_on_points_001_1.inputs[0]
            )
            # named_attribute_28.Attribute -> instance_on_points_001_1.Rotation
            mn_dna_double_helix.links.new(
                named_attribute_28.outputs[0], instance_on_points_001_1.inputs[5]
            )
            # join_geometry_001_1.Geometry -> capture_attribute_9.Geometry
            mn_dna_double_helix.links.new(
                join_geometry_001_1.outputs[0], capture_attribute_9.inputs[0]
            )
            # index_001_5.Index -> capture_attribute_9.Value
            mn_dna_double_helix.links.new(
                index_001_5.outputs[0], capture_attribute_9.inputs[1]
            )
            # capture_attribute_9.Geometry -> store_named_attribute_13.Geometry
            mn_dna_double_helix.links.new(
                capture_attribute_9.outputs[0], store_named_attribute_13.inputs[0]
            )
            # capture_attribute_9.Value -> store_named_attribute_13.Value
            mn_dna_double_helix.links.new(
                capture_attribute_9.outputs[1], store_named_attribute_13.inputs[3]
            )
            # group_input_001_15.Bases -> instance_on_points_001_1.Instance
            mn_dna_double_helix.links.new(
                group_input_001_15.outputs[1], instance_on_points_001_1.inputs[2]
            )
            # value_004.Value -> math_002_12.Value
            mn_dna_double_helix.links.new(value_004.outputs[0], math_002_12.inputs[0])
            # group_input_113.Rot. Sec. Strand -> math_002_12.Value
            mn_dna_double_helix.links.new(
                group_input_113.outputs[2], math_002_12.inputs[1]
            )
            # group_input_113.Unzip -> math_004_3.Value
            mn_dna_double_helix.links.new(
                group_input_113.outputs[3], math_004_3.inputs[1]
            )
            # group_input_113.Rotation -> reroute_31.Input
            mn_dna_double_helix.links.new(
                group_input_113.outputs[4], reroute_31.inputs[0]
            )
            # group_input_113.Unwind -> group_001_21.Unwind
            mn_dna_double_helix.links.new(
                group_input_113.outputs[5], group_001_21.inputs[5]
            )
            # group_input_113.Unwind -> group_002_12.Unwind
            mn_dna_double_helix.links.new(
                group_input_113.outputs[5], group_002_12.inputs[5]
            )
            # math_003_10.Value -> math_004_3.Value
            mn_dna_double_helix.links.new(math_003_10.outputs[0], math_004_3.inputs[0])
            # math_005_2.Value -> group_001_21.Length
            mn_dna_double_helix.links.new(math_005_2.outputs[0], group_001_21.inputs[7])
            # math_005_2.Value -> group_002_12.Length
            mn_dna_double_helix.links.new(math_005_2.outputs[0], group_002_12.inputs[7])
            # value_4.Value -> math_005_2.Value
            mn_dna_double_helix.links.new(value_4.outputs[0], math_005_2.inputs[0])
            # math_006_3.Value -> group_002_12.Offset
            mn_dna_double_helix.links.new(math_006_3.outputs[0], group_002_12.inputs[6])
            # group_31.Geometry -> capture_attribute_001_4.Geometry
            mn_dna_double_helix.links.new(
                group_31.outputs[0], capture_attribute_001_4.inputs[0]
            )
            # random_value_2.Value -> capture_attribute_001_4.Value
            mn_dna_double_helix.links.new(
                random_value_2.outputs[2], capture_attribute_001_4.inputs[1]
            )
            # capture_attribute_001_4.Geometry -> reroute_002_16.Input
            mn_dna_double_helix.links.new(
                capture_attribute_001_4.outputs[0], reroute_002_16.inputs[0]
            )
            # named_attribute_001_16.Attribute -> compare_001_20.A
            mn_dna_double_helix.links.new(
                named_attribute_001_16.outputs[0], compare_001_20.inputs[2]
            )
            # compare_001_20.Result -> switch_29.Switch
            mn_dna_double_helix.links.new(
                compare_001_20.outputs[0], switch_29.inputs[0]
            )
            # reroute_001_20.Output -> switch_29.False
            mn_dna_double_helix.links.new(
                reroute_001_20.outputs[0], switch_29.inputs[1]
            )
            # switch_29.Output -> instance_on_points_001_1.Instance Index
            mn_dna_double_helix.links.new(
                switch_29.outputs[0], instance_on_points_001_1.inputs[4]
            )
            # capture_attribute_001_4.Value -> reroute_001_20.Input
            mn_dna_double_helix.links.new(
                capture_attribute_001_4.outputs[1], reroute_001_20.inputs[0]
            )
            # reroute_001_20.Output -> math_007.Value
            mn_dna_double_helix.links.new(reroute_001_20.outputs[0], math_007.inputs[0])
            # math_007.Value -> math_008_2.Value
            mn_dna_double_helix.links.new(math_007.outputs[0], math_008_2.inputs[0])
            # math_008_2.Value -> switch_29.True
            mn_dna_double_helix.links.new(math_008_2.outputs[0], switch_29.inputs[2])
            # rotate_instances_2.Instances -> translate_instances_2.Instances
            mn_dna_double_helix.links.new(
                rotate_instances_2.outputs[0], translate_instances_2.inputs[0]
            )
            # named_attribute_002_15.Attribute -> compare_34.A
            mn_dna_double_helix.links.new(
                named_attribute_002_15.outputs[0], compare_34.inputs[2]
            )
            # compare_34.Result -> translate_instances_2.Selection
            mn_dna_double_helix.links.new(
                compare_34.outputs[0], translate_instances_2.inputs[1]
            )
            # vector_math_23.Vector -> translate_instances_2.Translation
            mn_dna_double_helix.links.new(
                vector_math_23.outputs[0], translate_instances_2.inputs[2]
            )
            # instance_on_points_001_1.Instances -> rotate_instances_2.Instances
            mn_dna_double_helix.links.new(
                instance_on_points_001_1.outputs[0], rotate_instances_2.inputs[0]
            )
            # store_named_attribute_13.Geometry -> group_output_114.Helix Curve
            mn_dna_double_helix.links.new(
                store_named_attribute_13.outputs[0], group_output_114.inputs[1]
            )
            # group_001_21.Curve -> join_geometry_001_1.Geometry
            mn_dna_double_helix.links.new(
                group_001_21.outputs[0], join_geometry_001_1.inputs[0]
            )
            return mn_dna_double_helix

        mn_dna_double_helix = mn_dna_double_helix_node_group()

        # initialize topology_find_bonds node group
        def topology_find_bonds_node_group():
            topology_find_bonds = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Topology Find Bonds"
            )

            topology_find_bonds.color_tag = "GEOMETRY"
            topology_find_bonds.description = ""

            topology_find_bonds.is_modifier = True

            # topology_find_bonds interface
            # Socket Atoms
            atoms_socket_25 = topology_find_bonds.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_25.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_26 = topology_find_bonds.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_26.attribute_domain = "POINT"
            atoms_socket_26.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_39 = topology_find_bonds.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_39.attribute_domain = "POINT"
            selection_socket_39.hide_value = True
            selection_socket_39.description = "Selection of atoms to apply this node to"

            # Socket Scale
            scale_socket_3 = topology_find_bonds.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_socket_3.subtype = "NONE"
            scale_socket_3.default_value = 1.0
            scale_socket_3.min_value = 0.0
            scale_socket_3.max_value = 10000.0
            scale_socket_3.attribute_domain = "POINT"
            scale_socket_3.description = (
                "Scale the VDW radii of the atoms when searching for bonds"
            )

            # initialize topology_find_bonds nodes
            # node Frame
            frame_14 = topology_find_bonds.nodes.new("NodeFrame")
            frame_14.label = "Create Distance Probe"
            frame_14.name = "Frame"
            frame_14.label_size = 20
            frame_14.shrink = True

            # node Sample Nearest
            sample_nearest_2 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_2.name = "Sample Nearest"
            sample_nearest_2.domain = "POINT"
            # Sample Position
            sample_nearest_2.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Sample Index.001
            sample_index_001_8 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_8.name = "Sample Index.001"
            sample_index_001_8.clamp = False
            sample_index_001_8.data_type = "FLOAT_VECTOR"
            sample_index_001_8.domain = "POINT"

            # node Math
            math_28 = topology_find_bonds.nodes.new("ShaderNodeMath")
            math_28.name = "Math"
            math_28.hide = True
            math_28.operation = "MULTIPLY"
            math_28.use_clamp = False
            math_28.inputs[2].hide = True

            # node Group Input.001
            group_input_001_16 = topology_find_bonds.nodes.new("NodeGroupInput")
            group_input_001_16.name = "Group Input.001"
            group_input_001_16.outputs[0].hide = True
            group_input_001_16.outputs[1].hide = True
            group_input_001_16.outputs[3].hide = True

            # node Sample Index
            sample_index_8 = topology_find_bonds.nodes.new("GeometryNodeSampleIndex")
            sample_index_8.name = "Sample Index"
            sample_index_8.clamp = False
            sample_index_8.data_type = "FLOAT_VECTOR"
            sample_index_8.domain = "POINT"

            # node Vector Math
            vector_math_24 = topology_find_bonds.nodes.new("ShaderNodeVectorMath")
            vector_math_24.name = "Vector Math"
            vector_math_24.operation = "SCALE"
            # Scale
            vector_math_24.inputs[3].default_value = -1.0

            # node Position
            position_12 = topology_find_bonds.nodes.new("GeometryNodeInputPosition")
            position_12.name = "Position"

            # node Ico Sphere
            ico_sphere = topology_find_bonds.nodes.new("GeometryNodeMeshIcoSphere")
            ico_sphere.name = "Ico Sphere"
            # Radius
            ico_sphere.inputs[0].default_value = 1.0
            # Subdivisions
            ico_sphere.inputs[1].default_value = 1

            # node Index
            index_17 = topology_find_bonds.nodes.new("GeometryNodeInputIndex")
            index_17.name = "Index"

            # node Mesh Line
            mesh_line_1 = topology_find_bonds.nodes.new("GeometryNodeMeshLine")
            mesh_line_1.name = "Mesh Line"
            mesh_line_1.hide = True
            mesh_line_1.count_mode = "TOTAL"
            mesh_line_1.mode = "OFFSET"
            # Count
            mesh_line_1.inputs[0].default_value = 2
            # Start Location
            mesh_line_1.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Offset
            mesh_line_1.inputs[3].default_value = (0.0, 0.0, 1.0)

            # node Instance on Points
            instance_on_points_5 = topology_find_bonds.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_5.name = "Instance on Points"
            # Selection
            instance_on_points_5.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_5.inputs[3].default_value = False
            # Instance Index
            instance_on_points_5.inputs[4].default_value = 0
            # Scale
            instance_on_points_5.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Named Attribute
            named_attribute_29 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_29.name = "Named Attribute"
            named_attribute_29.data_type = "INT"
            # Name
            named_attribute_29.inputs[0].default_value = "atomic_number"

            # node Sample Index.006
            sample_index_006_1 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_006_1.name = "Sample Index.006"
            sample_index_006_1.clamp = False
            sample_index_006_1.data_type = "INT"
            sample_index_006_1.domain = "POINT"

            # node Named Attribute.002
            named_attribute_002_16 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_16.name = "Named Attribute.002"
            named_attribute_002_16.data_type = "INT"
            # Name
            named_attribute_002_16.inputs[0].default_value = "res_name"

            # node Sample Index.007
            sample_index_007_2 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_007_2.name = "Sample Index.007"
            sample_index_007_2.clamp = False
            sample_index_007_2.data_type = "INT"
            sample_index_007_2.domain = "POINT"

            # node Named Attribute.003
            named_attribute_003_6 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_6.name = "Named Attribute.003"
            named_attribute_003_6.data_type = "INT"
            # Name
            named_attribute_003_6.inputs[0].default_value = "chain_id"

            # node Sample Index.008
            sample_index_008_1 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_008_1.name = "Sample Index.008"
            sample_index_008_1.clamp = False
            sample_index_008_1.data_type = "INT"
            sample_index_008_1.domain = "POINT"

            # node Named Attribute.004
            named_attribute_004_3 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_3.name = "Named Attribute.004"
            named_attribute_004_3.data_type = "INT"
            # Name
            named_attribute_004_3.inputs[0].default_value = "res_id"

            # node Sample Index.005
            sample_index_005_2 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_005_2.name = "Sample Index.005"
            sample_index_005_2.clamp = False
            sample_index_005_2.data_type = "INT"
            sample_index_005_2.domain = "POINT"

            # node Reroute.002
            reroute_002_17 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_002_17.name = "Reroute.002"
            # node Sample Index.009
            sample_index_009_2 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_009_2.name = "Sample Index.009"
            sample_index_009_2.clamp = False
            sample_index_009_2.data_type = "FLOAT"
            sample_index_009_2.domain = "POINT"

            # node Named Attribute.005
            named_attribute_005_2 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_005_2.name = "Named Attribute.005"
            named_attribute_005_2.data_type = "FLOAT"
            # Name
            named_attribute_005_2.inputs[0].default_value = "vdw_radii"

            # node Realize Instances
            realize_instances_8 = topology_find_bonds.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_8.name = "Realize Instances"
            # Selection
            realize_instances_8.inputs[1].default_value = True
            # Realize All
            realize_instances_8.inputs[2].default_value = True
            # Depth
            realize_instances_8.inputs[3].default_value = 0

            # node Instance on Points.001
            instance_on_points_001_2 = topology_find_bonds.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_001_2.name = "Instance on Points.001"
            # Selection
            instance_on_points_001_2.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_001_2.inputs[3].default_value = False
            # Instance Index
            instance_on_points_001_2.inputs[4].default_value = 0
            # Rotation
            instance_on_points_001_2.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Realize Instances.001
            realize_instances_001_2 = topology_find_bonds.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_001_2.name = "Realize Instances.001"
            # Selection
            realize_instances_001_2.inputs[1].default_value = True
            # Realize All
            realize_instances_001_2.inputs[2].default_value = True
            # Depth
            realize_instances_001_2.inputs[3].default_value = 0

            # node Set Position
            set_position_10 = topology_find_bonds.nodes.new("GeometryNodeSetPosition")
            set_position_10.name = "Set Position"
            # Selection
            set_position_10.inputs[1].default_value = True
            # Offset
            set_position_10.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Position.001
            position_001_6 = topology_find_bonds.nodes.new("GeometryNodeInputPosition")
            position_001_6.name = "Position.001"

            # node Store Named Attribute.001
            store_named_attribute_001_4 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_4.name = "Store Named Attribute.001"
            store_named_attribute_001_4.data_type = "INT"
            store_named_attribute_001_4.domain = "POINT"
            # Selection
            store_named_attribute_001_4.inputs[1].default_value = True
            # Name
            store_named_attribute_001_4.inputs[2].default_value = "res_name"

            # node Store Named Attribute.002
            store_named_attribute_002_2 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_2.name = "Store Named Attribute.002"
            store_named_attribute_002_2.data_type = "INT"
            store_named_attribute_002_2.domain = "POINT"
            # Selection
            store_named_attribute_002_2.inputs[1].default_value = True
            # Name
            store_named_attribute_002_2.inputs[2].default_value = "chain_id"

            # node Store Named Attribute.003
            store_named_attribute_003_2 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_2.name = "Store Named Attribute.003"
            store_named_attribute_003_2.data_type = "INT"
            store_named_attribute_003_2.domain = "POINT"
            # Selection
            store_named_attribute_003_2.inputs[1].default_value = True
            # Name
            store_named_attribute_003_2.inputs[2].default_value = "res_id"

            # node Store Named Attribute
            store_named_attribute_14 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_14.name = "Store Named Attribute"
            store_named_attribute_14.data_type = "INT"
            store_named_attribute_14.domain = "POINT"
            # Selection
            store_named_attribute_14.inputs[1].default_value = True
            # Name
            store_named_attribute_14.inputs[2].default_value = "atomic_number"

            # node Index.002
            index_002_3 = topology_find_bonds.nodes.new("GeometryNodeInputIndex")
            index_002_3.name = "Index.002"

            # node Named Attribute.006
            named_attribute_006_2 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_006_2.name = "Named Attribute.006"
            named_attribute_006_2.data_type = "INT"
            # Name
            named_attribute_006_2.inputs[0].default_value = "pre_bond_index"

            # node Merge by Distance
            merge_by_distance_1 = topology_find_bonds.nodes.new(
                "GeometryNodeMergeByDistance"
            )
            merge_by_distance_1.name = "Merge by Distance"
            merge_by_distance_1.mode = "ALL"
            # Selection
            merge_by_distance_1.inputs[1].default_value = True
            # Distance
            merge_by_distance_1.inputs[2].default_value = 0.0010000000474974513

            # node Group Output
            group_output_115 = topology_find_bonds.nodes.new("NodeGroupOutput")
            group_output_115.name = "Group Output"
            group_output_115.is_active_output = True

            # node Sample Index.011
            sample_index_011 = topology_find_bonds.nodes.new("GeometryNodeSampleIndex")
            sample_index_011.name = "Sample Index.011"
            sample_index_011.clamp = False
            sample_index_011.data_type = "FLOAT_VECTOR"
            sample_index_011.domain = "POINT"

            # node Sample Nearest.001
            sample_nearest_001_1 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_001_1.name = "Sample Nearest.001"
            sample_nearest_001_1.domain = "POINT"
            # Sample Position
            sample_nearest_001_1.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Set Position.002
            set_position_002 = topology_find_bonds.nodes.new("GeometryNodeSetPosition")
            set_position_002.name = "Set Position.002"
            # Selection
            set_position_002.inputs[1].default_value = True
            # Offset
            set_position_002.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Store Named Attribute.004
            store_named_attribute_004_2 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_2.name = "Store Named Attribute.004"
            store_named_attribute_004_2.data_type = "FLOAT"
            store_named_attribute_004_2.domain = "POINT"
            # Selection
            store_named_attribute_004_2.inputs[1].default_value = True
            # Name
            store_named_attribute_004_2.inputs[2].default_value = "vdw_radii"

            # node Store Named Attribute.006
            store_named_attribute_006_1 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_006_1.name = "Store Named Attribute.006"
            store_named_attribute_006_1.data_type = "FLOAT_COLOR"
            store_named_attribute_006_1.domain = "POINT"
            # Selection
            store_named_attribute_006_1.inputs[1].default_value = True
            # Name
            store_named_attribute_006_1.inputs[2].default_value = "Color"

            # node Store Named Attribute.005
            store_named_attribute_005_2 = topology_find_bonds.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005_2.name = "Store Named Attribute.005"
            store_named_attribute_005_2.data_type = "INT"
            store_named_attribute_005_2.domain = "POINT"
            # Selection
            store_named_attribute_005_2.inputs[1].default_value = True
            # Name
            store_named_attribute_005_2.inputs[2].default_value = "pre_bond_index"

            # node Sample Index.012
            sample_index_012 = topology_find_bonds.nodes.new("GeometryNodeSampleIndex")
            sample_index_012.name = "Sample Index.012"
            sample_index_012.clamp = False
            sample_index_012.data_type = "FLOAT_COLOR"
            sample_index_012.domain = "POINT"

            # node Named Attribute.007
            named_attribute_007_1 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_007_1.name = "Named Attribute.007"
            named_attribute_007_1.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_007_1.inputs[0].default_value = "Color"

            # node Math.001
            math_001_17 = topology_find_bonds.nodes.new("ShaderNodeMath")
            math_001_17.label = "x * 0.62"
            math_001_17.name = "Math.001"
            math_001_17.operation = "MULTIPLY"
            math_001_17.use_clamp = False
            # Value_001
            math_001_17.inputs[1].default_value = 0.6200000047683716

            # node Group Input
            group_input_114 = topology_find_bonds.nodes.new("NodeGroupInput")
            group_input_114.name = "Group Input"

            # node Separate Geometry
            separate_geometry_16 = topology_find_bonds.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_16.name = "Separate Geometry"
            separate_geometry_16.domain = "POINT"

            # node Position.002
            position_002_8 = topology_find_bonds.nodes.new("GeometryNodeInputPosition")
            position_002_8.name = "Position.002"

            # node Sample Index.010
            sample_index_010_1 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_010_1.name = "Sample Index.010"
            sample_index_010_1.clamp = False
            sample_index_010_1.data_type = "INT"
            sample_index_010_1.domain = "POINT"

            # node Sample Index.002
            sample_index_002_7 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002_7.name = "Sample Index.002"
            sample_index_002_7.clamp = False
            sample_index_002_7.data_type = "FLOAT"
            sample_index_002_7.domain = "POINT"

            # node Named Attribute.008
            named_attribute_008_1 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_008_1.label = "vdw_radii"
            named_attribute_008_1.name = "Named Attribute.008"
            named_attribute_008_1.hide = True
            named_attribute_008_1.data_type = "FLOAT"
            # Name
            named_attribute_008_1.inputs[0].default_value = "vdw_radii"

            # node Index.001
            index_001_6 = topology_find_bonds.nodes.new("GeometryNodeInputIndex")
            index_001_6.name = "Index.001"

            # node Sample Index.003
            sample_index_003_6 = topology_find_bonds.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_003_6.name = "Sample Index.003"
            sample_index_003_6.clamp = False
            sample_index_003_6.data_type = "FLOAT_VECTOR"
            sample_index_003_6.domain = "POINT"

            # node Position.003
            position_003 = topology_find_bonds.nodes.new("GeometryNodeInputPosition")
            position_003.name = "Position.003"

            # node Reroute.004
            reroute_004_8 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_004_8.name = "Reroute.004"
            # node Points
            points = topology_find_bonds.nodes.new("GeometryNodePoints")
            points.name = "Points"

            # node Domain Size
            domain_size_8 = topology_find_bonds.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_8.name = "Domain Size"
            domain_size_8.hide = True
            domain_size_8.component = "MESH"
            domain_size_8.outputs[1].hide = True
            domain_size_8.outputs[2].hide = True
            domain_size_8.outputs[3].hide = True
            domain_size_8.outputs[4].hide = True
            domain_size_8.outputs[5].hide = True
            domain_size_8.outputs[6].hide = True

            # node Axes to Rotation
            axes_to_rotation = topology_find_bonds.nodes.new(
                "FunctionNodeAxesToRotation"
            )
            axes_to_rotation.name = "Axes to Rotation"
            axes_to_rotation.primary_axis = "Z"
            axes_to_rotation.secondary_axis = "X"
            # Secondary Axis
            axes_to_rotation.inputs[1].default_value = (1.0, 0.0, 0.0)

            # node Merge by Distance.001
            merge_by_distance_001 = topology_find_bonds.nodes.new(
                "GeometryNodeMergeByDistance"
            )
            merge_by_distance_001.name = "Merge by Distance.001"
            merge_by_distance_001.mode = "ALL"
            # Selection
            merge_by_distance_001.inputs[1].default_value = True
            # Distance
            merge_by_distance_001.inputs[2].default_value = 0.0010000000474974513

            # node Index.003
            index_003_1 = topology_find_bonds.nodes.new("GeometryNodeInputIndex")
            index_003_1.name = "Index.003"

            # node Sort Elements
            sort_elements = topology_find_bonds.nodes.new("GeometryNodeSortElements")
            sort_elements.name = "Sort Elements"
            sort_elements.domain = "POINT"
            # Selection
            sort_elements.inputs[1].default_value = True
            # Group ID
            sort_elements.inputs[2].default_value = 0

            # node Reroute.006
            reroute_006_7 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_006_7.name = "Reroute.006"
            # node Capture Attribute
            capture_attribute_10 = topology_find_bonds.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_10.name = "Capture Attribute"
            capture_attribute_10.active_index = 0
            capture_attribute_10.capture_items.clear()
            capture_attribute_10.capture_items.new("FLOAT", "Index")
            capture_attribute_10.capture_items["Index"].data_type = "INT"
            capture_attribute_10.domain = "POINT"

            # node Reroute.001
            reroute_001_21 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_001_21.name = "Reroute.001"
            # node Reroute.003
            reroute_003_12 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_003_12.name = "Reroute.003"
            # node Reroute.005
            reroute_005_8 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_005_8.name = "Reroute.005"
            # node Reroute.007
            reroute_007_6 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_007_6.name = "Reroute.007"
            # node Reroute.008
            reroute_008_3 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_008_3.name = "Reroute.008"
            # node Reroute.009
            reroute_009_5 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_009_5.name = "Reroute.009"
            # node Reroute.010
            reroute_010_4 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_010_4.name = "Reroute.010"
            # node Reroute.011
            reroute_011_2 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_011_2.name = "Reroute.011"
            # node Reroute.012
            reroute_012_2 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_012_2.name = "Reroute.012"
            # node Reroute.013
            reroute_013_2 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_013_2.name = "Reroute.013"
            # node Reroute.014
            reroute_014_1 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_014_1.name = "Reroute.014"
            # node Reroute.015
            reroute_015_2 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_015_2.name = "Reroute.015"
            # node Reroute.016
            reroute_016_1 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_016_1.name = "Reroute.016"
            # node Reroute.017
            reroute_017_1 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_017_1.name = "Reroute.017"
            # node Frame.001
            frame_001_5 = topology_find_bonds.nodes.new("NodeFrame")
            frame_001_5.label = "Get original index to sample values with"
            frame_001_5.name = "Frame.001"
            frame_001_5.label_size = 20
            frame_001_5.shrink = True

            # node Frame.002
            frame_002_4 = topology_find_bonds.nodes.new("NodeFrame")
            frame_002_4.label = "Create a clean set of points for instancing on"
            frame_002_4.name = "Frame.002"
            frame_002_4.label_size = 20
            frame_002_4.shrink = True

            # node Named Attribute.001
            named_attribute_001_17 = topology_find_bonds.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_17.name = "Named Attribute.001"
            named_attribute_001_17.data_type = "INT"
            # Name
            named_attribute_001_17.inputs[0].default_value = "pre_bond_index"

            # node Remove Named Attribute
            remove_named_attribute_1 = topology_find_bonds.nodes.new(
                "GeometryNodeRemoveAttribute"
            )
            remove_named_attribute_1.name = "Remove Named Attribute"
            remove_named_attribute_1.pattern_mode = "EXACT"
            # Name
            remove_named_attribute_1.inputs[1].default_value = "pre_bond_index"

            # node Reroute
            reroute_32 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_32.name = "Reroute"
            # node Reroute.018
            reroute_018_2 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_018_2.name = "Reroute.018"
            # node Frame.003
            frame_003_3 = topology_find_bonds.nodes.new("NodeFrame")
            frame_003_3.label = "Apply the distance probe"
            frame_003_3.name = "Frame.003"
            frame_003_3.label_size = 20
            frame_003_3.shrink = True

            # node Domain Size.001
            domain_size_001 = topology_find_bonds.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_001.name = "Domain Size.001"
            domain_size_001.component = "MESH"
            domain_size_001.outputs[1].hide = True
            domain_size_001.outputs[2].hide = True
            domain_size_001.outputs[3].hide = True
            domain_size_001.outputs[4].hide = True
            domain_size_001.outputs[5].hide = True
            domain_size_001.outputs[6].hide = True

            # node Compare
            compare_35 = topology_find_bonds.nodes.new("FunctionNodeCompare")
            compare_35.name = "Compare"
            compare_35.data_type = "INT"
            compare_35.mode = "ELEMENT"
            compare_35.operation = "EQUAL"
            # B_INT
            compare_35.inputs[3].default_value = 0

            # node Switch
            switch_30 = topology_find_bonds.nodes.new("GeometryNodeSwitch")
            switch_30.name = "Switch"
            switch_30.input_type = "GEOMETRY"

            # node Reroute.019
            reroute_019 = topology_find_bonds.nodes.new("NodeReroute")
            reroute_019.name = "Reroute.019"
            # node Frame.004
            frame_004_1 = topology_find_bonds.nodes.new("NodeFrame")
            frame_004_1.label = "stop warning if nothing selected"
            frame_004_1.name = "Frame.004"
            frame_004_1.label_size = 20
            frame_004_1.shrink = True

            # node Frame.005
            frame_005_1 = topology_find_bonds.nodes.new("NodeFrame")
            frame_005_1.label = "Sort elements to the same as they previously were"
            frame_005_1.name = "Frame.005"
            frame_005_1.label_size = 20
            frame_005_1.shrink = True

            # Set parents
            sample_nearest_2.parent = frame_003_3
            sample_index_001_8.parent = frame_003_3
            math_28.parent = frame_003_3
            group_input_001_16.parent = frame_003_3
            sample_index_8.parent = frame_14
            vector_math_24.parent = frame_14
            position_12.parent = frame_14
            ico_sphere.parent = frame_14
            index_17.parent = frame_14
            mesh_line_1.parent = frame_14
            instance_on_points_5.parent = frame_14
            realize_instances_8.parent = frame_14
            instance_on_points_001_2.parent = frame_003_3
            realize_instances_001_2.parent = frame_003_3
            set_position_10.parent = frame_003_3
            position_001_6.parent = frame_003_3
            index_002_3.parent = frame_001_5
            merge_by_distance_1.parent = frame_003_3
            sample_nearest_001_1.parent = frame_001_5
            math_001_17.parent = frame_003_3
            sample_index_010_1.parent = frame_001_5
            sample_index_002_7.parent = frame_002_4
            named_attribute_008_1.parent = frame_002_4
            index_001_6.parent = frame_002_4
            sample_index_003_6.parent = frame_002_4
            position_003.parent = frame_002_4
            reroute_004_8.parent = frame_002_4
            points.parent = frame_002_4
            domain_size_8.parent = frame_002_4
            axes_to_rotation.parent = frame_14
            merge_by_distance_001.parent = frame_14
            sort_elements.parent = frame_005_1
            reroute_006_7.parent = frame_002_4
            reroute_017_1.parent = frame_001_5
            named_attribute_001_17.parent = frame_005_1
            remove_named_attribute_1.parent = frame_005_1
            reroute_32.parent = frame_003_3
            reroute_018_2.parent = frame_003_3
            domain_size_001.parent = frame_004_1
            compare_35.parent = frame_004_1
            switch_30.parent = frame_004_1

            # Set locations
            frame_14.location = (50.0, 157.0)
            sample_nearest_2.location = (420.0, 80.0)
            sample_index_001_8.location = (420.0, 280.0)
            math_28.location = (100.0, 220.0)
            group_input_001_16.location = (100.0, 20.0)
            sample_index_8.location = (-920.0, -200.0)
            vector_math_24.location = (-1100.0, -220.0)
            position_12.location = (-1260.0, -220.0)
            ico_sphere.location = (-1095.594970703125, -40.0)
            index_17.location = (-1100.0, -360.0)
            mesh_line_1.location = (-760.0, -100.0)
            instance_on_points_5.location = (-582.12841796875, -16.803972244262695)
            named_attribute_29.location = (1180.0, 1160.0)
            sample_index_006_1.location = (1360.0, 1040.0)
            named_attribute_002_16.location = (1360.0, 1160.0)
            sample_index_007_2.location = (1520.0, 1040.0)
            named_attribute_003_6.location = (1520.0, 1160.0)
            sample_index_008_1.location = (1680.0, 1040.0)
            named_attribute_004_3.location = (1680.0, 1160.0)
            sample_index_005_2.location = (1180.0, 1040.0)
            reroute_002_17.location = (400.0, 1200.0)
            sample_index_009_2.location = (1840.0, 1040.0)
            named_attribute_005_2.location = (1840.0, 1160.0)
            realize_instances_8.location = (-420.0, -20.0)
            instance_on_points_001_2.location = (260.0, 440.0)
            realize_instances_001_2.location = (420.0, 440.0)
            set_position_10.location = (580.0, 440.0)
            position_001_6.location = (260.0, 140.0)
            store_named_attribute_001_4.location = (1360.0, 820.0)
            store_named_attribute_002_2.location = (1520.0, 820.0)
            store_named_attribute_003_2.location = (1680.0, 820.0)
            store_named_attribute_14.location = (1180.0, 820.0)
            index_002_3.location = (560.0, 800.0)
            named_attribute_006_2.location = (840.0, 1360.0)
            merge_by_distance_1.location = (740.0, 440.0)
            group_output_115.location = (3191.530029296875, 851.8171997070312)
            sample_index_011.location = (2000.0, 1040.0)
            sample_nearest_001_1.location = (560.0, 740.0)
            set_position_002.location = (2000.0, 820.0)
            store_named_attribute_004_2.location = (1840.0, 820.0)
            store_named_attribute_006_1.location = (2160.0, 820.0)
            store_named_attribute_005_2.location = (1020.0, 820.0)
            sample_index_012.location = (2160.0, 1040.0)
            named_attribute_007_1.location = (2160.0, 1160.0)
            math_001_17.location = (100.0, 180.0)
            group_input_114.location = (-1840.0, 940.0)
            separate_geometry_16.location = (-1660.0, 940.0)
            position_002_8.location = (2000.0, 1100.0)
            sample_index_010_1.location = (740.0, 900.0)
            sample_index_002_7.location = (-520.0, 460.0)
            named_attribute_008_1.location = (-760.0, 300.0)
            index_001_6.location = (-780.0, 260.0)
            sample_index_003_6.location = (-360.0, 400.0)
            position_003.location = (-520.0, 260.0)
            reroute_004_8.location = (-580.0, 340.0)
            points.location = (-160.0, 460.0)
            domain_size_8.location = (-360.0, 460.0)
            axes_to_rotation.location = (-760.0, -200.0)
            merge_by_distance_001.location = (-415.59490966796875, -180.0)
            index_003_1.location = (-1660.0, 780.0)
            sort_elements.location = (2540.0, 660.0)
            reroute_006_7.location = (-740.0, 480.0)
            capture_attribute_10.location = (-1460.0, 940.0)
            reroute_001_21.location = (1320.0, 1280.0)
            reroute_003_12.location = (1500.0, 1280.0)
            reroute_005_8.location = (1660.0, 1280.0)
            reroute_007_6.location = (1820.0, 1280.0)
            reroute_008_3.location = (1980.0, 1280.0)
            reroute_009_5.location = (2140.0, 1260.0)
            reroute_010_4.location = (1100.0, 1200.0)
            reroute_011_2.location = (1340.0, 1200.0)
            reroute_012_2.location = (1520.0, 1200.0)
            reroute_013_2.location = (1660.0, 1200.0)
            reroute_014_1.location = (1820.0, 1200.0)
            reroute_015_2.location = (1980.0, 1200.0)
            reroute_016_1.location = (2160.0, 1200.0)
            reroute_017_1.location = (540.0, 780.0)
            frame_001_5.location = (0.0, 0.0)
            frame_002_4.location = (-230.0, 92.0)
            named_attribute_001_17.location = (2540.0, 480.0)
            remove_named_attribute_1.location = (2700.0, 620.0)
            reroute_32.location = (380.0, 80.0)
            reroute_018_2.location = (180.0, 380.0)
            frame_003_3.location = (0.0, 0.0)
            domain_size_001.location = (2600.0, 860.0)
            compare_35.location = (2760.0, 860.0)
            switch_30.location = (2920.0, 860.0)
            reroute_019.location = (2460.0, 780.0)
            frame_004_1.location = (0.0, 0.0)
            frame_005_1.location = (30.0, -50.0)

            # Set dimensions
            frame_14.width, frame_14.height = 1044.0, 463.0
            sample_nearest_2.width, sample_nearest_2.height = 140.0, 100.0
            sample_index_001_8.width, sample_index_001_8.height = 140.0, 100.0
            math_28.width, math_28.height = 140.0, 100.0
            group_input_001_16.width, group_input_001_16.height = 140.0, 100.0
            sample_index_8.width, sample_index_8.height = 140.0, 100.0
            vector_math_24.width, vector_math_24.height = 140.0, 100.0
            position_12.width, position_12.height = 140.0, 100.0
            ico_sphere.width, ico_sphere.height = 140.0, 100.0
            index_17.width, index_17.height = 140.0, 100.0
            mesh_line_1.width, mesh_line_1.height = 140.0, 100.0
            instance_on_points_5.width, instance_on_points_5.height = 140.0, 100.0
            named_attribute_29.width, named_attribute_29.height = 140.0, 100.0
            sample_index_006_1.width, sample_index_006_1.height = 140.0, 100.0
            named_attribute_002_16.width, named_attribute_002_16.height = 140.0, 100.0
            sample_index_007_2.width, sample_index_007_2.height = 140.0, 100.0
            named_attribute_003_6.width, named_attribute_003_6.height = 140.0, 100.0
            sample_index_008_1.width, sample_index_008_1.height = 140.0, 100.0
            named_attribute_004_3.width, named_attribute_004_3.height = 140.0, 100.0
            sample_index_005_2.width, sample_index_005_2.height = 140.0, 100.0
            reroute_002_17.width, reroute_002_17.height = 16.0, 100.0
            sample_index_009_2.width, sample_index_009_2.height = 140.0, 100.0
            named_attribute_005_2.width, named_attribute_005_2.height = 140.0, 100.0
            realize_instances_8.width, realize_instances_8.height = 140.0, 100.0
            instance_on_points_001_2.width, instance_on_points_001_2.height = (
                140.0,
                100.0,
            )
            realize_instances_001_2.width, realize_instances_001_2.height = 140.0, 100.0
            set_position_10.width, set_position_10.height = 140.0, 100.0
            position_001_6.width, position_001_6.height = 140.0, 100.0
            store_named_attribute_001_4.width, store_named_attribute_001_4.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002_2.width, store_named_attribute_002_2.height = (
                140.0,
                100.0,
            )
            store_named_attribute_003_2.width, store_named_attribute_003_2.height = (
                140.0,
                100.0,
            )
            store_named_attribute_14.width, store_named_attribute_14.height = (
                140.0,
                100.0,
            )
            index_002_3.width, index_002_3.height = 140.0, 100.0
            named_attribute_006_2.width, named_attribute_006_2.height = 140.0, 100.0
            merge_by_distance_1.width, merge_by_distance_1.height = 140.0, 100.0
            group_output_115.width, group_output_115.height = 140.0, 100.0
            sample_index_011.width, sample_index_011.height = 140.0, 100.0
            sample_nearest_001_1.width, sample_nearest_001_1.height = 140.0, 100.0
            set_position_002.width, set_position_002.height = 140.0, 100.0
            store_named_attribute_004_2.width, store_named_attribute_004_2.height = (
                140.0,
                100.0,
            )
            store_named_attribute_006_1.width, store_named_attribute_006_1.height = (
                140.0,
                100.0,
            )
            store_named_attribute_005_2.width, store_named_attribute_005_2.height = (
                140.0,
                100.0,
            )
            sample_index_012.width, sample_index_012.height = 140.0, 100.0
            named_attribute_007_1.width, named_attribute_007_1.height = 140.0, 100.0
            math_001_17.width, math_001_17.height = 140.0, 100.0
            group_input_114.width, group_input_114.height = 140.0, 100.0
            separate_geometry_16.width, separate_geometry_16.height = 140.0, 100.0
            position_002_8.width, position_002_8.height = 140.0, 100.0
            sample_index_010_1.width, sample_index_010_1.height = 140.0, 100.0
            sample_index_002_7.width, sample_index_002_7.height = 140.0, 100.0
            named_attribute_008_1.width, named_attribute_008_1.height = 140.0, 100.0
            index_001_6.width, index_001_6.height = 140.0, 100.0
            sample_index_003_6.width, sample_index_003_6.height = 140.0, 100.0
            position_003.width, position_003.height = 140.0, 100.0
            reroute_004_8.width, reroute_004_8.height = 16.0, 100.0
            points.width, points.height = 140.0, 100.0
            domain_size_8.width, domain_size_8.height = 140.0, 100.0
            axes_to_rotation.width, axes_to_rotation.height = 140.0, 100.0
            merge_by_distance_001.width, merge_by_distance_001.height = 140.0, 100.0
            index_003_1.width, index_003_1.height = 140.0, 100.0
            sort_elements.width, sort_elements.height = 140.0, 100.0
            reroute_006_7.width, reroute_006_7.height = 16.0, 100.0
            capture_attribute_10.width, capture_attribute_10.height = 140.0, 100.0
            reroute_001_21.width, reroute_001_21.height = 16.0, 100.0
            reroute_003_12.width, reroute_003_12.height = 16.0, 100.0
            reroute_005_8.width, reroute_005_8.height = 16.0, 100.0
            reroute_007_6.width, reroute_007_6.height = 16.0, 100.0
            reroute_008_3.width, reroute_008_3.height = 16.0, 100.0
            reroute_009_5.width, reroute_009_5.height = 16.0, 100.0
            reroute_010_4.width, reroute_010_4.height = 16.0, 100.0
            reroute_011_2.width, reroute_011_2.height = 16.0, 100.0
            reroute_012_2.width, reroute_012_2.height = 16.0, 100.0
            reroute_013_2.width, reroute_013_2.height = 16.0, 100.0
            reroute_014_1.width, reroute_014_1.height = 16.0, 100.0
            reroute_015_2.width, reroute_015_2.height = 16.0, 100.0
            reroute_016_1.width, reroute_016_1.height = 16.0, 100.0
            reroute_017_1.width, reroute_017_1.height = 16.0, 100.0
            frame_001_5.width, frame_001_5.height = 408.0, 351.0
            frame_002_4.width, frame_002_4.height = 820.0, 351.0
            named_attribute_001_17.width, named_attribute_001_17.height = 140.0, 100.0
            remove_named_attribute_1.width, remove_named_attribute_1.height = (
                170.0,
                100.0,
            )
            reroute_32.width, reroute_32.height = 16.0, 100.0
            reroute_018_2.width, reroute_018_2.height = 16.0, 100.0
            frame_003_3.width, frame_003_3.height = 840.0, 551.0
            domain_size_001.width, domain_size_001.height = 140.0, 100.0
            compare_35.width, compare_35.height = 140.0, 100.0
            switch_30.width, switch_30.height = 140.0, 100.0
            reroute_019.width, reroute_019.height = 16.0, 100.0
            frame_004_1.width, frame_004_1.height = 520.0, 218.0
            frame_005_1.width, frame_005_1.height = 390.0, 371.0

            # initialize topology_find_bonds links
            # ico_sphere.Mesh -> instance_on_points_5.Points
            topology_find_bonds.links.new(
                ico_sphere.outputs[0], instance_on_points_5.inputs[0]
            )
            # mesh_line_1.Mesh -> instance_on_points_5.Instance
            topology_find_bonds.links.new(
                mesh_line_1.outputs[0], instance_on_points_5.inputs[2]
            )
            # ico_sphere.Mesh -> sample_index_8.Geometry
            topology_find_bonds.links.new(
                ico_sphere.outputs[0], sample_index_8.inputs[0]
            )
            # index_17.Index -> sample_index_8.Index
            topology_find_bonds.links.new(index_17.outputs[0], sample_index_8.inputs[2])
            # position_12.Position -> vector_math_24.Vector
            topology_find_bonds.links.new(
                position_12.outputs[0], vector_math_24.inputs[0]
            )
            # vector_math_24.Vector -> sample_index_8.Value
            topology_find_bonds.links.new(
                vector_math_24.outputs[0], sample_index_8.inputs[1]
            )
            # instance_on_points_5.Instances -> realize_instances_8.Geometry
            topology_find_bonds.links.new(
                instance_on_points_5.outputs[0], realize_instances_8.inputs[0]
            )
            # reroute_018_2.Output -> instance_on_points_001_2.Points
            topology_find_bonds.links.new(
                reroute_018_2.outputs[0], instance_on_points_001_2.inputs[0]
            )
            # merge_by_distance_001.Geometry -> instance_on_points_001_2.Instance
            topology_find_bonds.links.new(
                merge_by_distance_001.outputs[0], instance_on_points_001_2.inputs[2]
            )
            # instance_on_points_001_2.Instances -> realize_instances_001_2.Geometry
            topology_find_bonds.links.new(
                instance_on_points_001_2.outputs[0], realize_instances_001_2.inputs[0]
            )
            # math_28.Value -> instance_on_points_001_2.Scale
            topology_find_bonds.links.new(
                math_28.outputs[0], instance_on_points_001_2.inputs[6]
            )
            # realize_instances_001_2.Geometry -> set_position_10.Geometry
            topology_find_bonds.links.new(
                realize_instances_001_2.outputs[0], set_position_10.inputs[0]
            )
            # reroute_32.Output -> sample_index_001_8.Geometry
            topology_find_bonds.links.new(
                reroute_32.outputs[0], sample_index_001_8.inputs[0]
            )
            # position_001_6.Position -> sample_index_001_8.Value
            topology_find_bonds.links.new(
                position_001_6.outputs[0], sample_index_001_8.inputs[1]
            )
            # sample_index_001_8.Value -> set_position_10.Position
            topology_find_bonds.links.new(
                sample_index_001_8.outputs[0], set_position_10.inputs[2]
            )
            # reroute_32.Output -> sample_nearest_2.Geometry
            topology_find_bonds.links.new(
                reroute_32.outputs[0], sample_nearest_2.inputs[0]
            )
            # sample_nearest_2.Index -> sample_index_001_8.Index
            topology_find_bonds.links.new(
                sample_nearest_2.outputs[0], sample_index_001_8.inputs[2]
            )
            # set_position_10.Geometry -> merge_by_distance_1.Geometry
            topology_find_bonds.links.new(
                set_position_10.outputs[0], merge_by_distance_1.inputs[0]
            )
            # group_input_001_16.Scale -> math_001_17.Value
            topology_find_bonds.links.new(
                group_input_001_16.outputs[2], math_001_17.inputs[0]
            )
            # math_001_17.Value -> math_28.Value
            topology_find_bonds.links.new(math_001_17.outputs[0], math_28.inputs[1])
            # reroute_017_1.Output -> sample_nearest_001_1.Geometry
            topology_find_bonds.links.new(
                reroute_017_1.outputs[0], sample_nearest_001_1.inputs[0]
            )
            # reroute_010_4.Output -> sample_index_005_2.Geometry
            topology_find_bonds.links.new(
                reroute_010_4.outputs[0], sample_index_005_2.inputs[0]
            )
            # named_attribute_29.Attribute -> sample_index_005_2.Value
            topology_find_bonds.links.new(
                named_attribute_29.outputs[0], sample_index_005_2.inputs[1]
            )
            # sample_index_005_2.Value -> store_named_attribute_14.Value
            topology_find_bonds.links.new(
                sample_index_005_2.outputs[0], store_named_attribute_14.inputs[3]
            )
            # capture_attribute_10.Geometry -> reroute_002_17.Input
            topology_find_bonds.links.new(
                capture_attribute_10.outputs[0], reroute_002_17.inputs[0]
            )
            # store_named_attribute_005_2.Geometry -> store_named_attribute_14.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_005_2.outputs[0],
                store_named_attribute_14.inputs[0],
            )
            # store_named_attribute_14.Geometry -> store_named_attribute_001_4.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_14.outputs[0],
                store_named_attribute_001_4.inputs[0],
            )
            # reroute_011_2.Output -> sample_index_006_1.Geometry
            topology_find_bonds.links.new(
                reroute_011_2.outputs[0], sample_index_006_1.inputs[0]
            )
            # named_attribute_002_16.Attribute -> sample_index_006_1.Value
            topology_find_bonds.links.new(
                named_attribute_002_16.outputs[0], sample_index_006_1.inputs[1]
            )
            # sample_index_006_1.Value -> store_named_attribute_001_4.Value
            topology_find_bonds.links.new(
                sample_index_006_1.outputs[0], store_named_attribute_001_4.inputs[3]
            )
            # reroute_012_2.Output -> sample_index_007_2.Geometry
            topology_find_bonds.links.new(
                reroute_012_2.outputs[0], sample_index_007_2.inputs[0]
            )
            # named_attribute_003_6.Attribute -> sample_index_007_2.Value
            topology_find_bonds.links.new(
                named_attribute_003_6.outputs[0], sample_index_007_2.inputs[1]
            )
            # reroute_013_2.Output -> sample_index_008_1.Geometry
            topology_find_bonds.links.new(
                reroute_013_2.outputs[0], sample_index_008_1.inputs[0]
            )
            # named_attribute_004_3.Attribute -> sample_index_008_1.Value
            topology_find_bonds.links.new(
                named_attribute_004_3.outputs[0], sample_index_008_1.inputs[1]
            )
            # store_named_attribute_001_4.Geometry -> store_named_attribute_002_2.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_001_4.outputs[0],
                store_named_attribute_002_2.inputs[0],
            )
            # sample_index_007_2.Value -> store_named_attribute_002_2.Value
            topology_find_bonds.links.new(
                sample_index_007_2.outputs[0], store_named_attribute_002_2.inputs[3]
            )
            # store_named_attribute_002_2.Geometry -> store_named_attribute_003_2.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_002_2.outputs[0],
                store_named_attribute_003_2.inputs[0],
            )
            # sample_index_008_1.Value -> store_named_attribute_003_2.Value
            topology_find_bonds.links.new(
                sample_index_008_1.outputs[0], store_named_attribute_003_2.inputs[3]
            )
            # reroute_014_1.Output -> sample_index_009_2.Geometry
            topology_find_bonds.links.new(
                reroute_014_1.outputs[0], sample_index_009_2.inputs[0]
            )
            # named_attribute_005_2.Attribute -> sample_index_009_2.Value
            topology_find_bonds.links.new(
                named_attribute_005_2.outputs[0], sample_index_009_2.inputs[1]
            )
            # reroute_017_1.Output -> sample_index_010_1.Geometry
            topology_find_bonds.links.new(
                reroute_017_1.outputs[0], sample_index_010_1.inputs[0]
            )
            # sample_nearest_001_1.Index -> sample_index_010_1.Index
            topology_find_bonds.links.new(
                sample_nearest_001_1.outputs[0], sample_index_010_1.inputs[2]
            )
            # index_002_3.Index -> sample_index_010_1.Value
            topology_find_bonds.links.new(
                index_002_3.outputs[0], sample_index_010_1.inputs[1]
            )
            # named_attribute_006_2.Attribute -> sample_index_005_2.Index
            topology_find_bonds.links.new(
                named_attribute_006_2.outputs[0], sample_index_005_2.inputs[2]
            )
            # reroute_001_21.Output -> sample_index_006_1.Index
            topology_find_bonds.links.new(
                reroute_001_21.outputs[0], sample_index_006_1.inputs[2]
            )
            # reroute_003_12.Output -> sample_index_007_2.Index
            topology_find_bonds.links.new(
                reroute_003_12.outputs[0], sample_index_007_2.inputs[2]
            )
            # reroute_005_8.Output -> sample_index_008_1.Index
            topology_find_bonds.links.new(
                reroute_005_8.outputs[0], sample_index_008_1.inputs[2]
            )
            # reroute_007_6.Output -> sample_index_009_2.Index
            topology_find_bonds.links.new(
                reroute_007_6.outputs[0], sample_index_009_2.inputs[2]
            )
            # store_named_attribute_003_2.Geometry -> store_named_attribute_004_2.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_003_2.outputs[0],
                store_named_attribute_004_2.inputs[0],
            )
            # sample_index_009_2.Value -> store_named_attribute_004_2.Value
            topology_find_bonds.links.new(
                sample_index_009_2.outputs[0], store_named_attribute_004_2.inputs[3]
            )
            # store_named_attribute_004_2.Geometry -> set_position_002.Geometry
            topology_find_bonds.links.new(
                store_named_attribute_004_2.outputs[0], set_position_002.inputs[0]
            )
            # reroute_015_2.Output -> sample_index_011.Geometry
            topology_find_bonds.links.new(
                reroute_015_2.outputs[0], sample_index_011.inputs[0]
            )
            # reroute_008_3.Output -> sample_index_011.Index
            topology_find_bonds.links.new(
                reroute_008_3.outputs[0], sample_index_011.inputs[2]
            )
            # position_002_8.Position -> sample_index_011.Value
            topology_find_bonds.links.new(
                position_002_8.outputs[0], sample_index_011.inputs[1]
            )
            # sample_index_011.Value -> set_position_002.Position
            topology_find_bonds.links.new(
                sample_index_011.outputs[0], set_position_002.inputs[2]
            )
            # merge_by_distance_1.Geometry -> store_named_attribute_005_2.Geometry
            topology_find_bonds.links.new(
                merge_by_distance_1.outputs[0], store_named_attribute_005_2.inputs[0]
            )
            # sample_index_010_1.Value -> store_named_attribute_005_2.Value
            topology_find_bonds.links.new(
                sample_index_010_1.outputs[0], store_named_attribute_005_2.inputs[3]
            )
            # reroute_009_5.Output -> sample_index_012.Index
            topology_find_bonds.links.new(
                reroute_009_5.outputs[0], sample_index_012.inputs[2]
            )
            # reroute_016_1.Output -> sample_index_012.Geometry
            topology_find_bonds.links.new(
                reroute_016_1.outputs[0], sample_index_012.inputs[0]
            )
            # named_attribute_007_1.Attribute -> sample_index_012.Value
            topology_find_bonds.links.new(
                named_attribute_007_1.outputs[0], sample_index_012.inputs[1]
            )
            # set_position_002.Geometry -> store_named_attribute_006_1.Geometry
            topology_find_bonds.links.new(
                set_position_002.outputs[0], store_named_attribute_006_1.inputs[0]
            )
            # sample_index_012.Value -> store_named_attribute_006_1.Value
            topology_find_bonds.links.new(
                sample_index_012.outputs[0], store_named_attribute_006_1.inputs[3]
            )
            # group_input_114.Atoms -> separate_geometry_16.Geometry
            topology_find_bonds.links.new(
                group_input_114.outputs[0], separate_geometry_16.inputs[0]
            )
            # group_input_114.Selection -> separate_geometry_16.Selection
            topology_find_bonds.links.new(
                group_input_114.outputs[1], separate_geometry_16.inputs[1]
            )
            # reroute_004_8.Output -> sample_index_002_7.Geometry
            topology_find_bonds.links.new(
                reroute_004_8.outputs[0], sample_index_002_7.inputs[0]
            )
            # named_attribute_008_1.Attribute -> sample_index_002_7.Value
            topology_find_bonds.links.new(
                named_attribute_008_1.outputs[0], sample_index_002_7.inputs[1]
            )
            # index_001_6.Index -> sample_index_002_7.Index
            topology_find_bonds.links.new(
                index_001_6.outputs[0], sample_index_002_7.inputs[2]
            )
            # reroute_004_8.Output -> sample_index_003_6.Geometry
            topology_find_bonds.links.new(
                reroute_004_8.outputs[0], sample_index_003_6.inputs[0]
            )
            # index_001_6.Index -> sample_index_003_6.Index
            topology_find_bonds.links.new(
                index_001_6.outputs[0], sample_index_003_6.inputs[2]
            )
            # position_003.Position -> sample_index_003_6.Value
            topology_find_bonds.links.new(
                position_003.outputs[0], sample_index_003_6.inputs[1]
            )
            # reroute_006_7.Output -> reroute_004_8.Input
            topology_find_bonds.links.new(
                reroute_006_7.outputs[0], reroute_004_8.inputs[0]
            )
            # sample_index_003_6.Value -> points.Position
            topology_find_bonds.links.new(
                sample_index_003_6.outputs[0], points.inputs[1]
            )
            # reroute_006_7.Output -> domain_size_8.Geometry
            topology_find_bonds.links.new(
                reroute_006_7.outputs[0], domain_size_8.inputs[0]
            )
            # domain_size_8.Point Count -> points.Count
            topology_find_bonds.links.new(domain_size_8.outputs[0], points.inputs[0])
            # sample_index_002_7.Value -> points.Radius
            topology_find_bonds.links.new(
                sample_index_002_7.outputs[0], points.inputs[2]
            )
            # axes_to_rotation.Rotation -> instance_on_points_5.Rotation
            topology_find_bonds.links.new(
                axes_to_rotation.outputs[0], instance_on_points_5.inputs[5]
            )
            # sample_index_8.Value -> axes_to_rotation.Primary Axis
            topology_find_bonds.links.new(
                sample_index_8.outputs[0], axes_to_rotation.inputs[0]
            )
            # realize_instances_8.Geometry -> merge_by_distance_001.Geometry
            topology_find_bonds.links.new(
                realize_instances_8.outputs[0], merge_by_distance_001.inputs[0]
            )
            # sample_index_002_7.Value -> math_28.Value
            topology_find_bonds.links.new(
                sample_index_002_7.outputs[0], math_28.inputs[0]
            )
            # separate_geometry_16.Selection -> capture_attribute_10.Geometry
            topology_find_bonds.links.new(
                separate_geometry_16.outputs[0], capture_attribute_10.inputs[0]
            )
            # index_003_1.Index -> capture_attribute_10.Index
            topology_find_bonds.links.new(
                index_003_1.outputs[0], capture_attribute_10.inputs[1]
            )
            # capture_attribute_10.Geometry -> reroute_006_7.Input
            topology_find_bonds.links.new(
                capture_attribute_10.outputs[0], reroute_006_7.inputs[0]
            )
            # named_attribute_006_2.Attribute -> reroute_001_21.Input
            topology_find_bonds.links.new(
                named_attribute_006_2.outputs[0], reroute_001_21.inputs[0]
            )
            # reroute_001_21.Output -> reroute_003_12.Input
            topology_find_bonds.links.new(
                reroute_001_21.outputs[0], reroute_003_12.inputs[0]
            )
            # reroute_003_12.Output -> reroute_005_8.Input
            topology_find_bonds.links.new(
                reroute_003_12.outputs[0], reroute_005_8.inputs[0]
            )
            # reroute_005_8.Output -> reroute_007_6.Input
            topology_find_bonds.links.new(
                reroute_005_8.outputs[0], reroute_007_6.inputs[0]
            )
            # reroute_007_6.Output -> reroute_008_3.Input
            topology_find_bonds.links.new(
                reroute_007_6.outputs[0], reroute_008_3.inputs[0]
            )
            # reroute_008_3.Output -> reroute_009_5.Input
            topology_find_bonds.links.new(
                reroute_008_3.outputs[0], reroute_009_5.inputs[0]
            )
            # reroute_002_17.Output -> reroute_010_4.Input
            topology_find_bonds.links.new(
                reroute_002_17.outputs[0], reroute_010_4.inputs[0]
            )
            # reroute_010_4.Output -> reroute_011_2.Input
            topology_find_bonds.links.new(
                reroute_010_4.outputs[0], reroute_011_2.inputs[0]
            )
            # reroute_011_2.Output -> reroute_012_2.Input
            topology_find_bonds.links.new(
                reroute_011_2.outputs[0], reroute_012_2.inputs[0]
            )
            # reroute_012_2.Output -> reroute_013_2.Input
            topology_find_bonds.links.new(
                reroute_012_2.outputs[0], reroute_013_2.inputs[0]
            )
            # reroute_013_2.Output -> reroute_014_1.Input
            topology_find_bonds.links.new(
                reroute_013_2.outputs[0], reroute_014_1.inputs[0]
            )
            # reroute_014_1.Output -> reroute_015_2.Input
            topology_find_bonds.links.new(
                reroute_014_1.outputs[0], reroute_015_2.inputs[0]
            )
            # reroute_015_2.Output -> reroute_016_1.Input
            topology_find_bonds.links.new(
                reroute_015_2.outputs[0], reroute_016_1.inputs[0]
            )
            # reroute_019.Output -> sort_elements.Geometry
            topology_find_bonds.links.new(
                reroute_019.outputs[0], sort_elements.inputs[0]
            )
            # reroute_002_17.Output -> reroute_017_1.Input
            topology_find_bonds.links.new(
                reroute_002_17.outputs[0], reroute_017_1.inputs[0]
            )
            # named_attribute_001_17.Attribute -> sort_elements.Sort Weight
            topology_find_bonds.links.new(
                named_attribute_001_17.outputs[0], sort_elements.inputs[3]
            )
            # sort_elements.Geometry -> remove_named_attribute_1.Geometry
            topology_find_bonds.links.new(
                sort_elements.outputs[0], remove_named_attribute_1.inputs[0]
            )
            # reroute_018_2.Output -> reroute_32.Input
            topology_find_bonds.links.new(
                reroute_018_2.outputs[0], reroute_32.inputs[0]
            )
            # points.Points -> reroute_018_2.Input
            topology_find_bonds.links.new(points.outputs[0], reroute_018_2.inputs[0])
            # reroute_019.Output -> domain_size_001.Geometry
            topology_find_bonds.links.new(
                reroute_019.outputs[0], domain_size_001.inputs[0]
            )
            # domain_size_001.Point Count -> compare_35.A
            topology_find_bonds.links.new(
                domain_size_001.outputs[0], compare_35.inputs[2]
            )
            # switch_30.Output -> group_output_115.Atoms
            topology_find_bonds.links.new(
                switch_30.outputs[0], group_output_115.inputs[0]
            )
            # remove_named_attribute_1.Geometry -> switch_30.False
            topology_find_bonds.links.new(
                remove_named_attribute_1.outputs[0], switch_30.inputs[1]
            )
            # compare_35.Result -> switch_30.Switch
            topology_find_bonds.links.new(compare_35.outputs[0], switch_30.inputs[0])
            # store_named_attribute_006_1.Geometry -> reroute_019.Input
            topology_find_bonds.links.new(
                store_named_attribute_006_1.outputs[0], reroute_019.inputs[0]
            )
            return topology_find_bonds

        topology_find_bonds = topology_find_bonds_node_group()

        # initialize _mn_utils_style_old_ball_and_stick node group
        def _mn_utils_style_old_ball_and_stick_node_group():
            _mn_utils_style_old_ball_and_stick = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_old_ball_and_stick"
            )

            _mn_utils_style_old_ball_and_stick.color_tag = "GEOMETRY"
            _mn_utils_style_old_ball_and_stick.description = ""

            _mn_utils_style_old_ball_and_stick.is_modifier = True

            # _mn_utils_style_old_ball_and_stick interface
            # Socket Ball and Stick Mesh
            ball_and_stick_mesh_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Ball and Stick Mesh",
                    in_out="OUTPUT",
                    socket_type="NodeSocketGeometry",
                )
            )
            ball_and_stick_mesh_socket.attribute_domain = "POINT"

            # Socket Sticks Mesh
            sticks_mesh_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Sticks Mesh",
                    in_out="OUTPUT",
                    socket_type="NodeSocketGeometry",
                )
            )
            sticks_mesh_socket.attribute_domain = "POINT"

            # Socket Ball Instances
            ball_instances_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Ball Instances",
                    in_out="OUTPUT",
                    socket_type="NodeSocketGeometry",
                )
            )
            ball_instances_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_27 = _mn_utils_style_old_ball_and_stick.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_27.attribute_domain = "POINT"
            atoms_socket_27.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_40 = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
                )
            )
            selection_socket_40.attribute_domain = "POINT"
            selection_socket_40.hide_value = True
            selection_socket_40.description = "Selection of atoms to apply this node to"

            # Socket Shade Smooth
            shade_smooth_socket_10 = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
                )
            )
            shade_smooth_socket_10.attribute_domain = "POINT"
            shade_smooth_socket_10.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Ball Resolution
            ball_resolution_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Ball Resolution", in_out="INPUT", socket_type="NodeSocketInt"
                )
            )
            ball_resolution_socket.subtype = "NONE"
            ball_resolution_socket.default_value = 2
            ball_resolution_socket.min_value = 1
            ball_resolution_socket.max_value = 7
            ball_resolution_socket.attribute_domain = "POINT"

            # Socket Ball Radius
            ball_radius_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Ball Radius", in_out="INPUT", socket_type="NodeSocketFloat"
                )
            )
            ball_radius_socket.subtype = "DISTANCE"
            ball_radius_socket.default_value = 0.30000001192092896
            ball_radius_socket.min_value = 0.0
            ball_radius_socket.max_value = 3.4028234663852886e38
            ball_radius_socket.attribute_domain = "POINT"

            # Socket Find Bonds
            find_bonds_socket = _mn_utils_style_old_ball_and_stick.interface.new_socket(
                name="Find Bonds", in_out="INPUT", socket_type="NodeSocketBool"
            )
            find_bonds_socket.attribute_domain = "POINT"

            # Socket Bond Resolution
            bond_resolution_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Bond Resolution", in_out="INPUT", socket_type="NodeSocketInt"
                )
            )
            bond_resolution_socket.subtype = "NONE"
            bond_resolution_socket.default_value = 8
            bond_resolution_socket.min_value = 3
            bond_resolution_socket.max_value = 512
            bond_resolution_socket.attribute_domain = "POINT"

            # Socket Bond Radius
            bond_radius_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Bond Radius", in_out="INPUT", socket_type="NodeSocketFloat"
                )
            )
            bond_radius_socket.subtype = "NONE"
            bond_radius_socket.default_value = 0.20000000298023224
            bond_radius_socket.min_value = -10000.0
            bond_radius_socket.max_value = 10000.0
            bond_radius_socket.attribute_domain = "POINT"

            # Socket Split Double Bonds
            split_double_bonds_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Split Double Bonds",
                    in_out="INPUT",
                    socket_type="NodeSocketBool",
                )
            )
            split_double_bonds_socket.attribute_domain = "POINT"

            # Socket Double Bond Curve
            double_bond_curve_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Double Bond Curve",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_curve_socket.subtype = "NONE"
            double_bond_curve_socket.default_value = 1.0
            double_bond_curve_socket.min_value = -10000.0
            double_bond_curve_socket.max_value = 10000.0
            double_bond_curve_socket.attribute_domain = "POINT"

            # Socket Double Bond Width
            double_bond_width_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Double Bond Width",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_width_socket.subtype = "NONE"
            double_bond_width_socket.default_value = 1.0
            double_bond_width_socket.min_value = 0.0
            double_bond_width_socket.max_value = 10000.0
            double_bond_width_socket.attribute_domain = "POINT"

            # Socket Double Bond Resolution
            double_bond_resolution_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Double Bond Resolution",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                )
            )
            double_bond_resolution_socket.subtype = "NONE"
            double_bond_resolution_socket.default_value = 3
            double_bond_resolution_socket.min_value = 1
            double_bond_resolution_socket.max_value = 2147483647
            double_bond_resolution_socket.attribute_domain = "POINT"

            # Socket Double Bond Radius
            double_bond_radius_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Double Bond Radius",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_radius_socket.subtype = "NONE"
            double_bond_radius_socket.default_value = 0.20000000298023224
            double_bond_radius_socket.min_value = 0.0
            double_bond_radius_socket.max_value = 1.0
            double_bond_radius_socket.attribute_domain = "POINT"

            # Socket Double Bond Rotate
            double_bond_rotate_socket = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Double Bond Rotate",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_rotate_socket.subtype = "NONE"
            double_bond_rotate_socket.default_value = 0.0
            double_bond_rotate_socket.min_value = -10000.0
            double_bond_rotate_socket.max_value = 10000.0
            double_bond_rotate_socket.attribute_domain = "POINT"

            # Socket Material
            material_socket_15 = (
                _mn_utils_style_old_ball_and_stick.interface.new_socket(
                    name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
                )
            )
            material_socket_15.attribute_domain = "POINT"
            material_socket_15.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize _mn_utils_style_old_ball_and_stick nodes
            # node Frame
            frame_15 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeFrame")
            frame_15.label = "Atoms"
            frame_15.name = "Frame"
            frame_15.label_size = 20
            frame_15.shrink = True

            # node Math.003
            math_003_11 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_003_11.label = "tau / x"
            math_003_11.name = "Math.003"
            math_003_11.hide = True
            math_003_11.operation = "DIVIDE"
            math_003_11.use_clamp = False
            # Value
            math_003_11.inputs[0].default_value = 6.2831854820251465

            # node Vector Math.002
            vector_math_002_8 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_002_8.name = "Vector Math.002"
            vector_math_002_8.operation = "SCALE"

            # node Vector Math.005
            vector_math_005_3 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_005_3.name = "Vector Math.005"
            vector_math_005_3.operation = "SCALE"

            # node Switch
            switch_31 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_31.name = "Switch"
            switch_31.input_type = "INT"
            # False
            switch_31.inputs[1].default_value = 1

            # node Curve to Mesh
            curve_to_mesh_6 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeCurveToMesh"
            )
            curve_to_mesh_6.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_6.inputs[2].default_value = False

            # node Reroute.003
            reroute_003_13 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_003_13.name = "Reroute.003"
            # node Named Attribute.002
            named_attribute_002_17 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_17.name = "Named Attribute.002"
            named_attribute_002_17.data_type = "INT"
            # Name
            named_attribute_002_17.inputs[0].default_value = "bond_type"

            # node Group Input.004
            group_input_004_5 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_004_5.name = "Group Input.004"
            group_input_004_5.outputs[0].hide = True
            group_input_004_5.outputs[1].hide = True
            group_input_004_5.outputs[2].hide = True
            group_input_004_5.outputs[3].hide = True
            group_input_004_5.outputs[4].hide = True
            group_input_004_5.outputs[5].hide = True
            group_input_004_5.outputs[6].hide = True
            group_input_004_5.outputs[7].hide = True
            group_input_004_5.outputs[9].hide = True
            group_input_004_5.outputs[10].hide = True
            group_input_004_5.outputs[11].hide = True
            group_input_004_5.outputs[12].hide = True
            group_input_004_5.outputs[13].hide = True
            group_input_004_5.outputs[14].hide = True
            group_input_004_5.outputs[15].hide = True

            # node Switch.002
            switch_002_15 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_002_15.name = "Switch.002"
            switch_002_15.input_type = "INT"
            # False
            switch_002_15.inputs[1].default_value = 1
            # True
            switch_002_15.inputs[2].default_value = 3

            # node Map Range
            map_range_7 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeMapRange"
            )
            map_range_7.name = "Map Range"
            map_range_7.clamp = False
            map_range_7.data_type = "FLOAT"
            map_range_7.interpolation_type = "SMOOTHERSTEP"
            # From Min
            map_range_7.inputs[1].default_value = 0.0
            # From Max
            map_range_7.inputs[2].default_value = 1.0
            # To Min
            map_range_7.inputs[3].default_value = 1.0
            # To Max
            map_range_7.inputs[4].default_value = 2.0

            # node Switch.003
            switch_003_6 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_003_6.name = "Switch.003"
            switch_003_6.input_type = "FLOAT"
            # False
            switch_003_6.inputs[1].default_value = 1.0

            # node Compare.003
            compare_003_12 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_003_12.name = "Compare.003"
            compare_003_12.data_type = "INT"
            compare_003_12.mode = "ELEMENT"
            compare_003_12.operation = "GREATER_THAN"
            # B_INT
            compare_003_12.inputs[3].default_value = 1

            # node Group Input.001
            group_input_001_17 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_001_17.name = "Group Input.001"
            group_input_001_17.outputs[0].hide = True
            group_input_001_17.outputs[1].hide = True
            group_input_001_17.outputs[2].hide = True
            group_input_001_17.outputs[3].hide = True
            group_input_001_17.outputs[4].hide = True
            group_input_001_17.outputs[5].hide = True
            group_input_001_17.outputs[6].hide = True
            group_input_001_17.outputs[7].hide = True
            group_input_001_17.outputs[8].hide = True
            group_input_001_17.outputs[10].hide = True
            group_input_001_17.outputs[11].hide = True
            group_input_001_17.outputs[12].hide = True
            group_input_001_17.outputs[13].hide = True
            group_input_001_17.outputs[14].hide = True
            group_input_001_17.outputs[15].hide = True

            # node Vector Rotate
            vector_rotate_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_1.name = "Vector Rotate"
            vector_rotate_1.invert = False
            vector_rotate_1.rotation_type = "AXIS_ANGLE"
            # Center
            vector_rotate_1.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Math.002
            math_002_13 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_002_13.name = "Math.002"
            math_002_13.operation = "DIVIDE"
            math_002_13.use_clamp = False
            # Value_001
            math_002_13.inputs[1].default_value = 500.0

            # node Group Input.002
            group_input_002_9 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_002_9.name = "Group Input.002"
            group_input_002_9.outputs[0].hide = True
            group_input_002_9.outputs[1].hide = True
            group_input_002_9.outputs[2].hide = True
            group_input_002_9.outputs[3].hide = True
            group_input_002_9.outputs[4].hide = True
            group_input_002_9.outputs[5].hide = True
            group_input_002_9.outputs[6].hide = True
            group_input_002_9.outputs[7].hide = True
            group_input_002_9.outputs[8].hide = True
            group_input_002_9.outputs[9].hide = True
            group_input_002_9.outputs[11].hide = True
            group_input_002_9.outputs[12].hide = True
            group_input_002_9.outputs[14].hide = True
            group_input_002_9.outputs[15].hide = True

            # node Math.001
            math_001_18 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_001_18.name = "Math.001"
            math_001_18.operation = "MULTIPLY"
            math_001_18.use_clamp = False

            # node Math.004
            math_004_4 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_004_4.name = "Math.004"
            math_004_4.operation = "ADD"
            math_004_4.use_clamp = False

            # node Duplicate Elements
            duplicate_elements_2 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeDuplicateElements"
            )
            duplicate_elements_2.name = "Duplicate Elements"
            duplicate_elements_2.domain = "EDGE"
            # Selection
            duplicate_elements_2.inputs[1].default_value = True

            # node Set Shade Smooth.001
            set_shade_smooth_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_001.name = "Set Shade Smooth.001"
            set_shade_smooth_001.domain = "FACE"
            # Selection
            set_shade_smooth_001.inputs[1].default_value = True

            # node Set Material.001
            set_material_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_001.name = "Set Material.001"
            # Selection
            set_material_001.inputs[1].default_value = True

            # node Set Shade Smooth.002
            set_shade_smooth_002 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_002.name = "Set Shade Smooth.002"
            set_shade_smooth_002.domain = "FACE"
            # Selection
            set_shade_smooth_002.inputs[1].default_value = True

            # node Set Material.002
            set_material_002 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_002.name = "Set Material.002"
            # Selection
            set_material_002.inputs[1].default_value = True

            # node Group Input.006
            group_input_006_2 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_006_2.name = "Group Input.006"
            group_input_006_2.outputs[0].hide = True
            group_input_006_2.outputs[1].hide = True
            group_input_006_2.outputs[3].hide = True
            group_input_006_2.outputs[4].hide = True
            group_input_006_2.outputs[5].hide = True
            group_input_006_2.outputs[6].hide = True
            group_input_006_2.outputs[7].hide = True
            group_input_006_2.outputs[8].hide = True
            group_input_006_2.outputs[9].hide = True
            group_input_006_2.outputs[10].hide = True
            group_input_006_2.outputs[11].hide = True
            group_input_006_2.outputs[12].hide = True
            group_input_006_2.outputs[13].hide = True
            group_input_006_2.outputs[15].hide = True

            # node Reroute.001
            reroute_001_22 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_001_22.name = "Reroute.001"
            # node Reroute.002
            reroute_002_18 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_002_18.name = "Reroute.002"
            # node Join Geometry
            join_geometry_4 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_4.name = "Join Geometry"
            join_geometry_4.hide = True

            # node Group Output
            group_output_116 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupOutput"
            )
            group_output_116.name = "Group Output"
            group_output_116.is_active_output = True

            # node Instance on Points
            instance_on_points_6 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_6.name = "Instance on Points"
            # Selection
            instance_on_points_6.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_6.inputs[3].default_value = False
            # Instance Index
            instance_on_points_6.inputs[4].default_value = 0
            # Rotation
            instance_on_points_6.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Named Attribute
            named_attribute_30 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_30.name = "Named Attribute"
            named_attribute_30.data_type = "FLOAT"
            # Name
            named_attribute_30.inputs[0].default_value = "vdw_radii"

            # node Math.005
            math_005_3 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_005_3.name = "Math.005"
            math_005_3.operation = "MULTIPLY"
            math_005_3.use_clamp = False

            # node Store Named Attribute.001
            store_named_attribute_001_5 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_5.name = "Store Named Attribute.001"
            store_named_attribute_001_5.data_type = "FLOAT_VECTOR"
            store_named_attribute_001_5.domain = "CORNER"
            # Selection
            store_named_attribute_001_5.inputs[1].default_value = True
            # Name
            store_named_attribute_001_5.inputs[2].default_value = "UVMap"

            # node Ico Sphere
            ico_sphere_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeMeshIcoSphere"
            )
            ico_sphere_1.name = "Ico Sphere"
            # Radius
            ico_sphere_1.inputs[0].default_value = 1.0

            # node Group Input.007
            group_input_007_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_007_1.name = "Group Input.007"
            group_input_007_1.outputs[0].hide = True
            group_input_007_1.outputs[1].hide = True
            group_input_007_1.outputs[2].hide = True
            group_input_007_1.outputs[5].hide = True
            group_input_007_1.outputs[6].hide = True
            group_input_007_1.outputs[7].hide = True
            group_input_007_1.outputs[8].hide = True
            group_input_007_1.outputs[9].hide = True
            group_input_007_1.outputs[10].hide = True
            group_input_007_1.outputs[11].hide = True
            group_input_007_1.outputs[12].hide = True
            group_input_007_1.outputs[13].hide = True
            group_input_007_1.outputs[14].hide = True
            group_input_007_1.outputs[15].hide = True

            # node Reroute.004
            reroute_004_9 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_004_9.name = "Reroute.004"
            # node Separate Geometry
            separate_geometry_17 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_17.name = "Separate Geometry"
            separate_geometry_17.domain = "POINT"

            # node Compare.002
            compare_002_12 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_002_12.name = "Compare.002"
            compare_002_12.data_type = "INT"
            compare_002_12.mode = "ELEMENT"
            compare_002_12.operation = "EQUAL"
            # B_INT
            compare_002_12.inputs[3].default_value = 2

            # node Set Position
            set_position_11 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_11.name = "Set Position"
            # Selection
            set_position_11.inputs[1].default_value = True
            # Position
            set_position_11.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Mesh to Curve.002
            mesh_to_curve_002 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeMeshToCurve"
            )
            mesh_to_curve_002.name = "Mesh to Curve.002"
            # Selection
            mesh_to_curve_002.inputs[1].default_value = True

            # node Set Curve Radius.001
            set_curve_radius_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_001.name = "Set Curve Radius.001"
            # Selection
            set_curve_radius_001.inputs[1].default_value = True

            # node Set Curve Radius.002
            set_curve_radius_002 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_002.name = "Set Curve Radius.002"
            # Selection
            set_curve_radius_002.inputs[1].default_value = True

            # node Mesh to Curve.001
            mesh_to_curve_001_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeMeshToCurve"
            )
            mesh_to_curve_001_1.name = "Mesh to Curve.001"
            # Selection
            mesh_to_curve_001_1.inputs[1].default_value = True

            # node Set Spline Type
            set_spline_type_2 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_2.name = "Set Spline Type"
            set_spline_type_2.spline_type = "CATMULL_ROM"
            # Selection
            set_spline_type_2.inputs[1].default_value = True

            # node Resample Curve.001
            resample_curve_001_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_001_1.name = "Resample Curve.001"
            resample_curve_001_1.mode = "COUNT"
            # Selection
            resample_curve_001_1.inputs[1].default_value = True

            # node Group Input.011
            group_input_011 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_011.name = "Group Input.011"
            group_input_011.outputs[0].hide = True
            group_input_011.outputs[1].hide = True
            group_input_011.outputs[2].hide = True
            group_input_011.outputs[3].hide = True
            group_input_011.outputs[4].hide = True
            group_input_011.outputs[5].hide = True
            group_input_011.outputs[6].hide = True
            group_input_011.outputs[8].hide = True
            group_input_011.outputs[9].hide = True
            group_input_011.outputs[10].hide = True
            group_input_011.outputs[13].hide = True
            group_input_011.outputs[14].hide = True
            group_input_011.outputs[15].hide = True

            # node Math
            math_29 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMath")
            math_29.name = "Math"
            math_29.operation = "MULTIPLY"
            math_29.use_clamp = False
            # Value_001
            math_29.inputs[1].default_value = 2.0

            # node Subdivide Mesh
            subdivide_mesh = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSubdivideMesh"
            )
            subdivide_mesh.name = "Subdivide Mesh"
            # Level
            subdivide_mesh.inputs[1].default_value = 1

            # node Vector Math.004
            vector_math_004_6 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_6.name = "Vector Math.004"
            vector_math_004_6.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_16 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_16.name = "Vector Math.001"
            vector_math_001_16.operation = "CROSS_PRODUCT"

            # node Vector Math
            vector_math_25 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_25.name = "Vector Math"
            vector_math_25.operation = "NORMALIZE"

            # node Edges of Vertex
            edges_of_vertex_2 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeEdgesOfVertex"
            )
            edges_of_vertex_2.name = "Edges of Vertex"
            # Vertex Index
            edges_of_vertex_2.inputs[0].default_value = 0
            # Weights
            edges_of_vertex_2.inputs[1].default_value = 0.0
            # Sort Index
            edges_of_vertex_2.inputs[2].default_value = 0

            # node Edge Vertices
            edge_vertices_4 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_4.name = "Edge Vertices"

            # node Store Named Attribute.002
            store_named_attribute_002_3 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_3.name = "Store Named Attribute.002"
            store_named_attribute_002_3.data_type = "FLOAT_COLOR"
            store_named_attribute_002_3.domain = "EDGE"
            # Selection
            store_named_attribute_002_3.inputs[1].default_value = True
            # Name
            store_named_attribute_002_3.inputs[2].default_value = "Color"

            # node Join Geometry.001
            join_geometry_001_2 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_2.name = "Join Geometry.001"

            # node Store Named Attribute.004
            store_named_attribute_004_3 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_3.name = "Store Named Attribute.004"
            store_named_attribute_004_3.data_type = "FLOAT_COLOR"
            store_named_attribute_004_3.domain = "CORNER"
            # Selection
            store_named_attribute_004_3.inputs[1].default_value = True
            # Name
            store_named_attribute_004_3.inputs[2].default_value = "Color"

            # node Named Attribute.004
            named_attribute_004_4 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_4.name = "Named Attribute.004"
            named_attribute_004_4.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_004_4.inputs[0].default_value = "Color"

            # node Reroute.005
            reroute_005_9 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_005_9.name = "Reroute.005"
            # node Evaluate at Index
            evaluate_at_index_12 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_12.name = "Evaluate at Index"
            evaluate_at_index_12.data_type = "FLOAT_COLOR"
            evaluate_at_index_12.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_7 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_7.name = "Evaluate at Index.001"
            evaluate_at_index_001_7.data_type = "FLOAT_COLOR"
            evaluate_at_index_001_7.domain = "POINT"

            # node Mix
            mix_10 = _mn_utils_style_old_ball_and_stick.nodes.new("ShaderNodeMix")
            mix_10.name = "Mix"
            mix_10.blend_type = "ADD"
            mix_10.clamp_factor = True
            mix_10.clamp_result = False
            mix_10.data_type = "RGBA"
            mix_10.factor_mode = "UNIFORM"
            # Factor_Float
            mix_10.inputs[0].default_value = 1.0

            # node Compare
            compare_36 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_36.name = "Compare"
            compare_36.data_type = "INT"
            compare_36.mode = "ELEMENT"
            compare_36.operation = "EQUAL"
            # B_INT
            compare_36.inputs[3].default_value = 2

            # node Edges of Vertex.001
            edges_of_vertex_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeEdgesOfVertex"
            )
            edges_of_vertex_001.name = "Edges of Vertex.001"
            # Vertex Index
            edges_of_vertex_001.inputs[0].default_value = 0
            # Weights
            edges_of_vertex_001.inputs[1].default_value = 0.0
            # Sort Index
            edges_of_vertex_001.inputs[2].default_value = 0

            # node Switch.001
            switch_001_19 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_001_19.name = "Switch.001"
            switch_001_19.input_type = "RGBA"
            # True
            switch_001_19.inputs[2].default_value = (0.0, 0.0, 0.0, 1.0)

            # node Named Attribute.003
            named_attribute_003_7 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_7.name = "Named Attribute.003"
            named_attribute_003_7.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_003_7.inputs[0].default_value = "Color"

            # node Reroute.006
            reroute_006_8 = _mn_utils_style_old_ball_and_stick.nodes.new("NodeReroute")
            reroute_006_8.name = "Reroute.006"
            # node Edge Vertices.001
            edge_vertices_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_001.name = "Edge Vertices.001"

            # node Separate Geometry.001
            separate_geometry_001_9 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_9.name = "Separate Geometry.001"
            separate_geometry_001_9.domain = "EDGE"

            # node Subdivide Mesh.001
            subdivide_mesh_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSubdivideMesh"
            )
            subdivide_mesh_001.name = "Subdivide Mesh.001"
            # Level
            subdivide_mesh_001.inputs[1].default_value = 1

            # node Store Named Attribute.003
            store_named_attribute_003_3 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_3.name = "Store Named Attribute.003"
            store_named_attribute_003_3.data_type = "FLOAT_COLOR"
            store_named_attribute_003_3.domain = "EDGE"
            # Selection
            store_named_attribute_003_3.inputs[1].default_value = True
            # Name
            store_named_attribute_003_3.inputs[2].default_value = "Color"

            # node Group Input
            group_input_115 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_115.name = "Group Input"

            # node Group Input.003
            group_input_003_6 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_003_6.name = "Group Input.003"

            # node Boolean Math.001
            boolean_math_001_21 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_21.name = "Boolean Math.001"
            boolean_math_001_21.operation = "AND"

            # node Boolean Math.002
            boolean_math_002_13 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_13.name = "Boolean Math.002"
            boolean_math_002_13.operation = "NOT"

            # node Compare.004
            compare_004_8 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_004_8.name = "Compare.004"
            compare_004_8.data_type = "INT"
            compare_004_8.mode = "ELEMENT"
            compare_004_8.operation = "NOT_EQUAL"
            # B_INT
            compare_004_8.inputs[3].default_value = 1

            # node Curve Circle
            curve_circle_5 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_5.name = "Curve Circle"
            curve_circle_5.mode = "RADIUS"
            # Radius
            curve_circle_5.inputs[4].default_value = 0.009999999776482582

            # node Group Input.008
            group_input_008 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "NodeGroupInput"
            )
            group_input_008.name = "Group Input.008"
            group_input_008.outputs[1].hide = True
            group_input_008.outputs[2].hide = True
            group_input_008.outputs[3].hide = True
            group_input_008.outputs[4].hide = True
            group_input_008.outputs[5].hide = True
            group_input_008.outputs[7].hide = True
            group_input_008.outputs[8].hide = True
            group_input_008.outputs[9].hide = True
            group_input_008.outputs[10].hide = True
            group_input_008.outputs[11].hide = True
            group_input_008.outputs[12].hide = True
            group_input_008.outputs[13].hide = True
            group_input_008.outputs[14].hide = True
            group_input_008.outputs[15].hide = True

            # node Switch.006
            switch_006_1 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeSwitch"
            )
            switch_006_1.name = "Switch.006"
            switch_006_1.input_type = "GEOMETRY"

            # node Duplicate Elements.001
            duplicate_elements_001 = _mn_utils_style_old_ball_and_stick.nodes.new(
                "GeometryNodeDuplicateElements"
            )
            duplicate_elements_001.name = "Duplicate Elements.001"
            duplicate_elements_001.domain = "EDGE"
            # Selection
            duplicate_elements_001.inputs[1].default_value = True
            # Amount
            duplicate_elements_001.inputs[2].default_value = 1

            # node Group
            group_32 = _mn_utils_style_old_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_32.name = "Group"
            group_32.node_tree = topology_find_bonds
            # Input_35
            group_32.inputs[1].default_value = True
            # Input_2
            group_32.inputs[2].default_value = 1.0

            # Set parents
            instance_on_points_6.parent = frame_15
            named_attribute_30.parent = frame_15
            math_005_3.parent = frame_15
            store_named_attribute_001_5.parent = frame_15
            ico_sphere_1.parent = frame_15

            # Set locations
            frame_15.location = (1396.0, -422.0)
            math_003_11.location = (-2104.203125, -775.839111328125)
            vector_math_002_8.location = (-964.6033935546875, -355.8390808105469)
            vector_math_005_3.location = (-804.6033935546875, -355.8390808105469)
            switch_31.location = (-2126.564208984375, -426.8847351074219)
            curve_to_mesh_6.location = (1360.0, 320.0)
            reroute_003_13.location = (-2628.0, -680.0)
            named_attribute_002_17.location = (-2868.0, -620.0)
            group_input_004_5.location = (-2307.0, -440.0)
            switch_002_15.location = (-2327.0, -560.0)
            map_range_7.location = (-1007.0, -820.0)
            switch_003_6.location = (-827.0, -620.0)
            compare_003_12.location = (-1007.0, -640.0)
            group_input_001_17.location = (-1167.0, -820.0)
            vector_rotate_1.location = (-1167.0, -360.0)
            math_002_13.location = (-1327.0, -360.0)
            group_input_002_9.location = (-1567.0, -480.0)
            math_001_18.location = (-1527.0, -700.0)
            math_004_4.location = (-1347.0, -580.0)
            duplicate_elements_2.location = (-1787.0, -400.0)
            set_shade_smooth_001.location = (1940.0, 400.0)
            set_material_001.location = (2120.0, 400.0)
            set_shade_smooth_002.location = (1940.0, 560.0)
            set_material_002.location = (2120.0, 560.0)
            group_input_006_2.location = (1740.0, 260.0)
            reroute_001_22.location = (1920.0, 260.0)
            reroute_002_18.location = (2100.0, 260.0)
            join_geometry_4.location = (2380.0, 560.0)
            group_output_116.location = (2560.0, 540.0)
            instance_on_points_6.location = (216.19027709960938, 1258.86181640625)
            named_attribute_30.location = (-125.505859375, 1050.8665771484375)
            math_005_3.location = (34.494140625, 1050.8665771484375)
            store_named_attribute_001_5.location = (34.494140625, 1270.8665771484375)
            ico_sphere_1.location = (-136.0, 1182.0)
            group_input_007_1.location = (1020.0, 640.0)
            reroute_004_9.location = (1580.0, 860.0)
            separate_geometry_17.location = (-2179.85498046875, 880.0)
            compare_002_12.location = (-2487.0, -500.0)
            set_position_11.location = (-987.0, -160.0)
            mesh_to_curve_002.location = (-425.2333679199219, 265.6181335449219)
            set_curve_radius_001.location = (-141.0, 122.8011474609375)
            set_curve_radius_002.location = (-150.25411987304688, 281.4866638183594)
            mesh_to_curve_001_1.location = (-801.3724365234375, -150.9313507080078)
            set_spline_type_2.location = (-620.0, -160.0)
            resample_curve_001_1.location = (-435.21929931640625, -129.25401306152344)
            group_input_011.location = (-888.1909790039062, 3.3690643310546875)
            math_29.location = (-645.7537841796875, 17.9141845703125)
            subdivide_mesh.location = (-1580.0, -320.0)
            vector_math_004_6.location = (-1568.566162109375, -1196.5731201171875)
            vector_math_001_16.location = (-1568.566162109375, -1056.5731201171875)
            vector_math_25.location = (-1408.566162109375, -1056.5731201171875)
            edges_of_vertex_2.location = (-1167.0, -640.0)
            edge_vertices_4.location = (-1768.566162109375, -1076.5731201171875)
            store_named_attribute_002_3.location = (-1240.0, -100.0)
            join_geometry_001_2.location = (326.14776611328125, 216.18084716796875)
            store_named_attribute_004_3.location = (695.0147094726562, 188.691650390625)
            named_attribute_004_4.location = (188.46722412109375, -124.93585205078125)
            reroute_005_9.location = (-1322.2879638671875, -96.09971618652344)
            evaluate_at_index_12.location = (-2349.74462890625, -1172.8079833984375)
            evaluate_at_index_001_7.location = (-2349.74462890625, -1332.8079833984375)
            mix_10.location = (-2111.32177734375, -1007.6085205078125)
            compare_36.location = (-2900.0, -1180.0)
            edges_of_vertex_001.location = (-3060.0, -1180.0)
            switch_001_19.location = (-2740.0, -1180.0)
            named_attribute_003_7.location = (-2900.0, -1340.0)
            reroute_006_8.location = (-2467.5224609375, -1303.15087890625)
            edge_vertices_001.location = (-2740.0, -1340.0)
            separate_geometry_001_9.location = (-1739.750732421875, 98.57808685302734)
            subdivide_mesh_001.location = (-1523.1390380859375, 100.0)
            store_named_attribute_003_3.location = (
                -1237.1416015625,
                213.08575439453125,
            )
            group_input_115.location = (-2939.85498046875, 780.0)
            group_input_003_6.location = (-2585.884033203125, 145.2239227294922)
            boolean_math_001_21.location = (-2181.7490234375, 11.80624008178711)
            boolean_math_002_13.location = (-1988.4156494140625, 8.69737434387207)
            compare_004_8.location = (-2409.281005859375, -174.4285888671875)
            curve_circle_5.location = (1360.0, 180.0)
            group_input_008.location = (1117.6759033203125, 157.1241912841797)
            switch_006_1.location = (-2364.34716796875, 915.9468994140625)
            duplicate_elements_001.location = (-1960.0, 436.7082214355469)
            group_32.location = (-2679.85498046875, 940.0)

            # Set dimensions
            frame_15.width, frame_15.height = 552.0, 438.0
            math_003_11.width, math_003_11.height = 140.0, 100.0
            vector_math_002_8.width, vector_math_002_8.height = 140.0, 100.0
            vector_math_005_3.width, vector_math_005_3.height = 140.0, 100.0
            switch_31.width, switch_31.height = 140.0, 100.0
            curve_to_mesh_6.width, curve_to_mesh_6.height = 140.0, 100.0
            reroute_003_13.width, reroute_003_13.height = 16.0, 100.0
            named_attribute_002_17.width, named_attribute_002_17.height = 140.0, 100.0
            group_input_004_5.width, group_input_004_5.height = 140.0, 100.0
            switch_002_15.width, switch_002_15.height = 140.0, 100.0
            map_range_7.width, map_range_7.height = 140.0, 100.0
            switch_003_6.width, switch_003_6.height = 140.0, 100.0
            compare_003_12.width, compare_003_12.height = 140.0, 100.0
            group_input_001_17.width, group_input_001_17.height = 140.0, 100.0
            vector_rotate_1.width, vector_rotate_1.height = 140.0, 100.0
            math_002_13.width, math_002_13.height = 140.0, 100.0
            group_input_002_9.width, group_input_002_9.height = 140.0, 100.0
            math_001_18.width, math_001_18.height = 140.0, 100.0
            math_004_4.width, math_004_4.height = 140.0, 100.0
            duplicate_elements_2.width, duplicate_elements_2.height = 140.0, 100.0
            set_shade_smooth_001.width, set_shade_smooth_001.height = 140.0, 100.0
            set_material_001.width, set_material_001.height = 140.0, 100.0
            set_shade_smooth_002.width, set_shade_smooth_002.height = 140.0, 100.0
            set_material_002.width, set_material_002.height = 140.0, 100.0
            group_input_006_2.width, group_input_006_2.height = 140.0, 100.0
            reroute_001_22.width, reroute_001_22.height = 16.0, 100.0
            reroute_002_18.width, reroute_002_18.height = 16.0, 100.0
            join_geometry_4.width, join_geometry_4.height = 140.0, 100.0
            group_output_116.width, group_output_116.height = 140.0, 100.0
            instance_on_points_6.width, instance_on_points_6.height = 140.0, 100.0
            named_attribute_30.width, named_attribute_30.height = 140.0, 100.0
            math_005_3.width, math_005_3.height = 140.0, 100.0
            store_named_attribute_001_5.width, store_named_attribute_001_5.height = (
                140.0,
                100.0,
            )
            ico_sphere_1.width, ico_sphere_1.height = 140.0, 100.0
            group_input_007_1.width, group_input_007_1.height = 140.0, 100.0
            reroute_004_9.width, reroute_004_9.height = 16.0, 100.0
            separate_geometry_17.width, separate_geometry_17.height = 140.0, 100.0
            compare_002_12.width, compare_002_12.height = 140.0, 100.0
            set_position_11.width, set_position_11.height = 140.0, 100.0
            mesh_to_curve_002.width, mesh_to_curve_002.height = 140.0, 100.0
            set_curve_radius_001.width, set_curve_radius_001.height = 140.0, 100.0
            set_curve_radius_002.width, set_curve_radius_002.height = 140.0, 100.0
            mesh_to_curve_001_1.width, mesh_to_curve_001_1.height = 140.0, 100.0
            set_spline_type_2.width, set_spline_type_2.height = 140.0, 100.0
            resample_curve_001_1.width, resample_curve_001_1.height = 140.0, 100.0
            group_input_011.width, group_input_011.height = 140.0, 100.0
            math_29.width, math_29.height = 140.0, 100.0
            subdivide_mesh.width, subdivide_mesh.height = 140.0, 100.0
            vector_math_004_6.width, vector_math_004_6.height = 140.0, 100.0
            vector_math_001_16.width, vector_math_001_16.height = 140.0, 100.0
            vector_math_25.width, vector_math_25.height = 140.0, 100.0
            edges_of_vertex_2.width, edges_of_vertex_2.height = 140.0, 100.0
            edge_vertices_4.width, edge_vertices_4.height = 140.0, 100.0
            store_named_attribute_002_3.width, store_named_attribute_002_3.height = (
                140.0,
                100.0,
            )
            join_geometry_001_2.width, join_geometry_001_2.height = 140.0, 100.0
            store_named_attribute_004_3.width, store_named_attribute_004_3.height = (
                184.1370849609375,
                100.0,
            )
            named_attribute_004_4.width, named_attribute_004_4.height = 140.0, 100.0
            reroute_005_9.width, reroute_005_9.height = 16.0, 100.0
            evaluate_at_index_12.width, evaluate_at_index_12.height = 140.0, 100.0
            evaluate_at_index_001_7.width, evaluate_at_index_001_7.height = 140.0, 100.0
            mix_10.width, mix_10.height = 140.0, 100.0
            compare_36.width, compare_36.height = 140.0, 100.0
            edges_of_vertex_001.width, edges_of_vertex_001.height = 140.0, 100.0
            switch_001_19.width, switch_001_19.height = 140.0, 100.0
            named_attribute_003_7.width, named_attribute_003_7.height = (
                140.828125,
                100.0,
            )
            reroute_006_8.width, reroute_006_8.height = 16.0, 100.0
            edge_vertices_001.width, edge_vertices_001.height = 140.0, 100.0
            separate_geometry_001_9.width, separate_geometry_001_9.height = 140.0, 100.0
            subdivide_mesh_001.width, subdivide_mesh_001.height = 140.0, 100.0
            store_named_attribute_003_3.width, store_named_attribute_003_3.height = (
                140.0,
                100.0,
            )
            group_input_115.width, group_input_115.height = 140.0, 100.0
            group_input_003_6.width, group_input_003_6.height = 140.0, 100.0
            boolean_math_001_21.width, boolean_math_001_21.height = 140.0, 100.0
            boolean_math_002_13.width, boolean_math_002_13.height = 140.0, 100.0
            compare_004_8.width, compare_004_8.height = 150.75045776367188, 100.0
            curve_circle_5.width, curve_circle_5.height = 140.0, 100.0
            group_input_008.width, group_input_008.height = 140.0, 100.0
            switch_006_1.width, switch_006_1.height = 140.0, 100.0
            duplicate_elements_001.width, duplicate_elements_001.height = 140.0, 100.0
            group_32.width, group_32.height = 200.0, 100.0

            # initialize _mn_utils_style_old_ball_and_stick links
            # curve_circle_5.Curve -> curve_to_mesh_6.Profile Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                curve_circle_5.outputs[0], curve_to_mesh_6.inputs[1]
            )
            # reroute_004_9.Output -> instance_on_points_6.Points
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_004_9.outputs[0], instance_on_points_6.inputs[0]
            )
            # store_named_attribute_001_5.Geometry -> instance_on_points_6.Instance
            _mn_utils_style_old_ball_and_stick.links.new(
                store_named_attribute_001_5.outputs[0], instance_on_points_6.inputs[2]
            )
            # store_named_attribute_002_3.Geometry -> set_position_11.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                store_named_attribute_002_3.outputs[0], set_position_11.inputs[0]
            )
            # edge_vertices_4.Position 1 -> vector_math_001_16.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_4.outputs[2], vector_math_001_16.inputs[0]
            )
            # edge_vertices_4.Position 2 -> vector_math_001_16.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_4.outputs[3], vector_math_001_16.inputs[1]
            )
            # vector_rotate_1.Vector -> vector_math_002_8.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_rotate_1.outputs[0], vector_math_002_8.inputs[0]
            )
            # reroute_003_13.Output -> compare_002_12.A
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_003_13.outputs[0], compare_002_12.inputs[2]
            )
            # compare_002_12.Result -> switch_002_15.Switch
            _mn_utils_style_old_ball_and_stick.links.new(
                compare_002_12.outputs[0], switch_002_15.inputs[0]
            )
            # math_002_13.Value -> vector_math_002_8.Scale
            _mn_utils_style_old_ball_and_stick.links.new(
                math_002_13.outputs[0], vector_math_002_8.inputs[3]
            )
            # vector_math_001_16.Vector -> vector_math_25.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_math_001_16.outputs[0], vector_math_25.inputs[0]
            )
            # vector_math_25.Vector -> vector_rotate_1.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_math_25.outputs[0], vector_rotate_1.inputs[0]
            )
            # edge_vertices_4.Position 1 -> vector_math_004_6.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_4.outputs[2], vector_math_004_6.inputs[0]
            )
            # edge_vertices_4.Position 2 -> vector_math_004_6.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_4.outputs[3], vector_math_004_6.inputs[1]
            )
            # vector_math_004_6.Vector -> vector_rotate_1.Axis
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_math_004_6.outputs[0], vector_rotate_1.inputs[2]
            )
            # vector_math_005_3.Vector -> set_position_11.Offset
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_math_005_3.outputs[0], set_position_11.inputs[3]
            )
            # vector_math_002_8.Vector -> vector_math_005_3.Vector
            _mn_utils_style_old_ball_and_stick.links.new(
                vector_math_002_8.outputs[0], vector_math_005_3.inputs[0]
            )
            # edges_of_vertex_2.Total -> compare_003_12.A
            _mn_utils_style_old_ball_and_stick.links.new(
                edges_of_vertex_2.outputs[1], compare_003_12.inputs[2]
            )
            # compare_003_12.Result -> switch_003_6.Switch
            _mn_utils_style_old_ball_and_stick.links.new(
                compare_003_12.outputs[0], switch_003_6.inputs[0]
            )
            # switch_003_6.Output -> vector_math_005_3.Scale
            _mn_utils_style_old_ball_and_stick.links.new(
                switch_003_6.outputs[0], vector_math_005_3.inputs[3]
            )
            # duplicate_elements_2.Geometry -> subdivide_mesh.Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                duplicate_elements_2.outputs[0], subdivide_mesh.inputs[0]
            )
            # store_named_attribute_004_3.Geometry -> curve_to_mesh_6.Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                store_named_attribute_004_3.outputs[0], curve_to_mesh_6.inputs[0]
            )
            # reroute_003_13.Output -> math_003_11.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_003_13.outputs[0], math_003_11.inputs[1]
            )
            # duplicate_elements_2.Duplicate Index -> math_001_18.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                duplicate_elements_2.outputs[1], math_001_18.inputs[0]
            )
            # math_001_18.Value -> math_004_4.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                math_001_18.outputs[0], math_004_4.inputs[1]
            )
            # math_004_4.Value -> vector_rotate_1.Angle
            _mn_utils_style_old_ball_and_stick.links.new(
                math_004_4.outputs[0], vector_rotate_1.inputs[3]
            )
            # math_003_11.Value -> math_001_18.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                math_003_11.outputs[0], math_001_18.inputs[1]
            )
            # named_attribute_002_17.Attribute -> reroute_003_13.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                named_attribute_002_17.outputs[0], reroute_003_13.inputs[0]
            )
            # map_range_7.Result -> switch_003_6.True
            _mn_utils_style_old_ball_and_stick.links.new(
                map_range_7.outputs[0], switch_003_6.inputs[2]
            )
            # reroute_001_22.Output -> set_shade_smooth_001.Shade Smooth
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_001_22.outputs[0], set_shade_smooth_001.inputs[2]
            )
            # reroute_002_18.Output -> set_material_001.Material
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_002_18.outputs[0], set_material_001.inputs[2]
            )
            # set_shade_smooth_001.Geometry -> set_material_001.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_shade_smooth_001.outputs[0], set_material_001.inputs[0]
            )
            # set_material_001.Geometry -> group_output_116.Sticks Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                set_material_001.outputs[0], group_output_116.inputs[1]
            )
            # curve_to_mesh_6.Mesh -> set_shade_smooth_001.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                curve_to_mesh_6.outputs[0], set_shade_smooth_001.inputs[0]
            )
            # switch_002_15.Output -> switch_31.True
            _mn_utils_style_old_ball_and_stick.links.new(
                switch_002_15.outputs[0], switch_31.inputs[2]
            )
            # switch_31.Output -> duplicate_elements_2.Amount
            _mn_utils_style_old_ball_and_stick.links.new(
                switch_31.outputs[0], duplicate_elements_2.inputs[2]
            )
            # group_input_004_5.Split Double Bonds -> switch_31.Switch
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_004_5.outputs[8], switch_31.inputs[0]
            )
            # reroute_001_22.Output -> set_shade_smooth_002.Shade Smooth
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_001_22.outputs[0], set_shade_smooth_002.inputs[2]
            )
            # reroute_002_18.Output -> set_material_002.Material
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_002_18.outputs[0], set_material_002.inputs[2]
            )
            # set_shade_smooth_002.Geometry -> set_material_002.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_shade_smooth_002.outputs[0], set_material_002.inputs[0]
            )
            # set_material_002.Geometry -> group_output_116.Ball Instances
            _mn_utils_style_old_ball_and_stick.links.new(
                set_material_002.outputs[0], group_output_116.inputs[2]
            )
            # instance_on_points_6.Instances -> set_shade_smooth_002.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                instance_on_points_6.outputs[0], set_shade_smooth_002.inputs[0]
            )
            # group_input_001_17.Double Bond Curve -> map_range_7.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_001_17.outputs[9], map_range_7.inputs[0]
            )
            # group_input_002_9.Double Bond Width -> math_002_13.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_002_9.outputs[10], math_002_13.inputs[0]
            )
            # group_input_115.Selection -> separate_geometry_17.Selection
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_115.outputs[1], separate_geometry_17.inputs[1]
            )
            # group_input_115.Atoms -> group_32.Atoms
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_115.outputs[0], group_32.inputs[0]
            )
            # switch_006_1.Output -> separate_geometry_17.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                switch_006_1.outputs[0], separate_geometry_17.inputs[0]
            )
            # group_32.Atoms -> switch_006_1.True
            _mn_utils_style_old_ball_and_stick.links.new(
                group_32.outputs[0], switch_006_1.inputs[2]
            )
            # group_input_115.Atoms -> switch_006_1.False
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_115.outputs[0], switch_006_1.inputs[1]
            )
            # group_input_115.Find Bonds -> switch_006_1.Switch
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_115.outputs[5], switch_006_1.inputs[0]
            )
            # named_attribute_30.Attribute -> math_005_3.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                named_attribute_30.outputs[0], math_005_3.inputs[0]
            )
            # math_005_3.Value -> instance_on_points_6.Scale
            _mn_utils_style_old_ball_and_stick.links.new(
                math_005_3.outputs[0], instance_on_points_6.inputs[6]
            )
            # group_input_007_1.Ball Radius -> math_005_3.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_007_1.outputs[4], math_005_3.inputs[1]
            )
            # ico_sphere_1.Mesh -> store_named_attribute_001_5.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                ico_sphere_1.outputs[0], store_named_attribute_001_5.inputs[0]
            )
            # ico_sphere_1.UV Map -> store_named_attribute_001_5.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                ico_sphere_1.outputs[1], store_named_attribute_001_5.inputs[3]
            )
            # set_material_002.Geometry -> join_geometry_4.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_material_002.outputs[0], join_geometry_4.inputs[0]
            )
            # join_geometry_4.Geometry -> group_output_116.Ball and Stick Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                join_geometry_4.outputs[0], group_output_116.inputs[0]
            )
            # group_input_006_2.Shade Smooth -> reroute_001_22.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_006_2.outputs[2], reroute_001_22.inputs[0]
            )
            # group_input_006_2.Material -> reroute_002_18.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_006_2.outputs[14], reroute_002_18.inputs[0]
            )
            # group_input_008.Bond Resolution -> curve_circle_5.Resolution
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_008.outputs[6], curve_circle_5.inputs[0]
            )
            # group_input_002_9.Double Bond Rotate -> math_004_4.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_002_9.outputs[13], math_004_4.inputs[0]
            )
            # group_input_007_1.Ball Resolution -> ico_sphere_1.Subdivisions
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_007_1.outputs[3], ico_sphere_1.inputs[1]
            )
            # separate_geometry_17.Selection -> reroute_004_9.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                separate_geometry_17.outputs[0], reroute_004_9.inputs[0]
            )
            # duplicate_elements_001.Geometry -> separate_geometry_001_9.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                duplicate_elements_001.outputs[0], separate_geometry_001_9.inputs[0]
            )
            # separate_geometry_001_9.Inverted -> duplicate_elements_2.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                separate_geometry_001_9.outputs[1], duplicate_elements_2.inputs[0]
            )
            # reroute_003_13.Output -> compare_004_8.A
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_003_13.outputs[0], compare_004_8.inputs[2]
            )
            # set_position_11.Geometry -> mesh_to_curve_001_1.Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                set_position_11.outputs[0], mesh_to_curve_001_1.inputs[0]
            )
            # store_named_attribute_003_3.Geometry -> mesh_to_curve_002.Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                store_named_attribute_003_3.outputs[0], mesh_to_curve_002.inputs[0]
            )
            # resample_curve_001_1.Curve -> set_curve_radius_001.Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                resample_curve_001_1.outputs[0], set_curve_radius_001.inputs[0]
            )
            # mesh_to_curve_002.Curve -> set_curve_radius_002.Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                mesh_to_curve_002.outputs[0], set_curve_radius_002.inputs[0]
            )
            # set_curve_radius_001.Curve -> join_geometry_001_2.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_curve_radius_001.outputs[0], join_geometry_001_2.inputs[0]
            )
            # group_input_011.Bond Radius -> set_curve_radius_002.Radius
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_011.outputs[7], set_curve_radius_002.inputs[2]
            )
            # group_input_011.Double Bond Radius -> set_curve_radius_001.Radius
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_011.outputs[12], set_curve_radius_001.inputs[2]
            )
            # set_spline_type_2.Curve -> resample_curve_001_1.Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                set_spline_type_2.outputs[0], resample_curve_001_1.inputs[0]
            )
            # mesh_to_curve_001_1.Curve -> set_spline_type_2.Curve
            _mn_utils_style_old_ball_and_stick.links.new(
                mesh_to_curve_001_1.outputs[0], set_spline_type_2.inputs[0]
            )
            # group_input_011.Double Bond Resolution -> math_29.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_011.outputs[11], math_29.inputs[0]
            )
            # math_29.Value -> resample_curve_001_1.Count
            _mn_utils_style_old_ball_and_stick.links.new(
                math_29.outputs[0], resample_curve_001_1.inputs[2]
            )
            # subdivide_mesh.Mesh -> store_named_attribute_002_3.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                subdivide_mesh.outputs[0], store_named_attribute_002_3.inputs[0]
            )
            # edges_of_vertex_001.Total -> compare_36.A
            _mn_utils_style_old_ball_and_stick.links.new(
                edges_of_vertex_001.outputs[1], compare_36.inputs[2]
            )
            # compare_36.Result -> switch_001_19.Switch
            _mn_utils_style_old_ball_and_stick.links.new(
                compare_36.outputs[0], switch_001_19.inputs[0]
            )
            # reroute_006_8.Output -> evaluate_at_index_12.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_006_8.outputs[0], evaluate_at_index_12.inputs[1]
            )
            # edge_vertices_001.Vertex Index 1 -> evaluate_at_index_12.Index
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_001.outputs[0], evaluate_at_index_12.inputs[0]
            )
            # reroute_006_8.Output -> evaluate_at_index_001_7.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_006_8.outputs[0], evaluate_at_index_001_7.inputs[1]
            )
            # edge_vertices_001.Vertex Index 2 -> evaluate_at_index_001_7.Index
            _mn_utils_style_old_ball_and_stick.links.new(
                edge_vertices_001.outputs[1], evaluate_at_index_001_7.inputs[0]
            )
            # evaluate_at_index_12.Value -> mix_10.A
            _mn_utils_style_old_ball_and_stick.links.new(
                evaluate_at_index_12.outputs[0], mix_10.inputs[6]
            )
            # evaluate_at_index_001_7.Value -> mix_10.B
            _mn_utils_style_old_ball_and_stick.links.new(
                evaluate_at_index_001_7.outputs[0], mix_10.inputs[7]
            )
            # reroute_005_9.Output -> store_named_attribute_002_3.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_005_9.outputs[0], store_named_attribute_002_3.inputs[3]
            )
            # named_attribute_003_7.Attribute -> switch_001_19.False
            _mn_utils_style_old_ball_and_stick.links.new(
                named_attribute_003_7.outputs[0], switch_001_19.inputs[1]
            )
            # subdivide_mesh_001.Mesh -> store_named_attribute_003_3.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                subdivide_mesh_001.outputs[0], store_named_attribute_003_3.inputs[0]
            )
            # mix_10.Result -> reroute_005_9.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                mix_10.outputs[2], reroute_005_9.inputs[0]
            )
            # reroute_005_9.Output -> store_named_attribute_003_3.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                reroute_005_9.outputs[0], store_named_attribute_003_3.inputs[3]
            )
            # join_geometry_001_2.Geometry -> store_named_attribute_004_3.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                join_geometry_001_2.outputs[0], store_named_attribute_004_3.inputs[0]
            )
            # named_attribute_004_4.Attribute -> store_named_attribute_004_3.Value
            _mn_utils_style_old_ball_and_stick.links.new(
                named_attribute_004_4.outputs[0], store_named_attribute_004_3.inputs[3]
            )
            # separate_geometry_001_9.Selection -> subdivide_mesh_001.Mesh
            _mn_utils_style_old_ball_and_stick.links.new(
                separate_geometry_001_9.outputs[0], subdivide_mesh_001.inputs[0]
            )
            # switch_001_19.Output -> reroute_006_8.Input
            _mn_utils_style_old_ball_and_stick.links.new(
                switch_001_19.outputs[0], reroute_006_8.inputs[0]
            )
            # group_input_003_6.Split Double Bonds -> boolean_math_001_21.Boolean
            _mn_utils_style_old_ball_and_stick.links.new(
                group_input_003_6.outputs[8], boolean_math_001_21.inputs[0]
            )
            # compare_004_8.Result -> boolean_math_001_21.Boolean
            _mn_utils_style_old_ball_and_stick.links.new(
                compare_004_8.outputs[0], boolean_math_001_21.inputs[1]
            )
            # boolean_math_001_21.Boolean -> boolean_math_002_13.Boolean
            _mn_utils_style_old_ball_and_stick.links.new(
                boolean_math_001_21.outputs[0], boolean_math_002_13.inputs[0]
            )
            # boolean_math_002_13.Boolean -> separate_geometry_001_9.Selection
            _mn_utils_style_old_ball_and_stick.links.new(
                boolean_math_002_13.outputs[0], separate_geometry_001_9.inputs[1]
            )
            # separate_geometry_17.Selection -> duplicate_elements_001.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                separate_geometry_17.outputs[0], duplicate_elements_001.inputs[0]
            )
            # set_material_001.Geometry -> join_geometry_4.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_material_001.outputs[0], join_geometry_4.inputs[0]
            )
            # set_curve_radius_002.Curve -> join_geometry_001_2.Geometry
            _mn_utils_style_old_ball_and_stick.links.new(
                set_curve_radius_002.outputs[0], join_geometry_001_2.inputs[0]
            )
            return _mn_utils_style_old_ball_and_stick

        _mn_utils_style_old_ball_and_stick = (
            _mn_utils_style_old_ball_and_stick_node_group()
        )

        # initialize mn_dna_style_ball_and_stick node group
        def mn_dna_style_ball_and_stick_node_group():
            mn_dna_style_ball_and_stick = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_dna_style_ball_and_stick"
            )

            mn_dna_style_ball_and_stick.color_tag = "NONE"
            mn_dna_style_ball_and_stick.description = ""

            mn_dna_style_ball_and_stick.is_modifier = True

            # mn_dna_style_ball_and_stick interface
            # Socket Bases
            bases_socket_8 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Bases", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_8.attribute_domain = "POINT"

            # Socket Bases
            bases_socket_9 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Bases", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            bases_socket_9.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_41 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_41.attribute_domain = "POINT"
            selection_socket_41.hide_value = True
            selection_socket_41.description = "Selection of atoms to apply this node to"

            # Socket Shade Smooth
            shade_smooth_socket_11 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_11.attribute_domain = "POINT"
            shade_smooth_socket_11.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Ball Resolution
            ball_resolution_socket_1 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Ball Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            ball_resolution_socket_1.subtype = "NONE"
            ball_resolution_socket_1.default_value = 2
            ball_resolution_socket_1.min_value = 1
            ball_resolution_socket_1.max_value = 7
            ball_resolution_socket_1.attribute_domain = "POINT"

            # Socket Ball Radius
            ball_radius_socket_1 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Ball Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            ball_radius_socket_1.subtype = "DISTANCE"
            ball_radius_socket_1.default_value = 0.30000001192092896
            ball_radius_socket_1.min_value = 0.0
            ball_radius_socket_1.max_value = 3.4028234663852886e38
            ball_radius_socket_1.attribute_domain = "POINT"

            # Socket Find Bonds
            find_bonds_socket_1 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Find Bonds", in_out="INPUT", socket_type="NodeSocketBool"
            )
            find_bonds_socket_1.attribute_domain = "POINT"

            # Socket Bond Resolution
            bond_resolution_socket_1 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Bond Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            bond_resolution_socket_1.subtype = "NONE"
            bond_resolution_socket_1.default_value = 8
            bond_resolution_socket_1.min_value = 3
            bond_resolution_socket_1.max_value = 512
            bond_resolution_socket_1.attribute_domain = "POINT"

            # Socket Bond Radius
            bond_radius_socket_1 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Bond Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            bond_radius_socket_1.subtype = "NONE"
            bond_radius_socket_1.default_value = 0.20000000298023224
            bond_radius_socket_1.min_value = -10000.0
            bond_radius_socket_1.max_value = 10000.0
            bond_radius_socket_1.attribute_domain = "POINT"

            # Socket Material
            material_socket_16 = mn_dna_style_ball_and_stick.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_16.attribute_domain = "POINT"
            material_socket_16.description = (
                "Material to apply to the resulting geometry"
            )

            # Socket Split Double Bonds
            split_double_bonds_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Split Double Bonds",
                    in_out="INPUT",
                    socket_type="NodeSocketBool",
                )
            )
            split_double_bonds_socket_1.attribute_domain = "POINT"

            # Socket Double Bond Curve
            double_bond_curve_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Double Bond Curve",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_curve_socket_1.subtype = "NONE"
            double_bond_curve_socket_1.default_value = 1.0
            double_bond_curve_socket_1.min_value = -10000.0
            double_bond_curve_socket_1.max_value = 10000.0
            double_bond_curve_socket_1.attribute_domain = "POINT"

            # Socket Double Bond Width
            double_bond_width_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Double Bond Width",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_width_socket_1.subtype = "NONE"
            double_bond_width_socket_1.default_value = 1.1299999952316284
            double_bond_width_socket_1.min_value = -10000.0
            double_bond_width_socket_1.max_value = 10000.0
            double_bond_width_socket_1.attribute_domain = "POINT"

            # Socket Double Bond Resolution
            double_bond_resolution_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Double Bond Resolution",
                    in_out="INPUT",
                    socket_type="NodeSocketInt",
                )
            )
            double_bond_resolution_socket_1.subtype = "NONE"
            double_bond_resolution_socket_1.default_value = 3
            double_bond_resolution_socket_1.min_value = 1
            double_bond_resolution_socket_1.max_value = 2147483647
            double_bond_resolution_socket_1.attribute_domain = "POINT"

            # Socket Double Bond Radius
            double_bond_radius_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Double Bond Radius",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_radius_socket_1.subtype = "NONE"
            double_bond_radius_socket_1.default_value = 0.800000011920929
            double_bond_radius_socket_1.min_value = 0.0
            double_bond_radius_socket_1.max_value = 10.0
            double_bond_radius_socket_1.attribute_domain = "POINT"

            # Socket Double Bond Rotate
            double_bond_rotate_socket_1 = (
                mn_dna_style_ball_and_stick.interface.new_socket(
                    name="Double Bond Rotate",
                    in_out="INPUT",
                    socket_type="NodeSocketFloat",
                )
            )
            double_bond_rotate_socket_1.subtype = "NONE"
            double_bond_rotate_socket_1.default_value = 0.0
            double_bond_rotate_socket_1.min_value = -10000.0
            double_bond_rotate_socket_1.max_value = 10000.0
            double_bond_rotate_socket_1.attribute_domain = "POINT"

            # initialize mn_dna_style_ball_and_stick nodes
            # node Named Attribute.002
            named_attribute_002_18 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_18.name = "Named Attribute.002"
            named_attribute_002_18.data_type = "INT"
            # Name
            named_attribute_002_18.inputs[0].default_value = "res_name"

            # node Compare.001
            compare_001_21 = mn_dna_style_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_21.name = "Compare.001"
            compare_001_21.data_type = "INT"
            compare_001_21.mode = "ELEMENT"
            compare_001_21.operation = "EQUAL"
            # B_INT
            compare_001_21.inputs[3].default_value = 30

            # node Compare.002
            compare_002_13 = mn_dna_style_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_002_13.name = "Compare.002"
            compare_002_13.data_type = "INT"
            compare_002_13.mode = "ELEMENT"
            compare_002_13.operation = "EQUAL"
            # B_INT
            compare_002_13.inputs[3].default_value = 31

            # node Compare.003
            compare_003_13 = mn_dna_style_ball_and_stick.nodes.new(
                "FunctionNodeCompare"
            )
            compare_003_13.name = "Compare.003"
            compare_003_13.data_type = "INT"
            compare_003_13.mode = "ELEMENT"
            compare_003_13.operation = "EQUAL"
            # B_INT
            compare_003_13.inputs[3].default_value = 32

            # node Compare.004
            compare_004_9 = mn_dna_style_ball_and_stick.nodes.new("FunctionNodeCompare")
            compare_004_9.name = "Compare.004"
            compare_004_9.data_type = "INT"
            compare_004_9.mode = "ELEMENT"
            compare_004_9.operation = "EQUAL"
            # B_INT
            compare_004_9.inputs[3].default_value = 33

            # node Geometry to Instance
            geometry_to_instance_6 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_6.name = "Geometry to Instance"

            # node Group Output
            group_output_117 = mn_dna_style_ball_and_stick.nodes.new("NodeGroupOutput")
            group_output_117.name = "Group Output"
            group_output_117.is_active_output = True

            # node Realize Instances
            realize_instances_9 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_9.name = "Realize Instances"
            # Selection
            realize_instances_9.inputs[1].default_value = True
            # Realize All
            realize_instances_9.inputs[2].default_value = True
            # Depth
            realize_instances_9.inputs[3].default_value = 0

            # node Separate Geometry.002
            separate_geometry_002_4 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_4.name = "Separate Geometry.002"
            separate_geometry_002_4.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001_10 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_10.name = "Separate Geometry.001"
            separate_geometry_001_10.domain = "POINT"

            # node Group Input
            group_input_116 = mn_dna_style_ball_and_stick.nodes.new("NodeGroupInput")
            group_input_116.name = "Group Input"

            # node Group
            group_33 = mn_dna_style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_33.name = "Group"
            group_33.node_tree = _mn_utils_style_old_ball_and_stick

            # node Group.001
            group_001_22 = mn_dna_style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_001_22.name = "Group.001"
            group_001_22.node_tree = _mn_utils_style_old_ball_and_stick

            # node Separate Geometry.003
            separate_geometry_003_4 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003_4.name = "Separate Geometry.003"
            separate_geometry_003_4.domain = "POINT"

            # node Group.002
            group_002_13 = mn_dna_style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_002_13.name = "Group.002"
            group_002_13.node_tree = _mn_utils_style_old_ball_and_stick

            # node Group.003
            group_003_6 = mn_dna_style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_003_6.name = "Group.003"
            group_003_6.node_tree = _mn_utils_style_old_ball_and_stick

            # node Separate Geometry.004
            separate_geometry_004_3 = mn_dna_style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_004_3.name = "Separate Geometry.004"
            separate_geometry_004_3.domain = "POINT"

            # Set locations
            named_attribute_002_18.location = (-271.8153076171875, 270.0)
            compare_001_21.location = (-73.56605529785156, 281.95001220703125)
            compare_002_13.location = (-60.0, -200.0)
            compare_003_13.location = (-60.0, -620.0)
            compare_004_9.location = (-60.0, -1040.0)
            geometry_to_instance_6.location = (1220.4346923828125, -9.42071533203125)
            group_output_117.location = (1567.566162109375, -43.01692199707031)
            realize_instances_9.location = (-280.0, 120.0)
            separate_geometry_002_4.location = (120.0, -180.0)
            separate_geometry_001_10.location = (108.18467712402344, 290.0)
            group_input_116.location = (-508.1846923828125, -0.0)
            group_33.location = (450.9639892578125, 332.1063232421875)
            group_001_22.location = (440.0, -160.0)
            separate_geometry_003_4.location = (120.0, -600.0)
            group_002_13.location = (440.0, -660.0)
            group_003_6.location = (440.0, -1140.0)
            separate_geometry_004_3.location = (120.0, -1020.0)

            # Set dimensions
            named_attribute_002_18.width, named_attribute_002_18.height = 140.0, 100.0
            compare_001_21.width, compare_001_21.height = 140.0, 100.0
            compare_002_13.width, compare_002_13.height = 140.0, 100.0
            compare_003_13.width, compare_003_13.height = 140.0, 100.0
            compare_004_9.width, compare_004_9.height = 140.0, 100.0
            geometry_to_instance_6.width, geometry_to_instance_6.height = 160.0, 100.0
            group_output_117.width, group_output_117.height = 140.0, 100.0
            realize_instances_9.width, realize_instances_9.height = 140.0, 100.0
            separate_geometry_002_4.width, separate_geometry_002_4.height = 140.0, 100.0
            separate_geometry_001_10.width, separate_geometry_001_10.height = (
                140.0,
                100.0,
            )
            group_input_116.width, group_input_116.height = 140.0, 100.0
            group_33.width, group_33.height = 200.0, 100.0
            group_001_22.width, group_001_22.height = 200.0, 100.0
            separate_geometry_003_4.width, separate_geometry_003_4.height = 140.0, 100.0
            group_002_13.width, group_002_13.height = 200.0, 100.0
            group_003_6.width, group_003_6.height = 200.0, 100.0
            separate_geometry_004_3.width, separate_geometry_004_3.height = 140.0, 100.0

            # initialize mn_dna_style_ball_and_stick links
            # group_input_116.Bases -> realize_instances_9.Geometry
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[0], realize_instances_9.inputs[0]
            )
            # realize_instances_9.Geometry -> separate_geometry_001_10.Geometry
            mn_dna_style_ball_and_stick.links.new(
                realize_instances_9.outputs[0], separate_geometry_001_10.inputs[0]
            )
            # compare_001_21.Result -> separate_geometry_001_10.Selection
            mn_dna_style_ball_and_stick.links.new(
                compare_001_21.outputs[0], separate_geometry_001_10.inputs[1]
            )
            # named_attribute_002_18.Attribute -> compare_001_21.A
            mn_dna_style_ball_and_stick.links.new(
                named_attribute_002_18.outputs[0], compare_001_21.inputs[2]
            )
            # realize_instances_9.Geometry -> separate_geometry_002_4.Geometry
            mn_dna_style_ball_and_stick.links.new(
                realize_instances_9.outputs[0], separate_geometry_002_4.inputs[0]
            )
            # compare_002_13.Result -> separate_geometry_002_4.Selection
            mn_dna_style_ball_and_stick.links.new(
                compare_002_13.outputs[0], separate_geometry_002_4.inputs[1]
            )
            # named_attribute_002_18.Attribute -> compare_002_13.A
            mn_dna_style_ball_and_stick.links.new(
                named_attribute_002_18.outputs[0], compare_002_13.inputs[2]
            )
            # realize_instances_9.Geometry -> separate_geometry_003_4.Geometry
            mn_dna_style_ball_and_stick.links.new(
                realize_instances_9.outputs[0], separate_geometry_003_4.inputs[0]
            )
            # compare_003_13.Result -> separate_geometry_003_4.Selection
            mn_dna_style_ball_and_stick.links.new(
                compare_003_13.outputs[0], separate_geometry_003_4.inputs[1]
            )
            # named_attribute_002_18.Attribute -> compare_003_13.A
            mn_dna_style_ball_and_stick.links.new(
                named_attribute_002_18.outputs[0], compare_003_13.inputs[2]
            )
            # realize_instances_9.Geometry -> separate_geometry_004_3.Geometry
            mn_dna_style_ball_and_stick.links.new(
                realize_instances_9.outputs[0], separate_geometry_004_3.inputs[0]
            )
            # compare_004_9.Result -> separate_geometry_004_3.Selection
            mn_dna_style_ball_and_stick.links.new(
                compare_004_9.outputs[0], separate_geometry_004_3.inputs[1]
            )
            # named_attribute_002_18.Attribute -> compare_004_9.A
            mn_dna_style_ball_and_stick.links.new(
                named_attribute_002_18.outputs[0], compare_004_9.inputs[2]
            )
            # geometry_to_instance_6.Instances -> group_output_117.Bases
            mn_dna_style_ball_and_stick.links.new(
                geometry_to_instance_6.outputs[0], group_output_117.inputs[0]
            )
            # separate_geometry_001_10.Selection -> group_33.Atoms
            mn_dna_style_ball_and_stick.links.new(
                separate_geometry_001_10.outputs[0], group_33.inputs[0]
            )
            # group_input_116.Selection -> group_33.Selection
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[1], group_33.inputs[1]
            )
            # group_input_116.Shade Smooth -> group_33.Shade Smooth
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[2], group_33.inputs[2]
            )
            # group_input_116.Ball Resolution -> group_33.Ball Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[3], group_33.inputs[3]
            )
            # group_input_116.Ball Radius -> group_33.Ball Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[4], group_33.inputs[4]
            )
            # group_input_116.Find Bonds -> group_33.Find Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[5], group_33.inputs[5]
            )
            # group_input_116.Bond Resolution -> group_33.Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[6], group_33.inputs[6]
            )
            # group_input_116.Bond Radius -> group_33.Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[7], group_33.inputs[7]
            )
            # group_input_116.Material -> group_33.Material
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[8], group_33.inputs[14]
            )
            # group_input_116.Split Double Bonds -> group_33.Split Double Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[9], group_33.inputs[8]
            )
            # group_input_116.Double Bond Curve -> group_33.Double Bond Curve
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[10], group_33.inputs[9]
            )
            # group_input_116.Double Bond Width -> group_33.Double Bond Width
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[11], group_33.inputs[10]
            )
            # group_input_116.Double Bond Resolution -> group_33.Double Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[12], group_33.inputs[11]
            )
            # group_input_116.Double Bond Radius -> group_33.Double Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[13], group_33.inputs[12]
            )
            # group_input_116.Double Bond Rotate -> group_33.Double Bond Rotate
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[14], group_33.inputs[13]
            )
            # group_input_116.Selection -> group_001_22.Selection
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[1], group_001_22.inputs[1]
            )
            # group_input_116.Shade Smooth -> group_001_22.Shade Smooth
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[2], group_001_22.inputs[2]
            )
            # group_input_116.Ball Resolution -> group_001_22.Ball Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[3], group_001_22.inputs[3]
            )
            # group_input_116.Ball Radius -> group_001_22.Ball Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[4], group_001_22.inputs[4]
            )
            # group_input_116.Find Bonds -> group_001_22.Find Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[5], group_001_22.inputs[5]
            )
            # group_input_116.Bond Resolution -> group_001_22.Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[6], group_001_22.inputs[6]
            )
            # group_input_116.Bond Radius -> group_001_22.Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[7], group_001_22.inputs[7]
            )
            # group_input_116.Material -> group_001_22.Material
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[8], group_001_22.inputs[14]
            )
            # group_input_116.Split Double Bonds -> group_001_22.Split Double Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[9], group_001_22.inputs[8]
            )
            # group_input_116.Double Bond Curve -> group_001_22.Double Bond Curve
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[10], group_001_22.inputs[9]
            )
            # group_input_116.Double Bond Width -> group_001_22.Double Bond Width
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[11], group_001_22.inputs[10]
            )
            # group_input_116.Double Bond Resolution -> group_001_22.Double Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[12], group_001_22.inputs[11]
            )
            # group_input_116.Double Bond Radius -> group_001_22.Double Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[13], group_001_22.inputs[12]
            )
            # group_input_116.Double Bond Rotate -> group_001_22.Double Bond Rotate
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[14], group_001_22.inputs[13]
            )
            # separate_geometry_002_4.Selection -> group_001_22.Atoms
            mn_dna_style_ball_and_stick.links.new(
                separate_geometry_002_4.outputs[0], group_001_22.inputs[0]
            )
            # group_input_116.Shade Smooth -> group_002_13.Shade Smooth
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[2], group_002_13.inputs[2]
            )
            # group_input_116.Ball Resolution -> group_002_13.Ball Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[3], group_002_13.inputs[3]
            )
            # group_input_116.Ball Radius -> group_002_13.Ball Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[4], group_002_13.inputs[4]
            )
            # group_input_116.Find Bonds -> group_002_13.Find Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[5], group_002_13.inputs[5]
            )
            # group_input_116.Bond Resolution -> group_002_13.Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[6], group_002_13.inputs[6]
            )
            # group_input_116.Bond Radius -> group_002_13.Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[7], group_002_13.inputs[7]
            )
            # group_input_116.Material -> group_002_13.Material
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[8], group_002_13.inputs[14]
            )
            # group_input_116.Split Double Bonds -> group_002_13.Split Double Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[9], group_002_13.inputs[8]
            )
            # group_input_116.Double Bond Curve -> group_002_13.Double Bond Curve
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[10], group_002_13.inputs[9]
            )
            # group_input_116.Double Bond Width -> group_002_13.Double Bond Width
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[11], group_002_13.inputs[10]
            )
            # group_input_116.Double Bond Resolution -> group_002_13.Double Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[12], group_002_13.inputs[11]
            )
            # group_input_116.Double Bond Radius -> group_002_13.Double Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[13], group_002_13.inputs[12]
            )
            # group_input_116.Double Bond Rotate -> group_002_13.Double Bond Rotate
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[14], group_002_13.inputs[13]
            )
            # separate_geometry_003_4.Selection -> group_002_13.Atoms
            mn_dna_style_ball_and_stick.links.new(
                separate_geometry_003_4.outputs[0], group_002_13.inputs[0]
            )
            # group_input_116.Selection -> group_002_13.Selection
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[1], group_002_13.inputs[1]
            )
            # group_input_116.Shade Smooth -> group_003_6.Shade Smooth
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[2], group_003_6.inputs[2]
            )
            # group_input_116.Ball Resolution -> group_003_6.Ball Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[3], group_003_6.inputs[3]
            )
            # group_input_116.Ball Radius -> group_003_6.Ball Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[4], group_003_6.inputs[4]
            )
            # group_input_116.Find Bonds -> group_003_6.Find Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[5], group_003_6.inputs[5]
            )
            # group_input_116.Bond Resolution -> group_003_6.Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[6], group_003_6.inputs[6]
            )
            # group_input_116.Bond Radius -> group_003_6.Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[7], group_003_6.inputs[7]
            )
            # group_input_116.Material -> group_003_6.Material
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[8], group_003_6.inputs[14]
            )
            # group_input_116.Split Double Bonds -> group_003_6.Split Double Bonds
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[9], group_003_6.inputs[8]
            )
            # group_input_116.Double Bond Curve -> group_003_6.Double Bond Curve
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[10], group_003_6.inputs[9]
            )
            # group_input_116.Double Bond Width -> group_003_6.Double Bond Width
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[11], group_003_6.inputs[10]
            )
            # group_input_116.Double Bond Resolution -> group_003_6.Double Bond Resolution
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[12], group_003_6.inputs[11]
            )
            # group_input_116.Double Bond Radius -> group_003_6.Double Bond Radius
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[13], group_003_6.inputs[12]
            )
            # group_input_116.Double Bond Rotate -> group_003_6.Double Bond Rotate
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[14], group_003_6.inputs[13]
            )
            # group_input_116.Selection -> group_003_6.Selection
            mn_dna_style_ball_and_stick.links.new(
                group_input_116.outputs[1], group_003_6.inputs[1]
            )
            # separate_geometry_004_3.Selection -> group_003_6.Atoms
            mn_dna_style_ball_and_stick.links.new(
                separate_geometry_004_3.outputs[0], group_003_6.inputs[0]
            )
            # group_003_6.Ball and Stick Mesh -> geometry_to_instance_6.Geometry
            mn_dna_style_ball_and_stick.links.new(
                group_003_6.outputs[0], geometry_to_instance_6.inputs[0]
            )
            # group_002_13.Ball and Stick Mesh -> geometry_to_instance_6.Geometry
            mn_dna_style_ball_and_stick.links.new(
                group_002_13.outputs[0], geometry_to_instance_6.inputs[0]
            )
            # group_001_22.Ball and Stick Mesh -> geometry_to_instance_6.Geometry
            mn_dna_style_ball_and_stick.links.new(
                group_001_22.outputs[0], geometry_to_instance_6.inputs[0]
            )
            # group_33.Ball and Stick Mesh -> geometry_to_instance_6.Geometry
            mn_dna_style_ball_and_stick.links.new(
                group_33.outputs[0], geometry_to_instance_6.inputs[0]
            )
            return mn_dna_style_ball_and_stick

        mn_dna_style_ball_and_stick = mn_dna_style_ball_and_stick_node_group()

        # initialize mn_utils_extend_curve node group
        def mn_utils_extend_curve_node_group():
            mn_utils_extend_curve = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_utils_extend_curve"
            )

            mn_utils_extend_curve.color_tag = "NONE"
            mn_utils_extend_curve.description = ""

            mn_utils_extend_curve.is_modifier = True

            # mn_utils_extend_curve interface
            # Socket DNA Curve
            dna_curve_socket = mn_utils_extend_curve.interface.new_socket(
                name="DNA Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            dna_curve_socket.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_23 = mn_utils_extend_curve.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_23.attribute_domain = "POINT"

            # Socket Smoothing Iterations
            smoothing_iterations_socket = mn_utils_extend_curve.interface.new_socket(
                name="Smoothing Iterations", in_out="INPUT", socket_type="NodeSocketInt"
            )
            smoothing_iterations_socket.subtype = "NONE"
            smoothing_iterations_socket.default_value = 4
            smoothing_iterations_socket.min_value = 1
            smoothing_iterations_socket.max_value = 1000
            smoothing_iterations_socket.attribute_domain = "POINT"

            # Socket Smoothing Distance
            smoothing_distance_socket = mn_utils_extend_curve.interface.new_socket(
                name="Smoothing Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            smoothing_distance_socket.subtype = "DISTANCE"
            smoothing_distance_socket.default_value = 1.0
            smoothing_distance_socket.min_value = 0.009999999776482582
            smoothing_distance_socket.max_value = 3.4028234663852886e38
            smoothing_distance_socket.attribute_domain = "POINT"

            # Socket Extend Distance
            extend_distance_socket = mn_utils_extend_curve.interface.new_socket(
                name="Extend Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            extend_distance_socket.subtype = "NONE"
            extend_distance_socket.default_value = 6.5799994468688965
            extend_distance_socket.min_value = -10000.0
            extend_distance_socket.max_value = 10000.0
            extend_distance_socket.attribute_domain = "POINT"

            # initialize mn_utils_extend_curve nodes
            # node Endpoint Selection.003
            endpoint_selection_003 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_003.name = "Endpoint Selection.003"
            # Start Size
            endpoint_selection_003.inputs[0].default_value = 1
            # End Size
            endpoint_selection_003.inputs[1].default_value = 1

            # node Group Output
            group_output_118 = mn_utils_extend_curve.nodes.new("NodeGroupOutput")
            group_output_118.name = "Group Output"
            group_output_118.is_active_output = True

            # node Position.002
            position_002_9 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_9.name = "Position.002"

            # node Index.001
            index_001_7 = mn_utils_extend_curve.nodes.new("GeometryNodeInputIndex")
            index_001_7.name = "Index.001"

            # node Math.007
            math_007_1 = mn_utils_extend_curve.nodes.new("ShaderNodeMath")
            math_007_1.name = "Math.007"
            math_007_1.hide = True
            math_007_1.operation = "ADD"
            math_007_1.use_clamp = False

            # node Field at Index
            field_at_index_5 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            field_at_index_5.name = "Field at Index"
            field_at_index_5.data_type = "FLOAT_VECTOR"
            field_at_index_5.domain = "POINT"

            # node Vector Math.010
            vector_math_010 = mn_utils_extend_curve.nodes.new("ShaderNodeVectorMath")
            vector_math_010.name = "Vector Math.010"
            vector_math_010.operation = "SCALE"

            # node Set Position.001
            set_position_001_4 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_4.name = "Set Position.001"
            # Position
            set_position_001_4.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Switch.001
            switch_001_20 = mn_utils_extend_curve.nodes.new("GeometryNodeSwitch")
            switch_001_20.name = "Switch.001"
            switch_001_20.input_type = "INT"
            # False
            switch_001_20.inputs[1].default_value = 1
            # True
            switch_001_20.inputs[2].default_value = -1

            # node Endpoint Selection.006
            endpoint_selection_006 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_006.name = "Endpoint Selection.006"
            # Start Size
            endpoint_selection_006.inputs[0].default_value = 0
            # End Size
            endpoint_selection_006.inputs[1].default_value = 1

            # node Group Input
            group_input_117 = mn_utils_extend_curve.nodes.new("NodeGroupInput")
            group_input_117.name = "Group Input"

            # node Vector Math.009
            vector_math_009 = mn_utils_extend_curve.nodes.new("ShaderNodeVectorMath")
            vector_math_009.name = "Vector Math.009"
            vector_math_009.operation = "SUBTRACT"

            # node Vector Math.011
            vector_math_011 = mn_utils_extend_curve.nodes.new("ShaderNodeVectorMath")
            vector_math_011.name = "Vector Math.011"
            vector_math_011.operation = "DISTANCE"

            # node Math
            math_30 = mn_utils_extend_curve.nodes.new("ShaderNodeMath")
            math_30.name = "Math"
            math_30.operation = "DIVIDE"
            math_30.use_clamp = False

            # node Geometry Proximity
            geometry_proximity_1 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeProximity"
            )
            geometry_proximity_1.name = "Geometry Proximity"
            geometry_proximity_1.target_element = "POINTS"
            # Group ID
            geometry_proximity_1.inputs[1].default_value = 0
            # Source Position
            geometry_proximity_1.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Sample Group ID
            geometry_proximity_1.inputs[3].default_value = 0

            # node Fillet Curve
            fillet_curve = mn_utils_extend_curve.nodes.new("GeometryNodeFilletCurve")
            fillet_curve.name = "Fillet Curve"
            fillet_curve.mode = "POLY"
            # Radius
            fillet_curve.inputs[2].default_value = 5.0
            # Limit Radius
            fillet_curve.inputs[3].default_value = True

            # node Resample Curve
            resample_curve_1 = mn_utils_extend_curve.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_1.name = "Resample Curve"
            resample_curve_1.mode = "LENGTH"
            # Selection
            resample_curve_1.inputs[1].default_value = True

            # Set locations
            endpoint_selection_003.location = (-800.0, 380.0000305175781)
            group_output_118.location = (-420.0, 420.0)
            position_002_9.location = (-1280.0, 160.0)
            index_001_7.location = (-1280.0, 100.0)
            math_007_1.location = (-1280.0, 40.0)
            field_at_index_5.location = (-1120.0, 160.0)
            vector_math_010.location = (-800.0, 240.0)
            set_position_001_4.location = (-640.0, 419.9999694824219)
            switch_001_20.location = (-1280.0, 0.0)
            endpoint_selection_006.location = (-1280.0, -160.0)
            group_input_117.location = (-1380.0, 400.0)
            vector_math_009.location = (-960.0, 240.0)
            vector_math_011.location = (-960.0, 100.0)
            math_30.location = (-800.0, 100.0)
            geometry_proximity_1.location = (-640.0, 260.0)
            fillet_curve.location = (-960.9263305664062, 460.0)
            resample_curve_1.location = (-1120.92626953125, 460.0)

            # Set dimensions
            endpoint_selection_003.width, endpoint_selection_003.height = 140.0, 100.0
            group_output_118.width, group_output_118.height = 140.0, 100.0
            position_002_9.width, position_002_9.height = 140.0, 100.0
            index_001_7.width, index_001_7.height = 140.0, 100.0
            math_007_1.width, math_007_1.height = 140.0, 100.0
            field_at_index_5.width, field_at_index_5.height = 140.0, 100.0
            vector_math_010.width, vector_math_010.height = 140.0, 100.0
            set_position_001_4.width, set_position_001_4.height = 140.0, 100.0
            switch_001_20.width, switch_001_20.height = 140.0, 100.0
            endpoint_selection_006.width, endpoint_selection_006.height = 140.0, 100.0
            group_input_117.width, group_input_117.height = 140.0, 100.0
            vector_math_009.width, vector_math_009.height = 140.0, 100.0
            vector_math_011.width, vector_math_011.height = 140.0, 100.0
            math_30.width, math_30.height = 140.0, 100.0
            geometry_proximity_1.width, geometry_proximity_1.height = 140.0, 100.0
            fillet_curve.width, fillet_curve.height = 140.0, 100.0
            resample_curve_1.width, resample_curve_1.height = 140.0, 100.0

            # initialize mn_utils_extend_curve links
            # resample_curve_1.Curve -> fillet_curve.Curve
            mn_utils_extend_curve.links.new(
                resample_curve_1.outputs[0], fillet_curve.inputs[0]
            )
            # group_input_117.Geometry -> resample_curve_1.Curve
            mn_utils_extend_curve.links.new(
                group_input_117.outputs[0], resample_curve_1.inputs[0]
            )
            # endpoint_selection_003.Selection -> set_position_001_4.Selection
            mn_utils_extend_curve.links.new(
                endpoint_selection_003.outputs[0], set_position_001_4.inputs[1]
            )
            # fillet_curve.Curve -> set_position_001_4.Geometry
            mn_utils_extend_curve.links.new(
                fillet_curve.outputs[0], set_position_001_4.inputs[0]
            )
            # position_002_9.Position -> vector_math_009.Vector
            mn_utils_extend_curve.links.new(
                position_002_9.outputs[0], vector_math_009.inputs[0]
            )
            # position_002_9.Position -> field_at_index_5.Value
            mn_utils_extend_curve.links.new(
                position_002_9.outputs[0], field_at_index_5.inputs[1]
            )
            # field_at_index_5.Value -> vector_math_009.Vector
            mn_utils_extend_curve.links.new(
                field_at_index_5.outputs[0], vector_math_009.inputs[1]
            )
            # index_001_7.Index -> math_007_1.Value
            mn_utils_extend_curve.links.new(
                index_001_7.outputs[0], math_007_1.inputs[0]
            )
            # math_007_1.Value -> field_at_index_5.Index
            mn_utils_extend_curve.links.new(
                math_007_1.outputs[0], field_at_index_5.inputs[0]
            )
            # vector_math_010.Vector -> set_position_001_4.Offset
            mn_utils_extend_curve.links.new(
                vector_math_010.outputs[0], set_position_001_4.inputs[3]
            )
            # endpoint_selection_006.Selection -> switch_001_20.Switch
            mn_utils_extend_curve.links.new(
                endpoint_selection_006.outputs[0], switch_001_20.inputs[0]
            )
            # switch_001_20.Output -> math_007_1.Value
            mn_utils_extend_curve.links.new(
                switch_001_20.outputs[0], math_007_1.inputs[1]
            )
            # vector_math_009.Vector -> vector_math_010.Vector
            mn_utils_extend_curve.links.new(
                vector_math_009.outputs[0], vector_math_010.inputs[0]
            )
            # group_input_117.Smoothing Iterations -> fillet_curve.Count
            mn_utils_extend_curve.links.new(
                group_input_117.outputs[1], fillet_curve.inputs[1]
            )
            # group_input_117.Smoothing Distance -> resample_curve_1.Length
            mn_utils_extend_curve.links.new(
                group_input_117.outputs[2], resample_curve_1.inputs[3]
            )
            # set_position_001_4.Geometry -> group_output_118.DNA Curve
            mn_utils_extend_curve.links.new(
                set_position_001_4.outputs[0], group_output_118.inputs[0]
            )
            # position_002_9.Position -> vector_math_011.Vector
            mn_utils_extend_curve.links.new(
                position_002_9.outputs[0], vector_math_011.inputs[0]
            )
            # field_at_index_5.Value -> vector_math_011.Vector
            mn_utils_extend_curve.links.new(
                field_at_index_5.outputs[0], vector_math_011.inputs[1]
            )
            # group_input_117.Extend Distance -> math_30.Value
            mn_utils_extend_curve.links.new(
                group_input_117.outputs[3], math_30.inputs[0]
            )
            # vector_math_011.Value -> math_30.Value
            mn_utils_extend_curve.links.new(
                vector_math_011.outputs[1], math_30.inputs[1]
            )
            # math_30.Value -> vector_math_010.Scale
            mn_utils_extend_curve.links.new(
                math_30.outputs[0], vector_math_010.inputs[3]
            )
            # fillet_curve.Curve -> geometry_proximity_1.Geometry
            mn_utils_extend_curve.links.new(
                fillet_curve.outputs[0], geometry_proximity_1.inputs[0]
            )
            return mn_utils_extend_curve

        mn_utils_extend_curve = mn_utils_extend_curve_node_group()

        # initialize dihedral_angle node group
        def dihedral_angle_node_group():
            dihedral_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Dihedral Angle"
            )

            dihedral_angle.color_tag = "VECTOR"
            dihedral_angle.description = ""

            # dihedral_angle interface
            # Socket Angle
            angle_socket_5 = dihedral_angle.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_5.subtype = "ANGLE"
            angle_socket_5.default_value = 0.0
            angle_socket_5.min_value = -3.4028234663852886e38
            angle_socket_5.max_value = 3.4028234663852886e38
            angle_socket_5.attribute_domain = "POINT"
            angle_socket_5.description = "The angle between the vectors AB and CD, when made perpendicular to BC."

            # Socket BA⟂(BC)
            ba__bc__socket = dihedral_angle.interface.new_socket(
                name="BA⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ba__bc__socket.subtype = "NONE"
            ba__bc__socket.default_value = (0.0, 0.0, 0.0)
            ba__bc__socket.min_value = -3.4028234663852886e38
            ba__bc__socket.max_value = 3.4028234663852886e38
            ba__bc__socket.attribute_domain = "POINT"
            ba__bc__socket.description = (
                "The vector BA when made perpendicular to  the axis BC"
            )

            # Socket CD⟂(BC)
            cd__bc__socket = dihedral_angle.interface.new_socket(
                name="CD⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            cd__bc__socket.subtype = "NONE"
            cd__bc__socket.default_value = (0.0, 0.0, 0.0)
            cd__bc__socket.min_value = -3.4028234663852886e38
            cd__bc__socket.max_value = 3.4028234663852886e38
            cd__bc__socket.attribute_domain = "POINT"
            cd__bc__socket.description = (
                "The Vector CD when makde perpendicular to the axis BC"
            )

            # Socket BC
            bc_socket = dihedral_angle.interface.new_socket(
                name="BC", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            bc_socket.subtype = "NONE"
            bc_socket.default_value = (0.0, 0.0, 0.0)
            bc_socket.min_value = -3.4028234663852886e38
            bc_socket.max_value = 3.4028234663852886e38
            bc_socket.attribute_domain = "POINT"
            bc_socket.description = "The axis vector BC"

            # Socket A
            a_socket_5 = dihedral_angle.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketVector"
            )
            a_socket_5.subtype = "NONE"
            a_socket_5.default_value = (0.0, 0.0, 0.0)
            a_socket_5.min_value = -3.4028234663852886e38
            a_socket_5.max_value = 3.4028234663852886e38
            a_socket_5.attribute_domain = "POINT"
            a_socket_5.description = (
                "First vector for the calculation, which draws a line to B"
            )

            # Socket B
            b_socket_4 = dihedral_angle.interface.new_socket(
                name="B", in_out="INPUT", socket_type="NodeSocketVector"
            )
            b_socket_4.subtype = "NONE"
            b_socket_4.default_value = (0.0, 0.0, 0.0)
            b_socket_4.min_value = -3.4028234663852886e38
            b_socket_4.max_value = 3.4028234663852886e38
            b_socket_4.attribute_domain = "POINT"
            b_socket_4.description = "Second vector for the calculation, which receives a line from A and draws a line to C"

            # Socket C
            c_socket_4 = dihedral_angle.interface.new_socket(
                name="C", in_out="INPUT", socket_type="NodeSocketVector"
            )
            c_socket_4.subtype = "NONE"
            c_socket_4.default_value = (0.0, 0.0, 0.0)
            c_socket_4.min_value = -3.4028234663852886e38
            c_socket_4.max_value = 3.4028234663852886e38
            c_socket_4.attribute_domain = "POINT"
            c_socket_4.description = "Third vector for the calculation, which receives a line from B and draws a line to D"

            # Socket D
            d_socket = dihedral_angle.interface.new_socket(
                name="D", in_out="INPUT", socket_type="NodeSocketVector"
            )
            d_socket.subtype = "NONE"
            d_socket.default_value = (0.0, 0.0, 0.0)
            d_socket.min_value = -3.4028234663852886e38
            d_socket.max_value = 3.4028234663852886e38
            d_socket.attribute_domain = "POINT"
            d_socket.description = "Last vector for the calculation, which is the end point of the line from D"

            # initialize dihedral_angle nodes
            # node Vector Math.003
            vector_math_003_6 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_003_6.name = "Vector Math.003"
            vector_math_003_6.operation = "SUBTRACT"

            # node Vector Math.004
            vector_math_004_7 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_004_7.name = "Vector Math.004"
            vector_math_004_7.operation = "SUBTRACT"

            # node Vector Math.006
            vector_math_006_1 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_006_1.name = "Vector Math.006"
            vector_math_006_1.operation = "SUBTRACT"

            # node Vector Math.007
            vector_math_007 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_007.name = "Vector Math.007"
            vector_math_007.operation = "PROJECT"

            # node Vector Math.009
            vector_math_009_1 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_009_1.name = "Vector Math.009"
            vector_math_009_1.operation = "PROJECT"

            # node Vector Math.008
            vector_math_008 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_008.name = "Vector Math.008"
            vector_math_008.operation = "SUBTRACT"

            # node Vector Math.010
            vector_math_010_1 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_010_1.name = "Vector Math.010"
            vector_math_010_1.operation = "SUBTRACT"

            # node MN_utils_vector_angle.002
            mn_utils_vector_angle_002 = dihedral_angle.nodes.new("GeometryNodeGroup")
            mn_utils_vector_angle_002.label = "Vector Angle"
            mn_utils_vector_angle_002.name = "MN_utils_vector_angle.002"
            mn_utils_vector_angle_002.node_tree = vector_angle

            # node Group Output
            group_output_119 = dihedral_angle.nodes.new("NodeGroupOutput")
            group_output_119.name = "Group Output"
            group_output_119.is_active_output = True

            # node Reroute.002
            reroute_002_19 = dihedral_angle.nodes.new("NodeReroute")
            reroute_002_19.name = "Reroute.002"
            # node Reroute.001
            reroute_001_23 = dihedral_angle.nodes.new("NodeReroute")
            reroute_001_23.name = "Reroute.001"
            # node Vector Math
            vector_math_26 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_26.name = "Vector Math"
            vector_math_26.operation = "CROSS_PRODUCT"

            # node Vector Math.001
            vector_math_001_17 = dihedral_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_001_17.name = "Vector Math.001"
            vector_math_001_17.operation = "DOT_PRODUCT"

            # node Math.001
            math_001_19 = dihedral_angle.nodes.new("ShaderNodeMath")
            math_001_19.name = "Math.001"
            math_001_19.operation = "SIGN"
            math_001_19.use_clamp = False

            # node Reroute
            reroute_33 = dihedral_angle.nodes.new("NodeReroute")
            reroute_33.name = "Reroute"
            # node Math
            math_31 = dihedral_angle.nodes.new("ShaderNodeMath")
            math_31.name = "Math"
            math_31.operation = "MULTIPLY"
            math_31.use_clamp = False

            # node Group Input.003
            group_input_003_7 = dihedral_angle.nodes.new("NodeGroupInput")
            group_input_003_7.name = "Group Input.003"
            group_input_003_7.outputs[0].hide = True
            group_input_003_7.outputs[1].hide = True
            group_input_003_7.outputs[2].hide = True
            group_input_003_7.outputs[4].hide = True

            # node Group Input.001
            group_input_001_18 = dihedral_angle.nodes.new("NodeGroupInput")
            group_input_001_18.name = "Group Input.001"
            group_input_001_18.outputs[1].hide = True
            group_input_001_18.outputs[2].hide = True
            group_input_001_18.outputs[3].hide = True
            group_input_001_18.outputs[4].hide = True

            # node Group Input
            group_input_118 = dihedral_angle.nodes.new("NodeGroupInput")
            group_input_118.name = "Group Input"
            group_input_118.outputs[0].hide = True
            group_input_118.outputs[2].hide = True
            group_input_118.outputs[3].hide = True
            group_input_118.outputs[4].hide = True

            # node Group Input.002
            group_input_002_10 = dihedral_angle.nodes.new("NodeGroupInput")
            group_input_002_10.name = "Group Input.002"
            group_input_002_10.outputs[0].hide = True
            group_input_002_10.outputs[1].hide = True
            group_input_002_10.outputs[3].hide = True
            group_input_002_10.outputs[4].hide = True

            # Set locations
            vector_math_003_6.location = (-142.68453979492188, 25.911895751953125)
            vector_math_004_7.location = (-140.0, 440.0)
            vector_math_006_1.location = (-140.0, 180.0)
            vector_math_007.location = (80.0, 320.0)
            vector_math_009_1.location = (80.0, -80.0)
            vector_math_008.location = (80.0, 460.0)
            vector_math_010_1.location = (80.0, 60.0)
            mn_utils_vector_angle_002.location = (420.0, 420.0)
            group_output_119.location = (920.0, 320.0)
            reroute_002_19.location = (300.0, 260.0)
            reroute_001_23.location = (300.0, 240.0)
            vector_math_26.location = (420.0, 180.0)
            vector_math_001_17.location = (420.0, 40.0)
            math_001_19.location = (580.0, 40.0)
            reroute_33.location = (300.0, 220.0)
            math_31.location = (640.0, 420.0)
            group_input_003_7.location = (-440.0, 0.0)
            group_input_001_18.location = (-440.0, 420.0)
            group_input_118.location = (-440.0, 280.0)
            group_input_002_10.location = (-440.0, 140.0)

            # Set dimensions
            vector_math_003_6.width, vector_math_003_6.height = 140.0, 100.0
            vector_math_004_7.width, vector_math_004_7.height = 140.0, 100.0
            vector_math_006_1.width, vector_math_006_1.height = 140.0, 100.0
            vector_math_007.width, vector_math_007.height = 140.0, 100.0
            vector_math_009_1.width, vector_math_009_1.height = 140.0, 100.0
            vector_math_008.width, vector_math_008.height = 140.0, 100.0
            vector_math_010_1.width, vector_math_010_1.height = 140.0, 100.0
            mn_utils_vector_angle_002.width, mn_utils_vector_angle_002.height = (
                200.0,
                100.0,
            )
            group_output_119.width, group_output_119.height = 140.0, 100.0
            reroute_002_19.width, reroute_002_19.height = 16.0, 100.0
            reroute_001_23.width, reroute_001_23.height = 16.0, 100.0
            vector_math_26.width, vector_math_26.height = 140.0, 100.0
            vector_math_001_17.width, vector_math_001_17.height = 140.0, 100.0
            math_001_19.width, math_001_19.height = 140.0, 100.0
            reroute_33.width, reroute_33.height = 16.0, 100.0
            math_31.width, math_31.height = 140.0, 100.0
            group_input_003_7.width, group_input_003_7.height = 140.0, 100.0
            group_input_001_18.width, group_input_001_18.height = 140.0, 100.0
            group_input_118.width, group_input_118.height = 140.0, 100.0
            group_input_002_10.width, group_input_002_10.height = 140.0, 100.0

            # initialize dihedral_angle links
            # vector_math_007.Vector -> vector_math_008.Vector
            dihedral_angle.links.new(
                vector_math_007.outputs[0], vector_math_008.inputs[1]
            )
            # vector_math_009_1.Vector -> vector_math_010_1.Vector
            dihedral_angle.links.new(
                vector_math_009_1.outputs[0], vector_math_010_1.inputs[1]
            )
            # vector_math_004_7.Vector -> vector_math_007.Vector
            dihedral_angle.links.new(
                vector_math_004_7.outputs[0], vector_math_007.inputs[0]
            )
            # vector_math_006_1.Vector -> vector_math_007.Vector
            dihedral_angle.links.new(
                vector_math_006_1.outputs[0], vector_math_007.inputs[1]
            )
            # reroute_002_19.Output -> mn_utils_vector_angle_002.A
            dihedral_angle.links.new(
                reroute_002_19.outputs[0], mn_utils_vector_angle_002.inputs[0]
            )
            # vector_math_004_7.Vector -> vector_math_008.Vector
            dihedral_angle.links.new(
                vector_math_004_7.outputs[0], vector_math_008.inputs[0]
            )
            # vector_math_003_6.Vector -> vector_math_010_1.Vector
            dihedral_angle.links.new(
                vector_math_003_6.outputs[0], vector_math_010_1.inputs[0]
            )
            # vector_math_003_6.Vector -> vector_math_009_1.Vector
            dihedral_angle.links.new(
                vector_math_003_6.outputs[0], vector_math_009_1.inputs[0]
            )
            # vector_math_006_1.Vector -> vector_math_009_1.Vector
            dihedral_angle.links.new(
                vector_math_006_1.outputs[0], vector_math_009_1.inputs[1]
            )
            # vector_math_006_1.Vector -> reroute_33.Input
            dihedral_angle.links.new(vector_math_006_1.outputs[0], reroute_33.inputs[0])
            # reroute_001_23.Output -> mn_utils_vector_angle_002.B
            dihedral_angle.links.new(
                reroute_001_23.outputs[0], mn_utils_vector_angle_002.inputs[1]
            )
            # vector_math_26.Vector -> vector_math_001_17.Vector
            dihedral_angle.links.new(
                vector_math_26.outputs[0], vector_math_001_17.inputs[0]
            )
            # reroute_33.Output -> vector_math_001_17.Vector
            dihedral_angle.links.new(
                reroute_33.outputs[0], vector_math_001_17.inputs[1]
            )
            # mn_utils_vector_angle_002.Angle -> math_31.Value
            dihedral_angle.links.new(
                mn_utils_vector_angle_002.outputs[0], math_31.inputs[0]
            )
            # reroute_001_23.Output -> vector_math_26.Vector
            dihedral_angle.links.new(
                reroute_001_23.outputs[0], vector_math_26.inputs[1]
            )
            # group_input_002_10.C -> vector_math_003_6.Vector
            dihedral_angle.links.new(
                group_input_002_10.outputs[2], vector_math_003_6.inputs[1]
            )
            # group_input_118.B -> vector_math_004_7.Vector
            dihedral_angle.links.new(
                group_input_118.outputs[1], vector_math_004_7.inputs[1]
            )
            # group_input_118.B -> vector_math_006_1.Vector
            dihedral_angle.links.new(
                group_input_118.outputs[1], vector_math_006_1.inputs[1]
            )
            # group_input_002_10.C -> vector_math_006_1.Vector
            dihedral_angle.links.new(
                group_input_002_10.outputs[2], vector_math_006_1.inputs[0]
            )
            # math_31.Value -> group_output_119.Angle
            dihedral_angle.links.new(math_31.outputs[0], group_output_119.inputs[0])
            # reroute_002_19.Output -> group_output_119.BA⟂(BC)
            dihedral_angle.links.new(
                reroute_002_19.outputs[0], group_output_119.inputs[1]
            )
            # reroute_33.Output -> group_output_119.BC
            dihedral_angle.links.new(reroute_33.outputs[0], group_output_119.inputs[3])
            # reroute_001_23.Output -> group_output_119.CD⟂(BC)
            dihedral_angle.links.new(
                reroute_001_23.outputs[0], group_output_119.inputs[2]
            )
            # reroute_002_19.Output -> vector_math_26.Vector
            dihedral_angle.links.new(
                reroute_002_19.outputs[0], vector_math_26.inputs[0]
            )
            # vector_math_001_17.Value -> math_001_19.Value
            dihedral_angle.links.new(
                vector_math_001_17.outputs[1], math_001_19.inputs[0]
            )
            # math_001_19.Value -> math_31.Value
            dihedral_angle.links.new(math_001_19.outputs[0], math_31.inputs[1])
            # vector_math_010_1.Vector -> reroute_001_23.Input
            dihedral_angle.links.new(
                vector_math_010_1.outputs[0], reroute_001_23.inputs[0]
            )
            # vector_math_008.Vector -> reroute_002_19.Input
            dihedral_angle.links.new(
                vector_math_008.outputs[0], reroute_002_19.inputs[0]
            )
            # group_input_001_18.A -> vector_math_004_7.Vector
            dihedral_angle.links.new(
                group_input_001_18.outputs[0], vector_math_004_7.inputs[0]
            )
            # group_input_003_7.D -> vector_math_003_6.Vector
            dihedral_angle.links.new(
                group_input_003_7.outputs[3], vector_math_003_6.inputs[0]
            )
            return dihedral_angle

        dihedral_angle = dihedral_angle_node_group()

        # initialize select_chain_ node group
        def select_chain__node_group():
            select_chain_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Chain_"
            )

            select_chain_.color_tag = "INPUT"
            select_chain_.description = ""

            # select_chain_ interface
            # Socket Selection
            selection_socket_42 = select_chain_.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_42.attribute_domain = "POINT"
            selection_socket_42.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_17 = select_chain_.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_17.attribute_domain = "POINT"
            inverted_socket_17.description = "The inverse of the calculated selection"

            # Socket Chain A
            chain_a_socket_1 = select_chain_.interface.new_socket(
                name="Chain A", in_out="INPUT", socket_type="NodeSocketBool"
            )
            chain_a_socket_1.attribute_domain = "POINT"
            chain_a_socket_1.description = "Select the atoms in Chain A"

            # Socket Chain B
            chain_b_socket_1 = select_chain_.interface.new_socket(
                name="Chain B", in_out="INPUT", socket_type="NodeSocketBool"
            )
            chain_b_socket_1.attribute_domain = "POINT"
            chain_b_socket_1.description = "Select the atoms in Chain B"

            # Socket Chain ...
            chain_____socket = select_chain_.interface.new_socket(
                name="Chain ...", in_out="INPUT", socket_type="NodeSocketBool"
            )
            chain_____socket.attribute_domain = "POINT"
            chain_____socket.description = "Select the atoms in Chain ..."

            # initialize select_chain_ nodes
            # node Named Attribute
            named_attribute_31 = select_chain_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_31.name = "Named Attribute"
            named_attribute_31.data_type = "INT"
            # Name
            named_attribute_31.inputs[0].default_value = "chaind_id"

            # node Group Output
            group_output_120 = select_chain_.nodes.new("NodeGroupOutput")
            group_output_120.name = "Group Output"
            group_output_120.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_22 = select_chain_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_22.name = "Boolean Math.001"
            boolean_math_001_22.operation = "NOT"

            # node Group Input
            group_input_119 = select_chain_.nodes.new("NodeGroupInput")
            group_input_119.name = "Group Input"

            # node Index Switch
            index_switch_3 = select_chain_.nodes.new("GeometryNodeIndexSwitch")
            index_switch_3.name = "Index Switch"
            index_switch_3.data_type = "BOOLEAN"
            index_switch_3.index_switch_items.clear()
            index_switch_3.index_switch_items.new()
            index_switch_3.index_switch_items.new()
            index_switch_3.index_switch_items.new()

            # Set locations
            named_attribute_31.location = (-780.0, -60.0)
            group_output_120.location = (-160.0, -180.0)
            boolean_math_001_22.location = (-320.0, -260.0)
            group_input_119.location = (-780.0, -240.0)
            index_switch_3.location = (-494.1487121582031, -182.76792907714844)

            # Set dimensions
            named_attribute_31.width, named_attribute_31.height = 140.0, 100.0
            group_output_120.width, group_output_120.height = 140.0, 100.0
            boolean_math_001_22.width, boolean_math_001_22.height = 140.0, 100.0
            group_input_119.width, group_input_119.height = 140.0, 100.0
            index_switch_3.width, index_switch_3.height = 140.0, 100.0

            # initialize select_chain_ links
            # index_switch_3.Output -> boolean_math_001_22.Boolean
            select_chain_.links.new(
                index_switch_3.outputs[0], boolean_math_001_22.inputs[0]
            )
            # index_switch_3.Output -> group_output_120.Selection
            select_chain_.links.new(
                index_switch_3.outputs[0], group_output_120.inputs[0]
            )
            # boolean_math_001_22.Boolean -> group_output_120.Inverted
            select_chain_.links.new(
                boolean_math_001_22.outputs[0], group_output_120.inputs[1]
            )
            # named_attribute_31.Attribute -> index_switch_3.Index
            select_chain_.links.new(
                named_attribute_31.outputs[0], index_switch_3.inputs[0]
            )
            # group_input_119.Chain A -> index_switch_3.0
            select_chain_.links.new(
                group_input_119.outputs[0], index_switch_3.inputs[1]
            )
            # group_input_119.Chain B -> index_switch_3.1
            select_chain_.links.new(
                group_input_119.outputs[1], index_switch_3.inputs[2]
            )
            # group_input_119.Chain ... -> index_switch_3.2
            select_chain_.links.new(
                group_input_119.outputs[2], index_switch_3.inputs[3]
            )
            return select_chain_

        select_chain_ = select_chain__node_group()

        # initialize select_cube node group
        def select_cube_node_group():
            select_cube = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Cube"
            )

            select_cube.color_tag = "INPUT"
            select_cube.description = ""

            # select_cube interface
            # Socket Selection
            selection_socket_43 = select_cube.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_43.attribute_domain = "POINT"
            selection_socket_43.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_18 = select_cube.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_18.attribute_domain = "POINT"
            inverted_socket_18.description = "The inverse of the calculated selection"

            # Socket 0..1
            _0__1_socket_2 = select_cube.interface.new_socket(
                name="0..1", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            _0__1_socket_2.subtype = "NONE"
            _0__1_socket_2.default_value = 0.0
            _0__1_socket_2.min_value = -3.4028234663852886e38
            _0__1_socket_2.max_value = 3.4028234663852886e38
            _0__1_socket_2.attribute_domain = "POINT"
            _0__1_socket_2.description = (
                "Falloff value from 0 to 1, based on the From Min and From Max."
            )

            # Socket And
            and_socket_13 = select_cube.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_13.attribute_domain = "POINT"
            and_socket_13.hide_value = True

            # Socket Or
            or_socket_12 = select_cube.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_12.attribute_domain = "POINT"
            or_socket_12.hide_value = True

            # Socket Object
            object_socket_2 = select_cube.interface.new_socket(
                name="Object", in_out="INPUT", socket_type="NodeSocketObject"
            )
            object_socket_2.attribute_domain = "POINT"
            object_socket_2.description = (
                "Empty object (ideally Cube) to use as the selection tool."
            )

            # Socket From Min (A)
            from_min__a__socket_1 = select_cube.interface.new_socket(
                name="From Min (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_min__a__socket_1.subtype = "NONE"
            from_min__a__socket_1.default_value = 0.0
            from_min__a__socket_1.min_value = 0.0
            from_min__a__socket_1.max_value = 10000.0
            from_min__a__socket_1.attribute_domain = "POINT"
            from_min__a__socket_1.description = (
                "Minimum distance for falloff, in Angstroms."
            )

            # Socket From Max (A)
            from_max__a__socket_1 = select_cube.interface.new_socket(
                name="From Max (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_max__a__socket_1.subtype = "NONE"
            from_max__a__socket_1.default_value = 10.0
            from_max__a__socket_1.min_value = 0.0
            from_max__a__socket_1.max_value = 10000.0
            from_max__a__socket_1.attribute_domain = "POINT"
            from_max__a__socket_1.description = (
                "Maximum distance for falloff, in Angstroms."
            )

            # initialize select_cube nodes
            # node Vector Math.009
            vector_math_009_2 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_009_2.name = "Vector Math.009"
            vector_math_009_2.operation = "SUBTRACT"

            # node Vector Math.007
            vector_math_007_1 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_007_1.name = "Vector Math.007"
            vector_math_007_1.operation = "ADD"

            # node Vector Rotate.002
            vector_rotate_002 = select_cube.nodes.new("ShaderNodeVectorRotate")
            vector_rotate_002.name = "Vector Rotate.002"
            vector_rotate_002.invert = True
            vector_rotate_002.rotation_type = "EULER_XYZ"

            # node Object Info
            object_info_5 = select_cube.nodes.new("GeometryNodeObjectInfo")
            object_info_5.name = "Object Info"
            object_info_5.transform_space = "RELATIVE"
            # As Instance
            object_info_5.inputs[1].default_value = True

            # node Position.002
            position_002_10 = select_cube.nodes.new("GeometryNodeInputPosition")
            position_002_10.name = "Position.002"

            # node Vector Math.008
            vector_math_008_1 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_008_1.name = "Vector Math.008"
            vector_math_008_1.operation = "SUBTRACT"

            # node Vector Math.010
            vector_math_010_2 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_010_2.name = "Vector Math.010"
            vector_math_010_2.operation = "SUBTRACT"

            # node Compare.004
            compare_004_10 = select_cube.nodes.new("FunctionNodeCompare")
            compare_004_10.name = "Compare.004"
            compare_004_10.data_type = "VECTOR"
            compare_004_10.mode = "ELEMENT"
            compare_004_10.operation = "LESS_THAN"
            # B_VEC3
            compare_004_10.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Compare.003
            compare_003_14 = select_cube.nodes.new("FunctionNodeCompare")
            compare_003_14.name = "Compare.003"
            compare_003_14.data_type = "VECTOR"
            compare_003_14.mode = "ELEMENT"
            compare_003_14.operation = "GREATER_THAN"
            # B_VEC3
            compare_003_14.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.001
            vector_math_001_18 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_001_18.name = "Vector Math.001"
            vector_math_001_18.operation = "ABSOLUTE"

            # node Vector Math
            vector_math_27 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_27.name = "Vector Math"
            vector_math_27.operation = "ABSOLUTE"

            # node Vector Math.003
            vector_math_003_7 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_003_7.name = "Vector Math.003"
            vector_math_003_7.operation = "MINIMUM"

            # node Group Output
            group_output_121 = select_cube.nodes.new("NodeGroupOutput")
            group_output_121.name = "Group Output"
            group_output_121.is_active_output = True

            # node Group Input
            group_input_120 = select_cube.nodes.new("NodeGroupInput")
            group_input_120.name = "Group Input"
            group_input_120.outputs[0].hide = True

            # node Boolean Math.006
            boolean_math_006_1 = select_cube.nodes.new("FunctionNodeBooleanMath")
            boolean_math_006_1.name = "Boolean Math.006"
            boolean_math_006_1.operation = "AND"

            # node Boolean Math
            boolean_math_27 = select_cube.nodes.new("FunctionNodeBooleanMath")
            boolean_math_27.name = "Boolean Math"
            boolean_math_27.operation = "NOT"

            # node Group.001
            group_001_23 = select_cube.nodes.new("GeometryNodeGroup")
            group_001_23.name = "Group.001"
            group_001_23.node_tree = mn_units

            # node Separate XYZ
            separate_xyz_2 = select_cube.nodes.new("ShaderNodeSeparateXYZ")
            separate_xyz_2.name = "Separate XYZ"

            # node Math.001
            math_001_20 = select_cube.nodes.new("ShaderNodeMath")
            math_001_20.name = "Math.001"
            math_001_20.operation = "MINIMUM"
            math_001_20.use_clamp = False

            # node Math
            math_32 = select_cube.nodes.new("ShaderNodeMath")
            math_32.name = "Math"
            math_32.operation = "MINIMUM"
            math_32.use_clamp = False

            # node Group Input.001
            group_input_001_19 = select_cube.nodes.new("NodeGroupInput")
            group_input_001_19.name = "Group Input.001"
            group_input_001_19.outputs[0].hide = True

            # node Group
            group_34 = select_cube.nodes.new("GeometryNodeGroup")
            group_34.name = "Group"
            group_34.node_tree = mn_units

            # node Map Range
            map_range_8 = select_cube.nodes.new("ShaderNodeMapRange")
            map_range_8.name = "Map Range"
            map_range_8.clamp = True
            map_range_8.data_type = "FLOAT"
            map_range_8.interpolation_type = "LINEAR"
            # To Min
            map_range_8.inputs[3].default_value = 0.0
            # To Max
            map_range_8.inputs[4].default_value = 1.0

            # node Vector Math.002
            vector_math_002_9 = select_cube.nodes.new("ShaderNodeVectorMath")
            vector_math_002_9.name = "Vector Math.002"
            vector_math_002_9.operation = "ABSOLUTE"

            # node Reroute
            reroute_34 = select_cube.nodes.new("NodeReroute")
            reroute_34.name = "Reroute"
            # node Boolean Math.007
            boolean_math_007_2 = select_cube.nodes.new("FunctionNodeBooleanMath")
            boolean_math_007_2.name = "Boolean Math.007"
            boolean_math_007_2.operation = "AND"

            # node Group Input.002
            group_input_002_11 = select_cube.nodes.new("NodeGroupInput")
            group_input_002_11.name = "Group Input.002"

            # node Boolean Math.008
            boolean_math_008_2 = select_cube.nodes.new("FunctionNodeBooleanMath")
            boolean_math_008_2.name = "Boolean Math.008"
            boolean_math_008_2.operation = "OR"

            # Set locations
            vector_math_009_2.location = (-498.0, -100.0)
            vector_math_007_1.location = (-498.0, 40.0)
            vector_rotate_002.location = (-498.0, -240.0)
            object_info_5.location = (-678.0001220703125, 40.0)
            position_002_10.location = (-678.0001220703125, -160.0)
            vector_math_008_1.location = (-338.0, 40.0)
            vector_math_010_2.location = (-338.0, -100.0)
            compare_004_10.location = (81.99999237060547, -120.0)
            compare_003_14.location = (81.99999237060547, 140.0)
            vector_math_001_18.location = (-60.0, -540.0)
            vector_math_27.location = (-60.0, -420.0)
            vector_math_003_7.location = (100.0, -420.0)
            group_output_121.location = (1066.5135498046875, 100.90254211425781)
            group_input_120.location = (-838.0001220703125, 40.0)
            boolean_math_006_1.location = (252.00001525878906, 140.0)
            boolean_math_27.location = (827.9999389648438, 80.0)
            group_001_23.location = (600.0, -600.0)
            separate_xyz_2.location = (260.0, -420.0)
            math_001_20.location = (600.0, -300.0)
            math_32.location = (440.0, -300.0)
            group_input_001_19.location = (420.0, -580.0)
            group_34.location = (600.0, -460.0)
            map_range_8.location = (760.0, -300.0)
            vector_math_002_9.location = (-498.0, 160.0)
            reroute_34.location = (787.9999389648438, 100.0)
            boolean_math_007_2.location = (420.0, 160.0)
            group_input_002_11.location = (240.0, 320.0)
            boolean_math_008_2.location = (599.9999389648438, 174.85726928710938)

            # Set dimensions
            vector_math_009_2.width, vector_math_009_2.height = 140.0, 100.0
            vector_math_007_1.width, vector_math_007_1.height = 140.0, 100.0
            vector_rotate_002.width, vector_rotate_002.height = 140.0, 100.0
            object_info_5.width, object_info_5.height = 140.0, 100.0
            position_002_10.width, position_002_10.height = 140.0, 100.0
            vector_math_008_1.width, vector_math_008_1.height = 140.0, 100.0
            vector_math_010_2.width, vector_math_010_2.height = 140.0, 100.0
            compare_004_10.width, compare_004_10.height = 140.0, 100.0
            compare_003_14.width, compare_003_14.height = 140.0, 100.0
            vector_math_001_18.width, vector_math_001_18.height = 140.0, 100.0
            vector_math_27.width, vector_math_27.height = 140.0, 100.0
            vector_math_003_7.width, vector_math_003_7.height = 140.0, 100.0
            group_output_121.width, group_output_121.height = 140.0, 100.0
            group_input_120.width, group_input_120.height = 140.0, 100.0
            boolean_math_006_1.width, boolean_math_006_1.height = 140.0, 100.0
            boolean_math_27.width, boolean_math_27.height = 140.0, 100.0
            group_001_23.width, group_001_23.height = 140.0, 100.0
            separate_xyz_2.width, separate_xyz_2.height = 140.0, 100.0
            math_001_20.width, math_001_20.height = 140.0, 100.0
            math_32.width, math_32.height = 140.0, 100.0
            group_input_001_19.width, group_input_001_19.height = 140.0, 100.0
            group_34.width, group_34.height = 140.0, 100.0
            map_range_8.width, map_range_8.height = 140.0, 100.0
            vector_math_002_9.width, vector_math_002_9.height = 140.0, 100.0
            reroute_34.width, reroute_34.height = 16.0, 100.0
            boolean_math_007_2.width, boolean_math_007_2.height = 140.0, 100.0
            group_input_002_11.width, group_input_002_11.height = 140.0, 100.0
            boolean_math_008_2.width, boolean_math_008_2.height = 140.0, 100.0

            # initialize select_cube links
            # vector_math_009_2.Vector -> vector_math_010_2.Vector
            select_cube.links.new(
                vector_math_009_2.outputs[0], vector_math_010_2.inputs[0]
            )
            # vector_math_002_9.Vector -> vector_math_007_1.Vector
            select_cube.links.new(
                vector_math_002_9.outputs[0], vector_math_007_1.inputs[1]
            )
            # vector_rotate_002.Vector -> vector_math_010_2.Vector
            select_cube.links.new(
                vector_rotate_002.outputs[0], vector_math_010_2.inputs[1]
            )
            # object_info_5.Location -> vector_math_007_1.Vector
            select_cube.links.new(object_info_5.outputs[1], vector_math_007_1.inputs[0])
            # object_info_5.Rotation -> vector_rotate_002.Rotation
            select_cube.links.new(object_info_5.outputs[2], vector_rotate_002.inputs[4])
            # vector_rotate_002.Vector -> vector_math_008_1.Vector
            select_cube.links.new(
                vector_rotate_002.outputs[0], vector_math_008_1.inputs[1]
            )
            # vector_math_008_1.Vector -> compare_003_14.A
            select_cube.links.new(
                vector_math_008_1.outputs[0], compare_003_14.inputs[4]
            )
            # vector_math_010_2.Vector -> compare_004_10.A
            select_cube.links.new(
                vector_math_010_2.outputs[0], compare_004_10.inputs[4]
            )
            # vector_math_002_9.Vector -> vector_math_009_2.Vector
            select_cube.links.new(
                vector_math_002_9.outputs[0], vector_math_009_2.inputs[1]
            )
            # object_info_5.Location -> vector_math_009_2.Vector
            select_cube.links.new(object_info_5.outputs[1], vector_math_009_2.inputs[0])
            # compare_004_10.Result -> boolean_math_006_1.Boolean
            select_cube.links.new(
                compare_004_10.outputs[0], boolean_math_006_1.inputs[1]
            )
            # position_002_10.Position -> vector_rotate_002.Vector
            select_cube.links.new(
                position_002_10.outputs[0], vector_rotate_002.inputs[0]
            )
            # vector_math_007_1.Vector -> vector_math_008_1.Vector
            select_cube.links.new(
                vector_math_007_1.outputs[0], vector_math_008_1.inputs[0]
            )
            # object_info_5.Location -> vector_rotate_002.Center
            select_cube.links.new(object_info_5.outputs[1], vector_rotate_002.inputs[1])
            # compare_003_14.Result -> boolean_math_006_1.Boolean
            select_cube.links.new(
                compare_003_14.outputs[0], boolean_math_006_1.inputs[0]
            )
            # reroute_34.Output -> group_output_121.Selection
            select_cube.links.new(reroute_34.outputs[0], group_output_121.inputs[0])
            # group_input_120.Object -> object_info_5.Object
            select_cube.links.new(group_input_120.outputs[2], object_info_5.inputs[0])
            # reroute_34.Output -> boolean_math_27.Boolean
            select_cube.links.new(reroute_34.outputs[0], boolean_math_27.inputs[0])
            # boolean_math_27.Boolean -> group_output_121.Inverted
            select_cube.links.new(
                boolean_math_27.outputs[0], group_output_121.inputs[1]
            )
            # vector_math_008_1.Vector -> vector_math_27.Vector
            select_cube.links.new(
                vector_math_008_1.outputs[0], vector_math_27.inputs[0]
            )
            # vector_math_010_2.Vector -> vector_math_001_18.Vector
            select_cube.links.new(
                vector_math_010_2.outputs[0], vector_math_001_18.inputs[0]
            )
            # vector_math_27.Vector -> vector_math_003_7.Vector
            select_cube.links.new(
                vector_math_27.outputs[0], vector_math_003_7.inputs[0]
            )
            # vector_math_001_18.Vector -> vector_math_003_7.Vector
            select_cube.links.new(
                vector_math_001_18.outputs[0], vector_math_003_7.inputs[1]
            )
            # vector_math_003_7.Vector -> separate_xyz_2.Vector
            select_cube.links.new(
                vector_math_003_7.outputs[0], separate_xyz_2.inputs[0]
            )
            # separate_xyz_2.X -> math_32.Value
            select_cube.links.new(separate_xyz_2.outputs[0], math_32.inputs[0])
            # separate_xyz_2.Y -> math_32.Value
            select_cube.links.new(separate_xyz_2.outputs[1], math_32.inputs[1])
            # math_32.Value -> math_001_20.Value
            select_cube.links.new(math_32.outputs[0], math_001_20.inputs[0])
            # separate_xyz_2.Z -> math_001_20.Value
            select_cube.links.new(separate_xyz_2.outputs[2], math_001_20.inputs[1])
            # math_001_20.Value -> map_range_8.Value
            select_cube.links.new(math_001_20.outputs[0], map_range_8.inputs[0])
            # group_34.Angstrom -> map_range_8.From Min
            select_cube.links.new(group_34.outputs[0], map_range_8.inputs[1])
            # group_001_23.Angstrom -> map_range_8.From Max
            select_cube.links.new(group_001_23.outputs[0], map_range_8.inputs[2])
            # map_range_8.Result -> group_output_121.0..1
            select_cube.links.new(map_range_8.outputs[0], group_output_121.inputs[2])
            # group_input_001_19.From Min (A) -> group_34.Value
            select_cube.links.new(group_input_001_19.outputs[3], group_34.inputs[0])
            # group_input_001_19.From Max (A) -> group_001_23.Value
            select_cube.links.new(group_input_001_19.outputs[4], group_001_23.inputs[0])
            # object_info_5.Scale -> vector_math_002_9.Vector
            select_cube.links.new(object_info_5.outputs[3], vector_math_002_9.inputs[0])
            # boolean_math_008_2.Boolean -> reroute_34.Input
            select_cube.links.new(boolean_math_008_2.outputs[0], reroute_34.inputs[0])
            # boolean_math_006_1.Boolean -> boolean_math_007_2.Boolean
            select_cube.links.new(
                boolean_math_006_1.outputs[0], boolean_math_007_2.inputs[1]
            )
            # group_input_002_11.And -> boolean_math_007_2.Boolean
            select_cube.links.new(
                group_input_002_11.outputs[0], boolean_math_007_2.inputs[0]
            )
            # boolean_math_007_2.Boolean -> boolean_math_008_2.Boolean
            select_cube.links.new(
                boolean_math_007_2.outputs[0], boolean_math_008_2.inputs[0]
            )
            # group_input_002_11.Or -> boolean_math_008_2.Boolean
            select_cube.links.new(
                group_input_002_11.outputs[1], boolean_math_008_2.inputs[1]
            )
            return select_cube

        select_cube = select_cube_node_group()

        # initialize _mn_select_attribute node group
        def _mn_select_attribute_node_group():
            _mn_select_attribute = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_attribute"
            )

            _mn_select_attribute.color_tag = "NONE"
            _mn_select_attribute.description = ""

            # _mn_select_attribute interface
            # Socket Selection
            selection_socket_44 = _mn_select_attribute.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_44.attribute_domain = "POINT"

            # Socket Inverted
            inverted_socket_19 = _mn_select_attribute.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_19.attribute_domain = "POINT"

            # Socket And
            and_socket_14 = _mn_select_attribute.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_14.attribute_domain = "POINT"
            and_socket_14.hide_value = True

            # Socket Or
            or_socket_13 = _mn_select_attribute.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_13.attribute_domain = "POINT"
            or_socket_13.hide_value = True

            # Socket Name
            name_socket_3 = _mn_select_attribute.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_3.attribute_domain = "POINT"

            # initialize _mn_select_attribute nodes
            # node Named Attribute
            named_attribute_32 = _mn_select_attribute.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_32.name = "Named Attribute"
            named_attribute_32.data_type = "BOOLEAN"

            # node Group Input
            group_input_121 = _mn_select_attribute.nodes.new("NodeGroupInput")
            group_input_121.name = "Group Input"

            # node Boolean Math
            boolean_math_28 = _mn_select_attribute.nodes.new("FunctionNodeBooleanMath")
            boolean_math_28.name = "Boolean Math"
            boolean_math_28.operation = "AND"

            # node Group Output
            group_output_122 = _mn_select_attribute.nodes.new("NodeGroupOutput")
            group_output_122.name = "Group Output"
            group_output_122.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_23 = _mn_select_attribute.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_23.name = "Boolean Math.001"
            boolean_math_001_23.operation = "OR"

            # node Boolean Math.002
            boolean_math_002_14 = _mn_select_attribute.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_14.name = "Boolean Math.002"
            boolean_math_002_14.operation = "NOT"

            # Set locations
            named_attribute_32.location = (-120.0, 40.0)
            group_input_121.location = (-300.0, 40.0)
            boolean_math_28.location = (40.0, 40.0)
            group_output_122.location = (400.00006103515625, 40.0)
            boolean_math_001_23.location = (220.0, 40.0)
            boolean_math_002_14.location = (220.0, -100.0)

            # Set dimensions
            named_attribute_32.width, named_attribute_32.height = 140.0, 100.0
            group_input_121.width, group_input_121.height = 140.0, 100.0
            boolean_math_28.width, boolean_math_28.height = 140.0, 100.0
            group_output_122.width, group_output_122.height = 140.0, 100.0
            boolean_math_001_23.width, boolean_math_001_23.height = 140.0, 100.0
            boolean_math_002_14.width, boolean_math_002_14.height = 140.0, 100.0

            # initialize _mn_select_attribute links
            # named_attribute_32.Attribute -> boolean_math_28.Boolean
            _mn_select_attribute.links.new(
                named_attribute_32.outputs[0], boolean_math_28.inputs[0]
            )
            # group_input_121.And -> boolean_math_28.Boolean
            _mn_select_attribute.links.new(
                group_input_121.outputs[0], boolean_math_28.inputs[1]
            )
            # boolean_math_001_23.Boolean -> group_output_122.Selection
            _mn_select_attribute.links.new(
                boolean_math_001_23.outputs[0], group_output_122.inputs[0]
            )
            # group_input_121.Name -> named_attribute_32.Name
            _mn_select_attribute.links.new(
                group_input_121.outputs[2], named_attribute_32.inputs[0]
            )
            # boolean_math_28.Boolean -> boolean_math_001_23.Boolean
            _mn_select_attribute.links.new(
                boolean_math_28.outputs[0], boolean_math_001_23.inputs[0]
            )
            # group_input_121.Or -> boolean_math_001_23.Boolean
            _mn_select_attribute.links.new(
                group_input_121.outputs[1], boolean_math_001_23.inputs[1]
            )
            # boolean_math_001_23.Boolean -> boolean_math_002_14.Boolean
            _mn_select_attribute.links.new(
                boolean_math_001_23.outputs[0], boolean_math_002_14.inputs[0]
            )
            # boolean_math_002_14.Boolean -> group_output_122.Inverted
            _mn_select_attribute.links.new(
                boolean_math_002_14.outputs[0], group_output_122.inputs[1]
            )
            return _mn_select_attribute

        _mn_select_attribute = _mn_select_attribute_node_group()

        # initialize select_attribute node group
        def select_attribute_node_group():
            select_attribute = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Attribute"
            )

            select_attribute.color_tag = "INPUT"
            select_attribute.description = ""

            # select_attribute interface
            # Socket Selection
            selection_socket_45 = select_attribute.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_45.attribute_domain = "POINT"
            selection_socket_45.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_20 = select_attribute.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_20.attribute_domain = "POINT"

            # Socket And
            and_socket_15 = select_attribute.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_15.attribute_domain = "POINT"
            and_socket_15.hide_value = True

            # Socket Or
            or_socket_14 = select_attribute.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_14.attribute_domain = "POINT"
            or_socket_14.hide_value = True

            # Socket Name
            name_socket_4 = select_attribute.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_4.attribute_domain = "POINT"

            # initialize select_attribute nodes
            # node Group Output
            group_output_123 = select_attribute.nodes.new("NodeGroupOutput")
            group_output_123.name = "Group Output"
            group_output_123.is_active_output = True

            # node Group Input
            group_input_122 = select_attribute.nodes.new("NodeGroupInput")
            group_input_122.name = "Group Input"

            # node Group.014
            group_014_2 = select_attribute.nodes.new("GeometryNodeGroup")
            group_014_2.name = "Group.014"
            group_014_2.node_tree = _mn_select_attribute

            # Set locations
            group_output_123.location = (321.1201171875, 0.0)
            group_input_122.location = (-200.0, 0.0)
            group_014_2.location = (0.0, 0.0)

            # Set dimensions
            group_output_123.width, group_output_123.height = 140.0, 100.0
            group_input_122.width, group_input_122.height = 140.0, 100.0
            group_014_2.width, group_014_2.height = 271.1201171875, 100.0

            # initialize select_attribute links
            # group_014_2.Selection -> group_output_123.Selection
            select_attribute.links.new(
                group_014_2.outputs[0], group_output_123.inputs[0]
            )
            # group_input_122.And -> group_014_2.And
            select_attribute.links.new(
                group_input_122.outputs[0], group_014_2.inputs[0]
            )
            # group_input_122.Name -> group_014_2.Name
            select_attribute.links.new(
                group_input_122.outputs[2], group_014_2.inputs[2]
            )
            # group_input_122.Or -> group_014_2.Or
            select_attribute.links.new(
                group_input_122.outputs[1], group_014_2.inputs[1]
            )
            # group_014_2.Inverted -> group_output_123.Inverted
            select_attribute.links.new(
                group_014_2.outputs[1], group_output_123.inputs[1]
            )
            return select_attribute

        select_attribute = select_attribute_node_group()

        # initialize is_solvent node group
        def is_solvent_node_group():
            is_solvent = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Solvent"
            )

            is_solvent.color_tag = "INPUT"
            is_solvent.description = ""

            # is_solvent interface
            # Socket Selection
            selection_socket_46 = is_solvent.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_46.attribute_domain = "POINT"
            selection_socket_46.description = "True if atoms is part of the solvent"

            # Socket Inverted
            inverted_socket_21 = is_solvent.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_21.attribute_domain = "POINT"

            # Socket And
            and_socket_16 = is_solvent.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_16.attribute_domain = "POINT"
            and_socket_16.hide_value = True

            # Socket Or
            or_socket_15 = is_solvent.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_15.attribute_domain = "POINT"
            or_socket_15.hide_value = True

            # initialize is_solvent nodes
            # node Group Output
            group_output_124 = is_solvent.nodes.new("NodeGroupOutput")
            group_output_124.name = "Group Output"
            group_output_124.is_active_output = True

            # node Group Input
            group_input_123 = is_solvent.nodes.new("NodeGroupInput")
            group_input_123.name = "Group Input"

            # node Group.014
            group_014_3 = is_solvent.nodes.new("GeometryNodeGroup")
            group_014_3.name = "Group.014"
            group_014_3.node_tree = _mn_select_attribute
            # Socket_2
            group_014_3.inputs[2].default_value = "is_solvent"

            # Set locations
            group_output_124.location = (321.1201171875, 0.0)
            group_input_123.location = (-200.0, 0.0)
            group_014_3.location = (0.0, 0.0)

            # Set dimensions
            group_output_124.width, group_output_124.height = 140.0, 100.0
            group_input_123.width, group_input_123.height = 140.0, 100.0
            group_014_3.width, group_014_3.height = 271.1201171875, 100.0

            # initialize is_solvent links
            # group_014_3.Selection -> group_output_124.Selection
            is_solvent.links.new(group_014_3.outputs[0], group_output_124.inputs[0])
            # group_input_123.And -> group_014_3.And
            is_solvent.links.new(group_input_123.outputs[0], group_014_3.inputs[0])
            # group_input_123.Or -> group_014_3.Or
            is_solvent.links.new(group_input_123.outputs[1], group_014_3.inputs[1])
            # group_014_3.Inverted -> group_output_124.Inverted
            is_solvent.links.new(group_014_3.outputs[1], group_output_124.inputs[1])
            return is_solvent

        is_solvent = is_solvent_node_group()

        # initialize is_lipid node group
        def is_lipid_node_group():
            is_lipid = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Is Lipid"
            )

            is_lipid.color_tag = "INPUT"
            is_lipid.description = ""

            # is_lipid interface
            # Socket Selection
            selection_socket_47 = is_lipid.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_47.attribute_domain = "POINT"
            selection_socket_47.description = "True if atom is part of a lipid"

            # Socket Inverted
            inverted_socket_22 = is_lipid.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_22.attribute_domain = "POINT"

            # Socket And
            and_socket_17 = is_lipid.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_17.attribute_domain = "POINT"
            and_socket_17.hide_value = True

            # Socket Or
            or_socket_16 = is_lipid.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_16.attribute_domain = "POINT"
            or_socket_16.hide_value = True

            # initialize is_lipid nodes
            # node Group Output
            group_output_125 = is_lipid.nodes.new("NodeGroupOutput")
            group_output_125.name = "Group Output"
            group_output_125.is_active_output = True

            # node Group Input
            group_input_124 = is_lipid.nodes.new("NodeGroupInput")
            group_input_124.name = "Group Input"

            # node Group.014
            group_014_4 = is_lipid.nodes.new("GeometryNodeGroup")
            group_014_4.name = "Group.014"
            group_014_4.node_tree = _mn_select_attribute
            # Socket_2
            group_014_4.inputs[2].default_value = "is_lipid"

            # Set locations
            group_output_125.location = (321.1201171875, 0.0)
            group_input_124.location = (-200.0, 0.0)
            group_014_4.location = (0.0, 0.0)

            # Set dimensions
            group_output_125.width, group_output_125.height = 140.0, 100.0
            group_input_124.width, group_input_124.height = 140.0, 100.0
            group_014_4.width, group_014_4.height = 271.1201171875, 100.0

            # initialize is_lipid links
            # group_014_4.Selection -> group_output_125.Selection
            is_lipid.links.new(group_014_4.outputs[0], group_output_125.inputs[0])
            # group_input_124.And -> group_014_4.And
            is_lipid.links.new(group_input_124.outputs[0], group_014_4.inputs[0])
            # group_input_124.Or -> group_014_4.Or
            is_lipid.links.new(group_input_124.outputs[1], group_014_4.inputs[1])
            # group_014_4.Inverted -> group_output_125.Inverted
            is_lipid.links.new(group_014_4.outputs[1], group_output_125.inputs[1])
            return is_lipid

        is_lipid = is_lipid_node_group()

        # initialize _mn_animate_falloff_points node group
        def _mn_animate_falloff_points_node_group():
            _mn_animate_falloff_points = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_animate_falloff_points"
            )

            _mn_animate_falloff_points.color_tag = "NONE"
            _mn_animate_falloff_points.description = ""

            # _mn_animate_falloff_points interface
            # Socket Falloff
            falloff_socket = _mn_animate_falloff_points.interface.new_socket(
                name="Falloff", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            falloff_socket.subtype = "NONE"
            falloff_socket.default_value = 0.0
            falloff_socket.min_value = -3.4028234663852886e38
            falloff_socket.max_value = 3.4028234663852886e38
            falloff_socket.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_3 = _mn_animate_falloff_points.interface.new_socket(
                name="Distance", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_3.subtype = "NONE"
            distance_socket_3.default_value = 0.0
            distance_socket_3.min_value = -3.4028234663852886e38
            distance_socket_3.max_value = 3.4028234663852886e38
            distance_socket_3.attribute_domain = "POINT"

            # Socket Target
            target_socket = _mn_animate_falloff_points.interface.new_socket(
                name="Target", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            target_socket.attribute_domain = "POINT"

            # Socket Smoother Step
            smoother_step_socket_4 = _mn_animate_falloff_points.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket_4.attribute_domain = "POINT"

            # Socket From Min
            from_min_socket_1 = _mn_animate_falloff_points.interface.new_socket(
                name="From Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_min_socket_1.subtype = "NONE"
            from_min_socket_1.default_value = 0.0
            from_min_socket_1.min_value = -10000.0
            from_min_socket_1.max_value = 10000.0
            from_min_socket_1.attribute_domain = "POINT"

            # Socket From Max
            from_max_socket_1 = _mn_animate_falloff_points.interface.new_socket(
                name="From Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_max_socket_1.subtype = "NONE"
            from_max_socket_1.default_value = 1.0
            from_max_socket_1.min_value = -10000.0
            from_max_socket_1.max_value = 10000.0
            from_max_socket_1.attribute_domain = "POINT"

            # Socket To Min
            to_min_socket = _mn_animate_falloff_points.interface.new_socket(
                name="To Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            to_min_socket.subtype = "NONE"
            to_min_socket.default_value = 0.0
            to_min_socket.min_value = -10000.0
            to_min_socket.max_value = 10000.0
            to_min_socket.attribute_domain = "POINT"

            # Socket To Max
            to_max_socket = _mn_animate_falloff_points.interface.new_socket(
                name="To Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            to_max_socket.subtype = "NONE"
            to_max_socket.default_value = 1.0
            to_max_socket.min_value = -10000.0
            to_max_socket.max_value = 10000.0
            to_max_socket.attribute_domain = "POINT"

            # initialize _mn_animate_falloff_points nodes
            # node Map Range.001
            map_range_001_3 = _mn_animate_falloff_points.nodes.new("ShaderNodeMapRange")
            map_range_001_3.name = "Map Range.001"
            map_range_001_3.clamp = True
            map_range_001_3.data_type = "FLOAT"
            map_range_001_3.interpolation_type = "SMOOTHERSTEP"

            # node Group Output
            group_output_126 = _mn_animate_falloff_points.nodes.new("NodeGroupOutput")
            group_output_126.name = "Group Output"
            group_output_126.is_active_output = True

            # node Switch
            switch_32 = _mn_animate_falloff_points.nodes.new("GeometryNodeSwitch")
            switch_32.name = "Switch"
            switch_32.input_type = "FLOAT"

            # node Map Range
            map_range_9 = _mn_animate_falloff_points.nodes.new("ShaderNodeMapRange")
            map_range_9.name = "Map Range"
            map_range_9.clamp = True
            map_range_9.data_type = "FLOAT"
            map_range_9.interpolation_type = "LINEAR"

            # node Geometry Proximity
            geometry_proximity_2 = _mn_animate_falloff_points.nodes.new(
                "GeometryNodeProximity"
            )
            geometry_proximity_2.name = "Geometry Proximity"
            geometry_proximity_2.target_element = "POINTS"
            # Group ID
            geometry_proximity_2.inputs[1].default_value = 0
            # Source Position
            geometry_proximity_2.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Sample Group ID
            geometry_proximity_2.inputs[3].default_value = 0

            # node Group Input
            group_input_125 = _mn_animate_falloff_points.nodes.new("NodeGroupInput")
            group_input_125.name = "Group Input"

            # Set locations
            map_range_001_3.location = (360.0, -280.0)
            group_output_126.location = (830.3638305664062, 4.788317680358887)
            switch_32.location = (520.0, -20.0)
            map_range_9.location = (360.0, -20.0)
            geometry_proximity_2.location = (120.0, -20.0)
            group_input_125.location = (-180.0, -140.0)

            # Set dimensions
            map_range_001_3.width, map_range_001_3.height = 140.0, 100.0
            group_output_126.width, group_output_126.height = 140.0, 100.0
            switch_32.width, switch_32.height = 140.0, 100.0
            map_range_9.width, map_range_9.height = 140.0, 100.0
            geometry_proximity_2.width, geometry_proximity_2.height = 140.0, 100.0
            group_input_125.width, group_input_125.height = 140.0, 100.0

            # initialize _mn_animate_falloff_points links
            # geometry_proximity_2.Distance -> map_range_9.Value
            _mn_animate_falloff_points.links.new(
                geometry_proximity_2.outputs[1], map_range_9.inputs[0]
            )
            # group_input_125.From Min -> map_range_9.From Min
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[2], map_range_9.inputs[1]
            )
            # group_input_125.From Max -> map_range_9.From Max
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[3], map_range_9.inputs[2]
            )
            # geometry_proximity_2.Distance -> map_range_001_3.Value
            _mn_animate_falloff_points.links.new(
                geometry_proximity_2.outputs[1], map_range_001_3.inputs[0]
            )
            # group_input_125.From Min -> map_range_001_3.From Min
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[2], map_range_001_3.inputs[1]
            )
            # group_input_125.From Max -> map_range_001_3.From Max
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[3], map_range_001_3.inputs[2]
            )
            # map_range_001_3.Result -> group_output_126.Distance
            _mn_animate_falloff_points.links.new(
                map_range_001_3.outputs[0], group_output_126.inputs[1]
            )
            # map_range_001_3.Result -> switch_32.True
            _mn_animate_falloff_points.links.new(
                map_range_001_3.outputs[0], switch_32.inputs[2]
            )
            # map_range_9.Result -> switch_32.False
            _mn_animate_falloff_points.links.new(
                map_range_9.outputs[0], switch_32.inputs[1]
            )
            # switch_32.Output -> group_output_126.Falloff
            _mn_animate_falloff_points.links.new(
                switch_32.outputs[0], group_output_126.inputs[0]
            )
            # group_input_125.Smoother Step -> switch_32.Switch
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[1], switch_32.inputs[0]
            )
            # group_input_125.To Min -> map_range_9.To Min
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[4], map_range_9.inputs[3]
            )
            # group_input_125.To Max -> map_range_9.To Max
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[5], map_range_9.inputs[4]
            )
            # group_input_125.To Min -> map_range_001_3.To Min
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[4], map_range_001_3.inputs[3]
            )
            # group_input_125.To Max -> map_range_001_3.To Max
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[5], map_range_001_3.inputs[4]
            )
            # group_input_125.Target -> geometry_proximity_2.Geometry
            _mn_animate_falloff_points.links.new(
                group_input_125.outputs[0], geometry_proximity_2.inputs[0]
            )
            return _mn_animate_falloff_points

        _mn_animate_falloff_points = _mn_animate_falloff_points_node_group()

        # initialize _mn_animate_falloff_empty node group
        def _mn_animate_falloff_empty_node_group():
            _mn_animate_falloff_empty = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_animate_falloff_empty"
            )

            _mn_animate_falloff_empty.color_tag = "NONE"
            _mn_animate_falloff_empty.description = ""

            # _mn_animate_falloff_empty interface
            # Socket Falloff
            falloff_socket_1 = _mn_animate_falloff_empty.interface.new_socket(
                name="Falloff", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            falloff_socket_1.subtype = "NONE"
            falloff_socket_1.default_value = 0.0
            falloff_socket_1.min_value = -3.4028234663852886e38
            falloff_socket_1.max_value = 3.4028234663852886e38
            falloff_socket_1.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_4 = _mn_animate_falloff_empty.interface.new_socket(
                name="Distance", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_4.subtype = "NONE"
            distance_socket_4.default_value = 0.0
            distance_socket_4.min_value = -3.4028234663852886e38
            distance_socket_4.max_value = 3.4028234663852886e38
            distance_socket_4.attribute_domain = "POINT"

            # Socket Object
            object_socket_3 = _mn_animate_falloff_empty.interface.new_socket(
                name="Object", in_out="INPUT", socket_type="NodeSocketObject"
            )
            object_socket_3.attribute_domain = "POINT"

            # Socket Smoother Step
            smoother_step_socket_5 = _mn_animate_falloff_empty.interface.new_socket(
                name="Smoother Step", in_out="INPUT", socket_type="NodeSocketBool"
            )
            smoother_step_socket_5.attribute_domain = "POINT"

            # Socket From Min
            from_min_socket_2 = _mn_animate_falloff_empty.interface.new_socket(
                name="From Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_min_socket_2.subtype = "NONE"
            from_min_socket_2.default_value = 0.0
            from_min_socket_2.min_value = -10000.0
            from_min_socket_2.max_value = 10000.0
            from_min_socket_2.attribute_domain = "POINT"

            # Socket From Max
            from_max_socket_2 = _mn_animate_falloff_empty.interface.new_socket(
                name="From Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            from_max_socket_2.subtype = "NONE"
            from_max_socket_2.default_value = 1.0
            from_max_socket_2.min_value = -10000.0
            from_max_socket_2.max_value = 10000.0
            from_max_socket_2.attribute_domain = "POINT"

            # Socket To Min
            to_min_socket_1 = _mn_animate_falloff_empty.interface.new_socket(
                name="To Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            to_min_socket_1.subtype = "NONE"
            to_min_socket_1.default_value = 0.0
            to_min_socket_1.min_value = -10000.0
            to_min_socket_1.max_value = 10000.0
            to_min_socket_1.attribute_domain = "POINT"

            # Socket To Max
            to_max_socket_1 = _mn_animate_falloff_empty.interface.new_socket(
                name="To Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            to_max_socket_1.subtype = "NONE"
            to_max_socket_1.default_value = 1.0
            to_max_socket_1.min_value = -10000.0
            to_max_socket_1.max_value = 10000.0
            to_max_socket_1.attribute_domain = "POINT"

            # initialize _mn_animate_falloff_empty nodes
            # node Points
            points_1 = _mn_animate_falloff_empty.nodes.new("GeometryNodePoints")
            points_1.name = "Points"
            # Count
            points_1.inputs[0].default_value = 1
            # Radius
            points_1.inputs[2].default_value = 0.10000000149011612

            # node Geometry Proximity
            geometry_proximity_3 = _mn_animate_falloff_empty.nodes.new(
                "GeometryNodeProximity"
            )
            geometry_proximity_3.name = "Geometry Proximity"
            geometry_proximity_3.target_element = "POINTS"
            # Group ID
            geometry_proximity_3.inputs[1].default_value = 0
            # Source Position
            geometry_proximity_3.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Sample Group ID
            geometry_proximity_3.inputs[3].default_value = 0

            # node Map Range.001
            map_range_001_4 = _mn_animate_falloff_empty.nodes.new("ShaderNodeMapRange")
            map_range_001_4.name = "Map Range.001"
            map_range_001_4.clamp = True
            map_range_001_4.data_type = "FLOAT"
            map_range_001_4.interpolation_type = "SMOOTHERSTEP"

            # node Map Range
            map_range_10 = _mn_animate_falloff_empty.nodes.new("ShaderNodeMapRange")
            map_range_10.name = "Map Range"
            map_range_10.clamp = True
            map_range_10.data_type = "FLOAT"
            map_range_10.interpolation_type = "LINEAR"

            # node Switch
            switch_33 = _mn_animate_falloff_empty.nodes.new("GeometryNodeSwitch")
            switch_33.name = "Switch"
            switch_33.input_type = "FLOAT"

            # node Group Output
            group_output_127 = _mn_animate_falloff_empty.nodes.new("NodeGroupOutput")
            group_output_127.name = "Group Output"
            group_output_127.is_active_output = True

            # node Reroute
            reroute_35 = _mn_animate_falloff_empty.nodes.new("NodeReroute")
            reroute_35.name = "Reroute"
            # node Group Input
            group_input_126 = _mn_animate_falloff_empty.nodes.new("NodeGroupInput")
            group_input_126.name = "Group Input"

            # node Reroute.001
            reroute_001_24 = _mn_animate_falloff_empty.nodes.new("NodeReroute")
            reroute_001_24.name = "Reroute.001"
            # node Object Info
            object_info_6 = _mn_animate_falloff_empty.nodes.new(
                "GeometryNodeObjectInfo"
            )
            object_info_6.name = "Object Info"
            object_info_6.transform_space = "RELATIVE"
            # As Instance
            object_info_6.inputs[1].default_value = False

            # node Math.001
            math_001_21 = _mn_animate_falloff_empty.nodes.new("ShaderNodeMath")
            math_001_21.name = "Math.001"
            math_001_21.hide = True
            math_001_21.operation = "MULTIPLY"
            math_001_21.use_clamp = False

            # node Math
            math_33 = _mn_animate_falloff_empty.nodes.new("ShaderNodeMath")
            math_33.name = "Math"
            math_33.hide = True
            math_33.operation = "MULTIPLY"
            math_33.use_clamp = False

            # node Vector Math
            vector_math_28 = _mn_animate_falloff_empty.nodes.new("ShaderNodeVectorMath")
            vector_math_28.name = "Vector Math"
            vector_math_28.operation = "ABSOLUTE"

            # Set locations
            points_1.location = (3.22705078125, -1.35943603515625)
            geometry_proximity_3.location = (163.22705078125, -1.35943603515625)
            map_range_001_4.location = (360.0, -280.0)
            map_range_10.location = (360.0, -20.0)
            switch_33.location = (520.0, -20.0)
            group_output_127.location = (948.807861328125, 9.793768882751465)
            reroute_35.location = (200.0, -280.0)
            group_input_126.location = (-340.0, -220.0)
            reroute_001_24.location = (220.0, -240.0)
            object_info_6.location = (-233.5631561279297, 2.2613203525543213)
            math_001_21.location = (-14.312219619750977, -252.5665740966797)
            math_33.location = (-12.089847564697266, -294.0532531738281)
            vector_math_28.location = (-133.5631561279297, -47.738677978515625)

            # Set dimensions
            points_1.width, points_1.height = 140.0, 100.0
            geometry_proximity_3.width, geometry_proximity_3.height = 140.0, 100.0
            map_range_001_4.width, map_range_001_4.height = 140.0, 100.0
            map_range_10.width, map_range_10.height = 140.0, 100.0
            switch_33.width, switch_33.height = 140.0, 100.0
            group_output_127.width, group_output_127.height = 140.0, 100.0
            reroute_35.width, reroute_35.height = 16.0, 100.0
            group_input_126.width, group_input_126.height = 140.0, 100.0
            reroute_001_24.width, reroute_001_24.height = 16.0, 100.0
            object_info_6.width, object_info_6.height = 140.0, 100.0
            math_001_21.width, math_001_21.height = 140.0, 100.0
            math_33.width, math_33.height = 140.0, 100.0
            vector_math_28.width, vector_math_28.height = 140.0, 100.0

            # initialize _mn_animate_falloff_empty links
            # object_info_6.Location -> points_1.Position
            _mn_animate_falloff_empty.links.new(
                object_info_6.outputs[1], points_1.inputs[1]
            )
            # points_1.Points -> geometry_proximity_3.Geometry
            _mn_animate_falloff_empty.links.new(
                points_1.outputs[0], geometry_proximity_3.inputs[0]
            )
            # group_input_126.Object -> object_info_6.Object
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[0], object_info_6.inputs[0]
            )
            # geometry_proximity_3.Distance -> map_range_10.Value
            _mn_animate_falloff_empty.links.new(
                geometry_proximity_3.outputs[1], map_range_10.inputs[0]
            )
            # reroute_001_24.Output -> map_range_10.From Min
            _mn_animate_falloff_empty.links.new(
                reroute_001_24.outputs[0], map_range_10.inputs[1]
            )
            # reroute_35.Output -> map_range_10.From Max
            _mn_animate_falloff_empty.links.new(
                reroute_35.outputs[0], map_range_10.inputs[2]
            )
            # geometry_proximity_3.Distance -> map_range_001_4.Value
            _mn_animate_falloff_empty.links.new(
                geometry_proximity_3.outputs[1], map_range_001_4.inputs[0]
            )
            # reroute_001_24.Output -> map_range_001_4.From Min
            _mn_animate_falloff_empty.links.new(
                reroute_001_24.outputs[0], map_range_001_4.inputs[1]
            )
            # reroute_35.Output -> map_range_001_4.From Max
            _mn_animate_falloff_empty.links.new(
                reroute_35.outputs[0], map_range_001_4.inputs[2]
            )
            # map_range_001_4.Result -> group_output_127.Distance
            _mn_animate_falloff_empty.links.new(
                map_range_001_4.outputs[0], group_output_127.inputs[1]
            )
            # map_range_001_4.Result -> switch_33.True
            _mn_animate_falloff_empty.links.new(
                map_range_001_4.outputs[0], switch_33.inputs[2]
            )
            # map_range_10.Result -> switch_33.False
            _mn_animate_falloff_empty.links.new(
                map_range_10.outputs[0], switch_33.inputs[1]
            )
            # group_input_126.Smoother Step -> switch_33.Switch
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[1], switch_33.inputs[0]
            )
            # group_input_126.To Min -> map_range_10.To Min
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[4], map_range_10.inputs[3]
            )
            # group_input_126.To Max -> map_range_10.To Max
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[5], map_range_10.inputs[4]
            )
            # group_input_126.To Min -> map_range_001_4.To Min
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[4], map_range_001_4.inputs[3]
            )
            # group_input_126.To Max -> map_range_001_4.To Max
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[5], map_range_001_4.inputs[4]
            )
            # switch_33.Output -> group_output_127.Falloff
            _mn_animate_falloff_empty.links.new(
                switch_33.outputs[0], group_output_127.inputs[0]
            )
            # group_input_126.From Max -> math_33.Value
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[3], math_33.inputs[0]
            )
            # math_33.Value -> reroute_35.Input
            _mn_animate_falloff_empty.links.new(
                math_33.outputs[0], reroute_35.inputs[0]
            )
            # vector_math_28.Vector -> math_33.Value
            _mn_animate_falloff_empty.links.new(
                vector_math_28.outputs[0], math_33.inputs[1]
            )
            # math_001_21.Value -> reroute_001_24.Input
            _mn_animate_falloff_empty.links.new(
                math_001_21.outputs[0], reroute_001_24.inputs[0]
            )
            # group_input_126.From Min -> math_001_21.Value
            _mn_animate_falloff_empty.links.new(
                group_input_126.outputs[2], math_001_21.inputs[0]
            )
            # vector_math_28.Vector -> math_001_21.Value
            _mn_animate_falloff_empty.links.new(
                vector_math_28.outputs[0], math_001_21.inputs[1]
            )
            # object_info_6.Scale -> vector_math_28.Vector
            _mn_animate_falloff_empty.links.new(
                object_info_6.outputs[3], vector_math_28.inputs[0]
            )
            return _mn_animate_falloff_empty

        _mn_animate_falloff_empty = _mn_animate_falloff_empty_node_group()

        # initialize color_plddt node group
        def color_plddt_node_group():
            color_plddt = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color pLDDT"
            )

            color_plddt.color_tag = "COLOR"
            color_plddt.description = ""

            # color_plddt interface
            # Socket Color
            color_socket_22 = color_plddt.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_22.attribute_domain = "POINT"
            color_socket_22.description = "Assigned color based on the pLDTT score"

            # Socket <50
            _50_socket = color_plddt.interface.new_socket(
                name="<50", in_out="INPUT", socket_type="NodeSocketColor"
            )
            _50_socket.attribute_domain = "POINT"
            _50_socket.description = "Color for pLDTT < 50"

            # Socket <70
            _70_socket = color_plddt.interface.new_socket(
                name="<70", in_out="INPUT", socket_type="NodeSocketColor"
            )
            _70_socket.attribute_domain = "POINT"
            _70_socket.description = "Color for 50 < pLDTT < 70"

            # Socket <90
            _90_socket = color_plddt.interface.new_socket(
                name="<90", in_out="INPUT", socket_type="NodeSocketColor"
            )
            _90_socket.attribute_domain = "POINT"
            _90_socket.description = "Color for 70 < pLDTT < 90"

            # Socket >90
            _90_socket_1 = color_plddt.interface.new_socket(
                name=">90", in_out="INPUT", socket_type="NodeSocketColor"
            )
            _90_socket_1.attribute_domain = "POINT"
            _90_socket_1.description = "Color for 90 < pLDTT"

            # initialize color_plddt nodes
            # node Group Output
            group_output_128 = color_plddt.nodes.new("NodeGroupOutput")
            group_output_128.name = "Group Output"
            group_output_128.is_active_output = True

            # node Named Attribute
            named_attribute_33 = color_plddt.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_33.name = "Named Attribute"
            named_attribute_33.data_type = "FLOAT"
            # Name
            named_attribute_33.inputs[0].default_value = "b_factor"

            # node Switch
            switch_34 = color_plddt.nodes.new("GeometryNodeSwitch")
            switch_34.name = "Switch"
            switch_34.input_type = "RGBA"

            # node Switch.001
            switch_001_21 = color_plddt.nodes.new("GeometryNodeSwitch")
            switch_001_21.name = "Switch.001"
            switch_001_21.input_type = "RGBA"

            # node Switch.002
            switch_002_16 = color_plddt.nodes.new("GeometryNodeSwitch")
            switch_002_16.name = "Switch.002"
            switch_002_16.input_type = "RGBA"

            # node Compare
            compare_37 = color_plddt.nodes.new("FunctionNodeCompare")
            compare_37.name = "Compare"
            compare_37.data_type = "FLOAT"
            compare_37.mode = "ELEMENT"
            compare_37.operation = "GREATER_THAN"
            # B
            compare_37.inputs[1].default_value = 50.0

            # node Compare.001
            compare_001_22 = color_plddt.nodes.new("FunctionNodeCompare")
            compare_001_22.name = "Compare.001"
            compare_001_22.data_type = "FLOAT"
            compare_001_22.mode = "ELEMENT"
            compare_001_22.operation = "GREATER_THAN"
            # B
            compare_001_22.inputs[1].default_value = 70.0

            # node Compare.002
            compare_002_14 = color_plddt.nodes.new("FunctionNodeCompare")
            compare_002_14.name = "Compare.002"
            compare_002_14.data_type = "FLOAT"
            compare_002_14.mode = "ELEMENT"
            compare_002_14.operation = "GREATER_THAN"
            # B
            compare_002_14.inputs[1].default_value = 90.0

            # node Group Input
            group_input_127 = color_plddt.nodes.new("NodeGroupInput")
            group_input_127.name = "Group Input"

            # Set locations
            group_output_128.location = (460.0, 0.0)
            named_attribute_33.location = (-270.0, 80.0)
            switch_34.location = (-90.0, -80.0)
            switch_001_21.location = (90.0, -80.0)
            switch_002_16.location = (270.0, -80.0)
            compare_37.location = (-90.0, 80.0)
            compare_001_22.location = (90.0, 80.0)
            compare_002_14.location = (270.0, 80.0)
            group_input_127.location = (-260.0, -200.0)

            # Set dimensions
            group_output_128.width, group_output_128.height = 140.0, 100.0
            named_attribute_33.width, named_attribute_33.height = 140.0, 100.0
            switch_34.width, switch_34.height = 140.0, 100.0
            switch_001_21.width, switch_001_21.height = 140.0, 100.0
            switch_002_16.width, switch_002_16.height = 140.0, 100.0
            compare_37.width, compare_37.height = 140.0, 100.0
            compare_001_22.width, compare_001_22.height = 140.0, 100.0
            compare_002_14.width, compare_002_14.height = 140.0, 100.0
            group_input_127.width, group_input_127.height = 140.0, 100.0

            # initialize color_plddt links
            # switch_001_21.Output -> switch_002_16.False
            color_plddt.links.new(switch_001_21.outputs[0], switch_002_16.inputs[1])
            # named_attribute_33.Attribute -> compare_001_22.A
            color_plddt.links.new(
                named_attribute_33.outputs[0], compare_001_22.inputs[0]
            )
            # compare_001_22.Result -> switch_001_21.Switch
            color_plddt.links.new(compare_001_22.outputs[0], switch_001_21.inputs[0])
            # named_attribute_33.Attribute -> compare_37.A
            color_plddt.links.new(named_attribute_33.outputs[0], compare_37.inputs[0])
            # compare_002_14.Result -> switch_002_16.Switch
            color_plddt.links.new(compare_002_14.outputs[0], switch_002_16.inputs[0])
            # named_attribute_33.Attribute -> compare_002_14.A
            color_plddt.links.new(
                named_attribute_33.outputs[0], compare_002_14.inputs[0]
            )
            # compare_37.Result -> switch_34.Switch
            color_plddt.links.new(compare_37.outputs[0], switch_34.inputs[0])
            # switch_34.Output -> switch_001_21.False
            color_plddt.links.new(switch_34.outputs[0], switch_001_21.inputs[1])
            # switch_002_16.Output -> group_output_128.Color
            color_plddt.links.new(switch_002_16.outputs[0], group_output_128.inputs[0])
            # group_input_127.<50 -> switch_34.False
            color_plddt.links.new(group_input_127.outputs[0], switch_34.inputs[1])
            # group_input_127.<70 -> switch_34.True
            color_plddt.links.new(group_input_127.outputs[1], switch_34.inputs[2])
            # group_input_127.<90 -> switch_001_21.True
            color_plddt.links.new(group_input_127.outputs[2], switch_001_21.inputs[2])
            # group_input_127.>90 -> switch_002_16.True
            color_plddt.links.new(group_input_127.outputs[3], switch_002_16.inputs[2])
            return color_plddt

        color_plddt = color_plddt_node_group()

        # initialize select_res_name node group
        def select_res_name_node_group():
            select_res_name = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Res Name"
            )

            select_res_name.color_tag = "INPUT"
            select_res_name.description = ""

            # select_res_name interface
            # Socket Selection
            selection_socket_48 = select_res_name.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_48.attribute_domain = "POINT"
            selection_socket_48.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_23 = select_res_name.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_23.attribute_domain = "POINT"
            inverted_socket_23.description = "The inverse of the calculated selection"

            # Socket And
            and_socket_18 = select_res_name.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_18.attribute_domain = "POINT"
            and_socket_18.hide_value = True

            # Socket Or
            or_socket_17 = select_res_name.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_17.attribute_domain = "POINT"
            or_socket_17.hide_value = True

            # Panel Protein
            protein_panel = select_res_name.interface.new_panel("Protein")
            # Socket ALA
            ala_socket = select_res_name.interface.new_socket(
                name="ALA",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            ala_socket.attribute_domain = "POINT"

            # Socket ARG
            arg_socket = select_res_name.interface.new_socket(
                name="ARG",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            arg_socket.attribute_domain = "POINT"

            # Socket ASN
            asn_socket = select_res_name.interface.new_socket(
                name="ASN",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            asn_socket.attribute_domain = "POINT"

            # Socket ASP
            asp_socket = select_res_name.interface.new_socket(
                name="ASP",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            asp_socket.attribute_domain = "POINT"

            # Socket CYS
            cys_socket = select_res_name.interface.new_socket(
                name="CYS",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            cys_socket.attribute_domain = "POINT"

            # Socket GLU
            glu_socket = select_res_name.interface.new_socket(
                name="GLU",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            glu_socket.attribute_domain = "POINT"

            # Socket GLN
            gln_socket = select_res_name.interface.new_socket(
                name="GLN",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            gln_socket.attribute_domain = "POINT"

            # Socket GLY
            gly_socket = select_res_name.interface.new_socket(
                name="GLY",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            gly_socket.attribute_domain = "POINT"

            # Socket HIS
            his_socket = select_res_name.interface.new_socket(
                name="HIS",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            his_socket.attribute_domain = "POINT"

            # Socket ILE
            ile_socket = select_res_name.interface.new_socket(
                name="ILE",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            ile_socket.attribute_domain = "POINT"

            # Socket LEU
            leu_socket = select_res_name.interface.new_socket(
                name="LEU",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            leu_socket.attribute_domain = "POINT"

            # Socket LYS
            lys_socket = select_res_name.interface.new_socket(
                name="LYS",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            lys_socket.attribute_domain = "POINT"

            # Socket MET
            met_socket = select_res_name.interface.new_socket(
                name="MET",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            met_socket.attribute_domain = "POINT"

            # Socket PHE
            phe_socket = select_res_name.interface.new_socket(
                name="PHE",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            phe_socket.attribute_domain = "POINT"

            # Socket PRO
            pro_socket = select_res_name.interface.new_socket(
                name="PRO",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            pro_socket.attribute_domain = "POINT"

            # Socket SER
            ser_socket = select_res_name.interface.new_socket(
                name="SER",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            ser_socket.attribute_domain = "POINT"

            # Socket THR
            thr_socket = select_res_name.interface.new_socket(
                name="THR",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            thr_socket.attribute_domain = "POINT"

            # Socket TRP
            trp_socket = select_res_name.interface.new_socket(
                name="TRP",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            trp_socket.attribute_domain = "POINT"

            # Socket TYR
            tyr_socket = select_res_name.interface.new_socket(
                name="TYR",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            tyr_socket.attribute_domain = "POINT"

            # Socket VAL
            val_socket = select_res_name.interface.new_socket(
                name="VAL",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=protein_panel,
            )
            val_socket.attribute_domain = "POINT"

            # Panel DNA
            dna_panel = select_res_name.interface.new_panel("DNA")
            # Socket A
            a_socket_6 = select_res_name.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketBool", parent=dna_panel
            )
            a_socket_6.attribute_domain = "POINT"

            # Socket C
            c_socket_5 = select_res_name.interface.new_socket(
                name="C", in_out="INPUT", socket_type="NodeSocketBool", parent=dna_panel
            )
            c_socket_5.attribute_domain = "POINT"

            # Socket G
            g_socket_2 = select_res_name.interface.new_socket(
                name="G", in_out="INPUT", socket_type="NodeSocketBool", parent=dna_panel
            )
            g_socket_2.attribute_domain = "POINT"

            # Socket T
            t_socket = select_res_name.interface.new_socket(
                name="T", in_out="INPUT", socket_type="NodeSocketBool", parent=dna_panel
            )
            t_socket.attribute_domain = "POINT"

            # Panel RNA
            rna_panel = select_res_name.interface.new_panel("RNA")
            # Socket rA
            ra_socket = select_res_name.interface.new_socket(
                name="rA",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=rna_panel,
            )
            ra_socket.attribute_domain = "POINT"

            # Socket rC
            rc_socket = select_res_name.interface.new_socket(
                name="rC",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=rna_panel,
            )
            rc_socket.attribute_domain = "POINT"

            # Socket rG
            rg_socket = select_res_name.interface.new_socket(
                name="rG",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=rna_panel,
            )
            rg_socket.attribute_domain = "POINT"

            # Socket rU
            ru_socket = select_res_name.interface.new_socket(
                name="rU",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=rna_panel,
            )
            ru_socket.attribute_domain = "POINT"

            # initialize select_res_name nodes
            # node Group Input
            group_input_128 = select_res_name.nodes.new("NodeGroupInput")
            group_input_128.name = "Group Input"
            group_input_128.outputs[0].hide = True
            group_input_128.outputs[1].hide = True
            group_input_128.outputs[22].hide = True
            group_input_128.outputs[23].hide = True
            group_input_128.outputs[24].hide = True
            group_input_128.outputs[25].hide = True
            group_input_128.outputs[26].hide = True
            group_input_128.outputs[27].hide = True
            group_input_128.outputs[28].hide = True
            group_input_128.outputs[29].hide = True
            group_input_128.outputs[30].hide = True

            # node Group Output
            group_output_129 = select_res_name.nodes.new("NodeGroupOutput")
            group_output_129.name = "Group Output"
            group_output_129.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_24 = select_res_name.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_24.name = "Boolean Math.001"
            boolean_math_001_24.operation = "NOT"

            # node Boolean Math.002
            boolean_math_002_15 = select_res_name.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_15.name = "Boolean Math.002"
            boolean_math_002_15.operation = "AND"

            # node Group Input.001
            group_input_001_20 = select_res_name.nodes.new("NodeGroupInput")
            group_input_001_20.name = "Group Input.001"
            group_input_001_20.outputs[2].hide = True
            group_input_001_20.outputs[3].hide = True
            group_input_001_20.outputs[4].hide = True
            group_input_001_20.outputs[5].hide = True
            group_input_001_20.outputs[6].hide = True
            group_input_001_20.outputs[7].hide = True
            group_input_001_20.outputs[8].hide = True
            group_input_001_20.outputs[9].hide = True
            group_input_001_20.outputs[10].hide = True
            group_input_001_20.outputs[11].hide = True
            group_input_001_20.outputs[12].hide = True
            group_input_001_20.outputs[13].hide = True
            group_input_001_20.outputs[14].hide = True
            group_input_001_20.outputs[15].hide = True
            group_input_001_20.outputs[16].hide = True
            group_input_001_20.outputs[17].hide = True
            group_input_001_20.outputs[18].hide = True
            group_input_001_20.outputs[19].hide = True
            group_input_001_20.outputs[20].hide = True
            group_input_001_20.outputs[21].hide = True
            group_input_001_20.outputs[22].hide = True
            group_input_001_20.outputs[23].hide = True
            group_input_001_20.outputs[24].hide = True
            group_input_001_20.outputs[25].hide = True
            group_input_001_20.outputs[26].hide = True
            group_input_001_20.outputs[27].hide = True
            group_input_001_20.outputs[28].hide = True
            group_input_001_20.outputs[29].hide = True
            group_input_001_20.outputs[30].hide = True

            # node Named Attribute.001
            named_attribute_001_18 = select_res_name.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_18.name = "Named Attribute.001"
            named_attribute_001_18.data_type = "INT"
            # Name
            named_attribute_001_18.inputs[0].default_value = "res_name"

            # node Index Switch.002
            index_switch_002 = select_res_name.nodes.new("GeometryNodeIndexSwitch")
            index_switch_002.name = "Index Switch.002"
            index_switch_002.data_type = "BOOLEAN"
            index_switch_002.index_switch_items.clear()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            index_switch_002.index_switch_items.new()
            # Item_21
            index_switch_002.inputs[21].default_value = False
            # Item_22
            index_switch_002.inputs[22].default_value = False
            # Item_23
            index_switch_002.inputs[23].default_value = False
            # Item_24
            index_switch_002.inputs[24].default_value = False
            # Item_25
            index_switch_002.inputs[25].default_value = False
            # Item_26
            index_switch_002.inputs[26].default_value = False
            # Item_27
            index_switch_002.inputs[27].default_value = False
            # Item_28
            index_switch_002.inputs[28].default_value = False
            # Item_29
            index_switch_002.inputs[29].default_value = False
            # Item_30
            index_switch_002.inputs[30].default_value = False
            # Item_35
            index_switch_002.inputs[35].default_value = False
            # Item_36
            index_switch_002.inputs[36].default_value = False
            # Item_37
            index_switch_002.inputs[37].default_value = False
            # Item_38
            index_switch_002.inputs[38].default_value = False
            # Item_39
            index_switch_002.inputs[39].default_value = False
            # Item_40
            index_switch_002.inputs[40].default_value = False

            # node Group Input.002
            group_input_002_12 = select_res_name.nodes.new("NodeGroupInput")
            group_input_002_12.name = "Group Input.002"
            group_input_002_12.outputs[0].hide = True
            group_input_002_12.outputs[1].hide = True
            group_input_002_12.outputs[2].hide = True
            group_input_002_12.outputs[3].hide = True
            group_input_002_12.outputs[4].hide = True
            group_input_002_12.outputs[5].hide = True
            group_input_002_12.outputs[6].hide = True
            group_input_002_12.outputs[7].hide = True
            group_input_002_12.outputs[8].hide = True
            group_input_002_12.outputs[9].hide = True
            group_input_002_12.outputs[10].hide = True
            group_input_002_12.outputs[11].hide = True
            group_input_002_12.outputs[12].hide = True
            group_input_002_12.outputs[13].hide = True
            group_input_002_12.outputs[14].hide = True
            group_input_002_12.outputs[15].hide = True
            group_input_002_12.outputs[16].hide = True
            group_input_002_12.outputs[17].hide = True
            group_input_002_12.outputs[18].hide = True
            group_input_002_12.outputs[19].hide = True
            group_input_002_12.outputs[20].hide = True
            group_input_002_12.outputs[21].hide = True
            group_input_002_12.outputs[30].hide = True

            # node Boolean Math.003
            boolean_math_003_4 = select_res_name.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_4.name = "Boolean Math.003"
            boolean_math_003_4.operation = "OR"

            # Set locations
            group_input_128.location = (-560.0, 40.0)
            group_output_129.location = (220.0, 180.0)
            boolean_math_001_24.location = (0.0, 60.0)
            boolean_math_002_15.location = (-140.0, 200.0)
            group_input_001_20.location = (-300.0, 200.0)
            named_attribute_001_18.location = (-560.0, 200.0)
            index_switch_002.location = (-300.0, 140.0)
            group_input_002_12.location = (-560.0, -660.0)
            boolean_math_003_4.location = (0.0, 200.0)

            # Set dimensions
            group_input_128.width, group_input_128.height = 140.0, 100.0
            group_output_129.width, group_output_129.height = 140.0, 100.0
            boolean_math_001_24.width, boolean_math_001_24.height = 140.0, 100.0
            boolean_math_002_15.width, boolean_math_002_15.height = (
                123.69171142578125,
                100.0,
            )
            group_input_001_20.width, group_input_001_20.height = 140.0, 100.0
            named_attribute_001_18.width, named_attribute_001_18.height = 140.0, 100.0
            index_switch_002.width, index_switch_002.height = 140.0, 100.0
            group_input_002_12.width, group_input_002_12.height = 140.0, 100.0
            boolean_math_003_4.width, boolean_math_003_4.height = (
                123.69171142578125,
                100.0,
            )

            # initialize select_res_name links
            # boolean_math_003_4.Boolean -> boolean_math_001_24.Boolean
            select_res_name.links.new(
                boolean_math_003_4.outputs[0], boolean_math_001_24.inputs[0]
            )
            # boolean_math_003_4.Boolean -> group_output_129.Selection
            select_res_name.links.new(
                boolean_math_003_4.outputs[0], group_output_129.inputs[0]
            )
            # boolean_math_001_24.Boolean -> group_output_129.Inverted
            select_res_name.links.new(
                boolean_math_001_24.outputs[0], group_output_129.inputs[1]
            )
            # index_switch_002.Output -> boolean_math_002_15.Boolean
            select_res_name.links.new(
                index_switch_002.outputs[0], boolean_math_002_15.inputs[1]
            )
            # group_input_001_20.And -> boolean_math_002_15.Boolean
            select_res_name.links.new(
                group_input_001_20.outputs[0], boolean_math_002_15.inputs[0]
            )
            # named_attribute_001_18.Attribute -> index_switch_002.Index
            select_res_name.links.new(
                named_attribute_001_18.outputs[0], index_switch_002.inputs[0]
            )
            # group_input_128.ALA -> index_switch_002.0
            select_res_name.links.new(
                group_input_128.outputs[2], index_switch_002.inputs[1]
            )
            # group_input_128.ARG -> index_switch_002.1
            select_res_name.links.new(
                group_input_128.outputs[3], index_switch_002.inputs[2]
            )
            # group_input_128.ASN -> index_switch_002.2
            select_res_name.links.new(
                group_input_128.outputs[4], index_switch_002.inputs[3]
            )
            # group_input_128.ASP -> index_switch_002.3
            select_res_name.links.new(
                group_input_128.outputs[5], index_switch_002.inputs[4]
            )
            # group_input_128.CYS -> index_switch_002.4
            select_res_name.links.new(
                group_input_128.outputs[6], index_switch_002.inputs[5]
            )
            # group_input_128.GLU -> index_switch_002.5
            select_res_name.links.new(
                group_input_128.outputs[7], index_switch_002.inputs[6]
            )
            # group_input_128.GLN -> index_switch_002.6
            select_res_name.links.new(
                group_input_128.outputs[8], index_switch_002.inputs[7]
            )
            # group_input_128.GLY -> index_switch_002.7
            select_res_name.links.new(
                group_input_128.outputs[9], index_switch_002.inputs[8]
            )
            # group_input_128.HIS -> index_switch_002.8
            select_res_name.links.new(
                group_input_128.outputs[10], index_switch_002.inputs[9]
            )
            # group_input_128.ILE -> index_switch_002.9
            select_res_name.links.new(
                group_input_128.outputs[11], index_switch_002.inputs[10]
            )
            # group_input_128.LEU -> index_switch_002.10
            select_res_name.links.new(
                group_input_128.outputs[12], index_switch_002.inputs[11]
            )
            # group_input_128.LYS -> index_switch_002.11
            select_res_name.links.new(
                group_input_128.outputs[13], index_switch_002.inputs[12]
            )
            # group_input_128.MET -> index_switch_002.12
            select_res_name.links.new(
                group_input_128.outputs[14], index_switch_002.inputs[13]
            )
            # group_input_128.PHE -> index_switch_002.13
            select_res_name.links.new(
                group_input_128.outputs[15], index_switch_002.inputs[14]
            )
            # group_input_128.PRO -> index_switch_002.14
            select_res_name.links.new(
                group_input_128.outputs[16], index_switch_002.inputs[15]
            )
            # group_input_128.SER -> index_switch_002.15
            select_res_name.links.new(
                group_input_128.outputs[17], index_switch_002.inputs[16]
            )
            # group_input_128.THR -> index_switch_002.16
            select_res_name.links.new(
                group_input_128.outputs[18], index_switch_002.inputs[17]
            )
            # group_input_128.TRP -> index_switch_002.17
            select_res_name.links.new(
                group_input_128.outputs[19], index_switch_002.inputs[18]
            )
            # group_input_128.TYR -> index_switch_002.18
            select_res_name.links.new(
                group_input_128.outputs[20], index_switch_002.inputs[19]
            )
            # group_input_128.VAL -> index_switch_002.19
            select_res_name.links.new(
                group_input_128.outputs[21], index_switch_002.inputs[20]
            )
            # group_input_002_12.rA -> index_switch_002.40
            select_res_name.links.new(
                group_input_002_12.outputs[26], index_switch_002.inputs[41]
            )
            # group_input_002_12.rC -> index_switch_002.41
            select_res_name.links.new(
                group_input_002_12.outputs[27], index_switch_002.inputs[42]
            )
            # group_input_002_12.rG -> index_switch_002.42
            select_res_name.links.new(
                group_input_002_12.outputs[28], index_switch_002.inputs[43]
            )
            # group_input_002_12.rU -> index_switch_002.43
            select_res_name.links.new(
                group_input_002_12.outputs[29], index_switch_002.inputs[44]
            )
            # group_input_002_12.A -> index_switch_002.30
            select_res_name.links.new(
                group_input_002_12.outputs[22], index_switch_002.inputs[31]
            )
            # group_input_002_12.C -> index_switch_002.31
            select_res_name.links.new(
                group_input_002_12.outputs[23], index_switch_002.inputs[32]
            )
            # group_input_002_12.G -> index_switch_002.32
            select_res_name.links.new(
                group_input_002_12.outputs[24], index_switch_002.inputs[33]
            )
            # group_input_002_12.T -> index_switch_002.33
            select_res_name.links.new(
                group_input_002_12.outputs[25], index_switch_002.inputs[34]
            )
            # boolean_math_002_15.Boolean -> boolean_math_003_4.Boolean
            select_res_name.links.new(
                boolean_math_002_15.outputs[0], boolean_math_003_4.inputs[0]
            )
            # group_input_001_20.Or -> boolean_math_003_4.Boolean
            select_res_name.links.new(
                group_input_001_20.outputs[1], boolean_math_003_4.inputs[1]
            )
            return select_res_name

        select_res_name = select_res_name_node_group()

        # initialize _mn_select_res_name_peptide node group
        def _mn_select_res_name_peptide_node_group():
            _mn_select_res_name_peptide = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_select_res_name_peptide"
            )

            _mn_select_res_name_peptide.color_tag = "NONE"
            _mn_select_res_name_peptide.description = ""

            # _mn_select_res_name_peptide interface
            # Socket Selection
            selection_socket_49 = _mn_select_res_name_peptide.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_49.attribute_domain = "POINT"
            selection_socket_49.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_24 = _mn_select_res_name_peptide.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_24.attribute_domain = "POINT"
            inverted_socket_24.description = "The inverse of the calculated selection"

            # Socket ALA
            ala_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="ALA", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ala_socket_1.attribute_domain = "POINT"
            ala_socket_1.description = "Select the AA residue ALA"

            # Socket ARG
            arg_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="ARG", in_out="INPUT", socket_type="NodeSocketBool"
            )
            arg_socket_1.attribute_domain = "POINT"
            arg_socket_1.description = "Select the AA residue ARG"

            # Socket ASN
            asn_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="ASN", in_out="INPUT", socket_type="NodeSocketBool"
            )
            asn_socket_1.attribute_domain = "POINT"
            asn_socket_1.description = "Select the AA residue ASN"

            # Socket ASP
            asp_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="ASP", in_out="INPUT", socket_type="NodeSocketBool"
            )
            asp_socket_1.attribute_domain = "POINT"
            asp_socket_1.description = "Select the AA residue ASP"

            # Socket CYS
            cys_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="CYS", in_out="INPUT", socket_type="NodeSocketBool"
            )
            cys_socket_1.attribute_domain = "POINT"
            cys_socket_1.description = "Select the AA residue CYS"

            # Socket GLU
            glu_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="GLU", in_out="INPUT", socket_type="NodeSocketBool"
            )
            glu_socket_1.attribute_domain = "POINT"
            glu_socket_1.description = "Select the AA residue GLU"

            # Socket GLN
            gln_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="GLN", in_out="INPUT", socket_type="NodeSocketBool"
            )
            gln_socket_1.attribute_domain = "POINT"
            gln_socket_1.description = "Select the AA residue GLN"

            # Socket GLY
            gly_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="GLY", in_out="INPUT", socket_type="NodeSocketBool"
            )
            gly_socket_1.attribute_domain = "POINT"
            gly_socket_1.description = "Select the AA residue GLY"

            # Socket HIS
            his_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="HIS", in_out="INPUT", socket_type="NodeSocketBool"
            )
            his_socket_1.attribute_domain = "POINT"
            his_socket_1.description = "Select the AA residue HIS"

            # Socket ILE
            ile_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="ILE", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ile_socket_1.attribute_domain = "POINT"
            ile_socket_1.description = "Select the AA residue ILE"

            # Socket LEU
            leu_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="LEU", in_out="INPUT", socket_type="NodeSocketBool"
            )
            leu_socket_1.attribute_domain = "POINT"
            leu_socket_1.description = "Select the AA residue LEU"

            # Socket LYS
            lys_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="LYS", in_out="INPUT", socket_type="NodeSocketBool"
            )
            lys_socket_1.attribute_domain = "POINT"
            lys_socket_1.description = "Select the AA residue LYS"

            # Socket MET
            met_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="MET", in_out="INPUT", socket_type="NodeSocketBool"
            )
            met_socket_1.attribute_domain = "POINT"
            met_socket_1.description = "Select the AA residue MET"

            # Socket PHE
            phe_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="PHE", in_out="INPUT", socket_type="NodeSocketBool"
            )
            phe_socket_1.attribute_domain = "POINT"
            phe_socket_1.description = "Select the AA residue PHE"

            # Socket PRO
            pro_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="PRO", in_out="INPUT", socket_type="NodeSocketBool"
            )
            pro_socket_1.attribute_domain = "POINT"
            pro_socket_1.description = "Select the AA residue PRO"

            # Socket SER
            ser_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="SER", in_out="INPUT", socket_type="NodeSocketBool"
            )
            ser_socket_1.attribute_domain = "POINT"
            ser_socket_1.description = "Select the AA residue SER"

            # Socket THR
            thr_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="THR", in_out="INPUT", socket_type="NodeSocketBool"
            )
            thr_socket_1.attribute_domain = "POINT"
            thr_socket_1.description = "Select the AA residue THR"

            # Socket TRP
            trp_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="TRP", in_out="INPUT", socket_type="NodeSocketBool"
            )
            trp_socket_1.attribute_domain = "POINT"
            trp_socket_1.description = "Select the AA residue TRP"

            # Socket TYR
            tyr_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="TYR", in_out="INPUT", socket_type="NodeSocketBool"
            )
            tyr_socket_1.attribute_domain = "POINT"
            tyr_socket_1.description = "Select the AA residue TYR"

            # Socket VAL
            val_socket_1 = _mn_select_res_name_peptide.interface.new_socket(
                name="VAL", in_out="INPUT", socket_type="NodeSocketBool"
            )
            val_socket_1.attribute_domain = "POINT"
            val_socket_1.description = "Select the AA residue VAL"

            # initialize _mn_select_res_name_peptide nodes
            # node Reroute.018
            reroute_018_3 = _mn_select_res_name_peptide.nodes.new("NodeReroute")
            reroute_018_3.name = "Reroute.018"
            # node Group Output
            group_output_130 = _mn_select_res_name_peptide.nodes.new("NodeGroupOutput")
            group_output_130.name = "Group Output"
            group_output_130.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_25 = _mn_select_res_name_peptide.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_25.name = "Boolean Math.001"
            boolean_math_001_25.operation = "NOT"

            # node Named Attribute
            named_attribute_34 = _mn_select_res_name_peptide.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_34.name = "Named Attribute"
            named_attribute_34.data_type = "INT"
            # Name
            named_attribute_34.inputs[0].default_value = "res_name"

            # node Group Input
            group_input_129 = _mn_select_res_name_peptide.nodes.new("NodeGroupInput")
            group_input_129.name = "Group Input"

            # node Index Switch
            index_switch_4 = _mn_select_res_name_peptide.nodes.new(
                "GeometryNodeIndexSwitch"
            )
            index_switch_4.name = "Index Switch"
            index_switch_4.data_type = "BOOLEAN"
            index_switch_4.index_switch_items.clear()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()
            index_switch_4.index_switch_items.new()

            # Set locations
            reroute_018_3.location = (2740.0, 0.0)
            group_output_130.location = (3040.0, 40.0)
            boolean_math_001_25.location = (2840.403076171875, -31.331174850463867)
            named_attribute_34.location = (2260.0, 80.0)
            group_input_129.location = (2260.0, -60.0)
            index_switch_4.location = (2500.0, 40.0)

            # Set dimensions
            reroute_018_3.width, reroute_018_3.height = 16.0, 100.0
            group_output_130.width, group_output_130.height = 140.0, 100.0
            boolean_math_001_25.width, boolean_math_001_25.height = 140.0, 100.0
            named_attribute_34.width, named_attribute_34.height = 140.0, 100.0
            group_input_129.width, group_input_129.height = 140.0, 100.0
            index_switch_4.width, index_switch_4.height = 140.0, 100.0

            # initialize _mn_select_res_name_peptide links
            # reroute_018_3.Output -> boolean_math_001_25.Boolean
            _mn_select_res_name_peptide.links.new(
                reroute_018_3.outputs[0], boolean_math_001_25.inputs[0]
            )
            # reroute_018_3.Output -> group_output_130.Selection
            _mn_select_res_name_peptide.links.new(
                reroute_018_3.outputs[0], group_output_130.inputs[0]
            )
            # boolean_math_001_25.Boolean -> group_output_130.Inverted
            _mn_select_res_name_peptide.links.new(
                boolean_math_001_25.outputs[0], group_output_130.inputs[1]
            )
            # named_attribute_34.Attribute -> index_switch_4.Index
            _mn_select_res_name_peptide.links.new(
                named_attribute_34.outputs[0], index_switch_4.inputs[0]
            )
            # group_input_129.ALA -> index_switch_4.0
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[0], index_switch_4.inputs[1]
            )
            # group_input_129.ARG -> index_switch_4.1
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[1], index_switch_4.inputs[2]
            )
            # group_input_129.ASN -> index_switch_4.2
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[2], index_switch_4.inputs[3]
            )
            # group_input_129.ASP -> index_switch_4.3
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[3], index_switch_4.inputs[4]
            )
            # group_input_129.CYS -> index_switch_4.4
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[4], index_switch_4.inputs[5]
            )
            # group_input_129.GLU -> index_switch_4.5
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[5], index_switch_4.inputs[6]
            )
            # group_input_129.GLN -> index_switch_4.6
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[6], index_switch_4.inputs[7]
            )
            # group_input_129.GLY -> index_switch_4.7
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[7], index_switch_4.inputs[8]
            )
            # group_input_129.HIS -> index_switch_4.8
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[8], index_switch_4.inputs[9]
            )
            # group_input_129.ILE -> index_switch_4.9
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[9], index_switch_4.inputs[10]
            )
            # group_input_129.LEU -> index_switch_4.10
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[10], index_switch_4.inputs[11]
            )
            # group_input_129.LYS -> index_switch_4.11
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[11], index_switch_4.inputs[12]
            )
            # group_input_129.MET -> index_switch_4.12
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[12], index_switch_4.inputs[13]
            )
            # group_input_129.PHE -> index_switch_4.13
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[13], index_switch_4.inputs[14]
            )
            # group_input_129.PRO -> index_switch_4.14
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[14], index_switch_4.inputs[15]
            )
            # group_input_129.SER -> index_switch_4.15
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[15], index_switch_4.inputs[16]
            )
            # group_input_129.THR -> index_switch_4.16
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[16], index_switch_4.inputs[17]
            )
            # group_input_129.TRP -> index_switch_4.17
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[17], index_switch_4.inputs[18]
            )
            # group_input_129.TYR -> index_switch_4.18
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[18], index_switch_4.inputs[19]
            )
            # group_input_129.VAL -> index_switch_4.19
            _mn_select_res_name_peptide.links.new(
                group_input_129.outputs[19], index_switch_4.inputs[20]
            )
            # index_switch_4.Output -> reroute_018_3.Input
            _mn_select_res_name_peptide.links.new(
                index_switch_4.outputs[0], reroute_018_3.inputs[0]
            )
            return _mn_select_res_name_peptide

        _mn_select_res_name_peptide = _mn_select_res_name_peptide_node_group()

        # initialize _mn_animate_wiggle_mask_length node group
        def _mn_animate_wiggle_mask_length_node_group():
            _mn_animate_wiggle_mask_length = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_animate_wiggle_mask_length"
            )

            _mn_animate_wiggle_mask_length.color_tag = "NONE"
            _mn_animate_wiggle_mask_length.description = ""

            # _mn_animate_wiggle_mask_length interface
            # Socket Result
            result_socket_1 = _mn_animate_wiggle_mask_length.interface.new_socket(
                name="Result", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            result_socket_1.subtype = "NONE"
            result_socket_1.default_value = 0
            result_socket_1.min_value = -2147483648
            result_socket_1.max_value = 2147483647
            result_socket_1.attribute_domain = "POINT"

            # Socket A
            a_socket_7 = _mn_animate_wiggle_mask_length.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketInt"
            )
            a_socket_7.subtype = "NONE"
            a_socket_7.default_value = 0
            a_socket_7.min_value = -2147483648
            a_socket_7.max_value = 2147483647
            a_socket_7.attribute_domain = "POINT"

            # initialize _mn_animate_wiggle_mask_length nodes
            # node Group Output
            group_output_131 = _mn_animate_wiggle_mask_length.nodes.new(
                "NodeGroupOutput"
            )
            group_output_131.name = "Group Output"
            group_output_131.is_active_output = True

            # node Group Input
            group_input_130 = _mn_animate_wiggle_mask_length.nodes.new("NodeGroupInput")
            group_input_130.name = "Group Input"

            # node Index Switch
            index_switch_5 = _mn_animate_wiggle_mask_length.nodes.new(
                "GeometryNodeIndexSwitch"
            )
            index_switch_5.name = "Index Switch"
            index_switch_5.data_type = "INT"
            index_switch_5.index_switch_items.clear()
            index_switch_5.index_switch_items.new()
            index_switch_5.index_switch_items.new()
            index_switch_5.index_switch_items.new()
            index_switch_5.index_switch_items.new()
            index_switch_5.index_switch_items.new()
            # Item_0
            index_switch_5.inputs[1].default_value = 2
            # Item_1
            index_switch_5.inputs[2].default_value = 5
            # Item_2
            index_switch_5.inputs[3].default_value = 6
            # Item_3
            index_switch_5.inputs[4].default_value = 12
            # Item_4
            index_switch_5.inputs[5].default_value = 20

            # Set locations
            group_output_131.location = (80.0, 560.0)
            group_input_130.location = (-300.0, 560.0)
            index_switch_5.location = (-120.55677795410156, 554.9675903320312)

            # Set dimensions
            group_output_131.width, group_output_131.height = 140.0, 100.0
            group_input_130.width, group_input_130.height = 140.0, 100.0
            index_switch_5.width, index_switch_5.height = 140.0, 100.0

            # initialize _mn_animate_wiggle_mask_length links
            # group_input_130.A -> index_switch_5.Index
            _mn_animate_wiggle_mask_length.links.new(
                group_input_130.outputs[0], index_switch_5.inputs[0]
            )
            # index_switch_5.Output -> group_output_131.Result
            _mn_animate_wiggle_mask_length.links.new(
                index_switch_5.outputs[0], group_output_131.inputs[0]
            )
            return _mn_animate_wiggle_mask_length

        _mn_animate_wiggle_mask_length = _mn_animate_wiggle_mask_length_node_group()

        # initialize _mn_utils_rotate_res node group
        def _mn_utils_rotate_res_node_group():
            _mn_utils_rotate_res = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_rotate_res"
            )

            _mn_utils_rotate_res.color_tag = "NONE"
            _mn_utils_rotate_res.description = ""

            # _mn_utils_rotate_res interface
            # Socket Selection
            selection_socket_50 = _mn_utils_rotate_res.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_50.attribute_domain = "POINT"
            selection_socket_50.description = "The calculated selection"

            # Socket Position
            position_socket_7 = _mn_utils_rotate_res.interface.new_socket(
                name="Position", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            position_socket_7.subtype = "NONE"
            position_socket_7.default_value = (0.0, 0.0, 0.0)
            position_socket_7.min_value = -3.4028234663852886e38
            position_socket_7.max_value = 3.4028234663852886e38
            position_socket_7.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_51 = _mn_utils_rotate_res.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_51.attribute_domain = "POINT"
            selection_socket_51.description = "Selection of atoms to apply this node to"

            # Socket atom_name rotation
            atom_name_rotation_socket = _mn_utils_rotate_res.interface.new_socket(
                name="atom_name rotation", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atom_name_rotation_socket.subtype = "NONE"
            atom_name_rotation_socket.default_value = 0
            atom_name_rotation_socket.min_value = -2147483648
            atom_name_rotation_socket.max_value = 2147483647
            atom_name_rotation_socket.attribute_domain = "POINT"

            # Socket atom_name axis
            atom_name_axis_socket = _mn_utils_rotate_res.interface.new_socket(
                name="atom_name axis", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atom_name_axis_socket.subtype = "NONE"
            atom_name_axis_socket.default_value = 2
            atom_name_axis_socket.min_value = -2147483648
            atom_name_axis_socket.max_value = 2147483647
            atom_name_axis_socket.attribute_domain = "POINT"

            # Socket Scale b_factor
            scale_b_factor_socket = _mn_utils_rotate_res.interface.new_socket(
                name="Scale b_factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_b_factor_socket.subtype = "FACTOR"
            scale_b_factor_socket.default_value = 0.0
            scale_b_factor_socket.min_value = -3.4028234663852886e38
            scale_b_factor_socket.max_value = 3.4028234663852886e38
            scale_b_factor_socket.attribute_domain = "POINT"

            # Socket Amplitude
            amplitude_socket_3 = _mn_utils_rotate_res.interface.new_socket(
                name="Amplitude", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amplitude_socket_3.subtype = "NONE"
            amplitude_socket_3.default_value = 1.0
            amplitude_socket_3.min_value = 0.0
            amplitude_socket_3.max_value = 10.0
            amplitude_socket_3.attribute_domain = "POINT"

            # Socket Amp. Axis
            amp__axis_socket = _mn_utils_rotate_res.interface.new_socket(
                name="Amp. Axis", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amp__axis_socket.subtype = "NONE"
            amp__axis_socket.default_value = 1.0
            amp__axis_socket.min_value = -10000.0
            amp__axis_socket.max_value = 10000.0
            amp__axis_socket.attribute_domain = "POINT"

            # Socket Amp. Euler
            amp__euler_socket = _mn_utils_rotate_res.interface.new_socket(
                name="Amp. Euler", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amp__euler_socket.subtype = "NONE"
            amp__euler_socket.default_value = 1.0
            amp__euler_socket.min_value = -10000.0
            amp__euler_socket.max_value = 10000.0
            amp__euler_socket.attribute_domain = "POINT"

            # Socket Speed
            speed_socket_1 = _mn_utils_rotate_res.interface.new_socket(
                name="Speed", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            speed_socket_1.subtype = "NONE"
            speed_socket_1.default_value = 10.0
            speed_socket_1.min_value = -10000.0
            speed_socket_1.max_value = 10000.0
            speed_socket_1.attribute_domain = "POINT"

            # Socket Animate 0..1
            animate_0__1_socket_2 = _mn_utils_rotate_res.interface.new_socket(
                name="Animate 0..1", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_0__1_socket_2.subtype = "NONE"
            animate_0__1_socket_2.default_value = 0.5
            animate_0__1_socket_2.min_value = -10000.0
            animate_0__1_socket_2.max_value = 10000.0
            animate_0__1_socket_2.attribute_domain = "POINT"

            # initialize _mn_utils_rotate_res nodes
            # node Named Attribute.001
            named_attribute_001_19 = _mn_utils_rotate_res.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_19.name = "Named Attribute.001"
            named_attribute_001_19.data_type = "INT"
            # Name
            named_attribute_001_19.inputs[0].default_value = "atom_name"

            # node Reroute.001
            reroute_001_25 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_001_25.name = "Reroute.001"
            # node Reroute.002
            reroute_002_20 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_002_20.name = "Reroute.002"
            # node Reroute.003
            reroute_003_14 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_003_14.name = "Reroute.003"
            # node Boolean Math
            boolean_math_29 = _mn_utils_rotate_res.nodes.new("FunctionNodeBooleanMath")
            boolean_math_29.name = "Boolean Math"
            boolean_math_29.operation = "AND"

            # node Compare.001
            compare_001_23 = _mn_utils_rotate_res.nodes.new("FunctionNodeCompare")
            compare_001_23.name = "Compare.001"
            compare_001_23.data_type = "INT"
            compare_001_23.mode = "ELEMENT"
            compare_001_23.operation = "GREATER_THAN"

            # node Random Value
            random_value_3 = _mn_utils_rotate_res.nodes.new("FunctionNodeRandomValue")
            random_value_3.name = "Random Value"
            random_value_3.hide = True
            random_value_3.data_type = "FLOAT_VECTOR"
            # Min
            random_value_3.inputs[0].default_value = (-13.0, -13.0, -13.0)
            # Max
            random_value_3.inputs[1].default_value = (
                13.899999618530273,
                13.899999618530273,
                13.899999618530273,
            )

            # node Boolean Math.001
            boolean_math_001_26 = _mn_utils_rotate_res.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_26.name = "Boolean Math.001"
            boolean_math_001_26.operation = "AND"

            # node Position
            position_13 = _mn_utils_rotate_res.nodes.new("GeometryNodeInputPosition")
            position_13.name = "Position"

            # node Vector Rotate
            vector_rotate_2 = _mn_utils_rotate_res.nodes.new("ShaderNodeVectorRotate")
            vector_rotate_2.name = "Vector Rotate"
            vector_rotate_2.invert = False
            vector_rotate_2.rotation_type = "AXIS_ANGLE"

            # node Reroute.004
            reroute_004_10 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_004_10.name = "Reroute.004"
            # node Group Output
            group_output_132 = _mn_utils_rotate_res.nodes.new("NodeGroupOutput")
            group_output_132.name = "Group Output"
            group_output_132.is_active_output = True

            # node Vector Rotate.002
            vector_rotate_002_1 = _mn_utils_rotate_res.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_002_1.name = "Vector Rotate.002"
            vector_rotate_002_1.invert = False
            vector_rotate_002_1.rotation_type = "EULER_XYZ"

            # node Vector Math.001
            vector_math_001_19 = _mn_utils_rotate_res.nodes.new("ShaderNodeVectorMath")
            vector_math_001_19.name = "Vector Math.001"
            vector_math_001_19.operation = "SCALE"

            # node Group.004
            group_004_5 = _mn_utils_rotate_res.nodes.new("GeometryNodeGroup")
            group_004_5.name = "Group.004"
            group_004_5.node_tree = mn_animate_noise_repeat
            # Input_3
            group_004_5.inputs[1].default_value = 1.0
            # Input_4
            group_004_5.inputs[2].default_value = 1.0
            # Input_5
            group_004_5.inputs[3].default_value = 1.9799998998641968

            # node Vector Math.002
            vector_math_002_10 = _mn_utils_rotate_res.nodes.new("ShaderNodeVectorMath")
            vector_math_002_10.name = "Vector Math.002"
            vector_math_002_10.mute = True
            vector_math_002_10.operation = "SCALE"

            # node Compare
            compare_38 = _mn_utils_rotate_res.nodes.new("FunctionNodeCompare")
            compare_38.name = "Compare"
            compare_38.data_type = "INT"
            compare_38.mode = "ELEMENT"
            compare_38.operation = "EQUAL"
            # B_INT
            compare_38.inputs[3].default_value = 3

            # node Group
            group_35 = _mn_utils_rotate_res.nodes.new("GeometryNodeGroup")
            group_35.name = "Group"
            group_35.node_tree = mn_animate_noise_repeat
            # Input_1
            group_35.inputs[0].default_value = 1.0
            # Input_3
            group_35.inputs[1].default_value = 2.0
            # Input_4
            group_35.inputs[2].default_value = 1.0
            # Input_5
            group_35.inputs[3].default_value = 1.9799998998641968

            # node Compare.002
            compare_002_15 = _mn_utils_rotate_res.nodes.new("FunctionNodeCompare")
            compare_002_15.name = "Compare.002"
            compare_002_15.data_type = "INT"
            compare_002_15.mode = "ELEMENT"
            compare_002_15.operation = "GREATER_THAN"
            # B_INT
            compare_002_15.inputs[3].default_value = 4

            # node Compare.003
            compare_003_15 = _mn_utils_rotate_res.nodes.new("FunctionNodeCompare")
            compare_003_15.name = "Compare.003"
            compare_003_15.data_type = "INT"
            compare_003_15.mode = "ELEMENT"
            compare_003_15.operation = "NOT_EQUAL"
            # B_INT
            compare_003_15.inputs[3].default_value = 38

            # node Boolean Math.002
            boolean_math_002_16 = _mn_utils_rotate_res.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_16.name = "Boolean Math.002"
            boolean_math_002_16.operation = "AND"

            # node Boolean Math.003
            boolean_math_003_5 = _mn_utils_rotate_res.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_5.name = "Boolean Math.003"
            boolean_math_003_5.operation = "AND"

            # node Reroute.005
            reroute_005_10 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_005_10.name = "Reroute.005"
            # node Vector Math
            vector_math_29 = _mn_utils_rotate_res.nodes.new("ShaderNodeVectorMath")
            vector_math_29.name = "Vector Math"
            vector_math_29.hide = True
            vector_math_29.operation = "SUBTRACT"

            # node Math.001
            math_001_22 = _mn_utils_rotate_res.nodes.new("ShaderNodeMath")
            math_001_22.name = "Math.001"
            math_001_22.hide = True
            math_001_22.operation = "MULTIPLY"
            math_001_22.use_clamp = False

            # node Math.002
            math_002_14 = _mn_utils_rotate_res.nodes.new("ShaderNodeMath")
            math_002_14.name = "Math.002"
            math_002_14.hide = True
            math_002_14.operation = "MULTIPLY"
            math_002_14.use_clamp = False

            # node Reroute.007
            reroute_007_7 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_007_7.name = "Reroute.007"
            # node Reroute.006
            reroute_006_9 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_006_9.name = "Reroute.006"
            # node Group Input
            group_input_131 = _mn_utils_rotate_res.nodes.new("NodeGroupInput")
            group_input_131.name = "Group Input"

            # node Math
            math_34 = _mn_utils_rotate_res.nodes.new("ShaderNodeMath")
            math_34.name = "Math"
            math_34.operation = "MULTIPLY"
            math_34.use_clamp = False

            # node Mix
            mix_11 = _mn_utils_rotate_res.nodes.new("ShaderNodeMix")
            mix_11.name = "Mix"
            mix_11.blend_type = "MIX"
            mix_11.clamp_factor = True
            mix_11.clamp_result = False
            mix_11.data_type = "FLOAT"
            mix_11.factor_mode = "UNIFORM"
            # A_Float
            mix_11.inputs[2].default_value = 1.0

            # node Map Range
            map_range_11 = _mn_utils_rotate_res.nodes.new("ShaderNodeMapRange")
            map_range_11.name = "Map Range"
            map_range_11.hide = True
            map_range_11.clamp = True
            map_range_11.data_type = "FLOAT"
            map_range_11.interpolation_type = "SMOOTHERSTEP"
            # From Min
            map_range_11.inputs[1].default_value = 1.0
            # From Max
            map_range_11.inputs[2].default_value = 100.0
            # To Min
            map_range_11.inputs[3].default_value = 0.0
            # To Max
            map_range_11.inputs[4].default_value = 1.0

            # node Reroute
            reroute_36 = _mn_utils_rotate_res.nodes.new("NodeReroute")
            reroute_36.name = "Reroute"
            # node Group.002
            group_002_14 = _mn_utils_rotate_res.nodes.new("GeometryNodeGroup")
            group_002_14.name = "Group.002"
            group_002_14.node_tree = _mn_utils_aa_atom_pos

            # node Group.003
            group_003_7 = _mn_utils_rotate_res.nodes.new("GeometryNodeGroup")
            group_003_7.name = "Group.003"
            group_003_7.hide = True
            group_003_7.node_tree = _mn_utils_aa_atom_pos

            # node Group.001
            group_001_24 = _mn_utils_rotate_res.nodes.new("GeometryNodeGroup")
            group_001_24.name = "Group.001"
            group_001_24.node_tree = is_peptide
            # Socket_1
            group_001_24.inputs[0].default_value = True
            # Socket_3
            group_001_24.inputs[1].default_value = False

            # Set locations
            named_attribute_001_19.location = (-900.0, 580.0)
            reroute_001_25.location = (-23.38579559326172, -430.73773193359375)
            reroute_002_20.location = (-825.0, -440.0)
            reroute_003_14.location = (-5.0, -460.0)
            boolean_math_29.location = (-480.0, 320.0)
            compare_001_23.location = (-640.0, 320.0)
            random_value_3.location = (-205.0, -420.0)
            boolean_math_001_26.location = (440.0, 280.0)
            position_13.location = (440.0, 120.0)
            vector_rotate_2.location = (680.0, 160.0)
            reroute_004_10.location = (640.0, 40.0)
            group_output_132.location = (1233.2698974609375, 262.38323974609375)
            vector_rotate_002_1.location = (993.2698364257812, 182.3832244873047)
            vector_math_001_19.location = (553.43408203125, -62.642765045166016)
            group_004_5.location = (300.0, -140.0)
            vector_math_002_10.location = (773.0, -45.8553466796875)
            compare_38.location = (780.0, -200.0)
            group_35.location = (80.0, -140.0)
            compare_002_15.location = (-640.0, 480.0)
            compare_003_15.location = (-640.0, 640.0)
            boolean_math_002_16.location = (-280.5462951660156, 430.50006103515625)
            boolean_math_003_5.location = (-87.18310546875, 553.9082641601562)
            reroute_005_10.location = (320.0, 20.0)
            vector_math_29.location = (360.0, 0.0)
            math_001_22.location = (360.0, -40.0)
            math_002_14.location = (140.00001525878906, -59.452919006347656)
            reroute_007_7.location = (20.0, -200.0)
            reroute_006_9.location = (20.0, -120.0)
            group_input_131.location = (-1261.5419921875, 0.30535888671875)
            math_34.location = (-152.04693603515625, -27.359119415283203)
            mix_11.location = (-361.2230224609375, 52.487037658691406)
            map_range_11.location = (-361.6744384765625, -140.6511688232422)
            reroute_36.location = (-980.0, 0.0)
            group_002_14.location = (-840.0, -60.0)
            group_003_7.location = (-840.0, -20.0)
            group_001_24.location = (-640.0, 160.0)

            # Set dimensions
            named_attribute_001_19.width, named_attribute_001_19.height = 140.0, 100.0
            reroute_001_25.width, reroute_001_25.height = 16.0, 100.0
            reroute_002_20.width, reroute_002_20.height = 16.0, 100.0
            reroute_003_14.width, reroute_003_14.height = 16.0, 100.0
            boolean_math_29.width, boolean_math_29.height = 140.0, 100.0
            compare_001_23.width, compare_001_23.height = 140.0, 100.0
            random_value_3.width, random_value_3.height = 140.0, 100.0
            boolean_math_001_26.width, boolean_math_001_26.height = 140.0, 100.0
            position_13.width, position_13.height = 140.0, 100.0
            vector_rotate_2.width, vector_rotate_2.height = 140.0, 100.0
            reroute_004_10.width, reroute_004_10.height = 16.0, 100.0
            group_output_132.width, group_output_132.height = 140.0, 100.0
            vector_rotate_002_1.width, vector_rotate_002_1.height = 140.0, 100.0
            vector_math_001_19.width, vector_math_001_19.height = 140.0, 100.0
            group_004_5.width, group_004_5.height = 200.0, 100.0
            vector_math_002_10.width, vector_math_002_10.height = 140.0, 100.0
            compare_38.width, compare_38.height = 140.0, 100.0
            group_35.width, group_35.height = 200.0, 100.0
            compare_002_15.width, compare_002_15.height = 140.0, 100.0
            compare_003_15.width, compare_003_15.height = 140.0, 100.0
            boolean_math_002_16.width, boolean_math_002_16.height = 140.0, 100.0
            boolean_math_003_5.width, boolean_math_003_5.height = 140.0, 100.0
            reroute_005_10.width, reroute_005_10.height = 16.0, 100.0
            vector_math_29.width, vector_math_29.height = 140.0, 100.0
            math_001_22.width, math_001_22.height = 140.0, 100.0
            math_002_14.width, math_002_14.height = 140.0, 100.0
            reroute_007_7.width, reroute_007_7.height = 16.0, 100.0
            reroute_006_9.width, reroute_006_9.height = 16.0, 100.0
            group_input_131.width, group_input_131.height = 140.0, 100.0
            math_34.width, math_34.height = 140.0, 100.0
            mix_11.width, mix_11.height = 140.0, 100.0
            map_range_11.width, map_range_11.height = 140.0, 100.0
            reroute_36.width, reroute_36.height = 16.0, 100.0
            group_002_14.width, group_002_14.height = 239.87417602539062, 100.0
            group_003_7.width, group_003_7.height = 246.31427001953125, 100.0
            group_001_24.width, group_001_24.height = 140.0, 100.0

            # initialize _mn_utils_rotate_res links
            # boolean_math_001_26.Boolean -> group_output_132.Selection
            _mn_utils_rotate_res.links.new(
                boolean_math_001_26.outputs[0], group_output_132.inputs[0]
            )
            # group_input_131.Selection -> boolean_math_001_26.Boolean
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[0], boolean_math_001_26.inputs[1]
            )
            # position_13.Position -> vector_rotate_2.Vector
            _mn_utils_rotate_res.links.new(
                position_13.outputs[0], vector_rotate_2.inputs[0]
            )
            # reroute_004_10.Output -> vector_rotate_2.Center
            _mn_utils_rotate_res.links.new(
                reroute_004_10.outputs[0], vector_rotate_2.inputs[1]
            )
            # named_attribute_001_19.Attribute -> compare_001_23.A
            _mn_utils_rotate_res.links.new(
                named_attribute_001_19.outputs[0], compare_001_23.inputs[2]
            )
            # reroute_36.Output -> compare_001_23.B
            _mn_utils_rotate_res.links.new(
                reroute_36.outputs[0], compare_001_23.inputs[3]
            )
            # compare_001_23.Result -> boolean_math_29.Boolean
            _mn_utils_rotate_res.links.new(
                compare_001_23.outputs[0], boolean_math_29.inputs[0]
            )
            # group_input_131.atom_name rotation -> reroute_36.Input
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[1], reroute_36.inputs[0]
            )
            # vector_math_29.Vector -> vector_rotate_2.Axis
            _mn_utils_rotate_res.links.new(
                vector_math_29.outputs[0], vector_rotate_2.inputs[2]
            )
            # reroute_001_25.Output -> group_35.Vector
            _mn_utils_rotate_res.links.new(
                reroute_001_25.outputs[0], group_35.inputs[4]
            )
            # reroute_001_25.Output -> group_004_5.Vector
            _mn_utils_rotate_res.links.new(
                reroute_001_25.outputs[0], group_004_5.inputs[4]
            )
            # vector_rotate_002_1.Vector -> group_output_132.Position
            _mn_utils_rotate_res.links.new(
                vector_rotate_002_1.outputs[0], group_output_132.inputs[1]
            )
            # group_003_7.Position -> vector_math_29.Vector
            _mn_utils_rotate_res.links.new(
                group_003_7.outputs[0], vector_math_29.inputs[1]
            )
            # reroute_005_10.Output -> vector_math_29.Vector
            _mn_utils_rotate_res.links.new(
                reroute_005_10.outputs[0], vector_math_29.inputs[0]
            )
            # reroute_36.Output -> group_002_14.atom_name
            _mn_utils_rotate_res.links.new(
                reroute_36.outputs[0], group_002_14.inputs[0]
            )
            # group_input_131.atom_name axis -> group_003_7.atom_name
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[2], group_003_7.inputs[0]
            )
            # vector_rotate_2.Vector -> vector_rotate_002_1.Vector
            _mn_utils_rotate_res.links.new(
                vector_rotate_2.outputs[0], vector_rotate_002_1.inputs[0]
            )
            # reroute_004_10.Output -> vector_rotate_002_1.Center
            _mn_utils_rotate_res.links.new(
                reroute_004_10.outputs[0], vector_rotate_002_1.inputs[1]
            )
            # reroute_003_14.Output -> group_35.Animate 0..1
            _mn_utils_rotate_res.links.new(
                reroute_003_14.outputs[0], group_35.inputs[6]
            )
            # reroute_003_14.Output -> group_004_5.Animate 0..1
            _mn_utils_rotate_res.links.new(
                reroute_003_14.outputs[0], group_004_5.inputs[6]
            )
            # group_002_14.Group Index -> random_value_3.ID
            _mn_utils_rotate_res.links.new(
                group_002_14.outputs[1], random_value_3.inputs[7]
            )
            # random_value_3.Value -> reroute_001_25.Input
            _mn_utils_rotate_res.links.new(
                random_value_3.outputs[0], reroute_001_25.inputs[0]
            )
            # group_input_131.Animate 0..1 -> reroute_002_20.Input
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[8], reroute_002_20.inputs[0]
            )
            # reroute_002_20.Output -> reroute_003_14.Input
            _mn_utils_rotate_res.links.new(
                reroute_002_20.outputs[0], reroute_003_14.inputs[0]
            )
            # reroute_36.Output -> random_value_3.Seed
            _mn_utils_rotate_res.links.new(
                reroute_36.outputs[0], random_value_3.inputs[8]
            )
            # boolean_math_29.Boolean -> boolean_math_002_16.Boolean
            _mn_utils_rotate_res.links.new(
                boolean_math_29.outputs[0], boolean_math_002_16.inputs[1]
            )
            # named_attribute_001_19.Attribute -> compare_002_15.A
            _mn_utils_rotate_res.links.new(
                named_attribute_001_19.outputs[0], compare_002_15.inputs[2]
            )
            # compare_002_15.Result -> boolean_math_002_16.Boolean
            _mn_utils_rotate_res.links.new(
                compare_002_15.outputs[0], boolean_math_002_16.inputs[0]
            )
            # reroute_005_10.Output -> reroute_004_10.Input
            _mn_utils_rotate_res.links.new(
                reroute_005_10.outputs[0], reroute_004_10.inputs[0]
            )
            # group_002_14.Position -> reroute_005_10.Input
            _mn_utils_rotate_res.links.new(
                group_002_14.outputs[0], reroute_005_10.inputs[0]
            )
            # group_input_131.Amplitude -> math_34.Value
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[4], math_34.inputs[1]
            )
            # group_35.Noise Float -> math_001_22.Value
            _mn_utils_rotate_res.links.new(group_35.outputs[0], math_001_22.inputs[1])
            # math_001_22.Value -> vector_rotate_2.Angle
            _mn_utils_rotate_res.links.new(
                math_001_22.outputs[0], vector_rotate_2.inputs[3]
            )
            # group_input_131.Speed -> group_35.Speed
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[7], group_35.inputs[5]
            )
            # group_input_131.Speed -> group_004_5.Speed
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[7], group_004_5.inputs[5]
            )
            # group_input_131.Amp. Euler -> group_004_5.Amplitude
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[6], group_004_5.inputs[0]
            )
            # group_004_5.Noise Vector -> vector_math_001_19.Vector
            _mn_utils_rotate_res.links.new(
                group_004_5.outputs[1], vector_math_001_19.inputs[0]
            )
            # reroute_006_9.Output -> vector_math_001_19.Scale
            _mn_utils_rotate_res.links.new(
                reroute_006_9.outputs[0], vector_math_001_19.inputs[3]
            )
            # vector_math_002_10.Vector -> vector_rotate_002_1.Rotation
            _mn_utils_rotate_res.links.new(
                vector_math_002_10.outputs[0], vector_rotate_002_1.inputs[4]
            )
            # math_002_14.Value -> math_001_22.Value
            _mn_utils_rotate_res.links.new(
                math_002_14.outputs[0], math_001_22.inputs[0]
            )
            # math_34.Value -> reroute_006_9.Input
            _mn_utils_rotate_res.links.new(math_34.outputs[0], reroute_006_9.inputs[0])
            # group_002_14.b_factor -> map_range_11.Value
            _mn_utils_rotate_res.links.new(
                group_002_14.outputs[2], map_range_11.inputs[0]
            )
            # vector_math_001_19.Vector -> vector_math_002_10.Vector
            _mn_utils_rotate_res.links.new(
                vector_math_001_19.outputs[0], vector_math_002_10.inputs[0]
            )
            # compare_38.Result -> vector_math_002_10.Scale
            _mn_utils_rotate_res.links.new(
                compare_38.outputs[0], vector_math_002_10.inputs[3]
            )
            # group_002_14.Integer -> compare_38.A
            _mn_utils_rotate_res.links.new(
                group_002_14.outputs[3], compare_38.inputs[2]
            )
            # named_attribute_001_19.Attribute -> compare_003_15.A
            _mn_utils_rotate_res.links.new(
                named_attribute_001_19.outputs[0], compare_003_15.inputs[2]
            )
            # boolean_math_002_16.Boolean -> boolean_math_003_5.Boolean
            _mn_utils_rotate_res.links.new(
                boolean_math_002_16.outputs[0], boolean_math_003_5.inputs[1]
            )
            # compare_003_15.Result -> boolean_math_003_5.Boolean
            _mn_utils_rotate_res.links.new(
                compare_003_15.outputs[0], boolean_math_003_5.inputs[0]
            )
            # boolean_math_003_5.Boolean -> boolean_math_001_26.Boolean
            _mn_utils_rotate_res.links.new(
                boolean_math_003_5.outputs[0], boolean_math_001_26.inputs[0]
            )
            # reroute_006_9.Output -> math_002_14.Value
            _mn_utils_rotate_res.links.new(
                reroute_006_9.outputs[0], math_002_14.inputs[0]
            )
            # reroute_007_7.Output -> math_002_14.Value
            _mn_utils_rotate_res.links.new(
                reroute_007_7.outputs[0], math_002_14.inputs[1]
            )
            # group_input_131.Amp. Axis -> reroute_007_7.Input
            _mn_utils_rotate_res.links.new(
                group_input_131.outputs[5], reroute_007_7.inputs[0]
            )
            # map_range_11.Result -> mix_11.B
            _mn_utils_rotate_res.links.new(map_range_11.outputs[0], mix_11.inputs[3])
            # mix_11.Result -> math_34.Value
            _mn_utils_rotate_res.links.new(mix_11.outputs[0], math_34.inputs[0])
            # group_input_131.Scale b_factor -> mix_11.Factor
            _mn_utils_rotate_res.links.new(group_input_131.outputs[3], mix_11.inputs[0])
            # group_001_24.Selection -> boolean_math_29.Boolean
            _mn_utils_rotate_res.links.new(
                group_001_24.outputs[0], boolean_math_29.inputs[1]
            )
            return _mn_utils_rotate_res

        _mn_utils_rotate_res = _mn_utils_rotate_res_node_group()

        # initialize _mn_animate_wiggle_mask_res node group
        def _mn_animate_wiggle_mask_res_node_group():
            _mn_animate_wiggle_mask_res = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_animate_wiggle_mask_res"
            )

            _mn_animate_wiggle_mask_res.color_tag = "NONE"
            _mn_animate_wiggle_mask_res.description = ""

            # _mn_animate_wiggle_mask_res interface
            # Socket Result
            result_socket_2 = _mn_animate_wiggle_mask_res.interface.new_socket(
                name="Result", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            result_socket_2.attribute_domain = "POINT"

            # Socket A
            a_socket_8 = _mn_animate_wiggle_mask_res.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketInt"
            )
            a_socket_8.subtype = "NONE"
            a_socket_8.default_value = 0
            a_socket_8.min_value = -2147483648
            a_socket_8.max_value = 2147483647
            a_socket_8.attribute_domain = "POINT"

            # initialize _mn_animate_wiggle_mask_res nodes
            # node Group Input
            group_input_132 = _mn_animate_wiggle_mask_res.nodes.new("NodeGroupInput")
            group_input_132.name = "Group Input"

            # node Group.013
            group_013_1 = _mn_animate_wiggle_mask_res.nodes.new("GeometryNodeGroup")
            group_013_1.name = "Group.013"
            group_013_1.node_tree = _mn_select_res_name_peptide
            # Input_7
            group_013_1.inputs[0].default_value = True
            # Input_8
            group_013_1.inputs[1].default_value = True
            # Input_9
            group_013_1.inputs[2].default_value = True
            # Input_10
            group_013_1.inputs[3].default_value = True
            # Input_11
            group_013_1.inputs[4].default_value = True
            # Input_12
            group_013_1.inputs[5].default_value = True
            # Input_13
            group_013_1.inputs[6].default_value = True
            # Input_14
            group_013_1.inputs[7].default_value = False
            # Input_15
            group_013_1.inputs[8].default_value = True
            # Input_16
            group_013_1.inputs[9].default_value = True
            # Input_17
            group_013_1.inputs[10].default_value = True
            # Input_18
            group_013_1.inputs[11].default_value = True
            # Input_19
            group_013_1.inputs[12].default_value = True
            # Input_20
            group_013_1.inputs[13].default_value = True
            # Input_21
            group_013_1.inputs[14].default_value = False
            # Input_22
            group_013_1.inputs[15].default_value = True
            # Input_23
            group_013_1.inputs[16].default_value = True
            # Input_24
            group_013_1.inputs[17].default_value = True
            # Input_25
            group_013_1.inputs[18].default_value = True
            # Input_26
            group_013_1.inputs[19].default_value = True

            # node Group.011
            group_011_3 = _mn_animate_wiggle_mask_res.nodes.new("GeometryNodeGroup")
            group_011_3.name = "Group.011"
            group_011_3.node_tree = _mn_select_res_name_peptide
            # Input_7
            group_011_3.inputs[0].default_value = False
            # Input_8
            group_011_3.inputs[1].default_value = True
            # Input_9
            group_011_3.inputs[2].default_value = False
            # Input_10
            group_011_3.inputs[3].default_value = False
            # Input_11
            group_011_3.inputs[4].default_value = False
            # Input_12
            group_011_3.inputs[5].default_value = False
            # Input_13
            group_011_3.inputs[6].default_value = True
            # Input_14
            group_011_3.inputs[7].default_value = False
            # Input_15
            group_011_3.inputs[8].default_value = False
            # Input_16
            group_011_3.inputs[9].default_value = False
            # Input_17
            group_011_3.inputs[10].default_value = False
            # Input_18
            group_011_3.inputs[11].default_value = True
            # Input_19
            group_011_3.inputs[12].default_value = False
            # Input_20
            group_011_3.inputs[13].default_value = False
            # Input_21
            group_011_3.inputs[14].default_value = False
            # Input_22
            group_011_3.inputs[15].default_value = False
            # Input_23
            group_011_3.inputs[16].default_value = False
            # Input_24
            group_011_3.inputs[17].default_value = False
            # Input_25
            group_011_3.inputs[18].default_value = False
            # Input_26
            group_011_3.inputs[19].default_value = False

            # node Group.012
            group_012_3 = _mn_animate_wiggle_mask_res.nodes.new("GeometryNodeGroup")
            group_012_3.name = "Group.012"
            group_012_3.node_tree = _mn_select_res_name_peptide
            # Input_7
            group_012_3.inputs[0].default_value = False
            # Input_8
            group_012_3.inputs[1].default_value = False
            # Input_9
            group_012_3.inputs[2].default_value = False
            # Input_10
            group_012_3.inputs[3].default_value = False
            # Input_11
            group_012_3.inputs[4].default_value = False
            # Input_12
            group_012_3.inputs[5].default_value = False
            # Input_13
            group_012_3.inputs[6].default_value = False
            # Input_14
            group_012_3.inputs[7].default_value = False
            # Input_15
            group_012_3.inputs[8].default_value = False
            # Input_16
            group_012_3.inputs[9].default_value = True
            # Input_17
            group_012_3.inputs[10].default_value = False
            # Input_18
            group_012_3.inputs[11].default_value = True
            # Input_19
            group_012_3.inputs[12].default_value = False
            # Input_20
            group_012_3.inputs[13].default_value = False
            # Input_21
            group_012_3.inputs[14].default_value = False
            # Input_22
            group_012_3.inputs[15].default_value = False
            # Input_23
            group_012_3.inputs[16].default_value = False
            # Input_24
            group_012_3.inputs[17].default_value = False
            # Input_25
            group_012_3.inputs[18].default_value = False
            # Input_26
            group_012_3.inputs[19].default_value = False

            # node Group.010
            group_010_2 = _mn_animate_wiggle_mask_res.nodes.new("GeometryNodeGroup")
            group_010_2.name = "Group.010"
            group_010_2.node_tree = _mn_select_res_name_peptide
            # Input_7
            group_010_2.inputs[0].default_value = True
            # Input_8
            group_010_2.inputs[1].default_value = True
            # Input_9
            group_010_2.inputs[2].default_value = True
            # Input_10
            group_010_2.inputs[3].default_value = True
            # Input_11
            group_010_2.inputs[4].default_value = False
            # Input_12
            group_010_2.inputs[5].default_value = True
            # Input_13
            group_010_2.inputs[6].default_value = True
            # Input_14
            group_010_2.inputs[7].default_value = False
            # Input_15
            group_010_2.inputs[8].default_value = True
            # Input_16
            group_010_2.inputs[9].default_value = False
            # Input_17
            group_010_2.inputs[10].default_value = True
            # Input_18
            group_010_2.inputs[11].default_value = True
            # Input_19
            group_010_2.inputs[12].default_value = True
            # Input_20
            group_010_2.inputs[13].default_value = True
            # Input_21
            group_010_2.inputs[14].default_value = False
            # Input_22
            group_010_2.inputs[15].default_value = False
            # Input_23
            group_010_2.inputs[16].default_value = False
            # Input_24
            group_010_2.inputs[17].default_value = True
            # Input_25
            group_010_2.inputs[18].default_value = False
            # Input_26
            group_010_2.inputs[19].default_value = False

            # node Group Output
            group_output_133 = _mn_animate_wiggle_mask_res.nodes.new("NodeGroupOutput")
            group_output_133.name = "Group Output"
            group_output_133.is_active_output = True

            # node Group.014
            group_014_5 = _mn_animate_wiggle_mask_res.nodes.new("GeometryNodeGroup")
            group_014_5.name = "Group.014"
            group_014_5.node_tree = _mn_select_res_name_peptide
            # Input_7
            group_014_5.inputs[0].default_value = True
            # Input_8
            group_014_5.inputs[1].default_value = True
            # Input_9
            group_014_5.inputs[2].default_value = True
            # Input_10
            group_014_5.inputs[3].default_value = True
            # Input_11
            group_014_5.inputs[4].default_value = True
            # Input_12
            group_014_5.inputs[5].default_value = True
            # Input_13
            group_014_5.inputs[6].default_value = True
            # Input_14
            group_014_5.inputs[7].default_value = False
            # Input_15
            group_014_5.inputs[8].default_value = True
            # Input_16
            group_014_5.inputs[9].default_value = True
            # Input_17
            group_014_5.inputs[10].default_value = True
            # Input_18
            group_014_5.inputs[11].default_value = True
            # Input_19
            group_014_5.inputs[12].default_value = True
            # Input_20
            group_014_5.inputs[13].default_value = True
            # Input_21
            group_014_5.inputs[14].default_value = False
            # Input_22
            group_014_5.inputs[15].default_value = True
            # Input_23
            group_014_5.inputs[16].default_value = True
            # Input_24
            group_014_5.inputs[17].default_value = True
            # Input_25
            group_014_5.inputs[18].default_value = True
            # Input_26
            group_014_5.inputs[19].default_value = True

            # node Index Switch
            index_switch_6 = _mn_animate_wiggle_mask_res.nodes.new(
                "GeometryNodeIndexSwitch"
            )
            index_switch_6.name = "Index Switch"
            index_switch_6.data_type = "BOOLEAN"
            index_switch_6.index_switch_items.clear()
            index_switch_6.index_switch_items.new()
            index_switch_6.index_switch_items.new()
            index_switch_6.index_switch_items.new()
            index_switch_6.index_switch_items.new()
            index_switch_6.index_switch_items.new()

            # Set locations
            group_input_132.location = (-100.0, 240.0)
            group_013_1.location = (-680.0, 120.0)
            group_011_3.location = (-200.0, 20.0)
            group_012_3.location = (40.0, -20.0)
            group_010_2.location = (-440.0, 80.0)
            group_output_133.location = (280.0, 220.0)
            group_014_5.location = (-900.0, 180.0)
            index_switch_6.location = (100.0, 220.0)

            # Set dimensions
            group_input_132.width, group_input_132.height = 140.0, 100.0
            group_013_1.width, group_013_1.height = 200.0, 100.0
            group_011_3.width, group_011_3.height = 192.78585815429688, 100.0
            group_012_3.width, group_012_3.height = 192.78585815429688, 100.0
            group_010_2.width, group_010_2.height = 200.0, 100.0
            group_output_133.width, group_output_133.height = 140.0, 100.0
            group_014_5.width, group_014_5.height = 200.0, 100.0
            index_switch_6.width, index_switch_6.height = 140.0, 100.0

            # initialize _mn_animate_wiggle_mask_res links
            # group_input_132.A -> index_switch_6.Index
            _mn_animate_wiggle_mask_res.links.new(
                group_input_132.outputs[0], index_switch_6.inputs[0]
            )
            # group_014_5.Selection -> index_switch_6.0
            _mn_animate_wiggle_mask_res.links.new(
                group_014_5.outputs[0], index_switch_6.inputs[1]
            )
            # group_013_1.Selection -> index_switch_6.1
            _mn_animate_wiggle_mask_res.links.new(
                group_013_1.outputs[0], index_switch_6.inputs[2]
            )
            # group_010_2.Selection -> index_switch_6.2
            _mn_animate_wiggle_mask_res.links.new(
                group_010_2.outputs[0], index_switch_6.inputs[3]
            )
            # group_011_3.Selection -> index_switch_6.3
            _mn_animate_wiggle_mask_res.links.new(
                group_011_3.outputs[0], index_switch_6.inputs[4]
            )
            # group_012_3.Selection -> index_switch_6.4
            _mn_animate_wiggle_mask_res.links.new(
                group_012_3.outputs[0], index_switch_6.inputs[5]
            )
            # index_switch_6.Output -> group_output_133.Result
            _mn_animate_wiggle_mask_res.links.new(
                index_switch_6.outputs[0], group_output_133.inputs[0]
            )
            return _mn_animate_wiggle_mask_res

        _mn_animate_wiggle_mask_res = _mn_animate_wiggle_mask_res_node_group()

        # initialize animate_wiggle node group
        def animate_wiggle_node_group():
            animate_wiggle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Wiggle"
            )

            animate_wiggle.color_tag = "GEOMETRY"
            animate_wiggle.description = ""

            animate_wiggle.is_modifier = True

            # animate_wiggle interface
            # Socket Atoms
            atoms_socket_28 = animate_wiggle.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_28.attribute_domain = "POINT"
            atoms_socket_28.description = "The animated atomic geometry"

            # Socket Atoms
            atoms_socket_29 = animate_wiggle.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_29.attribute_domain = "POINT"
            atoms_socket_29.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_52 = animate_wiggle.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_52.attribute_domain = "POINT"
            selection_socket_52.hide_value = True
            selection_socket_52.description = "Selection of atoms to apply this node to"

            # Socket b_factor
            b_factor_socket_2 = animate_wiggle.interface.new_socket(
                name="b_factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            b_factor_socket_2.subtype = "FACTOR"
            b_factor_socket_2.default_value = 1.0
            b_factor_socket_2.min_value = 0.0
            b_factor_socket_2.max_value = 1.0
            b_factor_socket_2.attribute_domain = "POINT"
            b_factor_socket_2.description = (
                "Amount that `b_factor` changeds the amplitude of wiggling"
            )

            # Socket Amplitude
            amplitude_socket_4 = animate_wiggle.interface.new_socket(
                name="Amplitude", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amplitude_socket_4.subtype = "NONE"
            amplitude_socket_4.default_value = 1.0
            amplitude_socket_4.min_value = 0.0
            amplitude_socket_4.max_value = 10.0
            amplitude_socket_4.attribute_domain = "POINT"
            amplitude_socket_4.description = "Overall amplitude of the wiggling"

            # Socket Amp. Axis
            amp__axis_socket_1 = animate_wiggle.interface.new_socket(
                name="Amp. Axis", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amp__axis_socket_1.subtype = "NONE"
            amp__axis_socket_1.default_value = 1.0
            amp__axis_socket_1.min_value = -10000.0
            amp__axis_socket_1.max_value = 10000.0
            amp__axis_socket_1.attribute_domain = "POINT"
            amp__axis_socket_1.description = (
                "Aplitude for the rotation around the bond axes"
            )

            # Socket Amp. Euler
            amp__euler_socket_1 = animate_wiggle.interface.new_socket(
                name="Amp. Euler", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            amp__euler_socket_1.subtype = "NONE"
            amp__euler_socket_1.default_value = 0.4000000059604645
            amp__euler_socket_1.min_value = -10000.0
            amp__euler_socket_1.max_value = 10000.0
            amp__euler_socket_1.attribute_domain = "POINT"
            amp__euler_socket_1.description = (
                "Amplitude for applying euler rotations separate to the axis"
            )

            # Socket Speed
            speed_socket_2 = animate_wiggle.interface.new_socket(
                name="Speed", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            speed_socket_2.subtype = "NONE"
            speed_socket_2.default_value = 3.0
            speed_socket_2.min_value = -10000.0
            speed_socket_2.max_value = 10000.0
            speed_socket_2.attribute_domain = "POINT"
            speed_socket_2.description = (
                "Speed at which the wiggle is applied, 3 will repeat 3 times"
            )

            # Socket Animate
            animate_socket_2 = animate_wiggle.interface.new_socket(
                name="Animate", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            animate_socket_2.subtype = "NONE"
            animate_socket_2.default_value = 0.0
            animate_socket_2.min_value = -10000.0
            animate_socket_2.max_value = 10000.0
            animate_socket_2.attribute_domain = "POINT"
            animate_socket_2.description = (
                "Controls the animation of the wiggle, repeating every `1.00`"
            )

            # initialize animate_wiggle nodes
            # node Group Input
            group_input_133 = animate_wiggle.nodes.new("NodeGroupInput")
            group_input_133.name = "Group Input"

            # node Math
            math_35 = animate_wiggle.nodes.new("ShaderNodeMath")
            math_35.label = "x + 1"
            math_35.name = "Math"
            math_35.hide = True
            math_35.operation = "ADD"
            math_35.use_clamp = False
            # Value_001
            math_35.inputs[1].default_value = 1.0

            # node Boolean Math.005
            boolean_math_005_1 = animate_wiggle.nodes.new("FunctionNodeBooleanMath")
            boolean_math_005_1.name = "Boolean Math.005"
            boolean_math_005_1.operation = "AND"

            # node Reroute.001
            reroute_001_26 = animate_wiggle.nodes.new("NodeReroute")
            reroute_001_26.name = "Reroute.001"
            # node Set Position.005
            set_position_005_1 = animate_wiggle.nodes.new("GeometryNodeSetPosition")
            set_position_005_1.name = "Set Position.005"
            # Offset
            set_position_005_1.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Repeat Output
            repeat_output = animate_wiggle.nodes.new("GeometryNodeRepeatOutput")
            repeat_output.name = "Repeat Output"
            repeat_output.active_index = 0
            repeat_output.inspection_index = 0
            repeat_output.repeat_items.clear()
            # Create item "Geometry"
            repeat_output.repeat_items.new("GEOMETRY", "Geometry")
            # Create item "Integer"
            repeat_output.repeat_items.new("INT", "Integer")

            # node Repeat Input
            repeat_input = animate_wiggle.nodes.new("GeometryNodeRepeatInput")
            repeat_input.name = "Repeat Input"
            # node Reroute
            reroute_37 = animate_wiggle.nodes.new("NodeReroute")
            reroute_37.name = "Reroute"
            # node Group Output
            group_output_134 = animate_wiggle.nodes.new("NodeGroupOutput")
            group_output_134.name = "Group Output"
            group_output_134.is_active_output = True

            # node Math.001
            math_001_23 = animate_wiggle.nodes.new("ShaderNodeMath")
            math_001_23.label = "x - 1"
            math_001_23.name = "Math.001"
            math_001_23.hide = True
            math_001_23.operation = "SUBTRACT"
            math_001_23.use_clamp = False
            # Value_001
            math_001_23.inputs[1].default_value = 1.0

            # node Group.017
            group_017 = animate_wiggle.nodes.new("GeometryNodeGroup")
            group_017.name = "Group.017"
            group_017.node_tree = _mn_animate_wiggle_mask_length

            # node Group.010
            group_010_3 = animate_wiggle.nodes.new("GeometryNodeGroup")
            group_010_3.name = "Group.010"
            group_010_3.node_tree = _mn_utils_rotate_res

            # node Group.016
            group_016 = animate_wiggle.nodes.new("GeometryNodeGroup")
            group_016.name = "Group.016"
            group_016.node_tree = _mn_animate_wiggle_mask_length

            # node Group.015
            group_015 = animate_wiggle.nodes.new("GeometryNodeGroup")
            group_015.name = "Group.015"
            group_015.node_tree = _mn_animate_wiggle_mask_res

            # Process zone input Repeat Input
            repeat_input.pair_with_output(repeat_output)
            # Iterations
            repeat_input.inputs[0].default_value = 5
            # Item_1
            repeat_input.inputs[2].default_value = 0

            # Set locations
            group_input_133.location = (-2044.6171875, 63.613792419433594)
            math_35.location = (-1080.0, 520.0)
            boolean_math_005_1.location = (-1180.0, 420.0)
            reroute_001_26.location = (-1200.0, 120.0)
            set_position_005_1.location = (-620.0, 600.0)
            repeat_output.location = (-420.0, 600.0)
            repeat_input.location = (-1840.0, 600.0)
            reroute_37.location = (-1560.0, 260.0)
            group_output_134.location = (-180.0, 600.0)
            math_001_23.location = (-1600.0, 200.0)
            group_017.location = (-1439.4599609375, 220.0)
            group_010_3.location = (-980.0, 280.0)
            group_016.location = (-1442.23583984375, 340.0)
            group_015.location = (-1460.0, 460.0)

            # Set dimensions
            group_input_133.width, group_input_133.height = 140.0, 100.0
            math_35.width, math_35.height = 140.0, 100.0
            boolean_math_005_1.width, boolean_math_005_1.height = 140.0, 100.0
            reroute_001_26.width, reroute_001_26.height = 16.0, 100.0
            set_position_005_1.width, set_position_005_1.height = 140.0, 100.0
            repeat_output.width, repeat_output.height = 140.0, 100.0
            repeat_input.width, repeat_input.height = 140.0, 100.0
            reroute_37.width, reroute_37.height = 16.0, 100.0
            group_output_134.width, group_output_134.height = 140.0, 100.0
            math_001_23.width, math_001_23.height = 140.0, 100.0
            group_017.width, group_017.height = 191.6175537109375, 100.0
            group_010_3.width, group_010_3.height = 223.3516845703125, 100.0
            group_016.width, group_016.height = 194.3934326171875, 100.0
            group_015.width, group_015.height = 212.1575927734375, 100.0

            # initialize animate_wiggle links
            # set_position_005_1.Geometry -> repeat_output.Geometry
            animate_wiggle.links.new(
                set_position_005_1.outputs[0], repeat_output.inputs[0]
            )
            # group_input_133.Atoms -> repeat_input.Geometry
            animate_wiggle.links.new(group_input_133.outputs[0], repeat_input.inputs[1])
            # repeat_input.Integer -> math_35.Value
            animate_wiggle.links.new(repeat_input.outputs[1], math_35.inputs[0])
            # math_35.Value -> repeat_output.Integer
            animate_wiggle.links.new(math_35.outputs[0], repeat_output.inputs[1])
            # repeat_input.Geometry -> set_position_005_1.Geometry
            animate_wiggle.links.new(
                repeat_input.outputs[0], set_position_005_1.inputs[0]
            )
            # boolean_math_005_1.Boolean -> group_010_3.Selection
            animate_wiggle.links.new(
                boolean_math_005_1.outputs[0], group_010_3.inputs[0]
            )
            # group_input_133.Animate -> group_010_3.Animate 0..1
            animate_wiggle.links.new(group_input_133.outputs[7], group_010_3.inputs[8])
            # group_input_133.Speed -> group_010_3.Speed
            animate_wiggle.links.new(group_input_133.outputs[6], group_010_3.inputs[7])
            # group_input_133.Amplitude -> group_010_3.Amplitude
            animate_wiggle.links.new(group_input_133.outputs[3], group_010_3.inputs[4])
            # group_input_133.b_factor -> group_010_3.Scale b_factor
            animate_wiggle.links.new(group_input_133.outputs[2], group_010_3.inputs[3])
            # group_input_133.Amp. Axis -> group_010_3.Amp. Axis
            animate_wiggle.links.new(group_input_133.outputs[4], group_010_3.inputs[5])
            # group_input_133.Amp. Euler -> group_010_3.Amp. Euler
            animate_wiggle.links.new(group_input_133.outputs[5], group_010_3.inputs[6])
            # group_015.Result -> boolean_math_005_1.Boolean
            animate_wiggle.links.new(group_015.outputs[0], boolean_math_005_1.inputs[0])
            # reroute_001_26.Output -> boolean_math_005_1.Boolean
            animate_wiggle.links.new(
                reroute_001_26.outputs[0], boolean_math_005_1.inputs[1]
            )
            # group_010_3.Selection -> set_position_005_1.Selection
            animate_wiggle.links.new(
                group_010_3.outputs[0], set_position_005_1.inputs[1]
            )
            # group_010_3.Position -> set_position_005_1.Position
            animate_wiggle.links.new(
                group_010_3.outputs[1], set_position_005_1.inputs[2]
            )
            # group_016.Result -> group_010_3.atom_name rotation
            animate_wiggle.links.new(group_016.outputs[0], group_010_3.inputs[1])
            # math_001_23.Value -> group_017.A
            animate_wiggle.links.new(math_001_23.outputs[0], group_017.inputs[0])
            # reroute_37.Output -> group_016.A
            animate_wiggle.links.new(reroute_37.outputs[0], group_016.inputs[0])
            # reroute_37.Output -> group_015.A
            animate_wiggle.links.new(reroute_37.outputs[0], group_015.inputs[0])
            # repeat_output.Geometry -> group_output_134.Atoms
            animate_wiggle.links.new(
                repeat_output.outputs[0], group_output_134.inputs[0]
            )
            # group_017.Result -> group_010_3.atom_name axis
            animate_wiggle.links.new(group_017.outputs[0], group_010_3.inputs[2])
            # repeat_input.Integer -> reroute_37.Input
            animate_wiggle.links.new(repeat_input.outputs[1], reroute_37.inputs[0])
            # reroute_37.Output -> math_001_23.Value
            animate_wiggle.links.new(reroute_37.outputs[0], math_001_23.inputs[0])
            # group_input_133.Selection -> reroute_001_26.Input
            animate_wiggle.links.new(
                group_input_133.outputs[1], reroute_001_26.inputs[0]
            )
            return animate_wiggle

        animate_wiggle = animate_wiggle_node_group()

        # initialize ensemble_instance node group
        def ensemble_instance_node_group():
            ensemble_instance = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Ensemble Instance"
            )

            ensemble_instance.color_tag = "GEOMETRY"
            ensemble_instance.description = ""

            ensemble_instance.is_modifier = True

            # ensemble_instance interface
            # Socket Instances
            instances_socket_4 = ensemble_instance.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_4.attribute_domain = "POINT"

            # Socket Points
            points_socket = ensemble_instance.interface.new_socket(
                name="Points", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            points_socket.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_53 = ensemble_instance.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_53.attribute_domain = "POINT"
            selection_socket_53.hide_value = True
            selection_socket_53.description = "Selection of atoms to apply this node to"

            # Socket Instances
            instances_socket_5 = ensemble_instance.interface.new_socket(
                name="Instances", in_out="INPUT", socket_type="NodeSocketCollection"
            )
            instances_socket_5.attribute_domain = "POINT"

            # Socket Fraction
            fraction_socket = ensemble_instance.interface.new_socket(
                name="Fraction", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            fraction_socket.subtype = "FACTOR"
            fraction_socket.default_value = 1.0
            fraction_socket.min_value = 0.0
            fraction_socket.max_value = 1.0
            fraction_socket.attribute_domain = "POINT"

            # Socket As Points
            as_points_socket = ensemble_instance.interface.new_socket(
                name="As Points", in_out="INPUT", socket_type="NodeSocketBool"
            )
            as_points_socket.attribute_domain = "POINT"

            # Panel Point
            point_panel = ensemble_instance.interface.new_panel("Point")
            point_panel.description = "Points"
            # Socket Point Radius
            point_radius_socket = ensemble_instance.interface.new_socket(
                name="Point Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=point_panel,
            )
            point_radius_socket.subtype = "DISTANCE"
            point_radius_socket.default_value = 0.10000000149011612
            point_radius_socket.min_value = 0.0
            point_radius_socket.max_value = 3.4028234663852886e38
            point_radius_socket.attribute_domain = "POINT"

            # Socket Point Material
            point_material_socket = ensemble_instance.interface.new_socket(
                name="Point Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=point_panel,
            )
            point_material_socket.attribute_domain = "POINT"

            # initialize ensemble_instance nodes
            # node Instance on Points
            instance_on_points_7 = ensemble_instance.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_7.name = "Instance on Points"
            # Pick Instance
            instance_on_points_7.inputs[3].default_value = True
            # Scale
            instance_on_points_7.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Random Value
            random_value_4 = ensemble_instance.nodes.new("FunctionNodeRandomValue")
            random_value_4.name = "Random Value"
            random_value_4.data_type = "BOOLEAN"
            # ID
            random_value_4.inputs[7].default_value = 0
            # Seed
            random_value_4.inputs[8].default_value = 0

            # node Boolean Math
            boolean_math_30 = ensemble_instance.nodes.new("FunctionNodeBooleanMath")
            boolean_math_30.name = "Boolean Math"
            boolean_math_30.operation = "AND"

            # node Separate Geometry
            separate_geometry_18 = ensemble_instance.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_18.name = "Separate Geometry"
            separate_geometry_18.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001_11 = ensemble_instance.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_11.name = "Separate Geometry.001"
            separate_geometry_001_11.domain = "POINT"

            # node Mesh to Points
            mesh_to_points_4 = ensemble_instance.nodes.new("GeometryNodeMeshToPoints")
            mesh_to_points_4.name = "Mesh to Points"
            mesh_to_points_4.mode = "VERTICES"
            # Selection
            mesh_to_points_4.inputs[1].default_value = True
            # Position
            mesh_to_points_4.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Material
            set_material_9 = ensemble_instance.nodes.new("GeometryNodeSetMaterial")
            set_material_9.name = "Set Material"
            # Selection
            set_material_9.inputs[1].default_value = True

            # node Join Geometry
            join_geometry_5 = ensemble_instance.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_5.name = "Join Geometry"

            # node Group Output
            group_output_135 = ensemble_instance.nodes.new("NodeGroupOutput")
            group_output_135.name = "Group Output"
            group_output_135.is_active_output = True

            # node Group Input
            group_input_134 = ensemble_instance.nodes.new("NodeGroupInput")
            group_input_134.name = "Group Input"

            # node Collection Info
            collection_info_3 = ensemble_instance.nodes.new(
                "GeometryNodeCollectionInfo"
            )
            collection_info_3.name = "Collection Info"
            collection_info_3.transform_space = "ORIGINAL"
            # Separate Children
            collection_info_3.inputs[1].default_value = True
            # Reset Children
            collection_info_3.inputs[2].default_value = False

            # node Group Input.001
            group_input_001_21 = ensemble_instance.nodes.new("NodeGroupInput")
            group_input_001_21.name = "Group Input.001"
            group_input_001_21.outputs[0].hide = True
            group_input_001_21.outputs[1].hide = True
            group_input_001_21.outputs[2].hide = True
            group_input_001_21.outputs[3].hide = True
            group_input_001_21.outputs[7].hide = True

            # node Named Attribute
            named_attribute_35 = ensemble_instance.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_35.name = "Named Attribute"
            named_attribute_35.data_type = "INT"
            # Name
            named_attribute_35.inputs[0].default_value = "chain_id"

            # node Named Attribute.001
            named_attribute_001_20 = ensemble_instance.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_20.name = "Named Attribute.001"
            named_attribute_001_20.data_type = "QUATERNION"
            # Name
            named_attribute_001_20.inputs[0].default_value = "rotation"

            # Set locations
            instance_on_points_7.location = (78.4000015258789, 352.79998779296875)
            random_value_4.location = (-420.0, 180.0)
            boolean_math_30.location = (-420.0, 320.0)
            separate_geometry_18.location = (-420.0, 480.0)
            separate_geometry_001_11.location = (-212.1615447998047, 464.0)
            mesh_to_points_4.location = (77.33333587646484, 541.3333129882812)
            set_material_9.location = (251.3333282470703, 541.3333129882812)
            join_geometry_5.location = (444.6666564941406, 541.3333129882812)
            group_output_135.location = (618.6666870117188, 541.3333129882812)
            group_input_134.location = (-896.1963500976562, 358.5467529296875)
            collection_info_3.location = (-200.0, 240.0)
            group_input_001_21.location = (-212.6666717529297, 580.0)
            named_attribute_35.location = (-200.0, 80.0)
            named_attribute_001_20.location = (-200.0, -60.0)

            # Set dimensions
            instance_on_points_7.width, instance_on_points_7.height = 140.0, 100.0
            random_value_4.width, random_value_4.height = 140.0, 100.0
            boolean_math_30.width, boolean_math_30.height = 140.0, 100.0
            separate_geometry_18.width, separate_geometry_18.height = 140.0, 100.0
            separate_geometry_001_11.width, separate_geometry_001_11.height = (
                140.0,
                100.0,
            )
            mesh_to_points_4.width, mesh_to_points_4.height = 140.0, 100.0
            set_material_9.width, set_material_9.height = 140.0, 100.0
            join_geometry_5.width, join_geometry_5.height = 140.0, 100.0
            group_output_135.width, group_output_135.height = 140.0, 100.0
            group_input_134.width, group_input_134.height = 140.0, 100.0
            collection_info_3.width, collection_info_3.height = 140.0, 100.0
            group_input_001_21.width, group_input_001_21.height = 140.0, 100.0
            named_attribute_35.width, named_attribute_35.height = 140.0, 100.0
            named_attribute_001_20.width, named_attribute_001_20.height = 140.0, 100.0

            # initialize ensemble_instance links
            # collection_info_3.Instances -> instance_on_points_7.Instance
            ensemble_instance.links.new(
                collection_info_3.outputs[0], instance_on_points_7.inputs[2]
            )
            # named_attribute_35.Attribute -> instance_on_points_7.Instance Index
            ensemble_instance.links.new(
                named_attribute_35.outputs[0], instance_on_points_7.inputs[4]
            )
            # group_input_134.Selection -> boolean_math_30.Boolean
            ensemble_instance.links.new(
                group_input_134.outputs[1], boolean_math_30.inputs[0]
            )
            # random_value_4.Value -> boolean_math_30.Boolean
            ensemble_instance.links.new(
                random_value_4.outputs[3], boolean_math_30.inputs[1]
            )
            # group_input_134.Fraction -> random_value_4.Probability
            ensemble_instance.links.new(
                group_input_134.outputs[3], random_value_4.inputs[6]
            )
            # boolean_math_30.Boolean -> instance_on_points_7.Selection
            ensemble_instance.links.new(
                boolean_math_30.outputs[0], instance_on_points_7.inputs[1]
            )
            # group_input_134.Instances -> collection_info_3.Collection
            ensemble_instance.links.new(
                group_input_134.outputs[2], collection_info_3.inputs[0]
            )
            # group_input_134.Points -> separate_geometry_18.Geometry
            ensemble_instance.links.new(
                group_input_134.outputs[0], separate_geometry_18.inputs[0]
            )
            # boolean_math_30.Boolean -> separate_geometry_18.Selection
            ensemble_instance.links.new(
                boolean_math_30.outputs[0], separate_geometry_18.inputs[1]
            )
            # separate_geometry_18.Selection -> separate_geometry_001_11.Geometry
            ensemble_instance.links.new(
                separate_geometry_18.outputs[0], separate_geometry_001_11.inputs[0]
            )
            # separate_geometry_001_11.Inverted -> instance_on_points_7.Points
            ensemble_instance.links.new(
                separate_geometry_001_11.outputs[1], instance_on_points_7.inputs[0]
            )
            # separate_geometry_001_11.Selection -> mesh_to_points_4.Mesh
            ensemble_instance.links.new(
                separate_geometry_001_11.outputs[0], mesh_to_points_4.inputs[0]
            )
            # mesh_to_points_4.Points -> set_material_9.Geometry
            ensemble_instance.links.new(
                mesh_to_points_4.outputs[0], set_material_9.inputs[0]
            )
            # instance_on_points_7.Instances -> join_geometry_5.Geometry
            ensemble_instance.links.new(
                instance_on_points_7.outputs[0], join_geometry_5.inputs[0]
            )
            # join_geometry_5.Geometry -> group_output_135.Instances
            ensemble_instance.links.new(
                join_geometry_5.outputs[0], group_output_135.inputs[0]
            )
            # group_input_001_21.As Points -> separate_geometry_001_11.Selection
            ensemble_instance.links.new(
                group_input_001_21.outputs[4], separate_geometry_001_11.inputs[1]
            )
            # group_input_001_21.Point Radius -> mesh_to_points_4.Radius
            ensemble_instance.links.new(
                group_input_001_21.outputs[5], mesh_to_points_4.inputs[3]
            )
            # group_input_001_21.Point Material -> set_material_9.Material
            ensemble_instance.links.new(
                group_input_001_21.outputs[6], set_material_9.inputs[2]
            )
            # named_attribute_001_20.Attribute -> instance_on_points_7.Rotation
            ensemble_instance.links.new(
                named_attribute_001_20.outputs[0], instance_on_points_7.inputs[5]
            )
            # set_material_9.Geometry -> join_geometry_5.Geometry
            ensemble_instance.links.new(
                set_material_9.outputs[0], join_geometry_5.inputs[0]
            )
            return ensemble_instance

        ensemble_instance = ensemble_instance_node_group()

        # initialize select_res_id_range node group
        def select_res_id_range_node_group():
            select_res_id_range = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Res ID Range"
            )

            select_res_id_range.color_tag = "INPUT"
            select_res_id_range.description = ""

            # select_res_id_range interface
            # Socket Selection
            selection_socket_54 = select_res_id_range.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_54.attribute_domain = "POINT"
            selection_socket_54.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_25 = select_res_id_range.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_25.attribute_domain = "POINT"
            inverted_socket_25.description = "The inverse of the calculated selection"

            # Socket And
            and_socket_19 = select_res_id_range.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_19.attribute_domain = "POINT"
            and_socket_19.hide_value = True

            # Socket Or
            or_socket_18 = select_res_id_range.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_18.attribute_domain = "POINT"
            or_socket_18.hide_value = True

            # Panel Res ID
            res_id_panel = select_res_id_range.interface.new_panel("Res ID")
            # Socket Min
            min_socket_1 = select_res_id_range.interface.new_socket(
                name="Min",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=res_id_panel,
            )
            min_socket_1.subtype = "NONE"
            min_socket_1.default_value = 10
            min_socket_1.min_value = 0
            min_socket_1.max_value = 2147483647
            min_socket_1.attribute_domain = "POINT"
            min_socket_1.description = "Minimum of a `res_id` range selection"

            # Socket Max
            max_socket_1 = select_res_id_range.interface.new_socket(
                name="Max",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=res_id_panel,
            )
            max_socket_1.subtype = "NONE"
            max_socket_1.default_value = 100
            max_socket_1.min_value = 1
            max_socket_1.max_value = 2147483647
            max_socket_1.attribute_domain = "POINT"
            max_socket_1.description = "Maximum of a `res_id` range selection"

            # initialize select_res_id_range nodes
            # node Named Attribute
            named_attribute_36 = select_res_id_range.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_36.name = "Named Attribute"
            named_attribute_36.data_type = "INT"
            # Name
            named_attribute_36.inputs[0].default_value = "res_id"

            # node Boolean Math.001
            boolean_math_001_27 = select_res_id_range.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_27.name = "Boolean Math.001"
            boolean_math_001_27.operation = "AND"

            # node Compare
            compare_39 = select_res_id_range.nodes.new("FunctionNodeCompare")
            compare_39.name = "Compare"
            compare_39.data_type = "INT"
            compare_39.mode = "ELEMENT"
            compare_39.operation = "GREATER_EQUAL"

            # node Compare.001
            compare_001_24 = select_res_id_range.nodes.new("FunctionNodeCompare")
            compare_001_24.name = "Compare.001"
            compare_001_24.data_type = "INT"
            compare_001_24.mode = "ELEMENT"
            compare_001_24.operation = "LESS_EQUAL"

            # node Group Input
            group_input_135 = select_res_id_range.nodes.new("NodeGroupInput")
            group_input_135.name = "Group Input"
            group_input_135.outputs[0].hide = True

            # node Boolean Math
            boolean_math_31 = select_res_id_range.nodes.new("FunctionNodeBooleanMath")
            boolean_math_31.name = "Boolean Math"
            boolean_math_31.operation = "NOT"

            # node Group Output
            group_output_136 = select_res_id_range.nodes.new("NodeGroupOutput")
            group_output_136.name = "Group Output"
            group_output_136.is_active_output = True

            # node Reroute
            reroute_38 = select_res_id_range.nodes.new("NodeReroute")
            reroute_38.name = "Reroute"
            # node Boolean Math.002
            boolean_math_002_17 = select_res_id_range.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_17.name = "Boolean Math.002"
            boolean_math_002_17.operation = "AND"

            # node Group Input.001
            group_input_001_22 = select_res_id_range.nodes.new("NodeGroupInput")
            group_input_001_22.name = "Group Input.001"
            group_input_001_22.outputs[2].hide = True
            group_input_001_22.outputs[3].hide = True
            group_input_001_22.outputs[4].hide = True

            # node Boolean Math.003
            boolean_math_003_6 = select_res_id_range.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_6.name = "Boolean Math.003"
            boolean_math_003_6.operation = "OR"

            # Set locations
            named_attribute_36.location = (-607.6740112304688, 0.0)
            boolean_math_001_27.location = (-287.6739807128906, 0.0)
            compare_39.location = (-447.6739807128906, 0.0)
            compare_001_24.location = (-447.6739807128906, -160.0)
            group_input_135.location = (-667.6740112304688, -120.0)
            boolean_math_31.location = (307.6740417480469, -100.0)
            group_output_136.location = (467.67401123046875, -20.0)
            reroute_38.location = (248.0, -69.88695526123047)
            boolean_math_002_17.location = (-120.0, 0.0)
            group_input_001_22.location = (-280.0, 100.0)
            boolean_math_003_6.location = (40.0, 0.0)

            # Set dimensions
            named_attribute_36.width, named_attribute_36.height = 140.0, 100.0
            boolean_math_001_27.width, boolean_math_001_27.height = 140.0, 100.0
            compare_39.width, compare_39.height = 140.0, 100.0
            compare_001_24.width, compare_001_24.height = 140.0, 100.0
            group_input_135.width, group_input_135.height = 140.0, 100.0
            boolean_math_31.width, boolean_math_31.height = 140.0, 100.0
            group_output_136.width, group_output_136.height = 140.0, 100.0
            reroute_38.width, reroute_38.height = 16.0, 100.0
            boolean_math_002_17.width, boolean_math_002_17.height = 140.0, 100.0
            group_input_001_22.width, group_input_001_22.height = 140.0, 100.0
            boolean_math_003_6.width, boolean_math_003_6.height = 140.0, 100.0

            # initialize select_res_id_range links
            # named_attribute_36.Attribute -> compare_39.A
            select_res_id_range.links.new(
                named_attribute_36.outputs[0], compare_39.inputs[2]
            )
            # reroute_38.Output -> boolean_math_31.Boolean
            select_res_id_range.links.new(
                reroute_38.outputs[0], boolean_math_31.inputs[0]
            )
            # group_input_135.Min -> compare_39.B
            select_res_id_range.links.new(
                group_input_135.outputs[2], compare_39.inputs[3]
            )
            # reroute_38.Output -> group_output_136.Selection
            select_res_id_range.links.new(
                reroute_38.outputs[0], group_output_136.inputs[0]
            )
            # boolean_math_31.Boolean -> group_output_136.Inverted
            select_res_id_range.links.new(
                boolean_math_31.outputs[0], group_output_136.inputs[1]
            )
            # compare_39.Result -> boolean_math_001_27.Boolean
            select_res_id_range.links.new(
                compare_39.outputs[0], boolean_math_001_27.inputs[0]
            )
            # named_attribute_36.Attribute -> compare_001_24.A
            select_res_id_range.links.new(
                named_attribute_36.outputs[0], compare_001_24.inputs[2]
            )
            # group_input_135.Max -> compare_001_24.B
            select_res_id_range.links.new(
                group_input_135.outputs[3], compare_001_24.inputs[3]
            )
            # compare_001_24.Result -> boolean_math_001_27.Boolean
            select_res_id_range.links.new(
                compare_001_24.outputs[0], boolean_math_001_27.inputs[1]
            )
            # boolean_math_003_6.Boolean -> reroute_38.Input
            select_res_id_range.links.new(
                boolean_math_003_6.outputs[0], reroute_38.inputs[0]
            )
            # boolean_math_001_27.Boolean -> boolean_math_002_17.Boolean
            select_res_id_range.links.new(
                boolean_math_001_27.outputs[0], boolean_math_002_17.inputs[1]
            )
            # group_input_001_22.And -> boolean_math_002_17.Boolean
            select_res_id_range.links.new(
                group_input_001_22.outputs[0], boolean_math_002_17.inputs[0]
            )
            # boolean_math_002_17.Boolean -> boolean_math_003_6.Boolean
            select_res_id_range.links.new(
                boolean_math_002_17.outputs[0], boolean_math_003_6.inputs[0]
            )
            # group_input_001_22.Or -> boolean_math_003_6.Boolean
            select_res_id_range.links.new(
                group_input_001_22.outputs[1], boolean_math_003_6.inputs[1]
            )
            return select_res_id_range

        select_res_id_range = select_res_id_range_node_group()

        # initialize _guide_rotation node group
        def _guide_rotation_node_group():
            _guide_rotation = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".guide_rotation"
            )

            _guide_rotation.color_tag = "NONE"
            _guide_rotation.description = ""

            # _guide_rotation interface
            # Socket Rotation
            rotation_socket_5 = _guide_rotation.interface.new_socket(
                name="Rotation", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            rotation_socket_5.subtype = "EULER"
            rotation_socket_5.default_value = (0.0, 0.0, 0.0)
            rotation_socket_5.min_value = -3.4028234663852886e38
            rotation_socket_5.max_value = 3.4028234663852886e38
            rotation_socket_5.attribute_domain = "POINT"

            # Socket Angle
            angle_socket_6 = _guide_rotation.interface.new_socket(
                name="Angle", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_6.subtype = "ANGLE"
            angle_socket_6.default_value = 0.0
            angle_socket_6.min_value = -3.4028234663852886e38
            angle_socket_6.max_value = 3.4028234663852886e38
            angle_socket_6.attribute_domain = "POINT"

            # initialize _guide_rotation nodes
            # node Align Euler to Vector.001
            align_euler_to_vector_001_3 = _guide_rotation.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_001_3.name = "Align Euler to Vector.001"
            align_euler_to_vector_001_3.axis = "X"
            align_euler_to_vector_001_3.pivot_axis = "Z"
            # Factor
            align_euler_to_vector_001_3.inputs[1].default_value = 1.0

            # node Rotate Euler
            rotate_euler_1 = _guide_rotation.nodes.new("FunctionNodeRotateEuler")
            rotate_euler_1.name = "Rotate Euler"
            rotate_euler_1.rotation_type = "AXIS_ANGLE"
            rotate_euler_1.space = "OBJECT"

            # node Align Euler to Vector
            align_euler_to_vector_3 = _guide_rotation.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_3.name = "Align Euler to Vector"
            align_euler_to_vector_3.axis = "Z"
            align_euler_to_vector_3.pivot_axis = "AUTO"
            # Rotation
            align_euler_to_vector_3.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Factor
            align_euler_to_vector_3.inputs[1].default_value = 1.0

            # node Group Output
            group_output_137 = _guide_rotation.nodes.new("NodeGroupOutput")
            group_output_137.name = "Group Output"
            group_output_137.is_active_output = True

            # node Reroute
            reroute_39 = _guide_rotation.nodes.new("NodeReroute")
            reroute_39.name = "Reroute"
            # node Named Attribute.001
            named_attribute_001_21 = _guide_rotation.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_21.name = "Named Attribute.001"
            named_attribute_001_21.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_21.inputs[0].default_value = "guide_X"

            # node Named Attribute
            named_attribute_37 = _guide_rotation.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_37.name = "Named Attribute"
            named_attribute_37.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_37.inputs[0].default_value = "guide_Z"

            # node Group Input.001
            group_input_001_23 = _guide_rotation.nodes.new("NodeGroupInput")
            group_input_001_23.name = "Group Input.001"

            # Set locations
            align_euler_to_vector_001_3.location = (
                177.053955078125,
                186.16505432128906,
            )
            rotate_euler_1.location = (356.9603271484375, 191.41680908203125)
            align_euler_to_vector_3.location = (20.0, 180.0)
            group_output_137.location = (540.0, 180.0)
            reroute_39.location = (140.0, -40.0)
            named_attribute_001_21.location = (-180.0, 40.0)
            named_attribute_37.location = (-180.0, 180.0)
            group_input_001_23.location = (180.0, -40.0)

            # Set dimensions
            align_euler_to_vector_001_3.width, align_euler_to_vector_001_3.height = (
                140.0,
                100.0,
            )
            rotate_euler_1.width, rotate_euler_1.height = 140.0, 100.0
            align_euler_to_vector_3.width, align_euler_to_vector_3.height = 140.0, 100.0
            group_output_137.width, group_output_137.height = 140.0, 100.0
            reroute_39.width, reroute_39.height = 16.0, 100.0
            named_attribute_001_21.width, named_attribute_001_21.height = (
                145.799072265625,
                100.0,
            )
            named_attribute_37.width, named_attribute_37.height = (
                146.58917236328125,
                100.0,
            )
            group_input_001_23.width, group_input_001_23.height = 140.0, 100.0

            # initialize _guide_rotation links
            # reroute_39.Output -> align_euler_to_vector_001_3.Vector
            _guide_rotation.links.new(
                reroute_39.outputs[0], align_euler_to_vector_001_3.inputs[2]
            )
            # align_euler_to_vector_3.Rotation -> align_euler_to_vector_001_3.Rotation
            _guide_rotation.links.new(
                align_euler_to_vector_3.outputs[0],
                align_euler_to_vector_001_3.inputs[0],
            )
            # rotate_euler_1.Rotation -> group_output_137.Rotation
            _guide_rotation.links.new(
                rotate_euler_1.outputs[0], group_output_137.inputs[0]
            )
            # align_euler_to_vector_001_3.Rotation -> rotate_euler_1.Rotation
            _guide_rotation.links.new(
                align_euler_to_vector_001_3.outputs[0], rotate_euler_1.inputs[0]
            )
            # group_input_001_23.Angle -> rotate_euler_1.Angle
            _guide_rotation.links.new(
                group_input_001_23.outputs[0], rotate_euler_1.inputs[3]
            )
            # named_attribute_37.Attribute -> align_euler_to_vector_3.Vector
            _guide_rotation.links.new(
                named_attribute_37.outputs[0], align_euler_to_vector_3.inputs[2]
            )
            # reroute_39.Output -> rotate_euler_1.Axis
            _guide_rotation.links.new(reroute_39.outputs[0], rotate_euler_1.inputs[2])
            # named_attribute_001_21.Attribute -> reroute_39.Input
            _guide_rotation.links.new(
                named_attribute_001_21.outputs[0], reroute_39.inputs[0]
            )
            return _guide_rotation

        _guide_rotation = _guide_rotation_node_group()

        # initialize _debug_arrows node group
        def _debug_arrows_node_group():
            _debug_arrows = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".DEBUG_arrows"
            )

            _debug_arrows.color_tag = "NONE"
            _debug_arrows.description = ""

            _debug_arrows.is_modifier = True

            # _debug_arrows interface
            # Socket Instances
            instances_socket_6 = _debug_arrows.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_6.attribute_domain = "POINT"

            # Socket Points
            points_socket_1 = _debug_arrows.interface.new_socket(
                name="Points", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            points_socket_1.attribute_domain = "POINT"

            # Socket Position
            position_socket_8 = _debug_arrows.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket_8.subtype = "NONE"
            position_socket_8.default_value = (0.0, 0.0, 0.0)
            position_socket_8.min_value = -3.4028234663852886e38
            position_socket_8.max_value = 3.4028234663852886e38
            position_socket_8.attribute_domain = "POINT"
            position_socket_8.hide_value = True

            # Socket Offset
            offset_socket_11 = _debug_arrows.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketVector"
            )
            offset_socket_11.subtype = "TRANSLATION"
            offset_socket_11.default_value = (0.0, 0.0, 0.0)
            offset_socket_11.min_value = -3.4028234663852886e38
            offset_socket_11.max_value = 3.4028234663852886e38
            offset_socket_11.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_6 = _debug_arrows.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketVector"
            )
            rotation_socket_6.subtype = "EULER"
            rotation_socket_6.default_value = (0.0, 0.0, 0.0)
            rotation_socket_6.min_value = -3.4028234663852886e38
            rotation_socket_6.max_value = 3.4028234663852886e38
            rotation_socket_6.attribute_domain = "POINT"

            # Socket Scale
            scale_socket_4 = _debug_arrows.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketVector"
            )
            scale_socket_4.subtype = "XYZ"
            scale_socket_4.default_value = (
                0.33000001311302185,
                0.36000001430511475,
                0.75,
            )
            scale_socket_4.min_value = -3.4028234663852886e38
            scale_socket_4.max_value = 3.4028234663852886e38
            scale_socket_4.attribute_domain = "POINT"

            # initialize _debug_arrows nodes
            # node Group Output
            group_output_138 = _debug_arrows.nodes.new("NodeGroupOutput")
            group_output_138.name = "Group Output"
            group_output_138.is_active_output = True

            # node Instance on Points.002
            instance_on_points_002 = _debug_arrows.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_002.name = "Instance on Points.002"
            # Selection
            instance_on_points_002.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_002.inputs[3].default_value = False
            # Instance Index
            instance_on_points_002.inputs[4].default_value = 0

            # node Reroute.003
            reroute_003_15 = _debug_arrows.nodes.new("NodeReroute")
            reroute_003_15.name = "Reroute.003"
            # node Reroute.009
            reroute_009_6 = _debug_arrows.nodes.new("NodeReroute")
            reroute_009_6.name = "Reroute.009"
            # node Join Geometry.001
            join_geometry_001_3 = _debug_arrows.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_001_3.name = "Join Geometry.001"
            join_geometry_001_3.hide = True

            # node Transform Geometry.002
            transform_geometry_002_1 = _debug_arrows.nodes.new("GeometryNodeTransform")
            transform_geometry_002_1.name = "Transform Geometry.002"
            transform_geometry_002_1.mode = "COMPONENTS"
            # Rotation
            transform_geometry_002_1.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_002_1.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Transform Geometry.001
            transform_geometry_001_1 = _debug_arrows.nodes.new("GeometryNodeTransform")
            transform_geometry_001_1.name = "Transform Geometry.001"
            transform_geometry_001_1.mode = "COMPONENTS"
            # Translation
            transform_geometry_001_1.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_001_1.inputs[2].default_value = (
                0.0,
                1.5707963705062866,
                0.0,
            )
            # Scale
            transform_geometry_001_1.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Transform Geometry.003
            transform_geometry_003 = _debug_arrows.nodes.new("GeometryNodeTransform")
            transform_geometry_003.name = "Transform Geometry.003"
            transform_geometry_003.mode = "COMPONENTS"
            # Translation
            transform_geometry_003.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_003.inputs[2].default_value = (
                1.5707963705062866,
                0.0,
                0.0,
            )
            # Scale
            transform_geometry_003.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Vector Math.008
            vector_math_008_2 = _debug_arrows.nodes.new("ShaderNodeVectorMath")
            vector_math_008_2.name = "Vector Math.008"
            vector_math_008_2.operation = "SCALE"
            # Vector
            vector_math_008_2.inputs[0].default_value = (0.0, 0.0, 10.300000190734863)
            # Scale
            vector_math_008_2.inputs[3].default_value = 0.0010000000474974513

            # node Cone
            cone = _debug_arrows.nodes.new("GeometryNodeMeshCone")
            cone.name = "Cone"
            cone.fill_type = "NGON"
            # Vertices
            cone.inputs[0].default_value = 6
            # Side Segments
            cone.inputs[1].default_value = 1
            # Fill Segments
            cone.inputs[2].default_value = 1
            # Radius Top
            cone.inputs[3].default_value = 0.0
            # Radius Bottom
            cone.inputs[4].default_value = 0.010000022128224373

            # node Math.003
            math_003_12 = _debug_arrows.nodes.new("ShaderNodeMath")
            math_003_12.name = "Math.003"
            math_003_12.operation = "DIVIDE"
            math_003_12.use_clamp = False
            # Value
            math_003_12.inputs[0].default_value = 49.05999755859375
            # Value_001
            math_003_12.inputs[1].default_value = 1000.0

            # node Store Named Attribute.004
            store_named_attribute_004_4 = _debug_arrows.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_4.name = "Store Named Attribute.004"
            store_named_attribute_004_4.data_type = "FLOAT_COLOR"
            store_named_attribute_004_4.domain = "POINT"
            # Selection
            store_named_attribute_004_4.inputs[1].default_value = True
            # Name
            store_named_attribute_004_4.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_004_4.inputs[3].default_value = (
                0.4605487287044525,
                0.05103481188416481,
                0.07814221829175949,
                0.0,
            )

            # node Store Named Attribute
            store_named_attribute_15 = _debug_arrows.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_15.name = "Store Named Attribute"
            store_named_attribute_15.data_type = "FLOAT_COLOR"
            store_named_attribute_15.domain = "POINT"
            # Selection
            store_named_attribute_15.inputs[1].default_value = True
            # Name
            store_named_attribute_15.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_15.inputs[3].default_value = (
                0.059955447912216187,
                0.21724288165569305,
                0.4605487287044525,
                0.0,
            )

            # node Store Named Attribute.005
            store_named_attribute_005_3 = _debug_arrows.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005_3.name = "Store Named Attribute.005"
            store_named_attribute_005_3.data_type = "FLOAT_COLOR"
            store_named_attribute_005_3.domain = "POINT"
            # Selection
            store_named_attribute_005_3.inputs[1].default_value = True
            # Name
            store_named_attribute_005_3.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_005_3.inputs[3].default_value = (
                0.21280108392238617,
                0.4605487287044525,
                0.12887145578861237,
                0.0,
            )

            # node Set Position
            set_position_12 = _debug_arrows.nodes.new("GeometryNodeSetPosition")
            set_position_12.name = "Set Position"
            # Selection
            set_position_12.inputs[1].default_value = True

            # node Attribute Statistic
            attribute_statistic = _debug_arrows.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic.name = "Attribute Statistic"
            attribute_statistic.data_type = "FLOAT_VECTOR"
            attribute_statistic.domain = "POINT"
            # Selection
            attribute_statistic.inputs[1].default_value = True

            # node Compare
            compare_40 = _debug_arrows.nodes.new("FunctionNodeCompare")
            compare_40.name = "Compare"
            compare_40.data_type = "VECTOR"
            compare_40.mode = "ELEMENT"
            compare_40.operation = "NOT_EQUAL"
            # B_VEC3
            compare_40.inputs[5].default_value = (0.0, 0.0, 0.0)
            # Epsilon
            compare_40.inputs[12].default_value = 9.999999747378752e-05

            # node Position
            position_14 = _debug_arrows.nodes.new("GeometryNodeInputPosition")
            position_14.name = "Position"

            # node Switch
            switch_35 = _debug_arrows.nodes.new("GeometryNodeSwitch")
            switch_35.name = "Switch"
            switch_35.input_type = "VECTOR"

            # node Group Input
            group_input_136 = _debug_arrows.nodes.new("NodeGroupInput")
            group_input_136.name = "Group Input"

            # node Reroute
            reroute_40 = _debug_arrows.nodes.new("NodeReroute")
            reroute_40.name = "Reroute"

            # Set locations
            group_output_138.location = (1428.90478515625, 0.0)
            instance_on_points_002.location = (988.90478515625, 429.669189453125)
            reroute_003_15.location = (-276.560546875, 27.071929931640625)
            reroute_009_6.location = (-209.260498046875, 36.829681396484375)
            join_geometry_001_3.location = (208.553955078125, 85.46240234375)
            transform_geometry_002_1.location = (-504.560546875, -72.58740234375)
            transform_geometry_001_1.location = (-218.82080078125, 19.31646728515625)
            transform_geometry_003.location = (-224.560546875, -334.53759765625)
            vector_math_008_2.location = (-505.0859375, -418.4356689453125)
            cone.location = (-724.560546875, -214.53759765625)
            math_003_12.location = (-900.904541015625, -429.669189453125)
            store_named_attribute_004_4.location = (-20.0, -100.0)
            store_named_attribute_15.location = (-20.0, 120.0)
            store_named_attribute_005_3.location = (-20.0, -320.0)
            set_position_12.location = (578.2709350585938, 400.1163024902344)
            attribute_statistic.location = (-35.687705993652344, 679.48095703125)
            compare_40.location = (128.0, 680.0)
            position_14.location = (40.0, 420.0)
            switch_35.location = (308.0, 460.0)
            group_input_136.location = (-640.0, 320.0)
            reroute_40.location = (-192.0, 380.0)

            # Set dimensions
            group_output_138.width, group_output_138.height = 140.0, 100.0
            instance_on_points_002.width, instance_on_points_002.height = 140.0, 100.0
            reroute_003_15.width, reroute_003_15.height = 16.0, 100.0
            reroute_009_6.width, reroute_009_6.height = 16.0, 100.0
            join_geometry_001_3.width, join_geometry_001_3.height = 140.0, 100.0
            transform_geometry_002_1.width, transform_geometry_002_1.height = (
                140.0,
                100.0,
            )
            transform_geometry_001_1.width, transform_geometry_001_1.height = (
                140.0,
                100.0,
            )
            transform_geometry_003.width, transform_geometry_003.height = 140.0, 100.0
            vector_math_008_2.width, vector_math_008_2.height = 140.0, 100.0
            cone.width, cone.height = 140.0, 100.0
            math_003_12.width, math_003_12.height = 140.0, 100.0
            store_named_attribute_004_4.width, store_named_attribute_004_4.height = (
                140.0,
                100.0,
            )
            store_named_attribute_15.width, store_named_attribute_15.height = (
                140.0,
                100.0,
            )
            store_named_attribute_005_3.width, store_named_attribute_005_3.height = (
                140.0,
                100.0,
            )
            set_position_12.width, set_position_12.height = 140.0, 100.0
            attribute_statistic.width, attribute_statistic.height = 140.0, 100.0
            compare_40.width, compare_40.height = 140.0, 100.0
            position_14.width, position_14.height = 140.0, 100.0
            switch_35.width, switch_35.height = 140.0, 100.0
            group_input_136.width, group_input_136.height = 140.0, 100.0
            reroute_40.width, reroute_40.height = 16.0, 100.0

            # initialize _debug_arrows links
            # reroute_009_6.Output -> store_named_attribute_15.Geometry
            _debug_arrows.links.new(
                reroute_009_6.outputs[0], store_named_attribute_15.inputs[0]
            )
            # math_003_12.Value -> cone.Depth
            _debug_arrows.links.new(math_003_12.outputs[0], cone.inputs[5])
            # transform_geometry_003.Geometry -> store_named_attribute_005_3.Geometry
            _debug_arrows.links.new(
                transform_geometry_003.outputs[0], store_named_attribute_005_3.inputs[0]
            )
            # transform_geometry_001_1.Geometry -> store_named_attribute_004_4.Geometry
            _debug_arrows.links.new(
                transform_geometry_001_1.outputs[0],
                store_named_attribute_004_4.inputs[0],
            )
            # vector_math_008_2.Vector -> transform_geometry_002_1.Translation
            _debug_arrows.links.new(
                vector_math_008_2.outputs[0], transform_geometry_002_1.inputs[1]
            )
            # reroute_003_15.Output -> transform_geometry_003.Geometry
            _debug_arrows.links.new(
                reroute_003_15.outputs[0], transform_geometry_003.inputs[0]
            )
            # cone.Mesh -> transform_geometry_002_1.Geometry
            _debug_arrows.links.new(cone.outputs[0], transform_geometry_002_1.inputs[0])
            # reroute_003_15.Output -> reroute_009_6.Input
            _debug_arrows.links.new(reroute_003_15.outputs[0], reroute_009_6.inputs[0])
            # store_named_attribute_004_4.Geometry -> join_geometry_001_3.Geometry
            _debug_arrows.links.new(
                store_named_attribute_004_4.outputs[0], join_geometry_001_3.inputs[0]
            )
            # transform_geometry_002_1.Geometry -> reroute_003_15.Input
            _debug_arrows.links.new(
                transform_geometry_002_1.outputs[0], reroute_003_15.inputs[0]
            )
            # reroute_003_15.Output -> transform_geometry_001_1.Geometry
            _debug_arrows.links.new(
                reroute_003_15.outputs[0], transform_geometry_001_1.inputs[0]
            )
            # join_geometry_001_3.Geometry -> instance_on_points_002.Instance
            _debug_arrows.links.new(
                join_geometry_001_3.outputs[0], instance_on_points_002.inputs[2]
            )
            # set_position_12.Geometry -> instance_on_points_002.Points
            _debug_arrows.links.new(
                set_position_12.outputs[0], instance_on_points_002.inputs[0]
            )
            # group_input_136.Scale -> instance_on_points_002.Scale
            _debug_arrows.links.new(
                group_input_136.outputs[4], instance_on_points_002.inputs[6]
            )
            # group_input_136.Rotation -> instance_on_points_002.Rotation
            _debug_arrows.links.new(
                group_input_136.outputs[3], instance_on_points_002.inputs[5]
            )
            # instance_on_points_002.Instances -> group_output_138.Instances
            _debug_arrows.links.new(
                instance_on_points_002.outputs[0], group_output_138.inputs[0]
            )
            # reroute_40.Output -> set_position_12.Geometry
            _debug_arrows.links.new(reroute_40.outputs[0], set_position_12.inputs[0])
            # group_input_136.Position -> attribute_statistic.Attribute
            _debug_arrows.links.new(
                group_input_136.outputs[1], attribute_statistic.inputs[2]
            )
            # reroute_40.Output -> attribute_statistic.Geometry
            _debug_arrows.links.new(
                reroute_40.outputs[0], attribute_statistic.inputs[0]
            )
            # attribute_statistic.Standard Deviation -> compare_40.A
            _debug_arrows.links.new(
                attribute_statistic.outputs[6], compare_40.inputs[4]
            )
            # compare_40.Result -> switch_35.Switch
            _debug_arrows.links.new(compare_40.outputs[0], switch_35.inputs[0])
            # group_input_136.Position -> switch_35.True
            _debug_arrows.links.new(group_input_136.outputs[1], switch_35.inputs[2])
            # switch_35.Output -> set_position_12.Position
            _debug_arrows.links.new(switch_35.outputs[0], set_position_12.inputs[2])
            # position_14.Position -> switch_35.False
            _debug_arrows.links.new(position_14.outputs[0], switch_35.inputs[1])
            # group_input_136.Offset -> set_position_12.Offset
            _debug_arrows.links.new(
                group_input_136.outputs[2], set_position_12.inputs[3]
            )
            # group_input_136.Points -> reroute_40.Input
            _debug_arrows.links.new(group_input_136.outputs[0], reroute_40.inputs[0])
            # store_named_attribute_15.Geometry -> join_geometry_001_3.Geometry
            _debug_arrows.links.new(
                store_named_attribute_15.outputs[0], join_geometry_001_3.inputs[0]
            )
            # store_named_attribute_005_3.Geometry -> join_geometry_001_3.Geometry
            _debug_arrows.links.new(
                store_named_attribute_005_3.outputs[0], join_geometry_001_3.inputs[0]
            )
            return _debug_arrows

        _debug_arrows = _debug_arrows_node_group()

        # initialize _selective_scale node group
        def _selective_scale_node_group():
            _selective_scale = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".selective_scale"
            )

            _selective_scale.color_tag = "NONE"
            _selective_scale.description = ""

            # _selective_scale interface
            # Socket Output
            output_socket_1 = _selective_scale.interface.new_socket(
                name="Output", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            output_socket_1.subtype = "NONE"
            output_socket_1.default_value = 0.0
            output_socket_1.min_value = -3.4028234663852886e38
            output_socket_1.max_value = 3.4028234663852886e38
            output_socket_1.attribute_domain = "POINT"

            # Socket Switch
            switch_socket = _selective_scale.interface.new_socket(
                name="Switch", in_out="INPUT", socket_type="NodeSocketBool"
            )
            switch_socket.attribute_domain = "POINT"

            # Socket Input
            input_socket_2 = _selective_scale.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            input_socket_2.subtype = "NONE"
            input_socket_2.default_value = 0.0
            input_socket_2.min_value = -3.4028234663852886e38
            input_socket_2.max_value = 3.4028234663852886e38
            input_socket_2.attribute_domain = "POINT"

            # Socket Value
            value_socket_16 = _selective_scale.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_16.subtype = "NONE"
            value_socket_16.default_value = 0.800000011920929
            value_socket_16.min_value = -10000.0
            value_socket_16.max_value = 10000.0
            value_socket_16.attribute_domain = "POINT"

            # initialize _selective_scale nodes
            # node Group Output
            group_output_139 = _selective_scale.nodes.new("NodeGroupOutput")
            group_output_139.name = "Group Output"
            group_output_139.is_active_output = True

            # node Group Input
            group_input_137 = _selective_scale.nodes.new("NodeGroupInput")
            group_input_137.name = "Group Input"

            # node Switch.005
            switch_005_3 = _selective_scale.nodes.new("GeometryNodeSwitch")
            switch_005_3.name = "Switch.005"
            switch_005_3.input_type = "FLOAT"

            # node Math
            math_36 = _selective_scale.nodes.new("ShaderNodeMath")
            math_36.name = "Math"
            math_36.operation = "MULTIPLY"
            math_36.use_clamp = False

            # node Reroute.010
            reroute_010_5 = _selective_scale.nodes.new("NodeReroute")
            reroute_010_5.name = "Reroute.010"

            # Set locations
            group_output_139.location = (200.0, 0.0)
            group_input_137.location = (-210.0, 0.0)
            switch_005_3.location = (10.0, 90.0)
            math_36.location = (10.0, -70.0)
            reroute_010_5.location = (-10.0, -90.0)

            # Set dimensions
            group_output_139.width, group_output_139.height = 140.0, 100.0
            group_input_137.width, group_input_137.height = 140.0, 100.0
            switch_005_3.width, switch_005_3.height = 140.0, 100.0
            math_36.width, math_36.height = 140.0, 100.0
            reroute_010_5.width, reroute_010_5.height = 16.0, 100.0

            # initialize _selective_scale links
            # math_36.Value -> switch_005_3.True
            _selective_scale.links.new(math_36.outputs[0], switch_005_3.inputs[2])
            # reroute_010_5.Output -> switch_005_3.False
            _selective_scale.links.new(reroute_010_5.outputs[0], switch_005_3.inputs[1])
            # reroute_010_5.Output -> math_36.Value
            _selective_scale.links.new(reroute_010_5.outputs[0], math_36.inputs[0])
            # group_input_137.Switch -> switch_005_3.Switch
            _selective_scale.links.new(
                group_input_137.outputs[0], switch_005_3.inputs[0]
            )
            # group_input_137.Input -> reroute_010_5.Input
            _selective_scale.links.new(
                group_input_137.outputs[1], reroute_010_5.inputs[0]
            )
            # switch_005_3.Output -> group_output_139.Output
            _selective_scale.links.new(
                switch_005_3.outputs[0], group_output_139.inputs[0]
            )
            # group_input_137.Value -> math_36.Value
            _selective_scale.links.new(group_input_137.outputs[2], math_36.inputs[1])
            return _selective_scale

        _selective_scale = _selective_scale_node_group()

        # initialize _curve_ends_adjust_angle node group
        def _curve_ends_adjust_angle_node_group():
            _curve_ends_adjust_angle = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".curve_ends_adjust_angle"
            )

            _curve_ends_adjust_angle.color_tag = "NONE"
            _curve_ends_adjust_angle.description = ""

            _curve_ends_adjust_angle.is_modifier = True

            # _curve_ends_adjust_angle interface
            # Socket Curve
            curve_socket_4 = _curve_ends_adjust_angle.interface.new_socket(
                name="Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_4.attribute_domain = "POINT"

            # Socket Curve
            curve_socket_5 = _curve_ends_adjust_angle.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_5.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_5 = _curve_ends_adjust_angle.interface.new_socket(
                name="Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_5.subtype = "NONE"
            distance_socket_5.default_value = 3.0
            distance_socket_5.min_value = -10000.0
            distance_socket_5.max_value = 10000.0
            distance_socket_5.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_6 = _curve_ends_adjust_angle.interface.new_socket(
                name="Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_6.subtype = "NONE"
            distance_socket_6.default_value = 0.4200000762939453
            distance_socket_6.min_value = -10000.0
            distance_socket_6.max_value = 10000.0
            distance_socket_6.attribute_domain = "POINT"

            # initialize _curve_ends_adjust_angle nodes
            # node Vector Math.001
            vector_math_001_20 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_20.name = "Vector Math.001"
            vector_math_001_20.operation = "SCALE"

            # node Set Spline Type.001
            set_spline_type_001 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_001.name = "Set Spline Type.001"
            set_spline_type_001.spline_type = "BEZIER"
            # Selection
            set_spline_type_001.inputs[1].default_value = True

            # node Boolean Math.003
            boolean_math_003_7 = _curve_ends_adjust_angle.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_7.name = "Boolean Math.003"
            boolean_math_003_7.operation = "AND"

            # node Reroute.001
            reroute_001_27 = _curve_ends_adjust_angle.nodes.new("NodeReroute")
            reroute_001_27.name = "Reroute.001"
            # node Endpoint Selection.006
            endpoint_selection_006_1 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_006_1.name = "Endpoint Selection.006"
            # Start Size
            endpoint_selection_006_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_006_1.inputs[1].default_value = 0

            # node Boolean Math.004
            boolean_math_004_4 = _curve_ends_adjust_angle.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_4.name = "Boolean Math.004"
            boolean_math_004_4.operation = "AND"

            # node Vector Math.011
            vector_math_011_1 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_011_1.name = "Vector Math.011"
            vector_math_011_1.operation = "SCALE"

            # node Vector Math.013
            vector_math_013 = _curve_ends_adjust_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_013.name = "Vector Math.013"
            vector_math_013.operation = "NORMALIZE"

            # node Group
            group_36 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_36.name = "Group"
            group_36.node_tree = mn_units

            # node Vector Math.007
            vector_math_007_2 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_007_2.name = "Vector Math.007"
            vector_math_007_2.operation = "SUBTRACT"

            # node Vector Math.012
            vector_math_012 = _curve_ends_adjust_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_012.name = "Vector Math.012"
            vector_math_012.operation = "NORMALIZE"

            # node Named Attribute
            named_attribute_38 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_38.name = "Named Attribute"
            named_attribute_38.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_38.inputs[0].default_value = "forward"

            # node Position
            position_15 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_15.name = "Position"

            # node Vector Math
            vector_math_30 = _curve_ends_adjust_angle.nodes.new("ShaderNodeVectorMath")
            vector_math_30.name = "Vector Math"
            vector_math_30.operation = "SUBTRACT"

            # node Vector Math.002
            vector_math_002_11 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_002_11.name = "Vector Math.002"
            vector_math_002_11.hide = True
            vector_math_002_11.operation = "NORMALIZE"

            # node Group.001
            group_001_25 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_001_25.name = "Group.001"
            group_001_25.node_tree = mn_units
            # Input_1
            group_001_25.inputs[0].default_value = -2.0

            # node Vector Math.003
            vector_math_003_8 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003_8.name = "Vector Math.003"
            vector_math_003_8.operation = "SCALE"

            # node Group.009
            group_009_2 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_009_2.name = "Group.009"
            group_009_2.node_tree = _field_offset_vec
            # Input_1
            group_009_2.inputs[1].default_value = 1

            # node Vector Math.010
            vector_math_010_3 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_010_3.name = "Vector Math.010"
            vector_math_010_3.operation = "SUBTRACT"

            # node Reroute
            reroute_41 = _curve_ends_adjust_angle.nodes.new("NodeReroute")
            reroute_41.name = "Reroute"
            # node Named Attribute.001
            named_attribute_001_22 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_22.name = "Named Attribute.001"
            named_attribute_001_22.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_22.inputs[0].default_value = "reverse"

            # node Position.001
            position_001_7 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_7.name = "Position.001"

            # node Vector Math.004
            vector_math_004_8 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_8.name = "Vector Math.004"
            vector_math_004_8.operation = "SUBTRACT"

            # node Vector Math.005
            vector_math_005_4 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_005_4.name = "Vector Math.005"
            vector_math_005_4.hide = True
            vector_math_005_4.operation = "NORMALIZE"

            # node Group.002
            group_002_15 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_002_15.name = "Group.002"
            group_002_15.node_tree = mn_units
            # Input_1
            group_002_15.inputs[0].default_value = -2.0

            # node Vector Math.006
            vector_math_006_2 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_006_2.name = "Vector Math.006"
            vector_math_006_2.operation = "SCALE"

            # node Group Output
            group_output_140 = _curve_ends_adjust_angle.nodes.new("NodeGroupOutput")
            group_output_140.name = "Group Output"
            group_output_140.is_active_output = True

            # node Set Position
            set_position_13 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_13.name = "Set Position"
            # Position
            set_position_13.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Endpoint Selection.008
            endpoint_selection_008 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_008.name = "Endpoint Selection.008"
            # Start Size
            endpoint_selection_008.inputs[0].default_value = 0
            # End Size
            endpoint_selection_008.inputs[1].default_value = 1

            # node Group.003
            group_003_8 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_003_8.name = "Group.003"
            group_003_8.node_tree = _field_offset_vec
            # Input_1
            group_003_8.inputs[1].default_value = -1

            # node Group.019
            group_019 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_019.name = "Group.019"
            group_019.node_tree = _mn_select_sec_struct
            # Socket_1
            group_019.inputs[0].default_value = True

            # node Curve Handle Positions
            curve_handle_positions = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputCurveHandlePositions"
            )
            curve_handle_positions.name = "Curve Handle Positions"
            # Relative
            curve_handle_positions.inputs[0].default_value = False

            # node Vector Math.008
            vector_math_008_3 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_008_3.name = "Vector Math.008"
            vector_math_008_3.operation = "NORMALIZE"

            # node Vector Math.009
            vector_math_009_3 = _curve_ends_adjust_angle.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_009_3.name = "Vector Math.009"
            vector_math_009_3.operation = "SCALE"

            # node Endpoint Selection.009
            endpoint_selection_009 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_009.name = "Endpoint Selection.009"
            # Start Size
            endpoint_selection_009.inputs[0].default_value = 1
            # End Size
            endpoint_selection_009.inputs[1].default_value = 1

            # node Switch
            switch_36 = _curve_ends_adjust_angle.nodes.new("GeometryNodeSwitch")
            switch_36.name = "Switch"
            switch_36.input_type = "VECTOR"

            # node Group.004
            group_004_6 = _curve_ends_adjust_angle.nodes.new("GeometryNodeGroup")
            group_004_6.name = "Group.004"
            group_004_6.node_tree = mn_units

            # node Curve Handle Positions.001
            curve_handle_positions_001 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeInputCurveHandlePositions"
            )
            curve_handle_positions_001.name = "Curve Handle Positions.001"
            # Relative
            curve_handle_positions_001.inputs[0].default_value = True

            # node Endpoint Selection.010
            endpoint_selection_010 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_010.name = "Endpoint Selection.010"
            # Start Size
            endpoint_selection_010.inputs[0].default_value = 0
            # End Size
            endpoint_selection_010.inputs[1].default_value = 1

            # node Set Handle Positions.001
            set_handle_positions_001 = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_001.name = "Set Handle Positions.001"
            set_handle_positions_001.mode = "LEFT"
            # Position
            set_handle_positions_001.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions
            set_handle_positions = _curve_ends_adjust_angle.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions.name = "Set Handle Positions"
            set_handle_positions.mode = "RIGHT"
            # Position
            set_handle_positions.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group Input
            group_input_138 = _curve_ends_adjust_angle.nodes.new("NodeGroupInput")
            group_input_138.name = "Group Input"

            # Set locations
            vector_math_001_20.location = (-113.090576171875, -30.316802978515625)
            set_spline_type_001.location = (-457.7088623046875, 134.57489013671875)
            boolean_math_003_7.location = (-393.090576171875, 294.3201599121094)
            reroute_001_27.location = (-440.0, -200.0)
            endpoint_selection_006_1.location = (-620.0, 280.0)
            boolean_math_004_4.location = (340.0, 380.0)
            vector_math_011_1.location = (400.0, 80.0)
            vector_math_013.location = (220.0, 80.0)
            group_36.location = (-780.0, 80.0)
            vector_math_007_2.location = (-300.0, -80.0)
            vector_math_012.location = (-320.0, 40.0)
            named_attribute_38.location = (-1020.0, -80.0)
            position_15.location = (-1020.0, -220.0)
            vector_math_30.location = (-860.0, -140.0)
            vector_math_002_11.location = (-860.0, -100.0)
            group_001_25.location = (-1020.0, -280.0)
            vector_math_003_8.location = (-700.0, -100.0)
            group_009_2.location = (71.90267944335938, -263.45281982421875)
            vector_math_010_3.location = (71.90267944335938, -103.45283508300781)
            reroute_41.location = (-35.006744384765625, -353.1360168457031)
            named_attribute_001_22.location = (311.4145812988281, -130.00930786132812)
            position_001_7.location = (311.4145812988281, -270.0093688964844)
            vector_math_004_8.location = (471.4145812988281, -190.00936889648438)
            vector_math_005_4.location = (471.4145812988281, -150.00930786132812)
            group_002_15.location = (311.4145812988281, -330.0093688964844)
            vector_math_006_2.location = (631.41455078125, -150.00930786132812)
            group_output_140.location = (1649.9193115234375, 169.1092529296875)
            set_position_13.location = (1430.0023193359375, 203.44369506835938)
            endpoint_selection_008.location = (180.0, 400.0)
            group_003_8.location = (-300.0, -240.0)
            group_019.location = (-620.0, 440.0)
            curve_handle_positions.location = (-780.0, -320.0)
            vector_math_008_3.location = (1330.0, -120.0)
            vector_math_009_3.location = (1330.0, 20.0)
            endpoint_selection_009.location = (969.6704711914062, 303.7537841796875)
            switch_36.location = (1110.0, -124.58650970458984)
            group_004_6.location = (1120.0, 0.0)
            curve_handle_positions_001.location = (900.0, -200.0)
            endpoint_selection_010.location = (900.0, -80.0)
            set_handle_positions_001.location = (566.909423828125, 249.68319702148438)
            set_handle_positions.location = (-153.090576171875, 229.68319702148438)
            group_input_138.location = (-1054.2796630859375, 148.32730102539062)

            # Set dimensions
            vector_math_001_20.width, vector_math_001_20.height = 140.0, 100.0
            set_spline_type_001.width, set_spline_type_001.height = 140.0, 100.0
            boolean_math_003_7.width, boolean_math_003_7.height = 140.0, 100.0
            reroute_001_27.width, reroute_001_27.height = 16.0, 100.0
            endpoint_selection_006_1.width, endpoint_selection_006_1.height = (
                140.0,
                100.0,
            )
            boolean_math_004_4.width, boolean_math_004_4.height = 140.0, 100.0
            vector_math_011_1.width, vector_math_011_1.height = 140.0, 100.0
            vector_math_013.width, vector_math_013.height = 140.0, 100.0
            group_36.width, group_36.height = 140.0, 100.0
            vector_math_007_2.width, vector_math_007_2.height = 140.0, 100.0
            vector_math_012.width, vector_math_012.height = 140.0, 100.0
            named_attribute_38.width, named_attribute_38.height = 140.0, 100.0
            position_15.width, position_15.height = 140.0, 100.0
            vector_math_30.width, vector_math_30.height = 140.0, 100.0
            vector_math_002_11.width, vector_math_002_11.height = 140.0, 100.0
            group_001_25.width, group_001_25.height = 140.0, 100.0
            vector_math_003_8.width, vector_math_003_8.height = 140.0, 100.0
            group_009_2.width, group_009_2.height = 148.385009765625, 100.0
            vector_math_010_3.width, vector_math_010_3.height = 140.0, 100.0
            reroute_41.width, reroute_41.height = 16.0, 100.0
            named_attribute_001_22.width, named_attribute_001_22.height = 140.0, 100.0
            position_001_7.width, position_001_7.height = 140.0, 100.0
            vector_math_004_8.width, vector_math_004_8.height = 140.0, 100.0
            vector_math_005_4.width, vector_math_005_4.height = 140.0, 100.0
            group_002_15.width, group_002_15.height = 140.0, 100.0
            vector_math_006_2.width, vector_math_006_2.height = 140.0, 100.0
            group_output_140.width, group_output_140.height = 140.0, 100.0
            set_position_13.width, set_position_13.height = 140.0, 100.0
            endpoint_selection_008.width, endpoint_selection_008.height = 140.0, 100.0
            group_003_8.width, group_003_8.height = 148.385009765625, 100.0
            group_019.width, group_019.height = 158.9053955078125, 100.0
            curve_handle_positions.width, curve_handle_positions.height = 150.0, 100.0
            vector_math_008_3.width, vector_math_008_3.height = 140.0, 100.0
            vector_math_009_3.width, vector_math_009_3.height = 140.0, 100.0
            endpoint_selection_009.width, endpoint_selection_009.height = 140.0, 100.0
            switch_36.width, switch_36.height = 140.0, 100.0
            group_004_6.width, group_004_6.height = 140.0, 100.0
            curve_handle_positions_001.width, curve_handle_positions_001.height = (
                150.0,
                100.0,
            )
            endpoint_selection_010.width, endpoint_selection_010.height = 140.0, 100.0
            set_handle_positions_001.width, set_handle_positions_001.height = (
                140.0,
                100.0,
            )
            set_handle_positions.width, set_handle_positions.height = 140.0, 100.0
            group_input_138.width, group_input_138.height = 140.0, 100.0

            # initialize _curve_ends_adjust_angle links
            # reroute_001_27.Output -> vector_math_007_2.Vector
            _curve_ends_adjust_angle.links.new(
                reroute_001_27.outputs[0], vector_math_007_2.inputs[0]
            )
            # reroute_001_27.Output -> group_003_8.Field
            _curve_ends_adjust_angle.links.new(
                reroute_001_27.outputs[0], group_003_8.inputs[0]
            )
            # group_019.Is Structured -> boolean_math_003_7.Boolean
            _curve_ends_adjust_angle.links.new(
                group_019.outputs[2], boolean_math_003_7.inputs[1]
            )
            # boolean_math_003_7.Boolean -> set_handle_positions.Selection
            _curve_ends_adjust_angle.links.new(
                boolean_math_003_7.outputs[0], set_handle_positions.inputs[1]
            )
            # group_019.Is Structured -> boolean_math_004_4.Boolean
            _curve_ends_adjust_angle.links.new(
                group_019.outputs[2], boolean_math_004_4.inputs[1]
            )
            # set_spline_type_001.Curve -> set_handle_positions.Curve
            _curve_ends_adjust_angle.links.new(
                set_spline_type_001.outputs[0], set_handle_positions.inputs[0]
            )
            # vector_math_010_3.Vector -> vector_math_013.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_010_3.outputs[0], vector_math_013.inputs[0]
            )
            # endpoint_selection_006_1.Selection -> boolean_math_003_7.Boolean
            _curve_ends_adjust_angle.links.new(
                endpoint_selection_006_1.outputs[0], boolean_math_003_7.inputs[0]
            )
            # reroute_41.Output -> group_009_2.Field
            _curve_ends_adjust_angle.links.new(
                reroute_41.outputs[0], group_009_2.inputs[0]
            )
            # vector_math_007_2.Vector -> vector_math_012.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_007_2.outputs[0], vector_math_012.inputs[0]
            )
            # endpoint_selection_008.Selection -> boolean_math_004_4.Boolean
            _curve_ends_adjust_angle.links.new(
                endpoint_selection_008.outputs[0], boolean_math_004_4.inputs[0]
            )
            # group_36.Angstrom -> vector_math_011_1.Scale
            _curve_ends_adjust_angle.links.new(
                group_36.outputs[0], vector_math_011_1.inputs[3]
            )
            # reroute_41.Output -> vector_math_010_3.Vector
            _curve_ends_adjust_angle.links.new(
                reroute_41.outputs[0], vector_math_010_3.inputs[0]
            )
            # vector_math_013.Vector -> vector_math_011_1.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_013.outputs[0], vector_math_011_1.inputs[0]
            )
            # group_009_2.Field -> vector_math_010_3.Vector
            _curve_ends_adjust_angle.links.new(
                group_009_2.outputs[0], vector_math_010_3.inputs[1]
            )
            # vector_math_012.Vector -> vector_math_001_20.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_012.outputs[0], vector_math_001_20.inputs[0]
            )
            # set_handle_positions.Curve -> set_handle_positions_001.Curve
            _curve_ends_adjust_angle.links.new(
                set_handle_positions.outputs[0], set_handle_positions_001.inputs[0]
            )
            # group_003_8.Field -> vector_math_007_2.Vector
            _curve_ends_adjust_angle.links.new(
                group_003_8.outputs[0], vector_math_007_2.inputs[1]
            )
            # boolean_math_004_4.Boolean -> set_handle_positions_001.Selection
            _curve_ends_adjust_angle.links.new(
                boolean_math_004_4.outputs[0], set_handle_positions_001.inputs[1]
            )
            # group_36.Angstrom -> vector_math_001_20.Scale
            _curve_ends_adjust_angle.links.new(
                group_36.outputs[0], vector_math_001_20.inputs[3]
            )
            # group_input_138.Curve -> set_spline_type_001.Curve
            _curve_ends_adjust_angle.links.new(
                group_input_138.outputs[0], set_spline_type_001.inputs[0]
            )
            # set_position_13.Geometry -> group_output_140.Curve
            _curve_ends_adjust_angle.links.new(
                set_position_13.outputs[0], group_output_140.inputs[0]
            )
            # group_input_138.Distance -> group_36.Value
            _curve_ends_adjust_angle.links.new(
                group_input_138.outputs[1], group_36.inputs[0]
            )
            # curve_handle_positions.Right -> reroute_41.Input
            _curve_ends_adjust_angle.links.new(
                curve_handle_positions.outputs[1], reroute_41.inputs[0]
            )
            # curve_handle_positions.Left -> reroute_001_27.Input
            _curve_ends_adjust_angle.links.new(
                curve_handle_positions.outputs[0], reroute_001_27.inputs[0]
            )
            # named_attribute_38.Attribute -> vector_math_30.Vector
            _curve_ends_adjust_angle.links.new(
                named_attribute_38.outputs[0], vector_math_30.inputs[0]
            )
            # position_15.Position -> vector_math_30.Vector
            _curve_ends_adjust_angle.links.new(
                position_15.outputs[0], vector_math_30.inputs[1]
            )
            # vector_math_30.Vector -> vector_math_002_11.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_30.outputs[0], vector_math_002_11.inputs[0]
            )
            # vector_math_002_11.Vector -> vector_math_003_8.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_002_11.outputs[0], vector_math_003_8.inputs[0]
            )
            # group_001_25.Angstrom -> vector_math_003_8.Scale
            _curve_ends_adjust_angle.links.new(
                group_001_25.outputs[0], vector_math_003_8.inputs[3]
            )
            # vector_math_003_8.Vector -> set_handle_positions.Offset
            _curve_ends_adjust_angle.links.new(
                vector_math_003_8.outputs[0], set_handle_positions.inputs[3]
            )
            # named_attribute_001_22.Attribute -> vector_math_004_8.Vector
            _curve_ends_adjust_angle.links.new(
                named_attribute_001_22.outputs[0], vector_math_004_8.inputs[0]
            )
            # position_001_7.Position -> vector_math_004_8.Vector
            _curve_ends_adjust_angle.links.new(
                position_001_7.outputs[0], vector_math_004_8.inputs[1]
            )
            # vector_math_004_8.Vector -> vector_math_005_4.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_004_8.outputs[0], vector_math_005_4.inputs[0]
            )
            # vector_math_005_4.Vector -> vector_math_006_2.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_005_4.outputs[0], vector_math_006_2.inputs[0]
            )
            # group_002_15.Angstrom -> vector_math_006_2.Scale
            _curve_ends_adjust_angle.links.new(
                group_002_15.outputs[0], vector_math_006_2.inputs[3]
            )
            # vector_math_006_2.Vector -> set_handle_positions_001.Offset
            _curve_ends_adjust_angle.links.new(
                vector_math_006_2.outputs[0], set_handle_positions_001.inputs[3]
            )
            # set_handle_positions_001.Curve -> set_position_13.Geometry
            _curve_ends_adjust_angle.links.new(
                set_handle_positions_001.outputs[0], set_position_13.inputs[0]
            )
            # endpoint_selection_009.Selection -> set_position_13.Selection
            _curve_ends_adjust_angle.links.new(
                endpoint_selection_009.outputs[0], set_position_13.inputs[1]
            )
            # vector_math_008_3.Vector -> vector_math_009_3.Vector
            _curve_ends_adjust_angle.links.new(
                vector_math_008_3.outputs[0], vector_math_009_3.inputs[0]
            )
            # group_004_6.Angstrom -> vector_math_009_3.Scale
            _curve_ends_adjust_angle.links.new(
                group_004_6.outputs[0], vector_math_009_3.inputs[3]
            )
            # vector_math_009_3.Vector -> set_position_13.Offset
            _curve_ends_adjust_angle.links.new(
                vector_math_009_3.outputs[0], set_position_13.inputs[3]
            )
            # curve_handle_positions_001.Left -> switch_36.False
            _curve_ends_adjust_angle.links.new(
                curve_handle_positions_001.outputs[0], switch_36.inputs[1]
            )
            # switch_36.Output -> vector_math_008_3.Vector
            _curve_ends_adjust_angle.links.new(
                switch_36.outputs[0], vector_math_008_3.inputs[0]
            )
            # curve_handle_positions_001.Right -> switch_36.True
            _curve_ends_adjust_angle.links.new(
                curve_handle_positions_001.outputs[1], switch_36.inputs[2]
            )
            # endpoint_selection_010.Selection -> switch_36.Switch
            _curve_ends_adjust_angle.links.new(
                endpoint_selection_010.outputs[0], switch_36.inputs[0]
            )
            # group_input_138.Distance -> group_004_6.Value
            _curve_ends_adjust_angle.links.new(
                group_input_138.outputs[2], group_004_6.inputs[0]
            )
            return _curve_ends_adjust_angle

        _curve_ends_adjust_angle = _curve_ends_adjust_angle_node_group()

        # initialize _curve_ends_adjust_position node group
        def _curve_ends_adjust_position_node_group():
            _curve_ends_adjust_position = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="_curve_ends_adjust_position"
            )

            _curve_ends_adjust_position.color_tag = "NONE"
            _curve_ends_adjust_position.description = ""

            _curve_ends_adjust_position.is_modifier = True

            # _curve_ends_adjust_position interface
            # Socket Geometry
            geometry_socket_24 = _curve_ends_adjust_position.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_24.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_25 = _curve_ends_adjust_position.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_25.attribute_domain = "POINT"

            # Socket Distance
            distance_socket_7 = _curve_ends_adjust_position.interface.new_socket(
                name="Distance", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            distance_socket_7.subtype = "NONE"
            distance_socket_7.default_value = 0.30000001192092896
            distance_socket_7.min_value = -10000.0
            distance_socket_7.max_value = 10000.0
            distance_socket_7.attribute_domain = "POINT"

            # initialize _curve_ends_adjust_position nodes
            # node Position
            position_16 = _curve_ends_adjust_position.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_16.name = "Position"

            # node Group.026
            group_026_1 = _curve_ends_adjust_position.nodes.new("GeometryNodeGroup")
            group_026_1.name = "Group.026"
            group_026_1.node_tree = _field_offset_vec
            # Input_1
            group_026_1.inputs[1].default_value = -1

            # node Group.027
            group_027_1 = _curve_ends_adjust_position.nodes.new("GeometryNodeGroup")
            group_027_1.name = "Group.027"
            group_027_1.node_tree = _field_offset_vec
            # Input_1
            group_027_1.inputs[1].default_value = 1

            # node Vector Math.008
            vector_math_008_4 = _curve_ends_adjust_position.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_008_4.name = "Vector Math.008"
            vector_math_008_4.operation = "SUBTRACT"

            # node Endpoint Selection.002
            endpoint_selection_002 = _curve_ends_adjust_position.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_002.name = "Endpoint Selection.002"
            # Start Size
            endpoint_selection_002.inputs[0].default_value = 0
            # End Size
            endpoint_selection_002.inputs[1].default_value = 1

            # node Switch.007
            switch_007 = _curve_ends_adjust_position.nodes.new("GeometryNodeSwitch")
            switch_007.name = "Switch.007"
            switch_007.input_type = "VECTOR"
            # False
            switch_007.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.009
            vector_math_009_4 = _curve_ends_adjust_position.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_009_4.name = "Vector Math.009"
            vector_math_009_4.operation = "SUBTRACT"

            # node Endpoint Selection.001
            endpoint_selection_001_1 = _curve_ends_adjust_position.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_001_1.name = "Endpoint Selection.001"
            # Start Size
            endpoint_selection_001_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_001_1.inputs[1].default_value = 0

            # node Group Output
            group_output_141 = _curve_ends_adjust_position.nodes.new("NodeGroupOutput")
            group_output_141.name = "Group Output"
            group_output_141.is_active_output = True

            # node Group Input
            group_input_139 = _curve_ends_adjust_position.nodes.new("NodeGroupInput")
            group_input_139.name = "Group Input"

            # node Switch.010
            switch_010 = _curve_ends_adjust_position.nodes.new("GeometryNodeSwitch")
            switch_010.name = "Switch.010"
            switch_010.input_type = "VECTOR"

            # node Vector Math
            vector_math_31 = _curve_ends_adjust_position.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_31.name = "Vector Math"
            vector_math_31.operation = "NORMALIZE"

            # node Vector Math.003
            vector_math_003_9 = _curve_ends_adjust_position.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003_9.name = "Vector Math.003"
            vector_math_003_9.operation = "SCALE"

            # node Set Position.001
            set_position_001_5 = _curve_ends_adjust_position.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_5.name = "Set Position.001"
            # Selection
            set_position_001_5.inputs[1].default_value = True
            # Position
            set_position_001_5.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group.023
            group_023_1 = _curve_ends_adjust_position.nodes.new("GeometryNodeGroup")
            group_023_1.name = "Group.023"
            group_023_1.node_tree = mn_units

            # Set locations
            position_16.location = (-345.67303466796875, 21.96319580078125)
            group_026_1.location = (-165.67303466796875, -38.03680419921875)
            group_027_1.location = (-165.67303466796875, -318.03680419921875)
            vector_math_008_4.location = (-165.67303466796875, 101.96319580078125)
            endpoint_selection_002.location = (-365.67303466796875, -178.03680419921875)
            switch_007.location = (-5.67303466796875, 101.96319580078125)
            vector_math_009_4.location = (-165.67303466796875, -178.03680419921875)
            endpoint_selection_001_1.location = (
                -345.67303466796875,
                141.96319580078125,
            )
            group_output_141.location = (867.47216796875, 3.8314287662506104)
            group_input_139.location = (-500.0, 280.0)
            switch_010.location = (154.32696533203125, 101.96319580078125)
            vector_math_31.location = (300.0, 100.0)
            vector_math_003_9.location = (626.1260986328125, 105.79462432861328)
            set_position_001_5.location = (677.47216796875, 321.86822509765625)
            group_023_1.location = (154.32696533203125, -58.03680419921875)

            # Set dimensions
            position_16.width, position_16.height = 140.0, 100.0
            group_026_1.width, group_026_1.height = 140.0, 100.0
            group_027_1.width, group_027_1.height = 140.0, 100.0
            vector_math_008_4.width, vector_math_008_4.height = 140.0, 100.0
            endpoint_selection_002.width, endpoint_selection_002.height = 140.0, 100.0
            switch_007.width, switch_007.height = 140.0, 100.0
            vector_math_009_4.width, vector_math_009_4.height = 140.0, 100.0
            endpoint_selection_001_1.width, endpoint_selection_001_1.height = (
                140.0,
                100.0,
            )
            group_output_141.width, group_output_141.height = 140.0, 100.0
            group_input_139.width, group_input_139.height = 140.0, 100.0
            switch_010.width, switch_010.height = 140.0, 100.0
            vector_math_31.width, vector_math_31.height = 140.0, 100.0
            vector_math_003_9.width, vector_math_003_9.height = 140.0, 100.0
            set_position_001_5.width, set_position_001_5.height = 140.0, 100.0
            group_023_1.width, group_023_1.height = 140.0, 100.0

            # initialize _curve_ends_adjust_position links
            # group_023_1.Angstrom -> vector_math_003_9.Scale
            _curve_ends_adjust_position.links.new(
                group_023_1.outputs[0], vector_math_003_9.inputs[3]
            )
            # endpoint_selection_001_1.Selection -> switch_007.Switch
            _curve_ends_adjust_position.links.new(
                endpoint_selection_001_1.outputs[0], switch_007.inputs[0]
            )
            # position_16.Position -> group_027_1.Field
            _curve_ends_adjust_position.links.new(
                position_16.outputs[0], group_027_1.inputs[0]
            )
            # vector_math_008_4.Vector -> switch_007.True
            _curve_ends_adjust_position.links.new(
                vector_math_008_4.outputs[0], switch_007.inputs[2]
            )
            # position_16.Position -> vector_math_009_4.Vector
            _curve_ends_adjust_position.links.new(
                position_16.outputs[0], vector_math_009_4.inputs[1]
            )
            # position_16.Position -> vector_math_008_4.Vector
            _curve_ends_adjust_position.links.new(
                position_16.outputs[0], vector_math_008_4.inputs[1]
            )
            # vector_math_009_4.Vector -> switch_010.True
            _curve_ends_adjust_position.links.new(
                vector_math_009_4.outputs[0], switch_010.inputs[2]
            )
            # position_16.Position -> group_026_1.Field
            _curve_ends_adjust_position.links.new(
                position_16.outputs[0], group_026_1.inputs[0]
            )
            # vector_math_003_9.Vector -> set_position_001_5.Offset
            _curve_ends_adjust_position.links.new(
                vector_math_003_9.outputs[0], set_position_001_5.inputs[3]
            )
            # group_027_1.Field -> vector_math_009_4.Vector
            _curve_ends_adjust_position.links.new(
                group_027_1.outputs[0], vector_math_009_4.inputs[0]
            )
            # switch_007.Output -> switch_010.False
            _curve_ends_adjust_position.links.new(
                switch_007.outputs[0], switch_010.inputs[1]
            )
            # endpoint_selection_002.Selection -> switch_010.Switch
            _curve_ends_adjust_position.links.new(
                endpoint_selection_002.outputs[0], switch_010.inputs[0]
            )
            # group_026_1.Field -> vector_math_008_4.Vector
            _curve_ends_adjust_position.links.new(
                group_026_1.outputs[0], vector_math_008_4.inputs[0]
            )
            # group_input_139.Geometry -> set_position_001_5.Geometry
            _curve_ends_adjust_position.links.new(
                group_input_139.outputs[0], set_position_001_5.inputs[0]
            )
            # set_position_001_5.Geometry -> group_output_141.Geometry
            _curve_ends_adjust_position.links.new(
                set_position_001_5.outputs[0], group_output_141.inputs[0]
            )
            # switch_010.Output -> vector_math_31.Vector
            _curve_ends_adjust_position.links.new(
                switch_010.outputs[0], vector_math_31.inputs[0]
            )
            # vector_math_31.Vector -> vector_math_003_9.Vector
            _curve_ends_adjust_position.links.new(
                vector_math_31.outputs[0], vector_math_003_9.inputs[0]
            )
            # group_input_139.Distance -> group_023_1.Value
            _curve_ends_adjust_position.links.new(
                group_input_139.outputs[1], group_023_1.inputs[0]
            )
            return _curve_ends_adjust_position

        _curve_ends_adjust_position = _curve_ends_adjust_position_node_group()

        # initialize _curve_to_mesh node group
        def _curve_to_mesh_node_group():
            _curve_to_mesh = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".curve_to_mesh"
            )

            _curve_to_mesh.color_tag = "NONE"
            _curve_to_mesh.description = ""

            _curve_to_mesh.is_modifier = True

            # _curve_to_mesh interface
            # Socket Mesh
            mesh_socket = _curve_to_mesh.interface.new_socket(
                name="Mesh", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            mesh_socket.attribute_domain = "POINT"

            # Socket Curve
            curve_socket_6 = _curve_to_mesh.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_6.attribute_domain = "POINT"

            # Socket Profile Curve
            profile_curve_socket = _curve_to_mesh.interface.new_socket(
                name="Profile Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            profile_curve_socket.attribute_domain = "POINT"

            # Socket Resolution
            resolution_socket_2 = _curve_to_mesh.interface.new_socket(
                name="Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            resolution_socket_2.subtype = "NONE"
            resolution_socket_2.default_value = 12
            resolution_socket_2.min_value = 3
            resolution_socket_2.max_value = 512
            resolution_socket_2.attribute_domain = "POINT"

            # Socket Fill Caps
            fill_caps_socket_1 = _curve_to_mesh.interface.new_socket(
                name="Fill Caps", in_out="INPUT", socket_type="NodeSocketBool"
            )
            fill_caps_socket_1.attribute_domain = "POINT"

            # Socket Radius (A)
            radius__a__socket = _curve_to_mesh.interface.new_socket(
                name="Radius (A)", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius__a__socket.subtype = "NONE"
            radius__a__socket.default_value = 0.20000000298023224
            radius__a__socket.min_value = 0.0
            radius__a__socket.max_value = 10000.0
            radius__a__socket.attribute_domain = "POINT"

            # initialize _curve_to_mesh nodes
            # node Group Output
            group_output_142 = _curve_to_mesh.nodes.new("NodeGroupOutput")
            group_output_142.name = "Group Output"
            group_output_142.is_active_output = True

            # node Curve to Mesh
            curve_to_mesh_7 = _curve_to_mesh.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_7.name = "Curve to Mesh"

            # node Group
            group_37 = _curve_to_mesh.nodes.new("GeometryNodeGroup")
            group_37.name = "Group"
            group_37.node_tree = mn_units

            # node Curve Circle
            curve_circle_6 = _curve_to_mesh.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_6.name = "Curve Circle"
            curve_circle_6.mode = "RADIUS"
            # Radius
            curve_circle_6.inputs[4].default_value = 1.0

            # node Domain Size
            domain_size_9 = _curve_to_mesh.nodes.new("GeometryNodeAttributeDomainSize")
            domain_size_9.name = "Domain Size"
            domain_size_9.component = "CURVE"

            # node Compare
            compare_41 = _curve_to_mesh.nodes.new("FunctionNodeCompare")
            compare_41.name = "Compare"
            compare_41.data_type = "INT"
            compare_41.mode = "ELEMENT"
            compare_41.operation = "EQUAL"
            # B_INT
            compare_41.inputs[3].default_value = 0

            # node Switch
            switch_37 = _curve_to_mesh.nodes.new("GeometryNodeSwitch")
            switch_37.name = "Switch"
            switch_37.input_type = "GEOMETRY"

            # node Group Input
            group_input_140 = _curve_to_mesh.nodes.new("NodeGroupInput")
            group_input_140.name = "Group Input"

            # node Set Curve Radius
            set_curve_radius_4 = _curve_to_mesh.nodes.new("GeometryNodeSetCurveRadius")
            set_curve_radius_4.name = "Set Curve Radius"
            # Selection
            set_curve_radius_4.inputs[1].default_value = True

            # Set locations
            group_output_142.location = (190.0, 0.0)
            curve_to_mesh_7.location = (0.0, 0.0)
            group_37.location = (-577.7610473632812, -122.98338317871094)
            curve_circle_6.location = (-260.0, 40.0)
            domain_size_9.location = (-780.0, 120.0)
            compare_41.location = (-780.0, 280.0)
            switch_37.location = (-377.0369873046875, 349.30694580078125)
            group_input_140.location = (-780.0, -40.0)
            set_curve_radius_4.location = (-260.0, 180.0)

            # Set dimensions
            group_output_142.width, group_output_142.height = 140.0, 100.0
            curve_to_mesh_7.width, curve_to_mesh_7.height = 140.0, 100.0
            group_37.width, group_37.height = 261.9884033203125, 100.0
            curve_circle_6.width, curve_circle_6.height = 140.0, 100.0
            domain_size_9.width, domain_size_9.height = 140.0, 100.0
            compare_41.width, compare_41.height = 140.0, 100.0
            switch_37.width, switch_37.height = 140.0, 100.0
            group_input_140.width, group_input_140.height = 140.0, 100.0
            set_curve_radius_4.width, set_curve_radius_4.height = 140.0, 100.0

            # initialize _curve_to_mesh links
            # set_curve_radius_4.Curve -> curve_to_mesh_7.Curve
            _curve_to_mesh.links.new(
                set_curve_radius_4.outputs[0], curve_to_mesh_7.inputs[0]
            )
            # curve_to_mesh_7.Mesh -> group_output_142.Mesh
            _curve_to_mesh.links.new(
                curve_to_mesh_7.outputs[0], group_output_142.inputs[0]
            )
            # group_input_140.Fill Caps -> curve_to_mesh_7.Fill Caps
            _curve_to_mesh.links.new(
                group_input_140.outputs[3], curve_to_mesh_7.inputs[2]
            )
            # group_input_140.Curve -> set_curve_radius_4.Curve
            _curve_to_mesh.links.new(
                group_input_140.outputs[0], set_curve_radius_4.inputs[0]
            )
            # group_37.Angstrom -> set_curve_radius_4.Radius
            _curve_to_mesh.links.new(group_37.outputs[0], set_curve_radius_4.inputs[2])
            # group_input_140.Radius (A) -> group_37.Value
            _curve_to_mesh.links.new(group_input_140.outputs[4], group_37.inputs[0])
            # group_input_140.Resolution -> curve_circle_6.Resolution
            _curve_to_mesh.links.new(
                group_input_140.outputs[2], curve_circle_6.inputs[0]
            )
            # group_input_140.Profile Curve -> domain_size_9.Geometry
            _curve_to_mesh.links.new(
                group_input_140.outputs[1], domain_size_9.inputs[0]
            )
            # domain_size_9.Point Count -> compare_41.A
            _curve_to_mesh.links.new(domain_size_9.outputs[0], compare_41.inputs[2])
            # compare_41.Result -> switch_37.Switch
            _curve_to_mesh.links.new(compare_41.outputs[0], switch_37.inputs[0])
            # curve_circle_6.Curve -> switch_37.True
            _curve_to_mesh.links.new(curve_circle_6.outputs[0], switch_37.inputs[2])
            # switch_37.Output -> curve_to_mesh_7.Profile Curve
            _curve_to_mesh.links.new(switch_37.outputs[0], curve_to_mesh_7.inputs[1])
            # group_input_140.Profile Curve -> switch_37.False
            _curve_to_mesh.links.new(group_input_140.outputs[1], switch_37.inputs[1])
            return _curve_to_mesh

        _curve_to_mesh = _curve_to_mesh_node_group()

        # initialize offset_color node group
        def offset_color_node_group():
            offset_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Offset Color"
            )

            offset_color.color_tag = "NONE"
            offset_color.description = ""

            # offset_color interface
            # Socket Color
            color_socket_23 = offset_color.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_23.attribute_domain = "POINT"

            # Socket Index
            index_socket_11 = offset_color.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_11.subtype = "NONE"
            index_socket_11.default_value = 0
            index_socket_11.min_value = -2147483648
            index_socket_11.max_value = 2147483647
            index_socket_11.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_12 = offset_color.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_12.subtype = "NONE"
            offset_socket_12.default_value = 0
            offset_socket_12.min_value = -2147483648
            offset_socket_12.max_value = 2147483647
            offset_socket_12.attribute_domain = "POINT"

            # initialize offset_color nodes
            # node Group Input
            group_input_141 = offset_color.nodes.new("NodeGroupInput")
            group_input_141.name = "Group Input"

            # node Math.012
            math_012 = offset_color.nodes.new("ShaderNodeMath")
            math_012.name = "Math.012"
            math_012.operation = "ADD"
            math_012.use_clamp = False

            # node Evaluate at Index.004
            evaluate_at_index_004_1 = offset_color.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_004_1.name = "Evaluate at Index.004"
            evaluate_at_index_004_1.data_type = "FLOAT_COLOR"
            evaluate_at_index_004_1.domain = "POINT"

            # node Group Output
            group_output_143 = offset_color.nodes.new("NodeGroupOutput")
            group_output_143.name = "Group Output"
            group_output_143.is_active_output = True

            # node Named Attribute
            named_attribute_39 = offset_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_39.name = "Named Attribute"
            named_attribute_39.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_39.inputs[0].default_value = "Color"

            # Set locations
            group_input_141.location = (-220.0, -20.0)
            math_012.location = (-40.0, 0.0)
            evaluate_at_index_004_1.location = (140.0, 0.0)
            group_output_143.location = (340.0, 0.0)
            named_attribute_39.location = (-40.0, -160.0)

            # Set dimensions
            group_input_141.width, group_input_141.height = 140.0, 100.0
            math_012.width, math_012.height = 140.0, 100.0
            evaluate_at_index_004_1.width, evaluate_at_index_004_1.height = 140.0, 100.0
            group_output_143.width, group_output_143.height = 140.0, 100.0
            named_attribute_39.width, named_attribute_39.height = 140.0, 100.0

            # initialize offset_color links
            # math_012.Value -> evaluate_at_index_004_1.Index
            offset_color.links.new(
                math_012.outputs[0], evaluate_at_index_004_1.inputs[0]
            )
            # group_input_141.Offset -> math_012.Value
            offset_color.links.new(group_input_141.outputs[1], math_012.inputs[1])
            # evaluate_at_index_004_1.Value -> group_output_143.Color
            offset_color.links.new(
                evaluate_at_index_004_1.outputs[0], group_output_143.inputs[0]
            )
            # named_attribute_39.Attribute -> evaluate_at_index_004_1.Value
            offset_color.links.new(
                named_attribute_39.outputs[0], evaluate_at_index_004_1.inputs[1]
            )
            # group_input_141.Index -> math_012.Value
            offset_color.links.new(group_input_141.outputs[0], math_012.inputs[0])
            return offset_color

        offset_color = offset_color_node_group()

        # initialize _curve_end_fix_color node group
        def _curve_end_fix_color_node_group():
            _curve_end_fix_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".curve_end_fix_color"
            )

            _curve_end_fix_color.color_tag = "NONE"
            _curve_end_fix_color.description = ""

            _curve_end_fix_color.is_modifier = True

            # _curve_end_fix_color interface
            # Socket Geometry
            geometry_socket_26 = _curve_end_fix_color.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_26.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_27 = _curve_end_fix_color.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_27.attribute_domain = "POINT"

            # initialize _curve_end_fix_color nodes
            # node Store Named Attribute
            store_named_attribute_16 = _curve_end_fix_color.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_16.name = "Store Named Attribute"
            store_named_attribute_16.data_type = "FLOAT_COLOR"
            store_named_attribute_16.domain = "POINT"
            # Name
            store_named_attribute_16.inputs[2].default_value = "Color"

            # node Switch.011
            switch_011 = _curve_end_fix_color.nodes.new("GeometryNodeSwitch")
            switch_011.name = "Switch.011"
            switch_011.input_type = "RGBA"

            # node Group.029
            group_029 = _curve_end_fix_color.nodes.new("GeometryNodeGroup")
            group_029.name = "Group.029"
            group_029.node_tree = offset_color
            # Socket_0
            group_029.inputs[0].default_value = 0
            # Input_0
            group_029.inputs[1].default_value = -1

            # node Endpoint Selection.004
            endpoint_selection_004_1 = _curve_end_fix_color.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_004_1.name = "Endpoint Selection.004"
            # Start Size
            endpoint_selection_004_1.inputs[0].default_value = 0
            # End Size
            endpoint_selection_004_1.inputs[1].default_value = 1

            # node Endpoint Selection.003
            endpoint_selection_003_1 = _curve_end_fix_color.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_003_1.name = "Endpoint Selection.003"
            # Start Size
            endpoint_selection_003_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_003_1.inputs[1].default_value = 0

            # node Group.028
            group_028 = _curve_end_fix_color.nodes.new("GeometryNodeGroup")
            group_028.name = "Group.028"
            group_028.node_tree = offset_color
            # Socket_0
            group_028.inputs[0].default_value = 0
            # Input_0
            group_028.inputs[1].default_value = 1

            # node Switch.012
            switch_012 = _curve_end_fix_color.nodes.new("GeometryNodeSwitch")
            switch_012.name = "Switch.012"
            switch_012.input_type = "RGBA"

            # node Named Attribute.001
            named_attribute_001_23 = _curve_end_fix_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_23.name = "Named Attribute.001"
            named_attribute_001_23.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_001_23.inputs[0].default_value = "Color"

            # node Group.030
            group_030 = _curve_end_fix_color.nodes.new("GeometryNodeGroup")
            group_030.name = "Group.030"
            group_030.node_tree = _mn_select_sec_struct
            # Socket_1
            group_030.inputs[0].default_value = True

            # node Group Output
            group_output_144 = _curve_end_fix_color.nodes.new("NodeGroupOutput")
            group_output_144.name = "Group Output"
            group_output_144.is_active_output = True

            # node Group Input
            group_input_142 = _curve_end_fix_color.nodes.new("NodeGroupInput")
            group_input_142.name = "Group Input"

            # Set locations
            store_named_attribute_16.location = (180.0, 270.0)
            switch_011.location = (-20.0, -110.0)
            group_029.location = (160.0, -270.0)
            endpoint_selection_004_1.location = (160.0, 10.0)
            endpoint_selection_003_1.location = (-20.0, 10.0)
            group_028.location = (-20.0, -270.0)
            switch_012.location = (160.0, -110.0)
            named_attribute_001_23.location = (-180.0, -250.0)
            group_030.location = (-60.0, 190.0)
            group_output_144.location = (360.0, 320.0)
            group_input_142.location = (-40.0, 300.0)

            # Set dimensions
            store_named_attribute_16.width, store_named_attribute_16.height = (
                140.0,
                100.0,
            )
            switch_011.width, switch_011.height = 140.0, 100.0
            group_029.width, group_029.height = 140.0, 100.0
            endpoint_selection_004_1.width, endpoint_selection_004_1.height = (
                140.0,
                100.0,
            )
            endpoint_selection_003_1.width, endpoint_selection_003_1.height = (
                140.0,
                100.0,
            )
            group_028.width, group_028.height = 140.0, 100.0
            switch_012.width, switch_012.height = 140.0, 100.0
            named_attribute_001_23.width, named_attribute_001_23.height = 140.0, 100.0
            group_030.width, group_030.height = 158.9053955078125, 100.0
            group_output_144.width, group_output_144.height = 140.0, 100.0
            group_input_142.width, group_input_142.height = 140.0, 100.0

            # initialize _curve_end_fix_color links
            # switch_011.Output -> switch_012.False
            _curve_end_fix_color.links.new(switch_011.outputs[0], switch_012.inputs[1])
            # named_attribute_001_23.Attribute -> switch_011.False
            _curve_end_fix_color.links.new(
                named_attribute_001_23.outputs[0], switch_011.inputs[1]
            )
            # endpoint_selection_003_1.Selection -> switch_011.Switch
            _curve_end_fix_color.links.new(
                endpoint_selection_003_1.outputs[0], switch_011.inputs[0]
            )
            # group_028.Color -> switch_011.True
            _curve_end_fix_color.links.new(group_028.outputs[0], switch_011.inputs[2])
            # group_029.Color -> switch_012.True
            _curve_end_fix_color.links.new(group_029.outputs[0], switch_012.inputs[2])
            # switch_012.Output -> store_named_attribute_16.Value
            _curve_end_fix_color.links.new(
                switch_012.outputs[0], store_named_attribute_16.inputs[3]
            )
            # group_030.Is Structured -> store_named_attribute_16.Selection
            _curve_end_fix_color.links.new(
                group_030.outputs[2], store_named_attribute_16.inputs[1]
            )
            # endpoint_selection_004_1.Selection -> switch_012.Switch
            _curve_end_fix_color.links.new(
                endpoint_selection_004_1.outputs[0], switch_012.inputs[0]
            )
            # group_input_142.Geometry -> store_named_attribute_16.Geometry
            _curve_end_fix_color.links.new(
                group_input_142.outputs[0], store_named_attribute_16.inputs[0]
            )
            # store_named_attribute_16.Geometry -> group_output_144.Geometry
            _curve_end_fix_color.links.new(
                store_named_attribute_16.outputs[0], group_output_144.inputs[0]
            )
            return _curve_end_fix_color

        _curve_end_fix_color = _curve_end_fix_color_node_group()

        # initialize _mn_cartoon_smooth_handles node group
        def _mn_cartoon_smooth_handles_node_group():
            _mn_cartoon_smooth_handles = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_cartoon_smooth_handles"
            )

            _mn_cartoon_smooth_handles.color_tag = "NONE"
            _mn_cartoon_smooth_handles.description = ""

            # _mn_cartoon_smooth_handles interface
            # Socket Vector
            vector_socket_8 = _mn_cartoon_smooth_handles.interface.new_socket(
                name="Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            vector_socket_8.subtype = "NONE"
            vector_socket_8.default_value = (0.0, 0.0, 0.0)
            vector_socket_8.min_value = -3.4028234663852886e38
            vector_socket_8.max_value = 3.4028234663852886e38
            vector_socket_8.attribute_domain = "POINT"

            # Socket Scale
            scale_socket_5 = _mn_cartoon_smooth_handles.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_socket_5.subtype = "NONE"
            scale_socket_5.default_value = 0.00800000037997961
            scale_socket_5.min_value = -10000.0
            scale_socket_5.max_value = 10000.0
            scale_socket_5.attribute_domain = "POINT"

            # initialize _mn_cartoon_smooth_handles nodes
            # node Vector Math.005
            vector_math_005_5 = _mn_cartoon_smooth_handles.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_005_5.name = "Vector Math.005"
            vector_math_005_5.operation = "NORMALIZE"

            # node Named Attribute.004
            named_attribute_004_5 = _mn_cartoon_smooth_handles.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_5.name = "Named Attribute.004"
            named_attribute_004_5.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_004_5.inputs[0].default_value = "guide_X"

            # node Vector Math.006
            vector_math_006_3 = _mn_cartoon_smooth_handles.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_006_3.name = "Vector Math.006"
            vector_math_006_3.operation = "NORMALIZE"

            # node Named Attribute.003
            named_attribute_003_8 = _mn_cartoon_smooth_handles.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_8.name = "Named Attribute.003"
            named_attribute_003_8.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_003_8.inputs[0].default_value = "guide_Z"

            # node Vector Math.007
            vector_math_007_3 = _mn_cartoon_smooth_handles.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_007_3.name = "Vector Math.007"
            vector_math_007_3.operation = "CROSS_PRODUCT"

            # node Vector Math.008
            vector_math_008_5 = _mn_cartoon_smooth_handles.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_008_5.name = "Vector Math.008"
            vector_math_008_5.operation = "SCALE"

            # node Group Output
            group_output_145 = _mn_cartoon_smooth_handles.nodes.new("NodeGroupOutput")
            group_output_145.name = "Group Output"
            group_output_145.is_active_output = True

            # node Group
            group_38 = _mn_cartoon_smooth_handles.nodes.new("GeometryNodeGroup")
            group_38.name = "Group"
            group_38.node_tree = mn_units

            # node Group Input
            group_input_143 = _mn_cartoon_smooth_handles.nodes.new("NodeGroupInput")
            group_input_143.name = "Group Input"

            # Set locations
            vector_math_005_5.location = (-40.0, 120.0)
            named_attribute_004_5.location = (-200.0, 120.0)
            vector_math_006_3.location = (-40.0, -20.0)
            named_attribute_003_8.location = (-200.0, -20.0)
            vector_math_007_3.location = (120.0, 120.0)
            vector_math_008_5.location = (280.0, 120.0)
            group_output_145.location = (440.0, 120.0)
            group_38.location = (280.0, -20.0)
            group_input_143.location = (120.0, -20.0)

            # Set dimensions
            vector_math_005_5.width, vector_math_005_5.height = 140.0, 100.0
            named_attribute_004_5.width, named_attribute_004_5.height = 140.0, 100.0
            vector_math_006_3.width, vector_math_006_3.height = 140.0, 100.0
            named_attribute_003_8.width, named_attribute_003_8.height = 140.0, 100.0
            vector_math_007_3.width, vector_math_007_3.height = 140.0, 100.0
            vector_math_008_5.width, vector_math_008_5.height = 140.0, 100.0
            group_output_145.width, group_output_145.height = 140.0, 100.0
            group_38.width, group_38.height = 140.0, 100.0
            group_input_143.width, group_input_143.height = 140.0, 100.0

            # initialize _mn_cartoon_smooth_handles links
            # vector_math_007_3.Vector -> vector_math_008_5.Vector
            _mn_cartoon_smooth_handles.links.new(
                vector_math_007_3.outputs[0], vector_math_008_5.inputs[0]
            )
            # named_attribute_004_5.Attribute -> vector_math_005_5.Vector
            _mn_cartoon_smooth_handles.links.new(
                named_attribute_004_5.outputs[0], vector_math_005_5.inputs[0]
            )
            # vector_math_005_5.Vector -> vector_math_007_3.Vector
            _mn_cartoon_smooth_handles.links.new(
                vector_math_005_5.outputs[0], vector_math_007_3.inputs[0]
            )
            # vector_math_006_3.Vector -> vector_math_007_3.Vector
            _mn_cartoon_smooth_handles.links.new(
                vector_math_006_3.outputs[0], vector_math_007_3.inputs[1]
            )
            # named_attribute_003_8.Attribute -> vector_math_006_3.Vector
            _mn_cartoon_smooth_handles.links.new(
                named_attribute_003_8.outputs[0], vector_math_006_3.inputs[0]
            )
            # vector_math_008_5.Vector -> group_output_145.Vector
            _mn_cartoon_smooth_handles.links.new(
                vector_math_008_5.outputs[0], group_output_145.inputs[0]
            )
            # group_input_143.Scale -> group_38.Value
            _mn_cartoon_smooth_handles.links.new(
                group_input_143.outputs[0], group_38.inputs[0]
            )
            # group_38.Angstrom -> vector_math_008_5.Scale
            _mn_cartoon_smooth_handles.links.new(
                group_38.outputs[0], vector_math_008_5.inputs[3]
            )
            return _mn_cartoon_smooth_handles

        _mn_cartoon_smooth_handles = _mn_cartoon_smooth_handles_node_group()

        # initialize _field_offset_bool node group
        def _field_offset_bool_node_group():
            _field_offset_bool = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".field_offset_bool"
            )

            _field_offset_bool.color_tag = "NONE"
            _field_offset_bool.description = ""

            # _field_offset_bool interface
            # Socket Boolean
            boolean_socket_4 = _field_offset_bool.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_4.attribute_domain = "POINT"

            # Socket Boolean
            boolean_socket_5 = _field_offset_bool.interface.new_socket(
                name="Boolean", in_out="INPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_5.attribute_domain = "POINT"
            boolean_socket_5.hide_value = True

            # Socket Offset
            offset_socket_13 = _field_offset_bool.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_13.subtype = "NONE"
            offset_socket_13.default_value = 0
            offset_socket_13.min_value = -2147483648
            offset_socket_13.max_value = 2147483647
            offset_socket_13.attribute_domain = "POINT"

            # initialize _field_offset_bool nodes
            # node Group Input
            group_input_144 = _field_offset_bool.nodes.new("NodeGroupInput")
            group_input_144.name = "Group Input"

            # node Index
            index_18 = _field_offset_bool.nodes.new("GeometryNodeInputIndex")
            index_18.name = "Index"

            # node Math.001
            math_001_24 = _field_offset_bool.nodes.new("ShaderNodeMath")
            math_001_24.name = "Math.001"
            math_001_24.operation = "ADD"
            math_001_24.use_clamp = False

            # node Evaluate at Index.001
            evaluate_at_index_001_8 = _field_offset_bool.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_8.name = "Evaluate at Index.001"
            evaluate_at_index_001_8.data_type = "BOOLEAN"
            evaluate_at_index_001_8.domain = "POINT"

            # node Group Output
            group_output_146 = _field_offset_bool.nodes.new("NodeGroupOutput")
            group_output_146.name = "Group Output"
            group_output_146.is_active_output = True

            # Set locations
            group_input_144.location = (-417.64404296875, 0.0)
            index_18.location = (-420.0, -120.0)
            math_001_24.location = (-220.0, -120.0)
            evaluate_at_index_001_8.location = (-220.0, 40.0)
            group_output_146.location = (-60.0, 40.0)

            # Set dimensions
            group_input_144.width, group_input_144.height = 140.0, 100.0
            index_18.width, index_18.height = 140.0, 100.0
            math_001_24.width, math_001_24.height = 140.0, 100.0
            evaluate_at_index_001_8.width, evaluate_at_index_001_8.height = 140.0, 100.0
            group_output_146.width, group_output_146.height = 140.0, 100.0

            # initialize _field_offset_bool links
            # group_input_144.Offset -> math_001_24.Value
            _field_offset_bool.links.new(
                group_input_144.outputs[1], math_001_24.inputs[0]
            )
            # math_001_24.Value -> evaluate_at_index_001_8.Index
            _field_offset_bool.links.new(
                math_001_24.outputs[0], evaluate_at_index_001_8.inputs[0]
            )
            # group_input_144.Boolean -> evaluate_at_index_001_8.Value
            _field_offset_bool.links.new(
                group_input_144.outputs[0], evaluate_at_index_001_8.inputs[1]
            )
            # evaluate_at_index_001_8.Value -> group_output_146.Boolean
            _field_offset_bool.links.new(
                evaluate_at_index_001_8.outputs[0], group_output_146.inputs[0]
            )
            # index_18.Index -> math_001_24.Value
            _field_offset_bool.links.new(index_18.outputs[0], math_001_24.inputs[1])
            return _field_offset_bool

        _field_offset_bool = _field_offset_bool_node_group()

        # initialize _cartoon_arrows_scale node group
        def _cartoon_arrows_scale_node_group():
            _cartoon_arrows_scale = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".cartoon_arrows_scale"
            )

            _cartoon_arrows_scale.color_tag = "NONE"
            _cartoon_arrows_scale.description = ""

            # _cartoon_arrows_scale interface
            # Socket Result
            result_socket_3 = _cartoon_arrows_scale.interface.new_socket(
                name="Result", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            result_socket_3.attribute_domain = "POINT"

            # Socket Output
            output_socket_2 = _cartoon_arrows_scale.interface.new_socket(
                name="Output", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            output_socket_2.subtype = "NONE"
            output_socket_2.default_value = 0.0
            output_socket_2.min_value = -3.4028234663852886e38
            output_socket_2.max_value = 3.4028234663852886e38
            output_socket_2.attribute_domain = "POINT"

            # Socket Input
            input_socket_3 = _cartoon_arrows_scale.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            input_socket_3.subtype = "NONE"
            input_socket_3.default_value = 0.0
            input_socket_3.min_value = -3.4028234663852886e38
            input_socket_3.max_value = 3.4028234663852886e38
            input_socket_3.attribute_domain = "POINT"

            # Socket Input
            input_socket_4 = _cartoon_arrows_scale.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            input_socket_4.subtype = "NONE"
            input_socket_4.default_value = 0.0
            input_socket_4.min_value = -3.4028234663852886e38
            input_socket_4.max_value = 3.4028234663852886e38
            input_socket_4.attribute_domain = "POINT"

            # Socket Value
            value_socket_17 = _cartoon_arrows_scale.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_17.subtype = "NONE"
            value_socket_17.default_value = 2.8499999046325684
            value_socket_17.min_value = -10000.0
            value_socket_17.max_value = 10000.0
            value_socket_17.attribute_domain = "POINT"

            # initialize _cartoon_arrows_scale nodes
            # node Group Output
            group_output_147 = _cartoon_arrows_scale.nodes.new("NodeGroupOutput")
            group_output_147.name = "Group Output"
            group_output_147.is_active_output = True

            # node Math.006
            math_006_4 = _cartoon_arrows_scale.nodes.new("ShaderNodeMath")
            math_006_4.name = "Math.006"
            math_006_4.hide = True
            math_006_4.operation = "MAXIMUM"
            math_006_4.use_clamp = False
            # Value_001
            math_006_4.inputs[1].default_value = 0.0

            # node Spline Parameter
            spline_parameter_1 = _cartoon_arrows_scale.nodes.new(
                "GeometryNodeSplineParameter"
            )
            spline_parameter_1.name = "Spline Parameter"

            # node Map Range
            map_range_12 = _cartoon_arrows_scale.nodes.new("ShaderNodeMapRange")
            map_range_12.name = "Map Range"
            map_range_12.clamp = True
            map_range_12.data_type = "FLOAT"
            map_range_12.interpolation_type = "LINEAR"

            # node Math.003
            math_003_13 = _cartoon_arrows_scale.nodes.new("ShaderNodeMath")
            math_003_13.name = "Math.003"
            math_003_13.operation = "SUBTRACT"
            math_003_13.use_clamp = False

            # node Reroute.001
            reroute_001_28 = _cartoon_arrows_scale.nodes.new("NodeReroute")
            reroute_001_28.name = "Reroute.001"
            # node Reroute.010
            reroute_010_6 = _cartoon_arrows_scale.nodes.new("NodeReroute")
            reroute_010_6.name = "Reroute.010"
            # node Switch.001
            switch_001_22 = _cartoon_arrows_scale.nodes.new("GeometryNodeSwitch")
            switch_001_22.name = "Switch.001"
            switch_001_22.input_type = "FLOAT"

            # node Reroute
            reroute_42 = _cartoon_arrows_scale.nodes.new("NodeReroute")
            reroute_42.name = "Reroute"
            # node Spline Length
            spline_length_1 = _cartoon_arrows_scale.nodes.new(
                "GeometryNodeSplineLength"
            )
            spline_length_1.name = "Spline Length"

            # node Group Input
            group_input_145 = _cartoon_arrows_scale.nodes.new("NodeGroupInput")
            group_input_145.name = "Group Input"

            # node Math.007
            math_007_2 = _cartoon_arrows_scale.nodes.new("ShaderNodeMath")
            math_007_2.name = "Math.007"
            math_007_2.operation = "DIVIDE"
            math_007_2.use_clamp = False
            # Value_001
            math_007_2.inputs[1].default_value = 100.0

            # node Map Range.001
            map_range_001_5 = _cartoon_arrows_scale.nodes.new("ShaderNodeMapRange")
            map_range_001_5.name = "Map Range.001"
            map_range_001_5.clamp = True
            map_range_001_5.data_type = "FLOAT"
            map_range_001_5.interpolation_type = "LINEAR"
            # To Max
            map_range_001_5.inputs[4].default_value = 0.0

            # node Compare.001
            compare_001_25 = _cartoon_arrows_scale.nodes.new("FunctionNodeCompare")
            compare_001_25.name = "Compare.001"
            compare_001_25.data_type = "FLOAT"
            compare_001_25.mode = "ELEMENT"
            compare_001_25.operation = "EQUAL"
            # Epsilon
            compare_001_25.inputs[12].default_value = 0.0010000000474974513

            # node Math.008
            math_008_3 = _cartoon_arrows_scale.nodes.new("ShaderNodeMath")
            math_008_3.name = "Math.008"
            math_008_3.operation = "MULTIPLY"
            math_008_3.use_clamp = False
            # Value_001
            math_008_3.inputs[1].default_value = 2.0

            # Set locations
            group_output_147.location = (670.39453125, 0.0)
            math_006_4.location = (-283.53955078125, 120.8475341796875)
            spline_parameter_1.location = (-283.53955078125, 240.8475341796875)
            map_range_12.location = (-43.53955078125, 140.8475341796875)
            math_003_13.location = (-283.53955078125, 80.8475341796875)
            reroute_001_28.location = (-128.9521484375, -162.76467895507812)
            reroute_010_6.location = (120.39453125, -104.70928955078125)
            switch_001_22.location = (480.39453125, -44.70928955078125)
            reroute_42.location = (-126.4767837524414, -251.35455322265625)
            spline_length_1.location = (-480.0, 100.0)
            group_input_145.location = (-700.0, -200.0)
            math_007_2.location = (-480.0, 20.0)
            map_range_001_5.location = (160.0, 60.0)
            compare_001_25.location = (160.0, 240.0)
            math_008_3.location = (-80.0, -140.0)

            # Set dimensions
            group_output_147.width, group_output_147.height = 140.0, 100.0
            math_006_4.width, math_006_4.height = 140.0, 100.0
            spline_parameter_1.width, spline_parameter_1.height = 140.0, 100.0
            map_range_12.width, map_range_12.height = 140.0, 100.0
            math_003_13.width, math_003_13.height = 140.0, 100.0
            reroute_001_28.width, reroute_001_28.height = 16.0, 100.0
            reroute_010_6.width, reroute_010_6.height = 16.0, 100.0
            switch_001_22.width, switch_001_22.height = 140.0, 100.0
            reroute_42.width, reroute_42.height = 16.0, 100.0
            spline_length_1.width, spline_length_1.height = 140.0, 100.0
            group_input_145.width, group_input_145.height = 140.0, 100.0
            math_007_2.width, math_007_2.height = 140.0, 100.0
            map_range_001_5.width, map_range_001_5.height = 140.0, 100.0
            compare_001_25.width, compare_001_25.height = 140.0, 100.0
            math_008_3.width, math_008_3.height = 140.0, 100.0

            # initialize _cartoon_arrows_scale links
            # spline_parameter_1.Length -> map_range_12.Value
            _cartoon_arrows_scale.links.new(
                spline_parameter_1.outputs[1], map_range_12.inputs[0]
            )
            # reroute_001_28.Output -> map_range_12.To Min
            _cartoon_arrows_scale.links.new(
                reroute_001_28.outputs[0], map_range_12.inputs[3]
            )
            # spline_length_1.Length -> map_range_12.From Max
            _cartoon_arrows_scale.links.new(
                spline_length_1.outputs[0], map_range_12.inputs[2]
            )
            # map_range_12.Result -> map_range_001_5.Value
            _cartoon_arrows_scale.links.new(
                map_range_12.outputs[0], map_range_001_5.inputs[0]
            )
            # map_range_001_5.Result -> switch_001_22.False
            _cartoon_arrows_scale.links.new(
                map_range_001_5.outputs[0], switch_001_22.inputs[1]
            )
            # math_006_4.Value -> map_range_12.From Min
            _cartoon_arrows_scale.links.new(
                math_006_4.outputs[0], map_range_12.inputs[1]
            )
            # map_range_12.Result -> compare_001_25.A
            _cartoon_arrows_scale.links.new(
                map_range_12.outputs[0], compare_001_25.inputs[0]
            )
            # math_007_2.Value -> math_003_13.Value
            _cartoon_arrows_scale.links.new(
                math_007_2.outputs[0], math_003_13.inputs[1]
            )
            # reroute_42.Output -> map_range_001_5.From Max
            _cartoon_arrows_scale.links.new(
                reroute_42.outputs[0], map_range_001_5.inputs[2]
            )
            # reroute_001_28.Output -> reroute_010_6.Input
            _cartoon_arrows_scale.links.new(
                reroute_001_28.outputs[0], reroute_010_6.inputs[0]
            )
            # reroute_010_6.Output -> map_range_001_5.From Min
            _cartoon_arrows_scale.links.new(
                reroute_010_6.outputs[0], map_range_001_5.inputs[1]
            )
            # reroute_001_28.Output -> math_008_3.Value
            _cartoon_arrows_scale.links.new(
                reroute_001_28.outputs[0], math_008_3.inputs[0]
            )
            # reroute_010_6.Output -> compare_001_25.B
            _cartoon_arrows_scale.links.new(
                reroute_010_6.outputs[0], compare_001_25.inputs[1]
            )
            # compare_001_25.Result -> switch_001_22.Switch
            _cartoon_arrows_scale.links.new(
                compare_001_25.outputs[0], switch_001_22.inputs[0]
            )
            # reroute_010_6.Output -> switch_001_22.True
            _cartoon_arrows_scale.links.new(
                reroute_010_6.outputs[0], switch_001_22.inputs[2]
            )
            # math_003_13.Value -> math_006_4.Value
            _cartoon_arrows_scale.links.new(
                math_003_13.outputs[0], math_006_4.inputs[0]
            )
            # reroute_42.Output -> map_range_12.To Max
            _cartoon_arrows_scale.links.new(
                reroute_42.outputs[0], map_range_12.inputs[4]
            )
            # math_008_3.Value -> map_range_001_5.To Min
            _cartoon_arrows_scale.links.new(
                math_008_3.outputs[0], map_range_001_5.inputs[3]
            )
            # spline_length_1.Length -> math_003_13.Value
            _cartoon_arrows_scale.links.new(
                spline_length_1.outputs[0], math_003_13.inputs[0]
            )
            # compare_001_25.Result -> group_output_147.Result
            _cartoon_arrows_scale.links.new(
                compare_001_25.outputs[0], group_output_147.inputs[0]
            )
            # switch_001_22.Output -> group_output_147.Output
            _cartoon_arrows_scale.links.new(
                switch_001_22.outputs[0], group_output_147.inputs[1]
            )
            # group_input_145.Input -> reroute_001_28.Input
            _cartoon_arrows_scale.links.new(
                group_input_145.outputs[0], reroute_001_28.inputs[0]
            )
            # group_input_145.Input -> reroute_42.Input
            _cartoon_arrows_scale.links.new(
                group_input_145.outputs[1], reroute_42.inputs[0]
            )
            # group_input_145.Value -> math_007_2.Value
            _cartoon_arrows_scale.links.new(
                group_input_145.outputs[2], math_007_2.inputs[0]
            )
            return _cartoon_arrows_scale

        _cartoon_arrows_scale = _cartoon_arrows_scale_node_group()

        # initialize _cartoon_arrow_instance node group
        def _cartoon_arrow_instance_node_group():
            _cartoon_arrow_instance = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".cartoon_arrow_instance"
            )

            _cartoon_arrow_instance.color_tag = "NONE"
            _cartoon_arrow_instance.description = ""

            _cartoon_arrow_instance.is_modifier = True

            # _cartoon_arrow_instance interface
            # Socket Trimmed Curve
            trimmed_curve_socket = _cartoon_arrow_instance.interface.new_socket(
                name="Trimmed Curve", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            trimmed_curve_socket.attribute_domain = "POINT"

            # Socket ArrowHeads
            arrowheads_socket = _cartoon_arrow_instance.interface.new_socket(
                name="ArrowHeads", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            arrowheads_socket.attribute_domain = "POINT"

            # Socket Curve
            curve_socket_7 = _cartoon_arrow_instance.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_7.attribute_domain = "POINT"

            # Socket Instance
            instance_socket_1 = _cartoon_arrow_instance.interface.new_socket(
                name="Instance", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            instance_socket_1.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_7 = _cartoon_arrow_instance.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketVector"
            )
            rotation_socket_7.subtype = "EULER"
            rotation_socket_7.default_value = (0.0, 0.0, 0.0)
            rotation_socket_7.min_value = -3.4028234663852886e38
            rotation_socket_7.max_value = 3.4028234663852886e38
            rotation_socket_7.attribute_domain = "POINT"
            rotation_socket_7.hide_value = True

            # Socket Scale
            scale_socket_6 = _cartoon_arrow_instance.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketVector"
            )
            scale_socket_6.subtype = "XYZ"
            scale_socket_6.default_value = (1.0, 1.0, 1.0)
            scale_socket_6.min_value = -3.4028234663852886e38
            scale_socket_6.max_value = 3.4028234663852886e38
            scale_socket_6.attribute_domain = "POINT"

            # initialize _cartoon_arrow_instance nodes
            # node Boolean Math.004
            boolean_math_004_5 = _cartoon_arrow_instance.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_5.name = "Boolean Math.004"
            boolean_math_004_5.operation = "AND"

            # node Boolean Math.005
            boolean_math_005_2 = _cartoon_arrow_instance.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_005_2.name = "Boolean Math.005"
            boolean_math_005_2.operation = "AND"

            # node Reroute.007
            reroute_007_8 = _cartoon_arrow_instance.nodes.new("NodeReroute")
            reroute_007_8.name = "Reroute.007"
            # node Instance on Points
            instance_on_points_8 = _cartoon_arrow_instance.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_8.name = "Instance on Points"
            # Pick Instance
            instance_on_points_8.inputs[3].default_value = False
            # Instance Index
            instance_on_points_8.inputs[4].default_value = 0

            # node Group Output
            group_output_148 = _cartoon_arrow_instance.nodes.new("NodeGroupOutput")
            group_output_148.name = "Group Output"
            group_output_148.is_active_output = True

            # node Align Euler to Vector
            align_euler_to_vector_4 = _cartoon_arrow_instance.nodes.new(
                "FunctionNodeAlignEulerToVector"
            )
            align_euler_to_vector_4.name = "Align Euler to Vector"
            align_euler_to_vector_4.axis = "X"
            align_euler_to_vector_4.pivot_axis = "Y"
            # Factor
            align_euler_to_vector_4.inputs[1].default_value = 1.0

            # node Endpoint Selection.001
            endpoint_selection_001_2 = _cartoon_arrow_instance.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_001_2.name = "Endpoint Selection.001"
            # Start Size
            endpoint_selection_001_2.inputs[0].default_value = 0
            # End Size
            endpoint_selection_001_2.inputs[1].default_value = 1

            # node Endpoint Selection
            endpoint_selection_1 = _cartoon_arrow_instance.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_1.name = "Endpoint Selection"
            # Start Size
            endpoint_selection_1.inputs[0].default_value = 0
            # End Size
            endpoint_selection_1.inputs[1].default_value = 2

            # node Boolean Math.001
            boolean_math_001_28 = _cartoon_arrow_instance.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_28.name = "Boolean Math.001"
            boolean_math_001_28.operation = "NOT"

            # node Boolean Math.003
            boolean_math_003_8 = _cartoon_arrow_instance.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_8.name = "Boolean Math.003"
            boolean_math_003_8.operation = "AND"

            # node Reroute
            reroute_43 = _cartoon_arrow_instance.nodes.new("NodeReroute")
            reroute_43.name = "Reroute"
            # node Position.001
            position_001_8 = _cartoon_arrow_instance.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_8.name = "Position.001"

            # node Vector Math
            vector_math_32 = _cartoon_arrow_instance.nodes.new("ShaderNodeVectorMath")
            vector_math_32.name = "Vector Math"
            vector_math_32.operation = "SUBTRACT"

            # node Group.006
            group_006_5 = _cartoon_arrow_instance.nodes.new("GeometryNodeGroup")
            group_006_5.name = "Group.006"
            group_006_5.node_tree = _field_offset_vec
            # Input_1
            group_006_5.inputs[1].default_value = 1

            # node Group.018
            group_018 = _cartoon_arrow_instance.nodes.new("GeometryNodeGroup")
            group_018.name = "Group.018"
            group_018.node_tree = _mn_select_sec_struct
            # Socket_1
            group_018.inputs[0].default_value = True

            # node Group Input
            group_input_146 = _cartoon_arrow_instance.nodes.new("NodeGroupInput")
            group_input_146.name = "Group Input"

            # node Delete Geometry
            delete_geometry_4 = _cartoon_arrow_instance.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry_4.name = "Delete Geometry"
            delete_geometry_4.domain = "POINT"
            delete_geometry_4.mode = "ALL"

            # Set locations
            boolean_math_004_5.location = (-239.0887451171875, 169.322998046875)
            boolean_math_005_2.location = (-240.0, 22.557861328125)
            reroute_007_8.location = (-420.0, -200.0)
            instance_on_points_8.location = (700.0, 180.0)
            group_output_148.location = (1140.0, -20.0)
            align_euler_to_vector_4.location = (260.0, 60.0)
            endpoint_selection_001_2.location = (-660.0, 280.0)
            endpoint_selection_1.location = (-660.0, 160.0)
            boolean_math_001_28.location = (-440.0, 340.0)
            boolean_math_003_8.location = (-440.0, 220.0)
            reroute_43.location = (-380.0, 0.0)
            position_001_8.location = (-40.0, -140.0)
            vector_math_32.location = (166.50079345703125, -140.0)
            group_006_5.location = (164.67938232421875, -280.0)
            group_018.location = (-700.0, 20.0)
            group_input_146.location = (-660.0, -180.0)
            delete_geometry_4.location = (108.09152221679688, -434.36468505859375)

            # Set dimensions
            boolean_math_004_5.width, boolean_math_004_5.height = 140.0, 100.0
            boolean_math_005_2.width, boolean_math_005_2.height = 140.0, 100.0
            reroute_007_8.width, reroute_007_8.height = 16.0, 100.0
            instance_on_points_8.width, instance_on_points_8.height = 140.0, 100.0
            group_output_148.width, group_output_148.height = 140.0, 100.0
            align_euler_to_vector_4.width, align_euler_to_vector_4.height = 140.0, 100.0
            endpoint_selection_001_2.width, endpoint_selection_001_2.height = (
                140.0,
                100.0,
            )
            endpoint_selection_1.width, endpoint_selection_1.height = 140.0, 100.0
            boolean_math_001_28.width, boolean_math_001_28.height = 140.0, 100.0
            boolean_math_003_8.width, boolean_math_003_8.height = 140.0, 100.0
            reroute_43.width, reroute_43.height = 16.0, 100.0
            position_001_8.width, position_001_8.height = 140.0, 100.0
            vector_math_32.width, vector_math_32.height = 233.49920654296875, 100.0
            group_006_5.width, group_006_5.height = 235.32061767578125, 100.0
            group_018.width, group_018.height = 234.5810546875, 100.0
            group_input_146.width, group_input_146.height = 140.0, 100.0
            delete_geometry_4.width, delete_geometry_4.height = 140.0, 100.0

            # initialize _cartoon_arrow_instance links
            # reroute_007_8.Output -> instance_on_points_8.Points
            _cartoon_arrow_instance.links.new(
                reroute_007_8.outputs[0], instance_on_points_8.inputs[0]
            )
            # position_001_8.Position -> vector_math_32.Vector
            _cartoon_arrow_instance.links.new(
                position_001_8.outputs[0], vector_math_32.inputs[0]
            )
            # boolean_math_004_5.Boolean -> instance_on_points_8.Selection
            _cartoon_arrow_instance.links.new(
                boolean_math_004_5.outputs[0], instance_on_points_8.inputs[1]
            )
            # endpoint_selection_1.Selection -> boolean_math_003_8.Boolean
            _cartoon_arrow_instance.links.new(
                endpoint_selection_1.outputs[0], boolean_math_003_8.inputs[1]
            )
            # align_euler_to_vector_4.Rotation -> instance_on_points_8.Rotation
            _cartoon_arrow_instance.links.new(
                align_euler_to_vector_4.outputs[0], instance_on_points_8.inputs[5]
            )
            # endpoint_selection_001_2.Selection -> boolean_math_001_28.Boolean
            _cartoon_arrow_instance.links.new(
                endpoint_selection_001_2.outputs[0], boolean_math_001_28.inputs[0]
            )
            # boolean_math_005_2.Boolean -> delete_geometry_4.Selection
            _cartoon_arrow_instance.links.new(
                boolean_math_005_2.outputs[0], delete_geometry_4.inputs[1]
            )
            # reroute_007_8.Output -> delete_geometry_4.Geometry
            _cartoon_arrow_instance.links.new(
                reroute_007_8.outputs[0], delete_geometry_4.inputs[0]
            )
            # endpoint_selection_001_2.Selection -> boolean_math_005_2.Boolean
            _cartoon_arrow_instance.links.new(
                endpoint_selection_001_2.outputs[0], boolean_math_005_2.inputs[0]
            )
            # boolean_math_003_8.Boolean -> boolean_math_004_5.Boolean
            _cartoon_arrow_instance.links.new(
                boolean_math_003_8.outputs[0], boolean_math_004_5.inputs[0]
            )
            # position_001_8.Position -> group_006_5.Field
            _cartoon_arrow_instance.links.new(
                position_001_8.outputs[0], group_006_5.inputs[0]
            )
            # boolean_math_001_28.Boolean -> boolean_math_003_8.Boolean
            _cartoon_arrow_instance.links.new(
                boolean_math_001_28.outputs[0], boolean_math_003_8.inputs[0]
            )
            # vector_math_32.Vector -> align_euler_to_vector_4.Vector
            _cartoon_arrow_instance.links.new(
                vector_math_32.outputs[0], align_euler_to_vector_4.inputs[2]
            )
            # group_input_146.Instance -> instance_on_points_8.Instance
            _cartoon_arrow_instance.links.new(
                group_input_146.outputs[1], instance_on_points_8.inputs[2]
            )
            # group_input_146.Curve -> reroute_007_8.Input
            _cartoon_arrow_instance.links.new(
                group_input_146.outputs[0], reroute_007_8.inputs[0]
            )
            # group_input_146.Rotation -> align_euler_to_vector_4.Rotation
            _cartoon_arrow_instance.links.new(
                group_input_146.outputs[2], align_euler_to_vector_4.inputs[0]
            )
            # delete_geometry_4.Geometry -> group_output_148.Trimmed Curve
            _cartoon_arrow_instance.links.new(
                delete_geometry_4.outputs[0], group_output_148.inputs[0]
            )
            # instance_on_points_8.Instances -> group_output_148.ArrowHeads
            _cartoon_arrow_instance.links.new(
                instance_on_points_8.outputs[0], group_output_148.inputs[1]
            )
            # group_input_146.Scale -> instance_on_points_8.Scale
            _cartoon_arrow_instance.links.new(
                group_input_146.outputs[3], instance_on_points_8.inputs[6]
            )
            # group_006_5.Field -> vector_math_32.Vector
            _cartoon_arrow_instance.links.new(
                group_006_5.outputs[0], vector_math_32.inputs[1]
            )
            # reroute_43.Output -> boolean_math_004_5.Boolean
            _cartoon_arrow_instance.links.new(
                reroute_43.outputs[0], boolean_math_004_5.inputs[1]
            )
            # reroute_43.Output -> boolean_math_005_2.Boolean
            _cartoon_arrow_instance.links.new(
                reroute_43.outputs[0], boolean_math_005_2.inputs[1]
            )
            # group_018.Is Sheet -> reroute_43.Input
            _cartoon_arrow_instance.links.new(
                group_018.outputs[1], reroute_43.inputs[0]
            )
            return _cartoon_arrow_instance

        _cartoon_arrow_instance = _cartoon_arrow_instance_node_group()

        # initialize _cartoon_arrow_primitive node group
        def _cartoon_arrow_primitive_node_group():
            _cartoon_arrow_primitive = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".cartoon.arrow_primitive"
            )

            _cartoon_arrow_primitive.color_tag = "NONE"
            _cartoon_arrow_primitive.description = ""

            _cartoon_arrow_primitive.is_modifier = True

            # _cartoon_arrow_primitive interface
            # Socket Geometry
            geometry_socket_28 = _cartoon_arrow_primitive.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_28.attribute_domain = "POINT"

            # Socket Value
            value_socket_18 = _cartoon_arrow_primitive.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_18.subtype = "NONE"
            value_socket_18.default_value = 0.5
            value_socket_18.min_value = -10000.0
            value_socket_18.max_value = 10000.0
            value_socket_18.attribute_domain = "POINT"

            # initialize _cartoon_arrow_primitive nodes
            # node Group Output
            group_output_149 = _cartoon_arrow_primitive.nodes.new("NodeGroupOutput")
            group_output_149.name = "Group Output"
            group_output_149.is_active_output = True

            # node Group Input
            group_input_147 = _cartoon_arrow_primitive.nodes.new("NodeGroupInput")
            group_input_147.name = "Group Input"

            # node Transform Geometry
            transform_geometry_3 = _cartoon_arrow_primitive.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_3.name = "Transform Geometry"
            transform_geometry_3.mode = "COMPONENTS"
            # Translation
            transform_geometry_3.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_3.inputs[2].default_value = (
                0.0,
                3.1415927410125732,
                0.0,
            )

            # node Transform Geometry.002
            transform_geometry_002_2 = _cartoon_arrow_primitive.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_002_2.name = "Transform Geometry.002"
            transform_geometry_002_2.mode = "COMPONENTS"
            # Rotation
            transform_geometry_002_2.inputs[2].default_value = (
                1.5707963705062866,
                0.0,
                0.0,
            )
            # Scale
            transform_geometry_002_2.inputs[3].default_value = (
                1.0,
                0.8299999833106995,
                1.0,
            )

            # node Group.005
            group_005_6 = _cartoon_arrow_primitive.nodes.new("GeometryNodeGroup")
            group_005_6.name = "Group.005"
            group_005_6.node_tree = mn_units
            # Input_1
            group_005_6.inputs[0].default_value = 3.390000104904175

            # node Join Geometry.001
            join_geometry_001_4 = _cartoon_arrow_primitive.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_4.name = "Join Geometry.001"
            join_geometry_001_4.hide = True

            # node Merge by Distance
            merge_by_distance_2 = _cartoon_arrow_primitive.nodes.new(
                "GeometryNodeMergeByDistance"
            )
            merge_by_distance_2.name = "Merge by Distance"
            merge_by_distance_2.hide = True
            merge_by_distance_2.mode = "ALL"
            # Selection
            merge_by_distance_2.inputs[1].default_value = True
            # Distance
            merge_by_distance_2.inputs[2].default_value = 0.0010000000474974513

            # node Mesh Circle
            mesh_circle = _cartoon_arrow_primitive.nodes.new("GeometryNodeMeshCircle")
            mesh_circle.name = "Mesh Circle"
            mesh_circle.fill_type = "TRIANGLE_FAN"
            # Vertices
            mesh_circle.inputs[0].default_value = 3

            # node Combine XYZ.001
            combine_xyz_001_3 = _cartoon_arrow_primitive.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_001_3.name = "Combine XYZ.001"

            # node Group.001
            group_001_26 = _cartoon_arrow_primitive.nodes.new("GeometryNodeGroup")
            group_001_26.name = "Group.001"
            group_001_26.node_tree = mn_units
            # Input_1
            group_001_26.inputs[0].default_value = 2.130000114440918

            # node Group.011
            group_011_4 = _cartoon_arrow_primitive.nodes.new("GeometryNodeGroup")
            group_011_4.name = "Group.011"
            group_011_4.node_tree = mn_units
            # Input_1
            group_011_4.inputs[0].default_value = 1.2000000476837158

            # node Math.002
            math_002_15 = _cartoon_arrow_primitive.nodes.new("ShaderNodeMath")
            math_002_15.name = "Math.002"
            math_002_15.operation = "MULTIPLY"
            math_002_15.use_clamp = False
            # Value_001
            math_002_15.inputs[1].default_value = 1.399999976158142

            # node Reroute
            reroute_44 = _cartoon_arrow_primitive.nodes.new("NodeReroute")
            reroute_44.name = "Reroute"
            # node Reroute.001
            reroute_001_29 = _cartoon_arrow_primitive.nodes.new("NodeReroute")
            reroute_001_29.name = "Reroute.001"
            # node Reroute.002
            reroute_002_21 = _cartoon_arrow_primitive.nodes.new("NodeReroute")
            reroute_002_21.name = "Reroute.002"
            # node Combine XYZ.002
            combine_xyz_002 = _cartoon_arrow_primitive.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_002.name = "Combine XYZ.002"
            # X
            combine_xyz_002.inputs[0].default_value = 1.0
            # Z
            combine_xyz_002.inputs[2].default_value = 1.0

            # node Math.001
            math_001_25 = _cartoon_arrow_primitive.nodes.new("ShaderNodeMath")
            math_001_25.label = "x / 2"
            math_001_25.name = "Math.001"
            math_001_25.hide = True
            math_001_25.operation = "DIVIDE"
            math_001_25.use_clamp = False
            # Value_001
            math_001_25.inputs[1].default_value = 3.059999942779541

            # node Math
            math_37 = _cartoon_arrow_primitive.nodes.new("ShaderNodeMath")
            math_37.label = "x / -2"
            math_37.name = "Math"
            math_37.hide = True
            math_37.operation = "DIVIDE"
            math_37.use_clamp = False
            # Value_001
            math_37.inputs[1].default_value = -19.440000534057617

            # node Extrude Mesh
            extrude_mesh = _cartoon_arrow_primitive.nodes.new("GeometryNodeExtrudeMesh")
            extrude_mesh.name = "Extrude Mesh"
            extrude_mesh.mode = "FACES"
            # Selection
            extrude_mesh.inputs[1].default_value = True
            # Offset
            extrude_mesh.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Individual
            extrude_mesh.inputs[4].default_value = False

            # Set locations
            group_output_149.location = (686.1517333984375, 0.0)
            group_input_147.location = (-874.151611328125, 0.0)
            transform_geometry_3.location = (245.848388671875, -5.45166015625)
            transform_geometry_002_2.location = (-114.151611328125, -45.45166015625)
            group_005_6.location = (-674.151611328125, 14.54833984375)
            join_geometry_001_4.location = (-434.151611328125, -125.45166015625)
            merge_by_distance_2.location = (-434.151611328125, -165.45166015625)
            mesh_circle.location = (-674.151611328125, 154.54833984375)
            combine_xyz_001_3.location = (-274.151611328125, -185.45166015625)
            group_001_26.location = (-674.151611328125, -105.45166015625)
            group_011_4.location = (-674.151611328125, -245.45166015625)
            math_002_15.location = (-118.0, -320.0)
            reroute_44.location = (-718.0, -420.0)
            reroute_001_29.location = (-478.0, -600.0)
            reroute_002_21.location = (-178.0, -600.0)
            combine_xyz_002.location = (242.0, -280.0)
            math_001_25.location = (-438.0, -220.0)
            math_37.location = (-438.0, -300.0)
            extrude_mesh.location = (-434.151611328125, 134.54833984375)

            # Set dimensions
            group_output_149.width, group_output_149.height = 140.0, 100.0
            group_input_147.width, group_input_147.height = 140.0, 100.0
            transform_geometry_3.width, transform_geometry_3.height = 140.0, 100.0
            transform_geometry_002_2.width, transform_geometry_002_2.height = (
                140.0,
                100.0,
            )
            group_005_6.width, group_005_6.height = 140.0, 100.0
            join_geometry_001_4.width, join_geometry_001_4.height = 140.0, 100.0
            merge_by_distance_2.width, merge_by_distance_2.height = 140.0, 100.0
            mesh_circle.width, mesh_circle.height = 140.0, 100.0
            combine_xyz_001_3.width, combine_xyz_001_3.height = 140.0, 100.0
            group_001_26.width, group_001_26.height = 140.0, 100.0
            group_011_4.width, group_011_4.height = 140.0, 100.0
            math_002_15.width, math_002_15.height = 140.0, 100.0
            reroute_44.width, reroute_44.height = 16.0, 100.0
            reroute_001_29.width, reroute_001_29.height = 16.0, 100.0
            reroute_002_21.width, reroute_002_21.height = 16.0, 100.0
            combine_xyz_002.width, combine_xyz_002.height = 140.0, 100.0
            math_001_25.width, math_001_25.height = 140.0, 100.0
            math_37.width, math_37.height = 140.0, 100.0
            extrude_mesh.width, extrude_mesh.height = 140.0, 100.0

            # initialize _cartoon_arrow_primitive links
            # group_005_6.Angstrom -> math_001_25.Value
            _cartoon_arrow_primitive.links.new(
                group_005_6.outputs[0], math_001_25.inputs[0]
            )
            # mesh_circle.Mesh -> extrude_mesh.Mesh
            _cartoon_arrow_primitive.links.new(
                mesh_circle.outputs[0], extrude_mesh.inputs[0]
            )
            # group_005_6.Angstrom -> mesh_circle.Radius
            _cartoon_arrow_primitive.links.new(
                group_005_6.outputs[0], mesh_circle.inputs[1]
            )
            # math_001_25.Value -> combine_xyz_001_3.X
            _cartoon_arrow_primitive.links.new(
                math_001_25.outputs[0], combine_xyz_001_3.inputs[0]
            )
            # math_002_15.Value -> combine_xyz_002.Y
            _cartoon_arrow_primitive.links.new(
                math_002_15.outputs[0], combine_xyz_002.inputs[1]
            )
            # group_001_26.Angstrom -> math_37.Value
            _cartoon_arrow_primitive.links.new(
                group_001_26.outputs[0], math_37.inputs[0]
            )
            # math_37.Value -> combine_xyz_001_3.Z
            _cartoon_arrow_primitive.links.new(
                math_37.outputs[0], combine_xyz_001_3.inputs[2]
            )
            # mesh_circle.Mesh -> join_geometry_001_4.Geometry
            _cartoon_arrow_primitive.links.new(
                mesh_circle.outputs[0], join_geometry_001_4.inputs[0]
            )
            # combine_xyz_001_3.Vector -> transform_geometry_002_2.Translation
            _cartoon_arrow_primitive.links.new(
                combine_xyz_001_3.outputs[0], transform_geometry_002_2.inputs[1]
            )
            # combine_xyz_002.Vector -> transform_geometry_3.Scale
            _cartoon_arrow_primitive.links.new(
                combine_xyz_002.outputs[0], transform_geometry_3.inputs[3]
            )
            # merge_by_distance_2.Geometry -> transform_geometry_002_2.Geometry
            _cartoon_arrow_primitive.links.new(
                merge_by_distance_2.outputs[0], transform_geometry_002_2.inputs[0]
            )
            # join_geometry_001_4.Geometry -> merge_by_distance_2.Geometry
            _cartoon_arrow_primitive.links.new(
                join_geometry_001_4.outputs[0], merge_by_distance_2.inputs[0]
            )
            # group_001_26.Angstrom -> extrude_mesh.Offset Scale
            _cartoon_arrow_primitive.links.new(
                group_001_26.outputs[0], extrude_mesh.inputs[3]
            )
            # transform_geometry_002_2.Geometry -> transform_geometry_3.Geometry
            _cartoon_arrow_primitive.links.new(
                transform_geometry_002_2.outputs[0], transform_geometry_3.inputs[0]
            )
            # group_011_4.Angstrom -> combine_xyz_001_3.Y
            _cartoon_arrow_primitive.links.new(
                group_011_4.outputs[0], combine_xyz_001_3.inputs[1]
            )
            # reroute_002_21.Output -> math_002_15.Value
            _cartoon_arrow_primitive.links.new(
                reroute_002_21.outputs[0], math_002_15.inputs[0]
            )
            # transform_geometry_3.Geometry -> group_output_149.Geometry
            _cartoon_arrow_primitive.links.new(
                transform_geometry_3.outputs[0], group_output_149.inputs[0]
            )
            # group_input_147.Value -> reroute_44.Input
            _cartoon_arrow_primitive.links.new(
                group_input_147.outputs[0], reroute_44.inputs[0]
            )
            # reroute_44.Output -> reroute_001_29.Input
            _cartoon_arrow_primitive.links.new(
                reroute_44.outputs[0], reroute_001_29.inputs[0]
            )
            # reroute_001_29.Output -> reroute_002_21.Input
            _cartoon_arrow_primitive.links.new(
                reroute_001_29.outputs[0], reroute_002_21.inputs[0]
            )
            # extrude_mesh.Mesh -> join_geometry_001_4.Geometry
            _cartoon_arrow_primitive.links.new(
                extrude_mesh.outputs[0], join_geometry_001_4.inputs[0]
            )
            return _cartoon_arrow_primitive

        _cartoon_arrow_primitive = _cartoon_arrow_primitive_node_group()

        # initialize _curve_profile_backup node group
        def _curve_profile_backup_node_group():
            _curve_profile_backup = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".curve_profile_backup"
            )

            _curve_profile_backup.color_tag = "NONE"
            _curve_profile_backup.description = ""

            _curve_profile_backup.is_modifier = True

            # _curve_profile_backup interface
            # Socket Output
            output_socket_3 = _curve_profile_backup.interface.new_socket(
                name="Output", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            output_socket_3.attribute_domain = "POINT"

            # Socket Input
            input_socket_5 = _curve_profile_backup.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            input_socket_5.attribute_domain = "POINT"

            # Socket Resolution
            resolution_socket_3 = _curve_profile_backup.interface.new_socket(
                name="Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            resolution_socket_3.subtype = "NONE"
            resolution_socket_3.default_value = 12
            resolution_socket_3.min_value = 3
            resolution_socket_3.max_value = 512
            resolution_socket_3.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_5 = _curve_profile_backup.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_5.subtype = "DISTANCE"
            radius_socket_5.default_value = 0.009999999776482582
            radius_socket_5.min_value = 0.0
            radius_socket_5.max_value = 3.4028234663852886e38
            radius_socket_5.attribute_domain = "POINT"

            # Socket Rotation
            rotation_socket_8 = _curve_profile_backup.interface.new_socket(
                name="Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_socket_8.subtype = "NONE"
            rotation_socket_8.default_value = 0.0
            rotation_socket_8.min_value = -10000.0
            rotation_socket_8.max_value = 10000.0
            rotation_socket_8.attribute_domain = "POINT"

            # initialize _curve_profile_backup nodes
            # node Group Output
            group_output_150 = _curve_profile_backup.nodes.new("NodeGroupOutput")
            group_output_150.name = "Group Output"
            group_output_150.is_active_output = True

            # node Compare
            compare_42 = _curve_profile_backup.nodes.new("FunctionNodeCompare")
            compare_42.name = "Compare"
            compare_42.hide = True
            compare_42.data_type = "INT"
            compare_42.mode = "ELEMENT"
            compare_42.operation = "GREATER_THAN"
            # B_INT
            compare_42.inputs[3].default_value = 0

            # node Switch
            switch_38 = _curve_profile_backup.nodes.new("GeometryNodeSwitch")
            switch_38.name = "Switch"
            switch_38.input_type = "GEOMETRY"

            # node Domain Size
            domain_size_10 = _curve_profile_backup.nodes.new(
                "GeometryNodeAttributeDomainSize"
            )
            domain_size_10.name = "Domain Size"
            domain_size_10.component = "CURVE"

            # node Reroute.001
            reroute_001_30 = _curve_profile_backup.nodes.new("NodeReroute")
            reroute_001_30.name = "Reroute.001"
            # node Curve Circle
            curve_circle_7 = _curve_profile_backup.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_7.name = "Curve Circle"
            curve_circle_7.mode = "RADIUS"

            # node Transform Geometry.001
            transform_geometry_001_2 = _curve_profile_backup.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_001_2.name = "Transform Geometry.001"
            transform_geometry_001_2.mode = "COMPONENTS"
            # Translation
            transform_geometry_001_2.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_001_2.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Combine XYZ
            combine_xyz_4 = _curve_profile_backup.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_4.name = "Combine XYZ"
            # X
            combine_xyz_4.inputs[0].default_value = 0.0
            # Y
            combine_xyz_4.inputs[1].default_value = 0.0

            # node Group Input
            group_input_148 = _curve_profile_backup.nodes.new("NodeGroupInput")
            group_input_148.name = "Group Input"

            # node Group
            group_39 = _curve_profile_backup.nodes.new("GeometryNodeGroup")
            group_39.name = "Group"
            group_39.node_tree = mn_units

            # Set locations
            group_output_150.location = (320.278564453125, 0.0)
            compare_42.location = (-69.721435546875, 174.23248291015625)
            switch_38.location = (130.278564453125, 214.23248291015625)
            domain_size_10.location = (-77.112060546875, 125.76751708984375)
            reroute_001_30.location = (-130.278564453125, -81.5904541015625)
            curve_circle_7.location = (-77.112060546875, -214.23248291015625)
            transform_geometry_001_2.location = (130.278564453125, -45.76751708984375)
            combine_xyz_4.location = (-80.0, -360.0)
            group_input_148.location = (-392.2209777832031, -102.58642578125)
            group_39.location = (-380.0, -260.0)

            # Set dimensions
            group_output_150.width, group_output_150.height = 140.0, 100.0
            compare_42.width, compare_42.height = 137.39459228515625, 100.0
            switch_38.width, switch_38.height = 140.0, 100.0
            domain_size_10.width, domain_size_10.height = 140.0, 100.0
            reroute_001_30.width, reroute_001_30.height = 16.0, 100.0
            curve_circle_7.width, curve_circle_7.height = 140.0, 100.0
            transform_geometry_001_2.width, transform_geometry_001_2.height = (
                140.0,
                100.0,
            )
            combine_xyz_4.width, combine_xyz_4.height = 140.0, 100.0
            group_input_148.width, group_input_148.height = 140.0, 100.0
            group_39.width, group_39.height = 140.0, 100.0

            # initialize _curve_profile_backup links
            # domain_size_10.Point Count -> compare_42.A
            _curve_profile_backup.links.new(
                domain_size_10.outputs[0], compare_42.inputs[2]
            )
            # reroute_001_30.Output -> domain_size_10.Geometry
            _curve_profile_backup.links.new(
                reroute_001_30.outputs[0], domain_size_10.inputs[0]
            )
            # curve_circle_7.Curve -> transform_geometry_001_2.Geometry
            _curve_profile_backup.links.new(
                curve_circle_7.outputs[0], transform_geometry_001_2.inputs[0]
            )
            # compare_42.Result -> switch_38.Switch
            _curve_profile_backup.links.new(compare_42.outputs[0], switch_38.inputs[0])
            # reroute_001_30.Output -> switch_38.True
            _curve_profile_backup.links.new(
                reroute_001_30.outputs[0], switch_38.inputs[2]
            )
            # transform_geometry_001_2.Geometry -> switch_38.False
            _curve_profile_backup.links.new(
                transform_geometry_001_2.outputs[0], switch_38.inputs[1]
            )
            # group_input_148.Input -> reroute_001_30.Input
            _curve_profile_backup.links.new(
                group_input_148.outputs[0], reroute_001_30.inputs[0]
            )
            # switch_38.Output -> group_output_150.Output
            _curve_profile_backup.links.new(
                switch_38.outputs[0], group_output_150.inputs[0]
            )
            # group_input_148.Resolution -> curve_circle_7.Resolution
            _curve_profile_backup.links.new(
                group_input_148.outputs[1], curve_circle_7.inputs[0]
            )
            # combine_xyz_4.Vector -> transform_geometry_001_2.Rotation
            _curve_profile_backup.links.new(
                combine_xyz_4.outputs[0], transform_geometry_001_2.inputs[2]
            )
            # group_input_148.Rotation -> combine_xyz_4.Z
            _curve_profile_backup.links.new(
                group_input_148.outputs[3], combine_xyz_4.inputs[2]
            )
            # group_input_148.Radius -> group_39.Value
            _curve_profile_backup.links.new(
                group_input_148.outputs[2], group_39.inputs[0]
            )
            # group_39.Angstrom -> curve_circle_7.Radius
            _curve_profile_backup.links.new(
                group_39.outputs[0], curve_circle_7.inputs[4]
            )
            return _curve_profile_backup

        _curve_profile_backup = _curve_profile_backup_node_group()

        # initialize _curve_custom_profile node group
        def _curve_custom_profile_node_group():
            _curve_custom_profile = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".curve_custom_profile"
            )

            _curve_custom_profile.color_tag = "NONE"
            _curve_custom_profile.description = ""

            _curve_custom_profile.is_modifier = True

            # _curve_custom_profile interface
            # Socket Geometry
            geometry_socket_29 = _curve_custom_profile.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_29.attribute_domain = "POINT"

            # Socket Curve
            curve_socket_8 = _curve_custom_profile.interface.new_socket(
                name="Curve", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            curve_socket_8.attribute_domain = "POINT"

            # Socket Profile Resolution
            profile_resolution_socket = _curve_custom_profile.interface.new_socket(
                name="Profile Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            profile_resolution_socket.subtype = "NONE"
            profile_resolution_socket.default_value = 4
            profile_resolution_socket.min_value = 3
            profile_resolution_socket.max_value = 512
            profile_resolution_socket.attribute_domain = "POINT"

            # Socket Profile Radius
            profile_radius_socket = _curve_custom_profile.interface.new_socket(
                name="Profile Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            profile_radius_socket.subtype = "DISTANCE"
            profile_radius_socket.default_value = 1.0
            profile_radius_socket.min_value = 0.0
            profile_radius_socket.max_value = 3.4028234663852886e38
            profile_radius_socket.attribute_domain = "POINT"

            # Socket Profile Rotation
            profile_rotation_socket = _curve_custom_profile.interface.new_socket(
                name="Profile Rotation", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            profile_rotation_socket.subtype = "NONE"
            profile_rotation_socket.default_value = 0.7853981852531433
            profile_rotation_socket.min_value = -10000.0
            profile_rotation_socket.max_value = 10000.0
            profile_rotation_socket.attribute_domain = "POINT"

            # Socket Instance
            instance_socket_2 = _curve_custom_profile.interface.new_socket(
                name="Instance", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            instance_socket_2.attribute_domain = "POINT"

            # Socket Rotation X
            rotation_x_socket = _curve_custom_profile.interface.new_socket(
                name="Rotation X", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            rotation_x_socket.subtype = "ANGLE"
            rotation_x_socket.default_value = 0.0
            rotation_x_socket.min_value = -3.4028234663852886e38
            rotation_x_socket.max_value = 3.4028234663852886e38
            rotation_x_socket.attribute_domain = "POINT"

            # Socket Scale
            scale_socket_7 = _curve_custom_profile.interface.new_socket(
                name="Scale", in_out="INPUT", socket_type="NodeSocketVector"
            )
            scale_socket_7.subtype = "XYZ"
            scale_socket_7.default_value = (
                0.33000001311302185,
                0.36000001430511475,
                0.75,
            )
            scale_socket_7.min_value = -3.4028234663852886e38
            scale_socket_7.max_value = 3.4028234663852886e38
            scale_socket_7.attribute_domain = "POINT"

            # Socket Factor
            factor_socket_4 = _curve_custom_profile.interface.new_socket(
                name="Factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_4.subtype = "FACTOR"
            factor_socket_4.default_value = 0.0
            factor_socket_4.min_value = 0.0
            factor_socket_4.max_value = 1.0
            factor_socket_4.attribute_domain = "POINT"

            # Socket Radius
            radius_socket_6 = _curve_custom_profile.interface.new_socket(
                name="Radius", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            radius_socket_6.subtype = "DISTANCE"
            radius_socket_6.default_value = 0.004999999888241291
            radius_socket_6.min_value = 0.0
            radius_socket_6.max_value = 3.4028234663852886e38
            radius_socket_6.attribute_domain = "POINT"

            # Socket Resolution
            resolution_socket_4 = _curve_custom_profile.interface.new_socket(
                name="Resolution", in_out="INPUT", socket_type="NodeSocketInt"
            )
            resolution_socket_4.subtype = "NONE"
            resolution_socket_4.default_value = 6
            resolution_socket_4.min_value = 1
            resolution_socket_4.max_value = 2147483647
            resolution_socket_4.attribute_domain = "POINT"

            # Socket Resample
            resample_socket = _curve_custom_profile.interface.new_socket(
                name="Resample", in_out="INPUT", socket_type="NodeSocketBool"
            )
            resample_socket.attribute_domain = "POINT"

            # initialize _curve_custom_profile nodes
            # node Instance on Points.001
            instance_on_points_001_3 = _curve_custom_profile.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_001_3.name = "Instance on Points.001"
            # Selection
            instance_on_points_001_3.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_001_3.inputs[3].default_value = False
            # Instance Index
            instance_on_points_001_3.inputs[4].default_value = 0

            # node Sample Index.001
            sample_index_001_9 = _curve_custom_profile.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_001_9.name = "Sample Index.001"
            sample_index_001_9.clamp = False
            sample_index_001_9.data_type = "FLOAT_VECTOR"
            sample_index_001_9.domain = "POINT"

            # node Realize Instances
            realize_instances_10 = _curve_custom_profile.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_10.name = "Realize Instances"
            # Selection
            realize_instances_10.inputs[1].default_value = True
            # Realize All
            realize_instances_10.inputs[2].default_value = True
            # Depth
            realize_instances_10.inputs[3].default_value = 0

            # node Index.003
            index_003_2 = _curve_custom_profile.nodes.new("GeometryNodeInputIndex")
            index_003_2.name = "Index.003"

            # node Position.001
            position_001_9 = _curve_custom_profile.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_9.name = "Position.001"

            # node Curve to Mesh
            curve_to_mesh_8 = _curve_custom_profile.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_8.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_8.inputs[2].default_value = True

            # node Set Position.002
            set_position_002_1 = _curve_custom_profile.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_002_1.name = "Set Position.002"
            # Selection
            set_position_002_1.inputs[1].default_value = True
            # Offset
            set_position_002_1.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Transform Geometry
            transform_geometry_4 = _curve_custom_profile.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_4.name = "Transform Geometry"
            transform_geometry_4.hide = True
            transform_geometry_4.mode = "COMPONENTS"
            # Translation
            transform_geometry_4.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_4.inputs[2].default_value = (
                0.0,
                1.5707963705062866,
                0.0,
            )
            # Scale
            transform_geometry_4.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Mix.001
            mix_001_5 = _curve_custom_profile.nodes.new("ShaderNodeMix")
            mix_001_5.name = "Mix.001"
            mix_001_5.blend_type = "MIX"
            mix_001_5.clamp_factor = True
            mix_001_5.clamp_result = False
            mix_001_5.data_type = "VECTOR"
            mix_001_5.factor_mode = "UNIFORM"

            # node Flip Faces
            flip_faces = _curve_custom_profile.nodes.new("GeometryNodeFlipFaces")
            flip_faces.name = "Flip Faces"
            # Selection
            flip_faces.inputs[1].default_value = True

            # node Group Output
            group_output_151 = _curve_custom_profile.nodes.new("NodeGroupOutput")
            group_output_151.name = "Group Output"
            group_output_151.is_active_output = True

            # node Reroute.001
            reroute_001_31 = _curve_custom_profile.nodes.new("NodeReroute")
            reroute_001_31.name = "Reroute.001"
            # node Reroute
            reroute_45 = _curve_custom_profile.nodes.new("NodeReroute")
            reroute_45.name = "Reroute"
            # node Set Curve Radius
            set_curve_radius_5 = _curve_custom_profile.nodes.new(
                "GeometryNodeSetCurveRadius"
            )
            set_curve_radius_5.name = "Set Curve Radius"
            # Selection
            set_curve_radius_5.inputs[1].default_value = True

            # node Reroute.002
            reroute_002_22 = _curve_custom_profile.nodes.new("NodeReroute")
            reroute_002_22.name = "Reroute.002"
            # node Spline Resolution
            spline_resolution = _curve_custom_profile.nodes.new(
                "GeometryNodeInputSplineResolution"
            )
            spline_resolution.name = "Spline Resolution"

            # node Spline Length
            spline_length_2 = _curve_custom_profile.nodes.new(
                "GeometryNodeSplineLength"
            )
            spline_length_2.name = "Spline Length"

            # node Spline Parameter
            spline_parameter_2 = _curve_custom_profile.nodes.new(
                "GeometryNodeSplineParameter"
            )
            spline_parameter_2.name = "Spline Parameter"

            # node Group.001
            group_001_27 = _curve_custom_profile.nodes.new("GeometryNodeGroup")
            group_001_27.name = "Group.001"
            group_001_27.node_tree = _curve_profile_backup

            # node Set Spline Resolution
            set_spline_resolution_2 = _curve_custom_profile.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_2.name = "Set Spline Resolution"
            # Selection
            set_spline_resolution_2.inputs[1].default_value = True

            # node Resample Curve
            resample_curve_2 = _curve_custom_profile.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_2.name = "Resample Curve"
            resample_curve_2.mode = "EVALUATED"
            # Selection
            resample_curve_2.inputs[1].default_value = True

            # node Switch
            switch_39 = _curve_custom_profile.nodes.new("GeometryNodeSwitch")
            switch_39.name = "Switch"
            switch_39.input_type = "GEOMETRY"

            # node Group Input
            group_input_149 = _curve_custom_profile.nodes.new("NodeGroupInput")
            group_input_149.name = "Group Input"

            # node Group
            group_40 = _curve_custom_profile.nodes.new("GeometryNodeGroup")
            group_40.name = "Group"
            group_40.node_tree = _guide_rotation

            # Set locations
            instance_on_points_001_3.location = (-289.36962890625, 170.0)
            sample_index_001_9.location = (-89.36962890625, 290.0)
            realize_instances_10.location = (-89.36962890625, 70.0)
            index_003_2.location = (-290.0, 270.0)
            position_001_9.location = (-290.0, 330.0)
            curve_to_mesh_8.location = (-100.0, -100.0)
            set_position_002_1.location = (260.0, 280.0)
            transform_geometry_4.location = (-520.0, -120.0)
            mix_001_5.location = (70.63037109375, 290.0)
            flip_faces.location = (460.0, 280.0)
            group_output_151.location = (660.0, 280.0)
            reroute_001_31.location = (-140.0, -240.0)
            reroute_45.location = (-539.885986328125, -222.59783935546875)
            set_curve_radius_5.location = (-296.1637268066406, -66.46692657470703)
            reroute_002_22.location = (-635.73388671875, -6.497833251953125)
            spline_resolution.location = (-1100.0, 280.0)
            spline_length_2.location = (-1100.0, 220.0)
            spline_parameter_2.location = (-1100.0, 380.0)
            group_001_27.location = (-900.0, -100.0)
            set_spline_resolution_2.location = (-1292.002685546875, 99.56741333007812)
            resample_curve_2.location = (-1124.6309814453125, 107.74668884277344)
            switch_39.location = (-905.0, 111.8224105834961)
            group_input_149.location = (-1608.1519775390625, -81.00050354003906)
            group_40.location = (-500.0, 60.0)

            # Set dimensions
            instance_on_points_001_3.width, instance_on_points_001_3.height = (
                140.0,
                100.0,
            )
            sample_index_001_9.width, sample_index_001_9.height = 140.0, 100.0
            realize_instances_10.width, realize_instances_10.height = 140.0, 100.0
            index_003_2.width, index_003_2.height = 140.0, 100.0
            position_001_9.width, position_001_9.height = 140.0, 100.0
            curve_to_mesh_8.width, curve_to_mesh_8.height = 140.0, 100.0
            set_position_002_1.width, set_position_002_1.height = 140.0, 100.0
            transform_geometry_4.width, transform_geometry_4.height = 140.0, 100.0
            mix_001_5.width, mix_001_5.height = 140.0, 100.0
            flip_faces.width, flip_faces.height = 140.0, 100.0
            group_output_151.width, group_output_151.height = 140.0, 100.0
            reroute_001_31.width, reroute_001_31.height = 16.0, 100.0
            reroute_45.width, reroute_45.height = 16.0, 100.0
            set_curve_radius_5.width, set_curve_radius_5.height = 140.0, 100.0
            reroute_002_22.width, reroute_002_22.height = 16.0, 100.0
            spline_resolution.width, spline_resolution.height = 140.0, 100.0
            spline_length_2.width, spline_length_2.height = 140.0, 100.0
            spline_parameter_2.width, spline_parameter_2.height = 140.0, 100.0
            group_001_27.width, group_001_27.height = 140.0, 100.0
            set_spline_resolution_2.width, set_spline_resolution_2.height = 140.0, 100.0
            resample_curve_2.width, resample_curve_2.height = 140.0, 100.0
            switch_39.width, switch_39.height = 140.0, 100.0
            group_input_149.width, group_input_149.height = 140.0, 100.0
            group_40.width, group_40.height = 140.0, 100.0

            # initialize _curve_custom_profile links
            # mix_001_5.Result -> set_position_002_1.Position
            _curve_custom_profile.links.new(
                mix_001_5.outputs[1], set_position_002_1.inputs[2]
            )
            # index_003_2.Index -> sample_index_001_9.Index
            _curve_custom_profile.links.new(
                index_003_2.outputs[0], sample_index_001_9.inputs[2]
            )
            # position_001_9.Position -> mix_001_5.B
            _curve_custom_profile.links.new(
                position_001_9.outputs[0], mix_001_5.inputs[5]
            )
            # set_curve_radius_5.Curve -> curve_to_mesh_8.Curve
            _curve_custom_profile.links.new(
                set_curve_radius_5.outputs[0], curve_to_mesh_8.inputs[0]
            )
            # curve_to_mesh_8.Mesh -> set_position_002_1.Geometry
            _curve_custom_profile.links.new(
                curve_to_mesh_8.outputs[0], set_position_002_1.inputs[0]
            )
            # instance_on_points_001_3.Instances -> realize_instances_10.Geometry
            _curve_custom_profile.links.new(
                instance_on_points_001_3.outputs[0], realize_instances_10.inputs[0]
            )
            # sample_index_001_9.Value -> mix_001_5.A
            _curve_custom_profile.links.new(
                sample_index_001_9.outputs[0], mix_001_5.inputs[4]
            )
            # position_001_9.Position -> sample_index_001_9.Value
            _curve_custom_profile.links.new(
                position_001_9.outputs[0], sample_index_001_9.inputs[1]
            )
            # realize_instances_10.Geometry -> sample_index_001_9.Geometry
            _curve_custom_profile.links.new(
                realize_instances_10.outputs[0], sample_index_001_9.inputs[0]
            )
            # group_input_149.Radius -> set_curve_radius_5.Radius
            _curve_custom_profile.links.new(
                group_input_149.outputs[8], set_curve_radius_5.inputs[2]
            )
            # group_input_149.Factor -> mix_001_5.Factor
            _curve_custom_profile.links.new(
                group_input_149.outputs[7], mix_001_5.inputs[0]
            )
            # flip_faces.Mesh -> group_output_151.Geometry
            _curve_custom_profile.links.new(
                flip_faces.outputs[0], group_output_151.inputs[0]
            )
            # reroute_45.Output -> transform_geometry_4.Geometry
            _curve_custom_profile.links.new(
                reroute_45.outputs[0], transform_geometry_4.inputs[0]
            )
            # transform_geometry_4.Geometry -> instance_on_points_001_3.Instance
            _curve_custom_profile.links.new(
                transform_geometry_4.outputs[0], instance_on_points_001_3.inputs[2]
            )
            # reroute_001_31.Output -> curve_to_mesh_8.Profile Curve
            _curve_custom_profile.links.new(
                reroute_001_31.outputs[0], curve_to_mesh_8.inputs[1]
            )
            # group_input_149.Scale -> instance_on_points_001_3.Scale
            _curve_custom_profile.links.new(
                group_input_149.outputs[6], instance_on_points_001_3.inputs[6]
            )
            # group_input_149.Rotation X -> group_40.Angle
            _curve_custom_profile.links.new(
                group_input_149.outputs[5], group_40.inputs[0]
            )
            # group_001_27.Output -> reroute_45.Input
            _curve_custom_profile.links.new(
                group_001_27.outputs[0], reroute_45.inputs[0]
            )
            # group_input_149.Instance -> group_001_27.Input
            _curve_custom_profile.links.new(
                group_input_149.outputs[4], group_001_27.inputs[0]
            )
            # group_input_149.Profile Radius -> group_001_27.Radius
            _curve_custom_profile.links.new(
                group_input_149.outputs[2], group_001_27.inputs[2]
            )
            # group_input_149.Profile Rotation -> group_001_27.Rotation
            _curve_custom_profile.links.new(
                group_input_149.outputs[3], group_001_27.inputs[3]
            )
            # set_position_002_1.Geometry -> flip_faces.Mesh
            _curve_custom_profile.links.new(
                set_position_002_1.outputs[0], flip_faces.inputs[0]
            )
            # reroute_002_22.Output -> set_curve_radius_5.Curve
            _curve_custom_profile.links.new(
                reroute_002_22.outputs[0], set_curve_radius_5.inputs[0]
            )
            # reroute_45.Output -> reroute_001_31.Input
            _curve_custom_profile.links.new(
                reroute_45.outputs[0], reroute_001_31.inputs[0]
            )
            # group_input_149.Curve -> set_spline_resolution_2.Geometry
            _curve_custom_profile.links.new(
                group_input_149.outputs[0], set_spline_resolution_2.inputs[0]
            )
            # switch_39.Output -> reroute_002_22.Input
            _curve_custom_profile.links.new(
                switch_39.outputs[0], reroute_002_22.inputs[0]
            )
            # group_input_149.Profile Resolution -> group_001_27.Resolution
            _curve_custom_profile.links.new(
                group_input_149.outputs[1], group_001_27.inputs[1]
            )
            # reroute_002_22.Output -> instance_on_points_001_3.Points
            _curve_custom_profile.links.new(
                reroute_002_22.outputs[0], instance_on_points_001_3.inputs[0]
            )
            # group_input_149.Resolution -> set_spline_resolution_2.Resolution
            _curve_custom_profile.links.new(
                group_input_149.outputs[9], set_spline_resolution_2.inputs[2]
            )
            # set_spline_resolution_2.Geometry -> resample_curve_2.Curve
            _curve_custom_profile.links.new(
                set_spline_resolution_2.outputs[0], resample_curve_2.inputs[0]
            )
            # group_40.Rotation -> instance_on_points_001_3.Rotation
            _curve_custom_profile.links.new(
                group_40.outputs[0], instance_on_points_001_3.inputs[5]
            )
            # resample_curve_2.Curve -> switch_39.True
            _curve_custom_profile.links.new(
                resample_curve_2.outputs[0], switch_39.inputs[2]
            )
            # group_input_149.Curve -> switch_39.False
            _curve_custom_profile.links.new(
                group_input_149.outputs[0], switch_39.inputs[1]
            )
            # group_input_149.Resample -> switch_39.Switch
            _curve_custom_profile.links.new(
                group_input_149.outputs[10], switch_39.inputs[0]
            )
            return _curve_custom_profile

        _curve_custom_profile = _curve_custom_profile_node_group()

        # initialize _mn_utils_style_cartoon node group
        def _mn_utils_style_cartoon_node_group():
            _mn_utils_style_cartoon = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_cartoon"
            )

            _mn_utils_style_cartoon.color_tag = "GEOMETRY"
            _mn_utils_style_cartoon.description = ""

            _mn_utils_style_cartoon.is_modifier = True

            # _mn_utils_style_cartoon interface
            # Socket Cartoon Mesh
            cartoon_mesh_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Cartoon Mesh", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            cartoon_mesh_socket.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_30 = _mn_utils_style_cartoon.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_30.attribute_domain = "POINT"
            atoms_socket_30.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_55 = _mn_utils_style_cartoon.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_55.attribute_domain = "POINT"
            selection_socket_55.hide_value = True
            selection_socket_55.description = "Selection of atoms to apply this node to"

            # Socket Shade Smooth
            shade_smooth_socket_12 = _mn_utils_style_cartoon.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_12.attribute_domain = "POINT"
            shade_smooth_socket_12.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Interpolate Color
            interpolate_color_socket_4 = _mn_utils_style_cartoon.interface.new_socket(
                name="Interpolate Color", in_out="INPUT", socket_type="NodeSocketBool"
            )
            interpolate_color_socket_4.attribute_domain = "POINT"
            interpolate_color_socket_4.description = (
                "Interpolate between distinct color selections"
            )

            # Socket Material
            material_socket_17 = _mn_utils_style_cartoon.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_17.attribute_domain = "POINT"
            material_socket_17.description = (
                "Material to apply to the resulting geometry"
            )

            # Panel Arrows
            arrows_panel = _mn_utils_style_cartoon.interface.new_panel("Arrows")
            # Socket As Arrows
            as_arrows_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="As Arrows",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=arrows_panel,
            )
            as_arrows_socket.attribute_domain = "POINT"
            as_arrows_socket.description = (
                "Render beta-strands with directional arrows."
            )

            # Socket Arrows Sharp
            arrows_sharp_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Arrows Sharp",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=arrows_panel,
            )
            arrows_sharp_socket.attribute_domain = "POINT"

            # Socket Arrows Point
            arrows_point_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Arrows Point",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=arrows_panel,
            )
            arrows_point_socket.attribute_domain = "POINT"

            # Socket Arrow Thickness Scale
            arrow_thickness_scale_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Arrow Thickness Scale",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=arrows_panel,
            )
            arrow_thickness_scale_socket.subtype = "NONE"
            arrow_thickness_scale_socket.default_value = 1.0
            arrow_thickness_scale_socket.min_value = 0.0
            arrow_thickness_scale_socket.max_value = 10000.0
            arrow_thickness_scale_socket.attribute_domain = "POINT"

            # Socket Arrow Width Scale
            arrow_width_scale_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Arrow Width Scale",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=arrows_panel,
            )
            arrow_width_scale_socket.subtype = "NONE"
            arrow_width_scale_socket.default_value = 1.0
            arrow_width_scale_socket.min_value = -10000.0
            arrow_width_scale_socket.max_value = 10000.0
            arrow_width_scale_socket.attribute_domain = "POINT"

            # Panel Profile
            profile_panel = _mn_utils_style_cartoon.interface.new_panel("Profile")
            # Socket Profile Curve
            profile_curve_socket_1 = _mn_utils_style_cartoon.interface.new_socket(
                name="Profile Curve",
                in_out="INPUT",
                socket_type="NodeSocketGeometry",
                parent=profile_panel,
            )
            profile_curve_socket_1.attribute_domain = "POINT"
            profile_curve_socket_1.description = (
                "A custom curve-cirlce making SS ribbons."
            )

            # Socket Profile Resolution
            profile_resolution_socket_1 = _mn_utils_style_cartoon.interface.new_socket(
                name="Profile Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=profile_panel,
            )
            profile_resolution_socket_1.subtype = "NONE"
            profile_resolution_socket_1.default_value = 4
            profile_resolution_socket_1.min_value = 4
            profile_resolution_socket_1.max_value = 100
            profile_resolution_socket_1.attribute_domain = "POINT"

            # Panel Sheet
            sheet_panel = _mn_utils_style_cartoon.interface.new_panel("Sheet")
            # Socket Sheet Rotate
            sheet_rotate_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Sheet Rotate",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sheet_panel,
            )
            sheet_rotate_socket.subtype = "NONE"
            sheet_rotate_socket.default_value = 0.0
            sheet_rotate_socket.min_value = -3.4028234663852886e38
            sheet_rotate_socket.max_value = 3.4028234663852886e38
            sheet_rotate_socket.attribute_domain = "POINT"

            # Socket Sheet Thickness
            sheet_thickness_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Sheet Thickness",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sheet_panel,
            )
            sheet_thickness_socket.subtype = "NONE"
            sheet_thickness_socket.default_value = 0.5
            sheet_thickness_socket.min_value = 0.0
            sheet_thickness_socket.max_value = 3.4028234663852886e38
            sheet_thickness_socket.attribute_domain = "POINT"

            # Socket Sheet Width
            sheet_width_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Sheet Width",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sheet_panel,
            )
            sheet_width_socket.subtype = "NONE"
            sheet_width_socket.default_value = 2.0
            sheet_width_socket.min_value = 0.0
            sheet_width_socket.max_value = 10000.0
            sheet_width_socket.attribute_domain = "POINT"

            # Socket Sheet Smoothing
            sheet_smoothing_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Sheet Smoothing",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sheet_panel,
            )
            sheet_smoothing_socket.subtype = "NONE"
            sheet_smoothing_socket.default_value = 1.0
            sheet_smoothing_socket.min_value = 0.0
            sheet_smoothing_socket.max_value = 1.0
            sheet_smoothing_socket.attribute_domain = "POINT"

            # Socket Sheet Subdivision
            sheet_subdivision_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Sheet Subdivision",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=sheet_panel,
            )
            sheet_subdivision_socket.subtype = "NONE"
            sheet_subdivision_socket.default_value = 3
            sheet_subdivision_socket.min_value = 1
            sheet_subdivision_socket.max_value = 20
            sheet_subdivision_socket.attribute_domain = "POINT"

            # Panel Cylinder
            cylinder_panel = _mn_utils_style_cartoon.interface.new_panel("Cylinder")
            # Socket As Cylinders
            as_cylinders_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="As Cylinders",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cylinder_panel,
            )
            as_cylinders_socket.attribute_domain = "POINT"

            # Socket Cylinder Curved
            cylinder_curved_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Cylinder Curved",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cylinder_panel,
            )
            cylinder_curved_socket.attribute_domain = "POINT"

            # Socket Cylinder Radius
            cylinder_radius_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Cylinder Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=cylinder_panel,
            )
            cylinder_radius_socket.subtype = "NONE"
            cylinder_radius_socket.default_value = 2.0
            cylinder_radius_socket.min_value = 0.0
            cylinder_radius_socket.max_value = 10000.0
            cylinder_radius_socket.attribute_domain = "POINT"

            # Socket Cylinder Resolution
            cylinder_resolution_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Cylinder Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=cylinder_panel,
            )
            cylinder_resolution_socket.subtype = "NONE"
            cylinder_resolution_socket.default_value = 12
            cylinder_resolution_socket.min_value = 3
            cylinder_resolution_socket.max_value = 512
            cylinder_resolution_socket.attribute_domain = "POINT"

            # Socket Cylinder Subdivisions
            cylinder_subdivisions_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Cylinder Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=cylinder_panel,
            )
            cylinder_subdivisions_socket.subtype = "NONE"
            cylinder_subdivisions_socket.default_value = 5
            cylinder_subdivisions_socket.min_value = 1
            cylinder_subdivisions_socket.max_value = 2147483647
            cylinder_subdivisions_socket.attribute_domain = "POINT"

            # Panel Helix
            helix_panel = _mn_utils_style_cartoon.interface.new_panel("Helix")
            # Socket Helix Rotate
            helix_rotate_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Helix Rotate",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=helix_panel,
            )
            helix_rotate_socket.subtype = "NONE"
            helix_rotate_socket.default_value = 0.0
            helix_rotate_socket.min_value = -3.4028234663852886e38
            helix_rotate_socket.max_value = 3.4028234663852886e38
            helix_rotate_socket.attribute_domain = "POINT"

            # Socket Helix Thickness
            helix_thickness_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Helix Thickness",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=helix_panel,
            )
            helix_thickness_socket.subtype = "NONE"
            helix_thickness_socket.default_value = 0.5
            helix_thickness_socket.min_value = 0.0
            helix_thickness_socket.max_value = 10000.0
            helix_thickness_socket.attribute_domain = "POINT"

            # Socket Helix Width
            helix_width_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Helix Width",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=helix_panel,
            )
            helix_width_socket.subtype = "NONE"
            helix_width_socket.default_value = 2.0
            helix_width_socket.min_value = -3.4028234663852886e38
            helix_width_socket.max_value = 3.4028234663852886e38
            helix_width_socket.attribute_domain = "POINT"

            # Socket Helix Subdivisions
            helix_subdivisions_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Helix Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=helix_panel,
            )
            helix_subdivisions_socket.subtype = "NONE"
            helix_subdivisions_socket.default_value = 5
            helix_subdivisions_socket.min_value = 1
            helix_subdivisions_socket.max_value = 20
            helix_subdivisions_socket.attribute_domain = "POINT"

            # Socket Helix smoothing
            helix_smoothing_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Helix smoothing",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=helix_panel,
            )
            helix_smoothing_socket.attribute_domain = "POINT"
            helix_smoothing_socket.description = (
                "Smoothen out AH to be more cylindrical."
            )

            # Panel Loop
            loop_panel = _mn_utils_style_cartoon.interface.new_panel("Loop")
            # Socket Loop Subdivisions
            loop_subdivisions_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Loop Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=loop_panel,
            )
            loop_subdivisions_socket.subtype = "NONE"
            loop_subdivisions_socket.default_value = 6
            loop_subdivisions_socket.min_value = 1
            loop_subdivisions_socket.max_value = 2147483647
            loop_subdivisions_socket.attribute_domain = "POINT"

            # Socket Loop Radius
            loop_radius_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Loop Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=loop_panel,
            )
            loop_radius_socket.subtype = "NONE"
            loop_radius_socket.default_value = 0.30000001192092896
            loop_radius_socket.min_value = 0.0
            loop_radius_socket.max_value = 3.0
            loop_radius_socket.attribute_domain = "POINT"

            # Socket Loop Resolution
            loop_resolution_socket = _mn_utils_style_cartoon.interface.new_socket(
                name="Loop Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=loop_panel,
            )
            loop_resolution_socket.subtype = "NONE"
            loop_resolution_socket.default_value = 8
            loop_resolution_socket.min_value = 3
            loop_resolution_socket.max_value = 512
            loop_resolution_socket.attribute_domain = "POINT"

            # initialize _mn_utils_style_cartoon nodes
            # node Frame.006
            frame_006_2 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_006_2.label = "Create Alpha-Helix Cylinder Geometry"
            frame_006_2.name = "Frame.006"
            frame_006_2.label_size = 20
            frame_006_2.shrink = True

            # node Frame.009
            frame_009 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_009.label = "Straight cylinder if selected or less <= 4 AA"
            frame_009.name = "Frame.009"
            frame_009.label_size = 20
            frame_009.shrink = True

            # node Frame.008
            frame_008_1 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_008_1.label = "Offset to be centre of helix"
            frame_008_1.name = "Frame.008"
            frame_008_1.label_size = 20
            frame_008_1.shrink = True

            # node Frame.005
            frame_005_2 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_005_2.label = "Creating Alpha-helix Geometry"
            frame_005_2.name = "Frame.005"
            frame_005_2.label_size = 20
            frame_005_2.shrink = True

            # node Frame.007
            frame_007_2 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_007_2.label = "DEBUG Arrows for Debugging"
            frame_007_2.name = "Frame.007"
            frame_007_2.label_size = 20
            frame_007_2.shrink = True

            # node Frame.003
            frame_003_4 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_003_4.label = "Creating Loop Geometry"
            frame_003_4.name = "Frame.003"
            frame_003_4.label_size = 20
            frame_003_4.shrink = True

            # node Frame.004
            frame_004_2 = _mn_utils_style_cartoon.nodes.new("NodeFrame")
            frame_004_2.label = "Creating Beta-sheet Geometry"
            frame_004_2.name = "Frame.004"
            frame_004_2.label_size = 20
            frame_004_2.shrink = True

            # node Set Spline Resolution.002
            set_spline_resolution_002 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_002.name = "Set Spline Resolution.002"
            # Selection
            set_spline_resolution_002.inputs[1].default_value = True

            # node Reroute.006
            reroute_006_10 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_006_10.name = "Reroute.006"
            # node Boolean Math.016
            boolean_math_016_1 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_016_1.name = "Boolean Math.016"
            boolean_math_016_1.operation = "AND"

            # node Separate Geometry.005
            separate_geometry_005 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_005.label = "Selection + Alpha Helices Only"
            separate_geometry_005.name = "Separate Geometry.005"
            separate_geometry_005.domain = "POINT"

            # node Group Input.002
            group_input_002_13 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_002_13.name = "Group Input.002"
            group_input_002_13.outputs[0].hide = True
            group_input_002_13.outputs[1].hide = True
            group_input_002_13.outputs[2].hide = True
            group_input_002_13.outputs[3].hide = True
            group_input_002_13.outputs[4].hide = True
            group_input_002_13.outputs[5].hide = True
            group_input_002_13.outputs[8].hide = True
            group_input_002_13.outputs[9].hide = True
            group_input_002_13.outputs[10].hide = True
            group_input_002_13.outputs[11].hide = True
            group_input_002_13.outputs[12].hide = True
            group_input_002_13.outputs[13].hide = True
            group_input_002_13.outputs[14].hide = True
            group_input_002_13.outputs[15].hide = True
            group_input_002_13.outputs[16].hide = True
            group_input_002_13.outputs[22].hide = True
            group_input_002_13.outputs[23].hide = True
            group_input_002_13.outputs[24].hide = True
            group_input_002_13.outputs[25].hide = True
            group_input_002_13.outputs[26].hide = True
            group_input_002_13.outputs[27].hide = True
            group_input_002_13.outputs[28].hide = True
            group_input_002_13.outputs[29].hide = True
            group_input_002_13.outputs[30].hide = True

            # node Mesh to Curve.002
            mesh_to_curve_002_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeMeshToCurve"
            )
            mesh_to_curve_002_1.name = "Mesh to Curve.002"
            # Selection
            mesh_to_curve_002_1.inputs[1].default_value = True

            # node Set Position.004
            set_position_004_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_004_1.name = "Set Position.004"
            # Position
            set_position_004_1.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Boolean Math.017
            boolean_math_017_1 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_017_1.name = "Boolean Math.017"
            boolean_math_017_1.operation = "NOT"

            # node Endpoint Selection.001
            endpoint_selection_001_3 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_001_3.name = "Endpoint Selection.001"
            # Start Size
            endpoint_selection_001_3.inputs[0].default_value = 1
            # End Size
            endpoint_selection_001_3.inputs[1].default_value = 1

            # node Switch.003
            switch_003_7 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_003_7.name = "Switch.003"
            switch_003_7.input_type = "INT"
            # False
            switch_003_7.inputs[1].default_value = 2

            # node Math.004
            math_004_5 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_004_5.name = "Math.004"
            math_004_5.operation = "MAXIMUM"
            math_004_5.use_clamp = False
            # Value_001
            math_004_5.inputs[1].default_value = 2.0

            # node Math.005
            math_005_4 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_005_4.name = "Math.005"
            math_005_4.operation = "DIVIDE"
            math_005_4.use_clamp = False
            # Value_001
            math_005_4.inputs[1].default_value = 4.0

            # node Spline Length.001
            spline_length_001_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSplineLength"
            )
            spline_length_001_1.name = "Spline Length.001"

            # node Vector Rotate
            vector_rotate_3 = _mn_utils_style_cartoon.nodes.new(
                "ShaderNodeVectorRotate"
            )
            vector_rotate_3.name = "Vector Rotate"
            vector_rotate_3.invert = False
            vector_rotate_3.rotation_type = "EULER_XYZ"
            # Center
            vector_rotate_3.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Vector
            vector = _mn_utils_style_cartoon.nodes.new("FunctionNodeInputVector")
            vector.name = "Vector"
            vector.vector = (0.0, 1.0, 0.0)

            # node Vector Math.001
            vector_math_001_21 = _mn_utils_style_cartoon.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_21.name = "Vector Math.001"
            vector_math_001_21.operation = "SCALE"

            # node Reroute.007
            reroute_007_9 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_007_9.name = "Reroute.007"
            # node Group.008
            group_008_3 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_008_3.name = "Group.008"
            group_008_3.node_tree = _guide_rotation
            # Input_1
            group_008_3.inputs[0].default_value = 0.0

            # node Resample Curve.001
            resample_curve_001_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_001_2.name = "Resample Curve.001"
            resample_curve_001_2.mode = "COUNT"
            # Selection
            resample_curve_001_2.inputs[1].default_value = True

            # node Set Handle Type.002
            set_handle_type_002 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_002.name = "Set Handle Type.002"
            set_handle_type_002.handle_type = "AUTO"
            set_handle_type_002.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_002.inputs[1].default_value = True

            # node Set Spline Type
            set_spline_type_3 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_3.name = "Set Spline Type"
            set_spline_type_3.spline_type = "BEZIER"
            # Selection
            set_spline_type_3.inputs[1].default_value = True

            # node Group.018
            group_018_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_018_1.name = "Group.018"
            group_018_1.node_tree = _mn_select_sec_struct
            # Socket_1
            group_018_1.inputs[0].default_value = True

            # node Boolean Math.003
            boolean_math_003_9 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_9.name = "Boolean Math.003"
            boolean_math_003_9.operation = "AND"

            # node Boolean Math.001
            boolean_math_001_29 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_29.name = "Boolean Math.001"
            boolean_math_001_29.operation = "NOT"

            # node Group Input.010
            group_input_010 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_010.name = "Group Input.010"
            group_input_010.outputs[0].hide = True
            group_input_010.outputs[1].hide = True
            group_input_010.outputs[2].hide = True
            group_input_010.outputs[3].hide = True
            group_input_010.outputs[4].hide = True
            group_input_010.outputs[5].hide = True
            group_input_010.outputs[8].hide = True
            group_input_010.outputs[9].hide = True
            group_input_010.outputs[10].hide = True
            group_input_010.outputs[11].hide = True
            group_input_010.outputs[12].hide = True
            group_input_010.outputs[13].hide = True
            group_input_010.outputs[14].hide = True
            group_input_010.outputs[15].hide = True
            group_input_010.outputs[16].hide = True
            group_input_010.outputs[18].hide = True
            group_input_010.outputs[19].hide = True
            group_input_010.outputs[20].hide = True
            group_input_010.outputs[21].hide = True
            group_input_010.outputs[22].hide = True
            group_input_010.outputs[23].hide = True
            group_input_010.outputs[24].hide = True
            group_input_010.outputs[25].hide = True
            group_input_010.outputs[26].hide = True
            group_input_010.outputs[27].hide = True
            group_input_010.outputs[28].hide = True
            group_input_010.outputs[29].hide = True
            group_input_010.outputs[30].hide = True

            # node Combine XYZ.002
            combine_xyz_002_1 = _mn_utils_style_cartoon.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_002_1.name = "Combine XYZ.002"
            # X
            combine_xyz_002_1.inputs[0].default_value = 1.0

            # node Reroute.011
            reroute_011_3 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_011_3.name = "Reroute.011"
            # node Reroute.012
            reroute_012_3 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_012_3.name = "Reroute.012"
            # node Math.001
            math_001_26 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_001_26.name = "Math.001"
            math_001_26.hide = True
            math_001_26.operation = "ADD"
            math_001_26.use_clamp = False
            # Value_001
            math_001_26.inputs[1].default_value = 0.5

            # node Join Geometry.001
            join_geometry_001_5 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_5.name = "Join Geometry.001"
            join_geometry_001_5.hide = True

            # node Separate Geometry.003
            separate_geometry_003_5 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_003_5.name = "Separate Geometry.003"
            separate_geometry_003_5.domain = "POINT"

            # node Mesh to Curve
            mesh_to_curve_4 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeMeshToCurve"
            )
            mesh_to_curve_4.name = "Mesh to Curve"
            # Selection
            mesh_to_curve_4.inputs[1].default_value = True

            # node Set Spline Type.002
            set_spline_type_002_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_002_1.name = "Set Spline Type.002"
            set_spline_type_002_1.spline_type = "BEZIER"
            # Selection
            set_spline_type_002_1.inputs[1].default_value = True

            # node Set Handle Type
            set_handle_type_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_2.name = "Set Handle Type"
            set_handle_type_2.handle_type = "AUTO"
            set_handle_type_2.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_2.inputs[1].default_value = True

            # node Set Handle Positions.001
            set_handle_positions_001_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_001_1.name = "Set Handle Positions.001"
            set_handle_positions_001_1.mode = "RIGHT"
            # Position
            set_handle_positions_001_1.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.002
            set_handle_positions_002 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_002.name = "Set Handle Positions.002"
            set_handle_positions_002.mode = "LEFT"
            # Position
            set_handle_positions_002.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Reroute.002
            reroute_002_23 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_002_23.name = "Reroute.002"
            # node Reroute.008
            reroute_008_4 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_008_4.name = "Reroute.008"
            # node Endpoint Selection.002
            endpoint_selection_002_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_002_1.name = "Endpoint Selection.002"
            # Start Size
            endpoint_selection_002_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_002_1.inputs[1].default_value = 0

            # node Endpoint Selection.003
            endpoint_selection_003_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_003_2.name = "Endpoint Selection.003"
            # Start Size
            endpoint_selection_003_2.inputs[0].default_value = 0
            # End Size
            endpoint_selection_003_2.inputs[1].default_value = 1

            # node Store Named Attribute.002
            store_named_attribute_002_4 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_4.name = "Store Named Attribute.002"
            store_named_attribute_002_4.data_type = "BOOLEAN"
            store_named_attribute_002_4.domain = "EDGE"
            # Selection
            store_named_attribute_002_4.inputs[1].default_value = True
            # Name
            store_named_attribute_002_4.inputs[2].default_value = "sharp_edge"

            # node Group Input.004
            group_input_004_6 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_004_6.name = "Group Input.004"
            group_input_004_6.outputs[0].hide = True
            group_input_004_6.outputs[1].hide = True
            group_input_004_6.outputs[2].hide = True
            group_input_004_6.outputs[3].hide = True
            group_input_004_6.outputs[4].hide = True
            group_input_004_6.outputs[5].hide = True
            group_input_004_6.outputs[8].hide = True
            group_input_004_6.outputs[9].hide = True
            group_input_004_6.outputs[12].hide = True
            group_input_004_6.outputs[13].hide = True
            group_input_004_6.outputs[14].hide = True
            group_input_004_6.outputs[15].hide = True
            group_input_004_6.outputs[16].hide = True
            group_input_004_6.outputs[17].hide = True
            group_input_004_6.outputs[18].hide = True
            group_input_004_6.outputs[19].hide = True
            group_input_004_6.outputs[20].hide = True
            group_input_004_6.outputs[21].hide = True
            group_input_004_6.outputs[26].hide = True
            group_input_004_6.outputs[27].hide = True
            group_input_004_6.outputs[28].hide = True
            group_input_004_6.outputs[29].hide = True
            group_input_004_6.outputs[30].hide = True

            # node Group Input.007
            group_input_007_2 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_007_2.name = "Group Input.007"
            group_input_007_2.outputs[0].hide = True
            group_input_007_2.outputs[1].hide = True
            group_input_007_2.outputs[3].hide = True
            group_input_007_2.outputs[4].hide = True
            group_input_007_2.outputs[5].hide = True
            group_input_007_2.outputs[8].hide = True
            group_input_007_2.outputs[9].hide = True
            group_input_007_2.outputs[10].hide = True
            group_input_007_2.outputs[11].hide = True
            group_input_007_2.outputs[12].hide = True
            group_input_007_2.outputs[13].hide = True
            group_input_007_2.outputs[14].hide = True
            group_input_007_2.outputs[15].hide = True
            group_input_007_2.outputs[16].hide = True
            group_input_007_2.outputs[17].hide = True
            group_input_007_2.outputs[18].hide = True
            group_input_007_2.outputs[19].hide = True
            group_input_007_2.outputs[20].hide = True
            group_input_007_2.outputs[21].hide = True
            group_input_007_2.outputs[22].hide = True
            group_input_007_2.outputs[23].hide = True
            group_input_007_2.outputs[24].hide = True
            group_input_007_2.outputs[25].hide = True
            group_input_007_2.outputs[26].hide = True
            group_input_007_2.outputs[27].hide = True
            group_input_007_2.outputs[28].hide = True
            group_input_007_2.outputs[29].hide = True
            group_input_007_2.outputs[30].hide = True

            # node Boolean Math.004
            boolean_math_004_6 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_6.name = "Boolean Math.004"
            boolean_math_004_6.operation = "NOT"
            boolean_math_004_6.inputs[1].hide = True

            # node Edge Angle.001
            edge_angle_001 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeInputMeshEdgeAngle"
            )
            edge_angle_001.name = "Edge Angle.001"

            # node Compare.006
            compare_006_1 = _mn_utils_style_cartoon.nodes.new("FunctionNodeCompare")
            compare_006_1.name = "Compare.006"
            compare_006_1.data_type = "FLOAT"
            compare_006_1.mode = "ELEMENT"
            compare_006_1.operation = "GREATER_THAN"
            # B
            compare_006_1.inputs[1].default_value = 1.0471975803375244

            # node Boolean Math.002
            boolean_math_002_18 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_18.name = "Boolean Math.002"
            boolean_math_002_18.operation = "OR"

            # node Realize Instances
            realize_instances_11 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_11.name = "Realize Instances"
            realize_instances_11.hide = True
            # Selection
            realize_instances_11.inputs[1].default_value = True
            # Realize All
            realize_instances_11.inputs[2].default_value = True
            # Depth
            realize_instances_11.inputs[3].default_value = 0

            # node Position
            position_17 = _mn_utils_style_cartoon.nodes.new("GeometryNodeInputPosition")
            position_17.name = "Position"

            # node Group.033
            group_033 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_033.name = "Group.033"
            group_033.node_tree = _guide_rotation
            # Input_1
            group_033.inputs[0].default_value = 0.0

            # node Group.004
            group_004_7 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_004_7.name = "Group.004"
            group_004_7.node_tree = _debug_arrows
            # Input_5
            group_004_7.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Input_2
            group_004_7.inputs[4].default_value = (
                0.30000001192092896,
                0.30000001192092896,
                0.30000001192092896,
            )

            # node Switch
            switch_40 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_40.label = "DEBUG"
            switch_40.name = "Switch"
            switch_40.input_type = "GEOMETRY"
            # Switch
            switch_40.inputs[0].default_value = False

            # node Reroute
            reroute_46 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_46.name = "Reroute"
            # node Reroute.004
            reroute_004_11 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_004_11.name = "Reroute.004"
            # node Endpoint Selection
            endpoint_selection_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_2.name = "Endpoint Selection"
            # Start Size
            endpoint_selection_2.inputs[0].default_value = 1
            # End Size
            endpoint_selection_2.inputs[1].default_value = 1

            # node Group.005
            group_005_7 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_005_7.name = "Group.005"
            group_005_7.node_tree = _selective_scale
            # Input_3
            group_005_7.inputs[2].default_value = 0.800000011920929

            # node Set Spline Resolution.001
            set_spline_resolution_001_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_001_1.name = "Set Spline Resolution.001"
            # Selection
            set_spline_resolution_001_1.inputs[1].default_value = True

            # node Group.032
            group_032 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_032.name = "Group.032"
            group_032.node_tree = _curve_ends_adjust_angle
            # Input_2
            group_032.inputs[1].default_value = 3.0
            # Input_3
            group_032.inputs[2].default_value = 0.4200000762939453

            # node Group Input.006
            group_input_006_3 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_006_3.name = "Group Input.006"
            group_input_006_3.outputs[0].hide = True
            group_input_006_3.outputs[1].hide = True
            group_input_006_3.outputs[2].hide = True
            group_input_006_3.outputs[3].hide = True
            group_input_006_3.outputs[4].hide = True
            group_input_006_3.outputs[5].hide = True
            group_input_006_3.outputs[8].hide = True
            group_input_006_3.outputs[9].hide = True
            group_input_006_3.outputs[10].hide = True
            group_input_006_3.outputs[11].hide = True
            group_input_006_3.outputs[12].hide = True
            group_input_006_3.outputs[13].hide = True
            group_input_006_3.outputs[14].hide = True
            group_input_006_3.outputs[15].hide = True
            group_input_006_3.outputs[16].hide = True
            group_input_006_3.outputs[17].hide = True
            group_input_006_3.outputs[18].hide = True
            group_input_006_3.outputs[19].hide = True
            group_input_006_3.outputs[20].hide = True
            group_input_006_3.outputs[21].hide = True
            group_input_006_3.outputs[22].hide = True
            group_input_006_3.outputs[23].hide = True
            group_input_006_3.outputs[24].hide = True
            group_input_006_3.outputs[25].hide = True
            group_input_006_3.outputs[26].hide = True
            group_input_006_3.outputs[30].hide = True

            # node Group.029
            group_029_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_029_1.name = "Group.029"
            group_029_1.mute = True
            group_029_1.node_tree = _curve_ends_adjust_position
            # Input_2
            group_029_1.inputs[1].default_value = 0.30000001192092896

            # node Set Handle Type.003
            set_handle_type_003 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_003.name = "Set Handle Type.003"
            set_handle_type_003.handle_type = "AUTO"
            set_handle_type_003.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_003.inputs[1].default_value = True

            # node Set Spline Type.001
            set_spline_type_001_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_001_1.name = "Set Spline Type.001"
            set_spline_type_001_1.spline_type = "BEZIER"
            # Selection
            set_spline_type_001_1.inputs[1].default_value = True

            # node Group.030
            group_030_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_030_1.name = "Group.030"
            group_030_1.node_tree = _curve_to_mesh
            # Input_3
            group_030_1.inputs[3].default_value = True

            # node Group.028
            group_028_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_028_1.name = "Group.028"
            group_028_1.node_tree = _curve_end_fix_color

            # node Set Spline Type.003
            set_spline_type_003 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSplineType"
            )
            set_spline_type_003.name = "Set Spline Type.003"
            set_spline_type_003.spline_type = "BEZIER"
            # Selection
            set_spline_type_003.inputs[1].default_value = True

            # node Group.009
            group_009_3 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_009_3.name = "Group.009"
            group_009_3.node_tree = _guide_rotation
            # Input_1
            group_009_3.inputs[0].default_value = 0.0

            # node Join Geometry.002
            join_geometry_002 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_002.name = "Join Geometry.002"

            # node Resample Curve
            resample_curve_3 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_3.name = "Resample Curve"
            resample_curve_3.mode = "EVALUATED"
            # Selection
            resample_curve_3.inputs[1].default_value = True

            # node Set Spline Resolution
            set_spline_resolution_3 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_3.name = "Set Spline Resolution"
            # Selection
            set_spline_resolution_3.inputs[1].default_value = True

            # node Endpoint Selection.004
            endpoint_selection_004_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_004_2.name = "Endpoint Selection.004"
            # Start Size
            endpoint_selection_004_2.inputs[0].default_value = 1
            # End Size
            endpoint_selection_004_2.inputs[1].default_value = 0

            # node Group.011
            group_011_5 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_011_5.name = "Group.011"
            group_011_5.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_011_5.inputs[0].default_value = -1.0

            # node Endpoint Selection.006
            endpoint_selection_006_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_006_2.name = "Endpoint Selection.006"
            # Start Size
            endpoint_selection_006_2.inputs[0].default_value = 1
            # End Size
            endpoint_selection_006_2.inputs[1].default_value = 0

            # node Group.014
            group_014_6 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_014_6.name = "Group.014"
            group_014_6.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_014_6.inputs[0].default_value = -1.7000000476837158

            # node Endpoint Selection.005
            endpoint_selection_005 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_005.name = "Endpoint Selection.005"
            # Start Size
            endpoint_selection_005.inputs[0].default_value = 0
            # End Size
            endpoint_selection_005.inputs[1].default_value = 1

            # node Endpoint Selection.007
            endpoint_selection_007 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_007.name = "Endpoint Selection.007"
            # Start Size
            endpoint_selection_007.inputs[0].default_value = 0
            # End Size
            endpoint_selection_007.inputs[1].default_value = 1

            # node Group.007
            group_007_6 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_007_6.name = "Group.007"
            group_007_6.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_007_6.inputs[0].default_value = 1.0

            # node Group.020
            group_020 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_020.name = "Group.020"
            group_020.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_020.inputs[0].default_value = 0.699999988079071

            # node Endpoint Selection.008
            endpoint_selection_008_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_008_1.name = "Endpoint Selection.008"
            # Start Size
            endpoint_selection_008_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_008_1.inputs[1].default_value = 0

            # node Group.022
            group_022_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_022_1.name = "Group.022"
            group_022_1.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_022_1.inputs[0].default_value = -1.0

            # node Endpoint Selection.009
            endpoint_selection_009_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_009_1.name = "Endpoint Selection.009"
            # Start Size
            endpoint_selection_009_1.inputs[0].default_value = 1
            # End Size
            endpoint_selection_009_1.inputs[1].default_value = 0

            # node Endpoint Selection.010
            endpoint_selection_010_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_010_1.name = "Endpoint Selection.010"
            # Start Size
            endpoint_selection_010_1.inputs[0].default_value = 0
            # End Size
            endpoint_selection_010_1.inputs[1].default_value = 1

            # node Endpoint Selection.011
            endpoint_selection_011 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_011.name = "Endpoint Selection.011"
            # Start Size
            endpoint_selection_011.inputs[0].default_value = 0
            # End Size
            endpoint_selection_011.inputs[1].default_value = 1

            # node Group.024
            group_024_2 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_024_2.name = "Group.024"
            group_024_2.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_024_2.inputs[0].default_value = 1.0

            # node Group.025
            group_025_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_025_1.name = "Group.025"
            group_025_1.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_025_1.inputs[0].default_value = 0.699999988079071

            # node Set Handle Type.001
            set_handle_type_001_1 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCurveSetHandles"
            )
            set_handle_type_001_1.name = "Set Handle Type.001"
            set_handle_type_001_1.handle_type = "AUTO"
            set_handle_type_001_1.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_001_1.inputs[1].default_value = True

            # node Vector Math
            vector_math_33 = _mn_utils_style_cartoon.nodes.new("ShaderNodeVectorMath")
            vector_math_33.name = "Vector Math"
            vector_math_33.operation = "MULTIPLY"

            # node Reroute.001
            reroute_001_32 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_001_32.name = "Reroute.001"
            # node Reroute.013
            reroute_013_3 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_013_3.name = "Reroute.013"
            # node Boolean Math.007
            boolean_math_007_3 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_007_3.name = "Boolean Math.007"
            boolean_math_007_3.operation = "NOT"

            # node Group.012
            group_012_4 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_012_4.name = "Group.012"
            group_012_4.node_tree = _field_offset_bool
            # Input_1
            group_012_4.inputs[1].default_value = -1

            # node Boolean Math.006
            boolean_math_006_2 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_006_2.name = "Boolean Math.006"
            boolean_math_006_2.operation = "AND"

            # node Reroute.005
            reroute_005_11 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_005_11.name = "Reroute.005"
            # node Group.013
            group_013_2 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_013_2.name = "Group.013"
            group_013_2.node_tree = _field_offset_bool
            # Input_1
            group_013_2.inputs[1].default_value = 1

            # node Combine XYZ.001
            combine_xyz_001_4 = _mn_utils_style_cartoon.nodes.new(
                "ShaderNodeCombineXYZ"
            )
            combine_xyz_001_4.name = "Combine XYZ.001"
            # X
            combine_xyz_001_4.inputs[0].default_value = 1.0

            # node Combine XYZ
            combine_xyz_5 = _mn_utils_style_cartoon.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_5.name = "Combine XYZ"
            # X
            combine_xyz_5.inputs[0].default_value = 1.0

            # node Math.002
            math_002_16 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_002_16.name = "Math.002"
            math_002_16.operation = "MULTIPLY"
            math_002_16.use_clamp = False
            # Value_001
            math_002_16.inputs[1].default_value = 1.100000023841858

            # node Math
            math_38 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_38.name = "Math"
            math_38.operation = "MULTIPLY"
            math_38.use_clamp = False
            # Value_001
            math_38.inputs[1].default_value = 0.5

            # node Capture Attribute
            capture_attribute_11 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_11.name = "Capture Attribute"
            capture_attribute_11.active_index = 0
            capture_attribute_11.capture_items.clear()
            capture_attribute_11.capture_items.new("FLOAT", "Value")
            capture_attribute_11.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_11.domain = "POINT"

            # node Group.021
            group_021_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_021_1.name = "Group.021"
            group_021_1.node_tree = _cartoon_arrows_scale
            # Input_2
            group_021_1.inputs[0].default_value = 0.75
            # Input_3
            group_021_1.inputs[1].default_value = 3.0
            # Input_4
            group_021_1.inputs[2].default_value = 3.0

            # node Switch.004
            switch_004_4 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_004_4.name = "Switch.004"
            switch_004_4.input_type = "FLOAT"
            # False
            switch_004_4.inputs[1].default_value = 1.0

            # node Switch.002
            switch_002_17 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_002_17.name = "Switch.002"
            switch_002_17.input_type = "VECTOR"
            # Switch
            switch_002_17.inputs[0].default_value = False
            # True
            switch_002_17.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Boolean Math.009
            boolean_math_009_1 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_009_1.name = "Boolean Math.009"
            boolean_math_009_1.operation = "AND"

            # node Boolean Math.008
            boolean_math_008_3 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_008_3.name = "Boolean Math.008"
            boolean_math_008_3.operation = "NOT"

            # node Math.009
            math_009_2 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_009_2.name = "Math.009"
            math_009_2.operation = "MULTIPLY"
            math_009_2.use_clamp = False

            # node Switch.005
            switch_005_4 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_005_4.name = "Switch.005"
            switch_005_4.input_type = "FLOAT"
            # False
            switch_005_4.inputs[1].default_value = 1.0

            # node Math.010
            math_010 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMath")
            math_010.name = "Math.010"
            math_010.operation = "MULTIPLY"
            math_010.use_clamp = False

            # node Separate Geometry
            separate_geometry_19 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_19.name = "Separate Geometry"
            separate_geometry_19.domain = "CURVE"

            # node Boolean Math
            boolean_math_32 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_32.name = "Boolean Math"
            boolean_math_32.hide = True
            boolean_math_32.operation = "NOT"

            # node Boolean Math.005
            boolean_math_005_3 = _mn_utils_style_cartoon.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_005_3.name = "Boolean Math.005"
            boolean_math_005_3.hide = True
            boolean_math_005_3.operation = "AND"

            # node Group Input.008
            group_input_008_1 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_008_1.name = "Group Input.008"
            group_input_008_1.outputs[0].hide = True
            group_input_008_1.outputs[1].hide = True
            group_input_008_1.outputs[2].hide = True
            group_input_008_1.outputs[3].hide = True
            group_input_008_1.outputs[4].hide = True
            group_input_008_1.outputs[8].hide = True
            group_input_008_1.outputs[9].hide = True
            group_input_008_1.outputs[10].hide = True
            group_input_008_1.outputs[11].hide = True
            group_input_008_1.outputs[12].hide = True
            group_input_008_1.outputs[13].hide = True
            group_input_008_1.outputs[14].hide = True
            group_input_008_1.outputs[15].hide = True
            group_input_008_1.outputs[16].hide = True
            group_input_008_1.outputs[17].hide = True
            group_input_008_1.outputs[18].hide = True
            group_input_008_1.outputs[19].hide = True
            group_input_008_1.outputs[20].hide = True
            group_input_008_1.outputs[21].hide = True
            group_input_008_1.outputs[22].hide = True
            group_input_008_1.outputs[23].hide = True
            group_input_008_1.outputs[24].hide = True
            group_input_008_1.outputs[25].hide = True
            group_input_008_1.outputs[26].hide = True
            group_input_008_1.outputs[27].hide = True
            group_input_008_1.outputs[28].hide = True
            group_input_008_1.outputs[29].hide = True
            group_input_008_1.outputs[30].hide = True

            # node Join Geometry
            join_geometry_6 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_6.name = "Join Geometry"
            join_geometry_6.hide = True

            # node Group.003
            group_003_9 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_003_9.name = "Group.003"
            group_003_9.node_tree = _cartoon_arrow_instance

            # node Group.023
            group_023_2 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_023_2.name = "Group.023"
            group_023_2.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_023_2.inputs[0].default_value = -1.5

            # node Group.006
            group_006_6 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_006_6.name = "Group.006"
            group_006_6.node_tree = _cartoon_arrow_primitive
            # Input_0
            group_006_6.inputs[0].default_value = 0.7599999904632568

            # node Group.017
            group_017_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_017_1.name = "Group.017"
            group_017_1.node_tree = _curve_to_mesh
            # Input_3
            group_017_1.inputs[3].default_value = True

            # node Group Input.012
            group_input_012 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_012.name = "Group Input.012"
            group_input_012.outputs[0].hide = True
            group_input_012.outputs[1].hide = True
            group_input_012.outputs[2].hide = True
            group_input_012.outputs[3].hide = True
            group_input_012.outputs[4].hide = True
            group_input_012.outputs[5].hide = True
            group_input_012.outputs[6].hide = True
            group_input_012.outputs[7].hide = True
            group_input_012.outputs[8].hide = True
            group_input_012.outputs[9].hide = True
            group_input_012.outputs[10].hide = True
            group_input_012.outputs[11].hide = True
            group_input_012.outputs[12].hide = True
            group_input_012.outputs[13].hide = True
            group_input_012.outputs[14].hide = True
            group_input_012.outputs[15].hide = True
            group_input_012.outputs[17].hide = True
            group_input_012.outputs[18].hide = True
            group_input_012.outputs[19].hide = True
            group_input_012.outputs[20].hide = True
            group_input_012.outputs[21].hide = True
            group_input_012.outputs[22].hide = True
            group_input_012.outputs[23].hide = True
            group_input_012.outputs[24].hide = True
            group_input_012.outputs[25].hide = True
            group_input_012.outputs[26].hide = True
            group_input_012.outputs[27].hide = True
            group_input_012.outputs[28].hide = True
            group_input_012.outputs[29].hide = True
            group_input_012.outputs[30].hide = True

            # node Set Position
            set_position_14 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_14.name = "Set Position"
            # Offset
            set_position_14.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group.010
            group_010_4 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_010_4.name = "Group.010"
            group_010_4.node_tree = _field_offset_vec
            # Input_1
            group_010_4.inputs[1].default_value = 1

            # node Position.001
            position_001_10 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_10.name = "Position.001"

            # node Mix
            mix_12 = _mn_utils_style_cartoon.nodes.new("ShaderNodeMix")
            mix_12.name = "Mix"
            mix_12.blend_type = "MIX"
            mix_12.clamp_factor = True
            mix_12.clamp_result = False
            mix_12.data_type = "VECTOR"
            mix_12.factor_mode = "UNIFORM"
            # Factor_Float
            mix_12.inputs[0].default_value = 0.8704171180725098

            # node Reroute.009
            reroute_009_7 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_009_7.name = "Reroute.009"
            # node Reroute.003
            reroute_003_16 = _mn_utils_style_cartoon.nodes.new("NodeReroute")
            reroute_003_16.name = "Reroute.003"
            # node Group Input.011
            group_input_011_1 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_011_1.name = "Group Input.011"
            group_input_011_1.outputs[0].hide = True
            group_input_011_1.outputs[1].hide = True
            group_input_011_1.outputs[2].hide = True
            group_input_011_1.outputs[3].hide = True
            group_input_011_1.outputs[4].hide = True
            group_input_011_1.outputs[5].hide = True
            group_input_011_1.outputs[8].hide = True
            group_input_011_1.outputs[9].hide = True
            group_input_011_1.outputs[13].hide = True
            group_input_011_1.outputs[14].hide = True
            group_input_011_1.outputs[15].hide = True
            group_input_011_1.outputs[17].hide = True
            group_input_011_1.outputs[18].hide = True
            group_input_011_1.outputs[19].hide = True
            group_input_011_1.outputs[20].hide = True
            group_input_011_1.outputs[21].hide = True
            group_input_011_1.outputs[22].hide = True
            group_input_011_1.outputs[23].hide = True
            group_input_011_1.outputs[24].hide = True
            group_input_011_1.outputs[25].hide = True
            group_input_011_1.outputs[26].hide = True
            group_input_011_1.outputs[27].hide = True
            group_input_011_1.outputs[28].hide = True
            group_input_011_1.outputs[29].hide = True
            group_input_011_1.outputs[30].hide = True

            # node Group.026
            group_026_2 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_026_2.name = "Group.026"
            group_026_2.node_tree = _mn_select_sec_struct
            # Socket_1
            group_026_2.inputs[0].default_value = True

            # node Group.019
            group_019_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_019_1.name = "Group.019"
            group_019_1.node_tree = _curve_custom_profile
            # Input_13
            group_019_1.inputs[2].default_value = 1.0
            # Input_14
            group_019_1.inputs[3].default_value = 0.7853981852531433
            # Input_3
            group_019_1.inputs[7].default_value = 0.0
            # Input_5
            group_019_1.inputs[8].default_value = 1.0
            # Input_16
            group_019_1.inputs[10].default_value = False

            # node Group.015
            group_015_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_015_1.name = "Group.015"
            group_015_1.node_tree = mn_units
            # Input_1
            group_015_1.inputs[0].default_value = 2.200000047683716

            # node Store Named Attribute
            store_named_attribute_17 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_17.name = "Store Named Attribute"
            store_named_attribute_17.data_type = "INT"
            store_named_attribute_17.domain = "POINT"
            # Selection
            store_named_attribute_17.inputs[1].default_value = True
            # Name
            store_named_attribute_17.inputs[2].default_value = "sec_struct"
            # Value
            store_named_attribute_17.inputs[3].default_value = 3

            # node Group.016
            group_016_1 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_016_1.name = "Group.016"
            group_016_1.node_tree = _curve_custom_profile
            # Input_13
            group_016_1.inputs[2].default_value = 1.0
            # Input_14
            group_016_1.inputs[3].default_value = 0.7853981852531433
            # Input_3
            group_016_1.inputs[7].default_value = 0.0
            # Input_5
            group_016_1.inputs[8].default_value = 0.625
            # Input_16
            group_016_1.inputs[10].default_value = True

            # node Named Attribute
            named_attribute_40 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_40.name = "Named Attribute"
            named_attribute_40.data_type = "INT"
            # Name
            named_attribute_40.inputs[0].default_value = "idx"

            # node Named Attribute.001
            named_attribute_001_24 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_24.name = "Named Attribute.001"
            named_attribute_001_24.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_001_24.inputs[0].default_value = "Color"

            # node Store Named Attribute.001
            store_named_attribute_001_6 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_6.name = "Store Named Attribute.001"
            store_named_attribute_001_6.data_type = "FLOAT_COLOR"
            store_named_attribute_001_6.domain = "FACE"
            # Selection
            store_named_attribute_001_6.inputs[1].default_value = True
            # Name
            store_named_attribute_001_6.inputs[2].default_value = "Color"

            # node Group Output
            group_output_152 = _mn_utils_style_cartoon.nodes.new("NodeGroupOutput")
            group_output_152.name = "Group Output"
            group_output_152.is_active_output = True

            # node Set Material
            set_material_10 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_10.name = "Set Material"
            # Selection
            set_material_10.inputs[1].default_value = True

            # node Group Input.003
            group_input_003_8 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_003_8.name = "Group Input.003"
            group_input_003_8.outputs[0].hide = True
            group_input_003_8.outputs[1].hide = True
            group_input_003_8.outputs[2].hide = True
            group_input_003_8.outputs[3].hide = True
            group_input_003_8.outputs[5].hide = True
            group_input_003_8.outputs[8].hide = True
            group_input_003_8.outputs[9].hide = True
            group_input_003_8.outputs[10].hide = True
            group_input_003_8.outputs[11].hide = True
            group_input_003_8.outputs[12].hide = True
            group_input_003_8.outputs[13].hide = True
            group_input_003_8.outputs[14].hide = True
            group_input_003_8.outputs[15].hide = True
            group_input_003_8.outputs[16].hide = True
            group_input_003_8.outputs[17].hide = True
            group_input_003_8.outputs[18].hide = True
            group_input_003_8.outputs[19].hide = True
            group_input_003_8.outputs[20].hide = True
            group_input_003_8.outputs[21].hide = True
            group_input_003_8.outputs[22].hide = True
            group_input_003_8.outputs[23].hide = True
            group_input_003_8.outputs[24].hide = True
            group_input_003_8.outputs[25].hide = True
            group_input_003_8.outputs[26].hide = True
            group_input_003_8.outputs[27].hide = True
            group_input_003_8.outputs[28].hide = True
            group_input_003_8.outputs[29].hide = True
            group_input_003_8.outputs[30].hide = True

            # node Sample Index
            sample_index_9 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_9.name = "Sample Index"
            sample_index_9.clamp = False
            sample_index_9.data_type = "FLOAT_COLOR"
            sample_index_9.domain = "POINT"

            # node Switch.001
            switch_001_23 = _mn_utils_style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_001_23.name = "Switch.001"
            switch_001_23.input_type = "GEOMETRY"

            # node Group.001
            group_001_28 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_001_28.name = "Group.001"
            group_001_28.node_tree = _atoms_to_curves

            # node Group Input
            group_input_150 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_150.name = "Group Input"
            group_input_150.outputs[2].hide = True
            group_input_150.outputs[3].hide = True
            group_input_150.outputs[4].hide = True
            group_input_150.outputs[5].hide = True
            group_input_150.outputs[6].hide = True
            group_input_150.outputs[7].hide = True
            group_input_150.outputs[8].hide = True
            group_input_150.outputs[9].hide = True
            group_input_150.outputs[10].hide = True
            group_input_150.outputs[11].hide = True
            group_input_150.outputs[12].hide = True
            group_input_150.outputs[13].hide = True
            group_input_150.outputs[14].hide = True
            group_input_150.outputs[16].hide = True
            group_input_150.outputs[17].hide = True
            group_input_150.outputs[18].hide = True
            group_input_150.outputs[19].hide = True
            group_input_150.outputs[20].hide = True
            group_input_150.outputs[21].hide = True
            group_input_150.outputs[22].hide = True
            group_input_150.outputs[23].hide = True
            group_input_150.outputs[24].hide = True
            group_input_150.outputs[25].hide = True
            group_input_150.outputs[26].hide = True
            group_input_150.outputs[27].hide = True
            group_input_150.outputs[28].hide = True
            group_input_150.outputs[29].hide = True
            group_input_150.outputs[30].hide = True

            # node Group Input.005
            group_input_005_3 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_005_3.name = "Group Input.005"
            group_input_005_3.outputs[0].hide = True
            group_input_005_3.outputs[1].hide = True
            group_input_005_3.outputs[2].hide = True
            group_input_005_3.outputs[3].hide = True
            group_input_005_3.outputs[4].hide = True
            group_input_005_3.outputs[10].hide = True
            group_input_005_3.outputs[11].hide = True
            group_input_005_3.outputs[12].hide = True
            group_input_005_3.outputs[15].hide = True
            group_input_005_3.outputs[16].hide = True
            group_input_005_3.outputs[17].hide = True
            group_input_005_3.outputs[18].hide = True
            group_input_005_3.outputs[19].hide = True
            group_input_005_3.outputs[20].hide = True
            group_input_005_3.outputs[21].hide = True
            group_input_005_3.outputs[22].hide = True
            group_input_005_3.outputs[23].hide = True
            group_input_005_3.outputs[24].hide = True
            group_input_005_3.outputs[25].hide = True
            group_input_005_3.outputs[26].hide = True
            group_input_005_3.outputs[27].hide = True
            group_input_005_3.outputs[28].hide = True
            group_input_005_3.outputs[29].hide = True
            group_input_005_3.outputs[30].hide = True

            # node Group Input.001
            group_input_001_24 = _mn_utils_style_cartoon.nodes.new("NodeGroupInput")
            group_input_001_24.name = "Group Input.001"
            group_input_001_24.outputs[0].hide = True
            group_input_001_24.outputs[1].hide = True
            group_input_001_24.outputs[2].hide = True
            group_input_001_24.outputs[4].hide = True
            group_input_001_24.outputs[5].hide = True
            group_input_001_24.outputs[6].hide = True
            group_input_001_24.outputs[7].hide = True
            group_input_001_24.outputs[8].hide = True
            group_input_001_24.outputs[9].hide = True
            group_input_001_24.outputs[10].hide = True
            group_input_001_24.outputs[11].hide = True
            group_input_001_24.outputs[12].hide = True
            group_input_001_24.outputs[13].hide = True
            group_input_001_24.outputs[14].hide = True
            group_input_001_24.outputs[15].hide = True
            group_input_001_24.outputs[16].hide = True
            group_input_001_24.outputs[17].hide = True
            group_input_001_24.outputs[18].hide = True
            group_input_001_24.outputs[19].hide = True
            group_input_001_24.outputs[20].hide = True
            group_input_001_24.outputs[21].hide = True
            group_input_001_24.outputs[22].hide = True
            group_input_001_24.outputs[23].hide = True
            group_input_001_24.outputs[24].hide = True
            group_input_001_24.outputs[25].hide = True
            group_input_001_24.outputs[26].hide = True
            group_input_001_24.outputs[27].hide = True
            group_input_001_24.outputs[28].hide = True
            group_input_001_24.outputs[29].hide = True
            group_input_001_24.outputs[30].hide = True

            # node Remove Named Attribute
            remove_named_attribute_2 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeRemoveAttribute"
            )
            remove_named_attribute_2.name = "Remove Named Attribute"
            remove_named_attribute_2.pattern_mode = "EXACT"
            # Name
            remove_named_attribute_2.inputs[1].default_value = "idx"

            # node Set Handle Positions.008
            set_handle_positions_008 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_008.name = "Set Handle Positions.008"
            set_handle_positions_008.mode = "LEFT"
            # Position
            set_handle_positions_008.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.007
            set_handle_positions_007 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_007.name = "Set Handle Positions.007"
            set_handle_positions_007.mode = "RIGHT"
            # Position
            set_handle_positions_007.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.009
            set_handle_positions_009 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_009.name = "Set Handle Positions.009"
            set_handle_positions_009.mode = "LEFT"
            # Position
            set_handle_positions_009.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.010
            set_handle_positions_010 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_010.name = "Set Handle Positions.010"
            set_handle_positions_010.mode = "RIGHT"
            # Position
            set_handle_positions_010.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.003
            set_handle_positions_003 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_003.name = "Set Handle Positions.003"
            set_handle_positions_003.mode = "RIGHT"
            # Position
            set_handle_positions_003.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.005
            set_handle_positions_005 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_005.name = "Set Handle Positions.005"
            set_handle_positions_005.mode = "LEFT"
            # Position
            set_handle_positions_005.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.004
            set_handle_positions_004 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_004.name = "Set Handle Positions.004"
            set_handle_positions_004.mode = "LEFT"
            # Position
            set_handle_positions_004.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Handle Positions.006
            set_handle_positions_006 = _mn_utils_style_cartoon.nodes.new(
                "GeometryNodeSetCurveHandlePositions"
            )
            set_handle_positions_006.name = "Set Handle Positions.006"
            set_handle_positions_006.mode = "RIGHT"
            # Position
            set_handle_positions_006.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group.002
            group_002_16 = _mn_utils_style_cartoon.nodes.new("GeometryNodeGroup")
            group_002_16.name = "Group.002"
            group_002_16.node_tree = _mn_cartoon_smooth_handles
            # Input_1
            group_002_16.inputs[0].default_value = 1.0

            # Set parents
            group_input_002_13.parent = frame_006_2
            switch_003_7.parent = frame_009
            math_004_5.parent = frame_009
            math_005_4.parent = frame_009
            spline_length_001_1.parent = frame_009
            vector_rotate_3.parent = frame_008_1
            vector.parent = frame_008_1
            vector_math_001_21.parent = frame_008_1
            group_008_3.parent = frame_008_1
            group_018_1.parent = frame_005_2
            boolean_math_003_9.parent = frame_005_2
            boolean_math_001_29.parent = frame_005_2
            group_input_010.parent = frame_005_2
            combine_xyz_002_1.parent = frame_005_2
            reroute_011_3.parent = frame_005_2
            reroute_012_3.parent = frame_005_2
            math_001_26.parent = frame_005_2
            separate_geometry_003_5.parent = frame_005_2
            mesh_to_curve_4.parent = frame_005_2
            set_spline_type_002_1.parent = frame_005_2
            set_handle_type_2.parent = frame_005_2
            set_handle_positions_001_1.parent = frame_005_2
            set_handle_positions_002.parent = frame_005_2
            reroute_002_23.parent = frame_005_2
            reroute_008_4.parent = frame_005_2
            endpoint_selection_002_1.parent = frame_005_2
            endpoint_selection_003_2.parent = frame_005_2
            group_input_004_6.parent = frame_005_2
            position_17.parent = frame_007_2
            group_033.parent = frame_007_2
            group_004_7.parent = frame_007_2
            endpoint_selection_2.parent = frame_003_4
            group_005_7.parent = frame_003_4
            set_spline_resolution_001_1.parent = frame_003_4
            group_032.parent = frame_003_4
            group_input_006_3.parent = frame_003_4
            group_029_1.parent = frame_003_4
            set_handle_type_003.parent = frame_003_4
            set_spline_type_001_1.parent = frame_003_4
            group_030_1.parent = frame_003_4
            group_028_1.parent = frame_003_4
            set_spline_type_003.parent = frame_004_2
            group_009_3.parent = frame_004_2
            join_geometry_002.parent = frame_004_2
            resample_curve_3.parent = frame_004_2
            set_spline_resolution_3.parent = frame_004_2
            endpoint_selection_004_2.parent = frame_003_4
            group_011_5.parent = frame_003_4
            endpoint_selection_006_2.parent = frame_003_4
            group_014_6.parent = frame_003_4
            endpoint_selection_005.parent = frame_003_4
            endpoint_selection_007.parent = frame_003_4
            group_007_6.parent = frame_003_4
            group_020.parent = frame_003_4
            endpoint_selection_008_1.parent = frame_004_2
            group_022_1.parent = frame_004_2
            endpoint_selection_009_1.parent = frame_004_2
            endpoint_selection_010_1.parent = frame_004_2
            endpoint_selection_011.parent = frame_004_2
            group_024_2.parent = frame_004_2
            group_025_1.parent = frame_004_2
            set_handle_type_001_1.parent = frame_004_2
            vector_math_33.parent = frame_004_2
            reroute_001_32.parent = frame_004_2
            reroute_013_3.parent = frame_004_2
            boolean_math_007_3.parent = frame_004_2
            group_012_4.parent = frame_004_2
            boolean_math_006_2.parent = frame_004_2
            reroute_005_11.parent = frame_004_2
            group_013_2.parent = frame_004_2
            combine_xyz_001_4.parent = frame_004_2
            combine_xyz_5.parent = frame_004_2
            math_002_16.parent = frame_004_2
            math_38.parent = frame_004_2
            capture_attribute_11.parent = frame_004_2
            group_021_1.parent = frame_004_2
            switch_004_4.parent = frame_004_2
            switch_002_17.parent = frame_004_2
            boolean_math_009_1.parent = frame_004_2
            boolean_math_008_3.parent = frame_004_2
            math_009_2.parent = frame_004_2
            switch_005_4.parent = frame_004_2
            math_010.parent = frame_004_2
            separate_geometry_19.parent = frame_004_2
            boolean_math_32.parent = frame_004_2
            boolean_math_005_3.parent = frame_004_2
            group_input_008_1.parent = frame_004_2
            join_geometry_6.parent = frame_004_2
            group_003_9.parent = frame_004_2
            group_023_2.parent = frame_004_2
            group_006_6.parent = frame_004_2
            group_input_012.parent = frame_004_2
            set_position_14.parent = frame_004_2
            group_010_4.parent = frame_004_2
            position_001_10.parent = frame_004_2
            mix_12.parent = frame_004_2
            reroute_009_7.parent = frame_004_2
            reroute_003_16.parent = frame_004_2
            group_input_011_1.parent = frame_004_2
            group_019_1.parent = frame_004_2
            group_015_1.parent = frame_008_1
            store_named_attribute_17.parent = frame_003_4
            group_016_1.parent = frame_005_2
            group_input_005_3.parent = frame_004_2
            set_handle_positions_008.parent = frame_004_2
            set_handle_positions_007.parent = frame_004_2
            set_handle_positions_009.parent = frame_004_2
            set_handle_positions_010.parent = frame_004_2
            set_handle_positions_003.parent = frame_003_4
            set_handle_positions_005.parent = frame_003_4
            set_handle_positions_004.parent = frame_003_4
            set_handle_positions_006.parent = frame_003_4
            group_002_16.parent = frame_005_2

            # Set locations
            frame_006_2.location = (-1366.132568359375, 289.572265625)
            frame_009.location = (-2332.05859375, 1913.763916015625)
            frame_008_1.location = (-2354.582275390625, 2424.24951171875)
            frame_005_2.location = (-15.40618896484375, -250.0697021484375)
            frame_007_2.location = (394.45556640625, 400.14013671875)
            frame_003_4.location = (-317.85302734375, -1007.8157958984375)
            frame_004_2.location = (-841.83837890625, -199.314453125)
            set_spline_resolution_002.location = (-2100.099609375, 2721.916259765625)
            reroute_006_10.location = (-2126.0078125, 2486.323486328125)
            boolean_math_016_1.location = (-3669.412841796875, 2606.323486328125)
            separate_geometry_005.location = (-3489.412841796875, 2806.323486328125)
            group_input_002_13.location = (-2831.1396484375, 2082.99365234375)
            mesh_to_curve_002_1.location = (-3240.0, 2800.0)
            set_position_004_1.location = (-2980.0, 2820.0)
            boolean_math_017_1.location = (-3240.0, 2680.0)
            endpoint_selection_001_3.location = (-3240.0, 2560.0)
            switch_003_7.location = (-60.0, 380.0)
            math_004_5.location = (-60.0, 540.0)
            math_005_4.location = (-220.0, 540.0)
            spline_length_001_1.location = (-380.0, 540.0)
            vector_rotate_3.location = (-1040.0, -260.0)
            vector.location = (-1220.0, -260.0)
            vector_math_001_21.location = (-700.0, -280.0)
            reroute_007_9.location = (-6685.658203125, 1880.0)
            group_008_3.location = (-1385.417724609375, -444.24951171875)
            resample_curve_001_2.location = (-2757.201171875, 2731.029052734375)
            set_handle_type_002.location = (-2260.0, 2720.0)
            set_spline_type_3.location = (-2420.0, 2720.0)
            group_018_1.location = (-4324.76953125, 1520.286376953125)
            boolean_math_003_9.location = (-4138.7490234375, 1563.5899658203125)
            boolean_math_001_29.location = (-4123.6044921875, 1424.9202880859375)
            group_input_010.location = (-4303.732421875, 1353.47900390625)
            combine_xyz_002_1.location = (-2271.80615234375, 1601.967041015625)
            reroute_011_3.location = (-2291.80615234375, 1441.967041015625)
            reroute_012_3.location = (-2091.80615234375, 1441.967041015625)
            math_001_26.location = (-2271.80615234375, 1641.967041015625)
            join_geometry_001_5.location = (-967.3782958984375, 1480.0)
            separate_geometry_003_5.location = (-4267.439453125, 1743.5623779296875)
            mesh_to_curve_4.location = (-4093.024169921875, 1739.939453125)
            set_spline_type_002_1.location = (-3933.024169921875, 1739.939453125)
            set_handle_type_2.location = (-3773.024169921875, 1739.939453125)
            set_handle_positions_001_1.location = (-3402.251953125, 1710.0697021484375)
            set_handle_positions_002.location = (-3242.251953125, 1710.0697021484375)
            reroute_002_23.location = (-3349.703857421875, 1510.0697021484375)
            reroute_008_4.location = (-3189.703857421875, 1510.0697021484375)
            endpoint_selection_002_1.location = (-3329.703857421875, 1830.0697021484375)
            endpoint_selection_003_2.location = (-3169.703857421875, 1830.0697021484375)
            store_named_attribute_002_4.location = (
                -199.57374572753906,
                1612.9656982421875,
            )
            group_input_004_6.location = (-2564.354248046875, 1721.967041015625)
            group_input_007_2.location = (-760.0, 1440.0)
            boolean_math_004_6.location = (-600.0, 1440.0)
            edge_angle_001.location = (-600.0, 1300.0)
            compare_006_1.location = (-440.0, 1300.0)
            boolean_math_002_18.location = (-440.0, 1440.0)
            realize_instances_11.location = (-780.0, 1500.0)
            position_17.location = (-2360.0, 3040.0)
            group_033.location = (-2360.0, 2960.0)
            group_004_7.location = (-2180.0, 3160.0)
            switch_40.location = (-1522.8076171875, 3373.817138671875)
            reroute_46.location = (-4909.38330078125, 3288.636962890625)
            reroute_004_11.location = (-1140.0, -1640.0)
            endpoint_selection_2.location = (-2020.0, -780.0)
            group_005_7.location = (-1860.0, -780.0)
            set_spline_resolution_001_1.location = (
                -1723.6593017578125,
                -602.0430297851562,
            )
            group_032.location = (-2353.30224609375, -600.0)
            group_input_006_3.location = (-2630.1416015625, -876.25244140625)
            group_029_1.location = (-2721.81103515625, -737.4035034179688)
            set_handle_type_003.location = (-4045.0, -657.0)
            set_spline_type_001_1.location = (-4205.0, -657.0)
            group_030_1.location = (-1560.0, -600.0)
            group_028_1.location = (-3865.0, -657.0)
            set_spline_type_003.location = (-4116.6328125, 785.1316528320312)
            group_009_3.location = (-2745.187255859375, 416.64630126953125)
            join_geometry_002.location = (-2413.2392578125, 776.6463012695312)
            resample_curve_3.location = (-1973.2392578125, 816.6463012695312)
            set_spline_resolution_3.location = (-2219.64794921875, 789.2409057617188)
            endpoint_selection_004_2.location = (-3322.8984375, -487.47149658203125)
            group_011_5.location = (-3322.8984375, -787.4714965820312)
            endpoint_selection_006_2.location = (-3482.8984375, -487.47149658203125)
            group_014_6.location = (-3482.8984375, -787.4714965820312)
            endpoint_selection_005.location = (-3162.8984375, -487.47149658203125)
            endpoint_selection_007.location = (-3002.8984375, -487.47149658203125)
            group_007_6.location = (-3162.8984375, -787.4714965820312)
            group_020.location = (-3002.8984375, -787.4714965820312)
            endpoint_selection_008_1.location = (-3505.1455078125, 849.3387451171875)
            group_022_1.location = (-3505.1455078125, 549.3387451171875)
            endpoint_selection_009_1.location = (-3665.1455078125, 849.3387451171875)
            endpoint_selection_010_1.location = (-3345.1455078125, 849.3387451171875)
            endpoint_selection_011.location = (-3185.145263671875, 849.3387451171875)
            group_024_2.location = (-3345.1455078125, 549.3387451171875)
            group_025_1.location = (-3185.145263671875, 549.3387451171875)
            set_handle_type_001_1.location = (-3936.6328125, 785.1316528320312)
            vector_math_33.location = (-2747.376708984375, -14.962554931640625)
            reroute_001_32.location = (-2468.4931640625, 59.305511474609375)
            reroute_013_3.location = (-3578.16162109375, 219.314453125)
            boolean_math_007_3.location = (-3518.16162109375, 359.314453125)
            group_012_4.location = (-3518.16162109375, 239.314453125)
            boolean_math_006_2.location = (-3358.16162109375, 359.314453125)
            reroute_005_11.location = (-2238.16162109375, 199.314453125)
            group_013_2.location = (-3358.16162109375, 199.314453125)
            combine_xyz_001_4.location = (-2738.16162109375, -180.685546875)
            combine_xyz_5.location = (-3158.16162109375, 39.314453125)
            math_002_16.location = (-2938.16162109375, -240.685546875)
            math_38.location = (-2938.16162109375, -400.685546875)
            capture_attribute_11.location = (-1798.16162109375, 819.314453125)
            group_021_1.location = (-4330.72509765625, 217.2227783203125)
            switch_004_4.location = (-3917.2177734375, 73.55532836914062)
            switch_002_17.location = (-2937.197998046875, -4.88739013671875)
            boolean_math_009_1.location = (-3918.16162109375, -100.685546875)
            boolean_math_008_3.location = (-3918.16162109375, -240.685546875)
            math_009_2.location = (-3738.16162109375, 79.314453125)
            switch_005_4.location = (-3738.16162109375, -100.685546875)
            math_010.location = (-3558.16162109375, -100.685546875)
            separate_geometry_19.location = (-2773.2392578125, 856.6463012695312)
            boolean_math_32.location = (-2998.16162109375, 619.314453125)
            boolean_math_005_3.location = (-2998.16162109375, 579.314453125)
            group_input_008_1.location = (-2998.16162109375, 539.314453125)
            join_geometry_6.location = (-806.4035034179688, 692.7628784179688)
            group_003_9.location = (-2425.187255859375, 636.6463012695312)
            group_023_2.location = (-3665.1455078125, 549.3387451171875)
            group_006_6.location = (-2745.187255859375, 556.6463012695312)
            group_017_1.location = (-1920.0997314453125, 2721.916259765625)
            group_input_012.location = (-2218.16162109375, 659.314453125)
            set_position_14.location = (-1318.16162109375, 859.314453125)
            group_010_4.location = (-1638.16162109375, 639.314453125)
            position_001_10.location = (-1638.16162109375, 719.314453125)
            mix_12.location = (-1478.16162109375, 719.314453125)
            reroute_009_7.location = (-1858.16162109375, 339.314453125)
            reroute_003_16.location = (-838.16162109375, 339.314453125)
            group_input_011_1.location = (-1318.16162109375, 639.314453125)
            group_026_2.location = (-4220.0, 2580.0)
            group_019_1.location = (-1089.0626220703125, 862.9052124023438)
            group_015_1.location = (-880.0, -400.0)
            store_named_attribute_17.location = (-1382.14697265625, -592.1842041015625)
            group_016_1.location = (-2121.642822265625, 1829.195556640625)
            named_attribute_40.location = (-620.0, 1680.0)
            named_attribute_001_24.location = (-620.0, 1820.0)
            store_named_attribute_001_6.location = (
                60.831932067871094,
                1781.5216064453125,
            )
            group_output_152.location = (924.4188842773438, 1754.622314453125)
            set_material_10.location = (772.8197021484375, 1751.5650634765625)
            group_input_003_8.location = (612.8197021484375, 1651.5650634765625)
            sample_index_9.location = (-380.0, 1980.0)
            switch_001_23.location = (220.0, 1800.0)
            group_001_28.location = (-7240.0, 1740.0)
            group_input_150.location = (-7460.0, 1540.0)
            group_input_005_3.location = (-4650.06201171875, -62.146148681640625)
            group_input_001_24.location = (220.0, 1880.0)
            remove_named_attribute_2.location = (380.0, 1800.0)
            set_handle_positions_008.location = (-3665.1455078125, 729.3387451171875)
            set_handle_positions_007.location = (-3504.087890625, 735.6434326171875)
            set_handle_positions_009.location = (-3344.087890625, 735.6434326171875)
            set_handle_positions_010.location = (-3185.145263671875, 729.3387451171875)
            set_handle_positions_003.location = (-3321.84130859375, -601.1668090820312)
            set_handle_positions_005.location = (-3482.8984375, -607.4714965820312)
            set_handle_positions_004.location = (-3161.84130859375, -601.1668090820312)
            set_handle_positions_006.location = (-3002.8984375, -607.4714965820312)
            group_002_16.location = (-3713.108642578125, 1510.0697021484375)

            # Set dimensions
            frame_006_2.width, frame_006_2.height = 200.0, 254.0
            frame_009.width, frame_009.height = 520.0, 374.0
            frame_008_1.width, frame_008_1.height = 885.5, 352.0
            frame_005_2.width, frame_005_2.height = 2507.548095703125, 642.5
            frame_007_2.width, frame_007_2.height = 380.0, 376.0
            frame_003_4.width, frame_003_4.height = 3023.0, 598.5
            frame_004_2.width, frame_004_2.height = 4044.0, 1482.5
            set_spline_resolution_002.width, set_spline_resolution_002.height = (
                140.0,
                100.0,
            )
            reroute_006_10.width, reroute_006_10.height = 16.0, 100.0
            boolean_math_016_1.width, boolean_math_016_1.height = 140.0, 100.0
            separate_geometry_005.width, separate_geometry_005.height = (
                203.40496826171875,
                100.0,
            )
            group_input_002_13.width, group_input_002_13.height = 140.0, 100.0
            mesh_to_curve_002_1.width, mesh_to_curve_002_1.height = 140.0, 100.0
            set_position_004_1.width, set_position_004_1.height = 140.0, 100.0
            boolean_math_017_1.width, boolean_math_017_1.height = 140.0, 100.0
            endpoint_selection_001_3.width, endpoint_selection_001_3.height = (
                140.0,
                100.0,
            )
            switch_003_7.width, switch_003_7.height = 140.0, 100.0
            math_004_5.width, math_004_5.height = 140.0, 100.0
            math_005_4.width, math_005_4.height = 140.0, 100.0
            spline_length_001_1.width, spline_length_001_1.height = 140.0, 100.0
            vector_rotate_3.width, vector_rotate_3.height = 140.0, 100.0
            vector.width, vector.height = 140.0, 100.0
            vector_math_001_21.width, vector_math_001_21.height = 140.0, 100.0
            reroute_007_9.width, reroute_007_9.height = 16.0, 100.0
            group_008_3.width, group_008_3.height = 326.6707763671875, 100.0
            resample_curve_001_2.width, resample_curve_001_2.height = 140.0, 100.0
            set_handle_type_002.width, set_handle_type_002.height = 140.0, 100.0
            set_spline_type_3.width, set_spline_type_3.height = 140.0, 100.0
            group_018_1.width, group_018_1.height = 158.9053955078125, 100.0
            boolean_math_003_9.width, boolean_math_003_9.height = 140.0, 100.0
            boolean_math_001_29.width, boolean_math_001_29.height = 140.0, 100.0
            group_input_010.width, group_input_010.height = 140.0, 100.0
            combine_xyz_002_1.width, combine_xyz_002_1.height = 140.0, 100.0
            reroute_011_3.width, reroute_011_3.height = 16.0, 100.0
            reroute_012_3.width, reroute_012_3.height = 16.0, 100.0
            math_001_26.width, math_001_26.height = 140.0, 100.0
            join_geometry_001_5.width, join_geometry_001_5.height = 140.0, 100.0
            separate_geometry_003_5.width, separate_geometry_003_5.height = 140.0, 100.0
            mesh_to_curve_4.width, mesh_to_curve_4.height = 140.0, 100.0
            set_spline_type_002_1.width, set_spline_type_002_1.height = 140.0, 100.0
            set_handle_type_2.width, set_handle_type_2.height = 140.0, 100.0
            set_handle_positions_001_1.width, set_handle_positions_001_1.height = (
                140.0,
                100.0,
            )
            set_handle_positions_002.width, set_handle_positions_002.height = (
                140.0,
                100.0,
            )
            reroute_002_23.width, reroute_002_23.height = 16.0, 100.0
            reroute_008_4.width, reroute_008_4.height = 16.0, 100.0
            endpoint_selection_002_1.width, endpoint_selection_002_1.height = (
                140.0,
                100.0,
            )
            endpoint_selection_003_2.width, endpoint_selection_003_2.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002_4.width, store_named_attribute_002_4.height = (
                176.01080322265625,
                100.0,
            )
            group_input_004_6.width, group_input_004_6.height = 140.0, 100.0
            group_input_007_2.width, group_input_007_2.height = 140.0, 100.0
            boolean_math_004_6.width, boolean_math_004_6.height = 140.0, 100.0
            edge_angle_001.width, edge_angle_001.height = 140.0, 100.0
            compare_006_1.width, compare_006_1.height = 140.0, 100.0
            boolean_math_002_18.width, boolean_math_002_18.height = 140.0, 100.0
            realize_instances_11.width, realize_instances_11.height = 140.0, 100.0
            position_17.width, position_17.height = 140.0, 100.0
            group_033.width, group_033.height = 140.0, 100.0
            group_004_7.width, group_004_7.height = 140.0, 100.0
            switch_40.width, switch_40.height = 140.0, 100.0
            reroute_46.width, reroute_46.height = 16.0, 100.0
            reroute_004_11.width, reroute_004_11.height = 16.0, 100.0
            endpoint_selection_2.width, endpoint_selection_2.height = 140.0, 100.0
            group_005_7.width, group_005_7.height = 227.437255859375, 100.0
            set_spline_resolution_001_1.width, set_spline_resolution_001_1.height = (
                140.0,
                100.0,
            )
            group_032.width, group_032.height = 329.30224609375, 100.0
            group_input_006_3.width, group_input_006_3.height = 140.0, 100.0
            group_029_1.width, group_029_1.height = 253.837646484375, 100.0
            set_handle_type_003.width, set_handle_type_003.height = 140.0, 100.0
            set_spline_type_001_1.width, set_spline_type_001_1.height = 140.0, 100.0
            group_030_1.width, group_030_1.height = 140.0, 100.0
            group_028_1.width, group_028_1.height = 312.298828125, 100.0
            set_spline_type_003.width, set_spline_type_003.height = 140.0, 100.0
            group_009_3.width, group_009_3.height = 205.1739501953125, 100.0
            join_geometry_002.width, join_geometry_002.height = 140.0, 100.0
            resample_curve_3.width, resample_curve_3.height = 140.0, 100.0
            set_spline_resolution_3.width, set_spline_resolution_3.height = 140.0, 100.0
            endpoint_selection_004_2.width, endpoint_selection_004_2.height = (
                140.0,
                100.0,
            )
            group_011_5.width, group_011_5.height = 140.0, 100.0
            endpoint_selection_006_2.width, endpoint_selection_006_2.height = (
                140.0,
                100.0,
            )
            group_014_6.width, group_014_6.height = 140.0, 100.0
            endpoint_selection_005.width, endpoint_selection_005.height = 140.0, 100.0
            endpoint_selection_007.width, endpoint_selection_007.height = 140.0, 100.0
            group_007_6.width, group_007_6.height = 140.0, 100.0
            group_020.width, group_020.height = 140.0, 100.0
            endpoint_selection_008_1.width, endpoint_selection_008_1.height = (
                140.0,
                100.0,
            )
            group_022_1.width, group_022_1.height = 140.0, 100.0
            endpoint_selection_009_1.width, endpoint_selection_009_1.height = (
                140.0,
                100.0,
            )
            endpoint_selection_010_1.width, endpoint_selection_010_1.height = (
                140.0,
                100.0,
            )
            endpoint_selection_011.width, endpoint_selection_011.height = 140.0, 100.0
            group_024_2.width, group_024_2.height = 140.0, 100.0
            group_025_1.width, group_025_1.height = 140.0, 100.0
            set_handle_type_001_1.width, set_handle_type_001_1.height = 140.0, 100.0
            vector_math_33.width, vector_math_33.height = 140.0, 100.0
            reroute_001_32.width, reroute_001_32.height = 16.0, 100.0
            reroute_013_3.width, reroute_013_3.height = 16.0, 100.0
            boolean_math_007_3.width, boolean_math_007_3.height = 140.0, 100.0
            group_012_4.width, group_012_4.height = 140.0, 100.0
            boolean_math_006_2.width, boolean_math_006_2.height = 140.0, 100.0
            reroute_005_11.width, reroute_005_11.height = 16.0, 100.0
            group_013_2.width, group_013_2.height = 140.0, 100.0
            combine_xyz_001_4.width, combine_xyz_001_4.height = 140.0, 100.0
            combine_xyz_5.width, combine_xyz_5.height = 140.0, 100.0
            math_002_16.width, math_002_16.height = 140.0, 100.0
            math_38.width, math_38.height = 140.0, 100.0
            capture_attribute_11.width, capture_attribute_11.height = 140.0, 100.0
            group_021_1.width, group_021_1.height = 287.59326171875, 100.0
            switch_004_4.width, switch_004_4.height = 140.0, 100.0
            switch_002_17.width, switch_002_17.height = 140.0, 100.0
            boolean_math_009_1.width, boolean_math_009_1.height = 140.0, 100.0
            boolean_math_008_3.width, boolean_math_008_3.height = 140.0, 100.0
            math_009_2.width, math_009_2.height = 140.0, 100.0
            switch_005_4.width, switch_005_4.height = 140.0, 100.0
            math_010.width, math_010.height = 140.0, 100.0
            separate_geometry_19.width, separate_geometry_19.height = 140.0, 100.0
            boolean_math_32.width, boolean_math_32.height = 140.0, 100.0
            boolean_math_005_3.width, boolean_math_005_3.height = 140.0, 100.0
            group_input_008_1.width, group_input_008_1.height = 140.0, 100.0
            join_geometry_6.width, join_geometry_6.height = 140.0, 100.0
            group_003_9.width, group_003_9.height = 181.6624755859375, 100.0
            group_023_2.width, group_023_2.height = 140.0, 100.0
            group_006_6.width, group_006_6.height = 193.6337890625, 100.0
            group_017_1.width, group_017_1.height = 226.826904296875, 100.0
            group_input_012.width, group_input_012.height = 140.0, 100.0
            set_position_14.width, set_position_14.height = 140.0, 100.0
            group_010_4.width, group_010_4.height = 140.0, 100.0
            position_001_10.width, position_001_10.height = 140.0, 100.0
            mix_12.width, mix_12.height = 140.0, 100.0
            reroute_009_7.width, reroute_009_7.height = 16.0, 100.0
            reroute_003_16.width, reroute_003_16.height = 16.0, 100.0
            group_input_011_1.width, group_input_011_1.height = 140.0, 100.0
            group_026_2.width, group_026_2.height = 256.740478515625, 100.0
            group_019_1.width, group_019_1.height = 244.548095703125, 100.0
            group_015_1.width, group_015_1.height = 140.0, 100.0
            store_named_attribute_17.width, store_named_attribute_17.height = (
                140.0,
                100.0,
            )
            group_016_1.width, group_016_1.height = 244.548095703125, 100.0
            named_attribute_40.width, named_attribute_40.height = 140.0, 100.0
            named_attribute_001_24.width, named_attribute_001_24.height = 140.0, 100.0
            store_named_attribute_001_6.width, store_named_attribute_001_6.height = (
                140.0,
                100.0,
            )
            group_output_152.width, group_output_152.height = 140.0, 100.0
            set_material_10.width, set_material_10.height = 140.0, 100.0
            group_input_003_8.width, group_input_003_8.height = 140.0, 100.0
            sample_index_9.width, sample_index_9.height = 140.0, 100.0
            switch_001_23.width, switch_001_23.height = 140.0, 100.0
            group_001_28.width, group_001_28.height = 276.27490234375, 100.0
            group_input_150.width, group_input_150.height = 140.0, 100.0
            group_input_005_3.width, group_input_005_3.height = 140.0, 100.0
            group_input_001_24.width, group_input_001_24.height = 140.0, 100.0
            remove_named_attribute_2.width, remove_named_attribute_2.height = (
                134.0596923828125,
                100.0,
            )
            set_handle_positions_008.width, set_handle_positions_008.height = (
                140.0,
                100.0,
            )
            set_handle_positions_007.width, set_handle_positions_007.height = (
                140.0,
                100.0,
            )
            set_handle_positions_009.width, set_handle_positions_009.height = (
                140.0,
                100.0,
            )
            set_handle_positions_010.width, set_handle_positions_010.height = (
                140.0,
                100.0,
            )
            set_handle_positions_003.width, set_handle_positions_003.height = (
                140.0,
                100.0,
            )
            set_handle_positions_005.width, set_handle_positions_005.height = (
                140.0,
                100.0,
            )
            set_handle_positions_004.width, set_handle_positions_004.height = (
                140.0,
                100.0,
            )
            set_handle_positions_006.width, set_handle_positions_006.height = (
                140.0,
                100.0,
            )
            group_002_16.width, group_002_16.height = 323.40478515625, 100.0

            # initialize _mn_utils_style_cartoon links
            # reroute_46.Output -> group_004_7.Points
            _mn_utils_style_cartoon.links.new(
                reroute_46.outputs[0], group_004_7.inputs[0]
            )
            # position_17.Position -> group_004_7.Position
            _mn_utils_style_cartoon.links.new(
                position_17.outputs[0], group_004_7.inputs[1]
            )
            # endpoint_selection_2.Selection -> group_005_7.Switch
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_2.outputs[0], group_005_7.inputs[0]
            )
            # group_input_004_6.Profile Curve -> group_016_1.Instance
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[10], group_016_1.inputs[4]
            )
            # reroute_007_9.Output -> separate_geometry_003_5.Geometry
            _mn_utils_style_cartoon.links.new(
                reroute_007_9.outputs[0], separate_geometry_003_5.inputs[0]
            )
            # set_handle_positions_002.Curve -> group_016_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_002.outputs[0], group_016_1.inputs[0]
            )
            # set_spline_resolution_001_1.Geometry -> group_030_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_resolution_001_1.outputs[0], group_030_1.inputs[0]
            )
            # group_032.Curve -> set_spline_resolution_001_1.Geometry
            _mn_utils_style_cartoon.links.new(
                group_032.outputs[0], set_spline_resolution_001_1.inputs[0]
            )
            # set_handle_type_003.Curve -> group_028_1.Geometry
            _mn_utils_style_cartoon.links.new(
                set_handle_type_003.outputs[0], group_028_1.inputs[0]
            )
            # group_005_7.Output -> group_030_1.Radius (A)
            _mn_utils_style_cartoon.links.new(
                group_005_7.outputs[0], group_030_1.inputs[4]
            )
            # reroute_004_11.Output -> join_geometry_001_5.Geometry
            _mn_utils_style_cartoon.links.new(
                reroute_004_11.outputs[0], join_geometry_001_5.inputs[0]
            )
            # set_material_10.Geometry -> group_output_152.Cartoon Mesh
            _mn_utils_style_cartoon.links.new(
                set_material_10.outputs[0], group_output_152.inputs[0]
            )
            # group_018_1.Is Helix -> boolean_math_003_9.Boolean
            _mn_utils_style_cartoon.links.new(
                group_018_1.outputs[0], boolean_math_003_9.inputs[1]
            )
            # boolean_math_001_29.Boolean -> boolean_math_003_9.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_001_29.outputs[0], boolean_math_003_9.inputs[0]
            )
            # boolean_math_003_9.Boolean -> separate_geometry_003_5.Selection
            _mn_utils_style_cartoon.links.new(
                boolean_math_003_9.outputs[0], separate_geometry_003_5.inputs[1]
            )
            # group_033.Rotation -> group_004_7.Rotation
            _mn_utils_style_cartoon.links.new(
                group_033.outputs[0], group_004_7.inputs[3]
            )
            # group_006_6.Geometry -> group_003_9.Instance
            _mn_utils_style_cartoon.links.new(
                group_006_6.outputs[0], group_003_9.inputs[1]
            )
            # group_003_9.Trimmed Curve -> join_geometry_002.Geometry
            _mn_utils_style_cartoon.links.new(
                group_003_9.outputs[0], join_geometry_002.inputs[0]
            )
            # vector_math_33.Vector -> group_003_9.Scale
            _mn_utils_style_cartoon.links.new(
                vector_math_33.outputs[0], group_003_9.inputs[3]
            )
            # math_002_16.Value -> combine_xyz_001_4.Y
            _mn_utils_style_cartoon.links.new(
                math_002_16.outputs[0], combine_xyz_001_4.inputs[1]
            )
            # math_38.Value -> combine_xyz_001_4.Z
            _mn_utils_style_cartoon.links.new(
                math_38.outputs[0], combine_xyz_001_4.inputs[2]
            )
            # group_input_005_3.Arrow Width Scale -> math_38.Value
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[9], math_38.inputs[0]
            )
            # group_input_004_6.Helix Rotate -> math_001_26.Value
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[22], math_001_26.inputs[0]
            )
            # group_input_004_6.Helix Thickness -> combine_xyz_002_1.Y
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[23], combine_xyz_002_1.inputs[1]
            )
            # group_input_004_6.Helix Width -> combine_xyz_002_1.Z
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[24], combine_xyz_002_1.inputs[2]
            )
            # combine_xyz_002_1.Vector -> group_016_1.Scale
            _mn_utils_style_cartoon.links.new(
                combine_xyz_002_1.outputs[0], group_016_1.inputs[6]
            )
            # math_001_26.Value -> group_016_1.Rotation X
            _mn_utils_style_cartoon.links.new(
                math_001_26.outputs[0], group_016_1.inputs[5]
            )
            # group_004_7.Instances -> switch_40.True
            _mn_utils_style_cartoon.links.new(
                group_004_7.outputs[0], switch_40.inputs[2]
            )
            # group_009_3.Rotation -> group_003_9.Rotation
            _mn_utils_style_cartoon.links.new(
                group_009_3.outputs[0], group_003_9.inputs[2]
            )
            # group_input_003_8.Material -> set_material_10.Material
            _mn_utils_style_cartoon.links.new(
                group_input_003_8.outputs[4], set_material_10.inputs[2]
            )
            # group_input_006_3.Loop Subdivisions -> set_spline_resolution_001_1.Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_006_3.outputs[27], set_spline_resolution_001_1.inputs[2]
            )
            # group_input_006_3.Loop Radius -> group_005_7.Input
            _mn_utils_style_cartoon.links.new(
                group_input_006_3.outputs[28], group_005_7.inputs[1]
            )
            # group_input_006_3.Loop Resolution -> group_030_1.Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_006_3.outputs[29], group_030_1.inputs[2]
            )
            # reroute_007_9.Output -> reroute_46.Input
            _mn_utils_style_cartoon.links.new(
                reroute_007_9.outputs[0], reroute_46.inputs[0]
            )
            # group_input_004_6.Profile Resolution -> group_016_1.Profile Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[11], group_016_1.inputs[1]
            )
            # group_input_005_3.Arrow Thickness Scale -> math_002_16.Value
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[8], math_002_16.inputs[0]
            )
            # separate_geometry_19.Inverted -> group_003_9.Curve
            _mn_utils_style_cartoon.links.new(
                separate_geometry_19.outputs[1], group_003_9.inputs[0]
            )
            # reroute_003_16.Output -> join_geometry_6.Geometry
            _mn_utils_style_cartoon.links.new(
                reroute_003_16.outputs[0], join_geometry_6.inputs[0]
            )
            # reroute_009_7.Output -> reroute_003_16.Input
            _mn_utils_style_cartoon.links.new(
                reroute_009_7.outputs[0], reroute_003_16.inputs[0]
            )
            # store_named_attribute_17.Geometry -> reroute_004_11.Input
            _mn_utils_style_cartoon.links.new(
                store_named_attribute_17.outputs[0], reroute_004_11.inputs[0]
            )
            # combine_xyz_001_4.Vector -> vector_math_33.Vector
            _mn_utils_style_cartoon.links.new(
                combine_xyz_001_4.outputs[0], vector_math_33.inputs[1]
            )
            # group_001_28.Loop Splines -> set_spline_type_001_1.Curve
            _mn_utils_style_cartoon.links.new(
                group_001_28.outputs[6], set_spline_type_001_1.inputs[0]
            )
            # set_handle_type_002.Curve -> set_spline_resolution_002.Geometry
            _mn_utils_style_cartoon.links.new(
                set_handle_type_002.outputs[0], set_spline_resolution_002.inputs[0]
            )
            # set_position_004_1.Geometry -> resample_curve_001_2.Curve
            _mn_utils_style_cartoon.links.new(
                set_position_004_1.outputs[0], resample_curve_001_2.inputs[0]
            )
            # resample_curve_001_2.Curve -> set_spline_type_3.Curve
            _mn_utils_style_cartoon.links.new(
                resample_curve_001_2.outputs[0], set_spline_type_3.inputs[0]
            )
            # set_spline_resolution_002.Geometry -> group_017_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_resolution_002.outputs[0], group_017_1.inputs[0]
            )
            # reroute_007_9.Output -> separate_geometry_005.Geometry
            _mn_utils_style_cartoon.links.new(
                reroute_007_9.outputs[0], separate_geometry_005.inputs[0]
            )
            # reroute_006_10.Output -> set_spline_resolution_002.Resolution
            _mn_utils_style_cartoon.links.new(
                reroute_006_10.outputs[0], set_spline_resolution_002.inputs[2]
            )
            # math_004_5.Value -> switch_003_7.True
            _mn_utils_style_cartoon.links.new(
                math_004_5.outputs[0], switch_003_7.inputs[2]
            )
            # group_input_002_13.Cylinder Curved -> switch_003_7.Switch
            _mn_utils_style_cartoon.links.new(
                group_input_002_13.outputs[18], switch_003_7.inputs[0]
            )
            # spline_length_001_1.Point Count -> math_005_4.Value
            _mn_utils_style_cartoon.links.new(
                spline_length_001_1.outputs[1], math_005_4.inputs[0]
            )
            # math_005_4.Value -> math_004_5.Value
            _mn_utils_style_cartoon.links.new(
                math_005_4.outputs[0], math_004_5.inputs[0]
            )
            # vector.Vector -> vector_rotate_3.Vector
            _mn_utils_style_cartoon.links.new(
                vector.outputs[0], vector_rotate_3.inputs[0]
            )
            # mesh_to_curve_002_1.Curve -> set_position_004_1.Geometry
            _mn_utils_style_cartoon.links.new(
                mesh_to_curve_002_1.outputs[0], set_position_004_1.inputs[0]
            )
            # vector_rotate_3.Vector -> vector_math_001_21.Vector
            _mn_utils_style_cartoon.links.new(
                vector_rotate_3.outputs[0], vector_math_001_21.inputs[0]
            )
            # group_015_1.Angstrom -> vector_math_001_21.Scale
            _mn_utils_style_cartoon.links.new(
                group_015_1.outputs[0], vector_math_001_21.inputs[3]
            )
            # vector_math_001_21.Vector -> set_position_004_1.Offset
            _mn_utils_style_cartoon.links.new(
                vector_math_001_21.outputs[0], set_position_004_1.inputs[3]
            )
            # boolean_math_016_1.Boolean -> separate_geometry_005.Selection
            _mn_utils_style_cartoon.links.new(
                boolean_math_016_1.outputs[0], separate_geometry_005.inputs[1]
            )
            # group_026_2.Is Helix -> boolean_math_016_1.Boolean
            _mn_utils_style_cartoon.links.new(
                group_026_2.outputs[0], boolean_math_016_1.inputs[0]
            )
            # switch_003_7.Output -> resample_curve_001_2.Count
            _mn_utils_style_cartoon.links.new(
                switch_003_7.outputs[0], resample_curve_001_2.inputs[2]
            )
            # group_input_002_13.Cylinder Resolution -> group_017_1.Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_002_13.outputs[20], group_017_1.inputs[2]
            )
            # group_input_002_13.Cylinder Radius -> group_017_1.Radius (A)
            _mn_utils_style_cartoon.links.new(
                group_input_002_13.outputs[19], group_017_1.inputs[4]
            )
            # group_input_002_13.Cylinder Subdivisions -> reroute_006_10.Input
            _mn_utils_style_cartoon.links.new(
                group_input_002_13.outputs[21], reroute_006_10.inputs[0]
            )
            # group_008_3.Rotation -> vector_rotate_3.Rotation
            _mn_utils_style_cartoon.links.new(
                group_008_3.outputs[0], vector_rotate_3.inputs[4]
            )
            # group_input_002_13.As Cylinders -> boolean_math_016_1.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_002_13.outputs[17], boolean_math_016_1.inputs[1]
            )
            # endpoint_selection_001_3.Selection -> boolean_math_017_1.Boolean
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_001_3.outputs[0], boolean_math_017_1.inputs[0]
            )
            # boolean_math_017_1.Boolean -> set_position_004_1.Selection
            _mn_utils_style_cartoon.links.new(
                boolean_math_017_1.outputs[0], set_position_004_1.inputs[1]
            )
            # separate_geometry_005.Selection -> mesh_to_curve_002_1.Mesh
            _mn_utils_style_cartoon.links.new(
                separate_geometry_005.outputs[0], mesh_to_curve_002_1.inputs[0]
            )
            # group_001_28.CA Mesh Line -> reroute_007_9.Input
            _mn_utils_style_cartoon.links.new(
                group_001_28.outputs[0], reroute_007_9.inputs[0]
            )
            # group_input_150.Atoms -> group_001_28.Atoms
            _mn_utils_style_cartoon.links.new(
                group_input_150.outputs[0], group_001_28.inputs[0]
            )
            # group_input_150.Selection -> group_001_28.Selection
            _mn_utils_style_cartoon.links.new(
                group_input_150.outputs[1], group_001_28.inputs[1]
            )
            # set_spline_type_002_1.Curve -> set_handle_type_2.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_type_002_1.outputs[0], set_handle_type_2.inputs[0]
            )
            # set_handle_type_2.Curve -> set_handle_positions_001_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_type_2.outputs[0], set_handle_positions_001_1.inputs[0]
            )
            # endpoint_selection_002_1.Selection -> set_handle_positions_001_1.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_002_1.outputs[0],
                set_handle_positions_001_1.inputs[1],
            )
            # set_handle_positions_001_1.Curve -> set_handle_positions_002.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_001_1.outputs[0],
                set_handle_positions_002.inputs[0],
            )
            # endpoint_selection_003_2.Selection -> set_handle_positions_002.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_003_2.outputs[0], set_handle_positions_002.inputs[1]
            )
            # group_input_010.As Cylinders -> boolean_math_001_29.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_010.outputs[17], boolean_math_001_29.inputs[0]
            )
            # reroute_002_23.Output -> set_handle_positions_001_1.Offset
            _mn_utils_style_cartoon.links.new(
                reroute_002_23.outputs[0], set_handle_positions_001_1.inputs[3]
            )
            # reroute_008_4.Output -> set_handle_positions_002.Offset
            _mn_utils_style_cartoon.links.new(
                reroute_008_4.outputs[0], set_handle_positions_002.inputs[3]
            )
            # group_002_16.Vector -> reroute_002_23.Input
            _mn_utils_style_cartoon.links.new(
                group_002_16.outputs[0], reroute_002_23.inputs[0]
            )
            # reroute_002_23.Output -> reroute_008_4.Input
            _mn_utils_style_cartoon.links.new(
                reroute_002_23.outputs[0], reroute_008_4.inputs[0]
            )
            # set_position_14.Geometry -> group_019_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_position_14.outputs[0], group_019_1.inputs[0]
            )
            # group_input_011_1.Profile Resolution -> group_019_1.Profile Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_011_1.outputs[11], group_019_1.inputs[1]
            )
            # group_input_011_1.Profile Curve -> group_019_1.Instance
            _mn_utils_style_cartoon.links.new(
                group_input_011_1.outputs[10], group_019_1.inputs[4]
            )
            # group_input_011_1.Sheet Rotate -> group_019_1.Rotation X
            _mn_utils_style_cartoon.links.new(
                group_input_011_1.outputs[12], group_019_1.inputs[5]
            )
            # group_003_9.ArrowHeads -> reroute_009_7.Input
            _mn_utils_style_cartoon.links.new(
                group_003_9.outputs[1], reroute_009_7.inputs[0]
            )
            # reroute_012_3.Output -> group_016_1.Resolution
            _mn_utils_style_cartoon.links.new(
                reroute_012_3.outputs[0], group_016_1.inputs[9]
            )
            # group_input_004_6.Helix Subdivisions -> reroute_011_3.Input
            _mn_utils_style_cartoon.links.new(
                group_input_004_6.outputs[25], reroute_011_3.inputs[0]
            )
            # reroute_011_3.Output -> reroute_012_3.Input
            _mn_utils_style_cartoon.links.new(
                reroute_011_3.outputs[0], reroute_012_3.inputs[0]
            )
            # separate_geometry_003_5.Selection -> mesh_to_curve_4.Mesh
            _mn_utils_style_cartoon.links.new(
                separate_geometry_003_5.outputs[0], mesh_to_curve_4.inputs[0]
            )
            # mesh_to_curve_4.Curve -> set_spline_type_002_1.Curve
            _mn_utils_style_cartoon.links.new(
                mesh_to_curve_4.outputs[0], set_spline_type_002_1.inputs[0]
            )
            # set_spline_type_003.Curve -> set_handle_type_001_1.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_type_003.outputs[0], set_handle_type_001_1.inputs[0]
            )
            # group_input_011_1.Sheet Subdivision -> group_019_1.Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_011_1.outputs[16], group_019_1.inputs[9]
            )
            # group_001_28.BS Splines -> set_spline_type_003.Curve
            _mn_utils_style_cartoon.links.new(
                group_001_28.outputs[4], set_spline_type_003.inputs[0]
            )
            # set_spline_type_3.Curve -> set_handle_type_002.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_type_3.outputs[0], set_handle_type_002.inputs[0]
            )
            # group_input_150.Sheet Smoothing -> group_001_28.BS Smoothing
            _mn_utils_style_cartoon.links.new(
                group_input_150.outputs[15], group_001_28.inputs[2]
            )
            # set_spline_type_001_1.Curve -> set_handle_type_003.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_type_001_1.outputs[0], set_handle_type_003.inputs[0]
            )
            # join_geometry_001_5.Geometry -> realize_instances_11.Geometry
            _mn_utils_style_cartoon.links.new(
                join_geometry_001_5.outputs[0], realize_instances_11.inputs[0]
            )
            # edge_angle_001.Signed Angle -> compare_006_1.A
            _mn_utils_style_cartoon.links.new(
                edge_angle_001.outputs[1], compare_006_1.inputs[0]
            )
            # endpoint_selection_004_2.Selection -> set_handle_positions_003.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_004_2.outputs[0], set_handle_positions_003.inputs[1]
            )
            # set_handle_positions_003.Curve -> set_handle_positions_004.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_003.outputs[0], set_handle_positions_004.inputs[0]
            )
            # endpoint_selection_005.Selection -> set_handle_positions_004.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_005.outputs[0], set_handle_positions_004.inputs[1]
            )
            # group_007_6.Vector -> set_handle_positions_004.Offset
            _mn_utils_style_cartoon.links.new(
                group_007_6.outputs[0], set_handle_positions_004.inputs[3]
            )
            # set_handle_positions_006.Curve -> group_032.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_006.outputs[0], group_032.inputs[0]
            )
            # realize_instances_11.Geometry -> store_named_attribute_002_4.Geometry
            _mn_utils_style_cartoon.links.new(
                realize_instances_11.outputs[0], store_named_attribute_002_4.inputs[0]
            )
            # group_input_007_2.Shade Smooth -> boolean_math_004_6.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_007_2.outputs[2], boolean_math_004_6.inputs[0]
            )
            # boolean_math_004_6.Boolean -> boolean_math_002_18.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_004_6.outputs[0], boolean_math_002_18.inputs[0]
            )
            # boolean_math_002_18.Boolean -> store_named_attribute_002_4.Value
            _mn_utils_style_cartoon.links.new(
                boolean_math_002_18.outputs[0], store_named_attribute_002_4.inputs[3]
            )
            # compare_006_1.Result -> boolean_math_002_18.Boolean
            _mn_utils_style_cartoon.links.new(
                compare_006_1.outputs[0], boolean_math_002_18.inputs[1]
            )
            # capture_attribute_11.Geometry -> set_position_14.Geometry
            _mn_utils_style_cartoon.links.new(
                capture_attribute_11.outputs[0], set_position_14.inputs[0]
            )
            # position_001_10.Position -> group_010_4.Field
            _mn_utils_style_cartoon.links.new(
                position_001_10.outputs[0], group_010_4.inputs[0]
            )
            # set_spline_resolution_3.Geometry -> resample_curve_3.Curve
            _mn_utils_style_cartoon.links.new(
                set_spline_resolution_3.outputs[0], resample_curve_3.inputs[0]
            )
            # reroute_013_3.Output -> group_012_4.Boolean
            _mn_utils_style_cartoon.links.new(
                reroute_013_3.outputs[0], group_012_4.inputs[0]
            )
            # group_012_4.Boolean -> boolean_math_006_2.Boolean
            _mn_utils_style_cartoon.links.new(
                group_012_4.outputs[0], boolean_math_006_2.inputs[1]
            )
            # reroute_013_3.Output -> boolean_math_007_3.Boolean
            _mn_utils_style_cartoon.links.new(
                reroute_013_3.outputs[0], boolean_math_007_3.inputs[0]
            )
            # boolean_math_007_3.Boolean -> boolean_math_006_2.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_007_3.outputs[0], boolean_math_006_2.inputs[0]
            )
            # reroute_005_11.Output -> set_position_14.Selection
            _mn_utils_style_cartoon.links.new(
                reroute_005_11.outputs[0], set_position_14.inputs[1]
            )
            # boolean_math_006_2.Boolean -> group_013_2.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_006_2.outputs[0], group_013_2.inputs[0]
            )
            # position_001_10.Position -> mix_12.A
            _mn_utils_style_cartoon.links.new(
                position_001_10.outputs[0], mix_12.inputs[4]
            )
            # group_010_4.Field -> mix_12.B
            _mn_utils_style_cartoon.links.new(group_010_4.outputs[0], mix_12.inputs[5])
            # mix_12.Result -> set_position_14.Position
            _mn_utils_style_cartoon.links.new(
                mix_12.outputs[1], set_position_14.inputs[2]
            )
            # resample_curve_3.Curve -> capture_attribute_11.Geometry
            _mn_utils_style_cartoon.links.new(
                resample_curve_3.outputs[0], capture_attribute_11.inputs[0]
            )
            # reroute_001_32.Output -> capture_attribute_11.Value
            _mn_utils_style_cartoon.links.new(
                reroute_001_32.outputs[0], capture_attribute_11.inputs[1]
            )
            # join_geometry_002.Geometry -> set_spline_resolution_3.Geometry
            _mn_utils_style_cartoon.links.new(
                join_geometry_002.outputs[0], set_spline_resolution_3.inputs[0]
            )
            # group_input_005_3.Sheet Width -> math_009_2.Value
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[14], math_009_2.inputs[1]
            )
            # group_011_5.Vector -> set_handle_positions_003.Offset
            _mn_utils_style_cartoon.links.new(
                group_011_5.outputs[0], set_handle_positions_003.inputs[3]
            )
            # endpoint_selection_006_2.Selection -> set_handle_positions_005.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_006_2.outputs[0], set_handle_positions_005.inputs[1]
            )
            # group_014_6.Vector -> set_handle_positions_005.Offset
            _mn_utils_style_cartoon.links.new(
                group_014_6.outputs[0], set_handle_positions_005.inputs[3]
            )
            # group_028_1.Geometry -> set_handle_positions_005.Curve
            _mn_utils_style_cartoon.links.new(
                group_028_1.outputs[0], set_handle_positions_005.inputs[0]
            )
            # set_handle_positions_005.Curve -> set_handle_positions_003.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_005.outputs[0], set_handle_positions_003.inputs[0]
            )
            # set_handle_positions_004.Curve -> set_handle_positions_006.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_004.outputs[0], set_handle_positions_006.inputs[0]
            )
            # endpoint_selection_007.Selection -> set_handle_positions_006.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_007.outputs[0], set_handle_positions_006.inputs[1]
            )
            # group_020.Vector -> set_handle_positions_006.Offset
            _mn_utils_style_cartoon.links.new(
                group_020.outputs[0], set_handle_positions_006.inputs[3]
            )
            # group_021_1.Result -> reroute_013_3.Input
            _mn_utils_style_cartoon.links.new(
                group_021_1.outputs[0], reroute_013_3.inputs[0]
            )
            # endpoint_selection_008_1.Selection -> set_handle_positions_007.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_008_1.outputs[0], set_handle_positions_007.inputs[1]
            )
            # set_handle_positions_007.Curve -> set_handle_positions_009.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_007.outputs[0], set_handle_positions_009.inputs[0]
            )
            # endpoint_selection_010_1.Selection -> set_handle_positions_009.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_010_1.outputs[0], set_handle_positions_009.inputs[1]
            )
            # group_024_2.Vector -> set_handle_positions_009.Offset
            _mn_utils_style_cartoon.links.new(
                group_024_2.outputs[0], set_handle_positions_009.inputs[3]
            )
            # group_022_1.Vector -> set_handle_positions_007.Offset
            _mn_utils_style_cartoon.links.new(
                group_022_1.outputs[0], set_handle_positions_007.inputs[3]
            )
            # endpoint_selection_009_1.Selection -> set_handle_positions_008.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_009_1.outputs[0], set_handle_positions_008.inputs[1]
            )
            # group_023_2.Vector -> set_handle_positions_008.Offset
            _mn_utils_style_cartoon.links.new(
                group_023_2.outputs[0], set_handle_positions_008.inputs[3]
            )
            # set_handle_positions_008.Curve -> set_handle_positions_007.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_008.outputs[0], set_handle_positions_007.inputs[0]
            )
            # set_handle_positions_009.Curve -> set_handle_positions_010.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_009.outputs[0], set_handle_positions_010.inputs[0]
            )
            # endpoint_selection_011.Selection -> set_handle_positions_010.Selection
            _mn_utils_style_cartoon.links.new(
                endpoint_selection_011.outputs[0], set_handle_positions_010.inputs[1]
            )
            # group_025_1.Vector -> set_handle_positions_010.Offset
            _mn_utils_style_cartoon.links.new(
                group_025_1.outputs[0], set_handle_positions_010.inputs[3]
            )
            # set_handle_type_001_1.Curve -> set_handle_positions_008.Curve
            _mn_utils_style_cartoon.links.new(
                set_handle_type_001_1.outputs[0], set_handle_positions_008.inputs[0]
            )
            # set_handle_positions_010.Curve -> separate_geometry_19.Geometry
            _mn_utils_style_cartoon.links.new(
                set_handle_positions_010.outputs[0], separate_geometry_19.inputs[0]
            )
            # combine_xyz_5.Vector -> reroute_001_32.Input
            _mn_utils_style_cartoon.links.new(
                combine_xyz_5.outputs[0], reroute_001_32.inputs[0]
            )
            # capture_attribute_11.Value -> group_019_1.Scale
            _mn_utils_style_cartoon.links.new(
                capture_attribute_11.outputs[1], group_019_1.inputs[6]
            )
            # math_009_2.Value -> combine_xyz_5.Z
            _mn_utils_style_cartoon.links.new(
                math_009_2.outputs[0], combine_xyz_5.inputs[2]
            )
            # group_013_2.Boolean -> reroute_005_11.Input
            _mn_utils_style_cartoon.links.new(
                group_013_2.outputs[0], reroute_005_11.inputs[0]
            )
            # switch_002_17.Output -> vector_math_33.Vector
            _mn_utils_style_cartoon.links.new(
                switch_002_17.outputs[0], vector_math_33.inputs[0]
            )
            # combine_xyz_5.Vector -> switch_002_17.False
            _mn_utils_style_cartoon.links.new(
                combine_xyz_5.outputs[0], switch_002_17.inputs[1]
            )
            # group_input_008_1.Arrows Sharp -> boolean_math_005_3.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_008_1.outputs[6], boolean_math_005_3.inputs[1]
            )
            # boolean_math_005_3.Boolean -> boolean_math_32.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_005_3.outputs[0], boolean_math_32.inputs[0]
            )
            # switch_004_4.Output -> math_009_2.Value
            _mn_utils_style_cartoon.links.new(
                switch_004_4.outputs[0], math_009_2.inputs[0]
            )
            # group_021_1.Output -> switch_004_4.True
            _mn_utils_style_cartoon.links.new(
                group_021_1.outputs[1], switch_004_4.inputs[2]
            )
            # group_input_005_3.Arrows Sharp -> boolean_math_008_3.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[6], boolean_math_008_3.inputs[0]
            )
            # boolean_math_008_3.Boolean -> boolean_math_009_1.Boolean
            _mn_utils_style_cartoon.links.new(
                boolean_math_008_3.outputs[0], boolean_math_009_1.inputs[1]
            )
            # group_input_005_3.As Arrows -> boolean_math_009_1.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[5], boolean_math_009_1.inputs[0]
            )
            # boolean_math_009_1.Boolean -> switch_004_4.Switch
            _mn_utils_style_cartoon.links.new(
                boolean_math_009_1.outputs[0], switch_004_4.inputs[0]
            )
            # switch_005_4.Output -> math_010.Value
            _mn_utils_style_cartoon.links.new(
                switch_005_4.outputs[0], math_010.inputs[0]
            )
            # group_input_005_3.Sheet Thickness -> math_010.Value
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[13], math_010.inputs[1]
            )
            # math_010.Value -> combine_xyz_5.Y
            _mn_utils_style_cartoon.links.new(
                math_010.outputs[0], combine_xyz_5.inputs[1]
            )
            # group_input_005_3.Arrows Point -> switch_005_4.Switch
            _mn_utils_style_cartoon.links.new(
                group_input_005_3.outputs[7], switch_005_4.inputs[0]
            )
            # switch_004_4.Output -> switch_005_4.True
            _mn_utils_style_cartoon.links.new(
                switch_004_4.outputs[0], switch_005_4.inputs[2]
            )
            # boolean_math_32.Boolean -> separate_geometry_19.Selection
            _mn_utils_style_cartoon.links.new(
                boolean_math_32.outputs[0], separate_geometry_19.inputs[1]
            )
            # group_input_008_1.As Arrows -> boolean_math_005_3.Boolean
            _mn_utils_style_cartoon.links.new(
                group_input_008_1.outputs[5], boolean_math_005_3.inputs[0]
            )
            # group_input_012.Sheet Subdivision -> set_spline_resolution_3.Resolution
            _mn_utils_style_cartoon.links.new(
                group_input_012.outputs[16], set_spline_resolution_3.inputs[2]
            )
            # group_030_1.Mesh -> store_named_attribute_17.Geometry
            _mn_utils_style_cartoon.links.new(
                group_030_1.outputs[0], store_named_attribute_17.inputs[0]
            )
            # named_attribute_40.Attribute -> sample_index_9.Index
            _mn_utils_style_cartoon.links.new(
                named_attribute_40.outputs[0], sample_index_9.inputs[2]
            )
            # named_attribute_001_24.Attribute -> sample_index_9.Value
            _mn_utils_style_cartoon.links.new(
                named_attribute_001_24.outputs[0], sample_index_9.inputs[1]
            )
            # reroute_007_9.Output -> sample_index_9.Geometry
            _mn_utils_style_cartoon.links.new(
                reroute_007_9.outputs[0], sample_index_9.inputs[0]
            )
            # store_named_attribute_002_4.Geometry -> store_named_attribute_001_6.Geometry
            _mn_utils_style_cartoon.links.new(
                store_named_attribute_002_4.outputs[0],
                store_named_attribute_001_6.inputs[0],
            )
            # store_named_attribute_002_4.Geometry -> switch_001_23.True
            _mn_utils_style_cartoon.links.new(
                store_named_attribute_002_4.outputs[0], switch_001_23.inputs[2]
            )
            # store_named_attribute_001_6.Geometry -> switch_001_23.False
            _mn_utils_style_cartoon.links.new(
                store_named_attribute_001_6.outputs[0], switch_001_23.inputs[1]
            )
            # group_input_001_24.Interpolate Color -> switch_001_23.Switch
            _mn_utils_style_cartoon.links.new(
                group_input_001_24.outputs[3], switch_001_23.inputs[0]
            )
            # sample_index_9.Value -> store_named_attribute_001_6.Value
            _mn_utils_style_cartoon.links.new(
                sample_index_9.outputs[0], store_named_attribute_001_6.inputs[3]
            )
            # switch_001_23.Output -> remove_named_attribute_2.Geometry
            _mn_utils_style_cartoon.links.new(
                switch_001_23.outputs[0], remove_named_attribute_2.inputs[0]
            )
            # remove_named_attribute_2.Geometry -> set_material_10.Geometry
            _mn_utils_style_cartoon.links.new(
                remove_named_attribute_2.outputs[0], set_material_10.inputs[0]
            )
            # separate_geometry_19.Selection -> join_geometry_002.Geometry
            _mn_utils_style_cartoon.links.new(
                separate_geometry_19.outputs[0], join_geometry_002.inputs[0]
            )
            # group_016_1.Geometry -> join_geometry_001_5.Geometry
            _mn_utils_style_cartoon.links.new(
                group_016_1.outputs[0], join_geometry_001_5.inputs[0]
            )
            # group_019_1.Geometry -> join_geometry_6.Geometry
            _mn_utils_style_cartoon.links.new(
                group_019_1.outputs[0], join_geometry_6.inputs[0]
            )
            # join_geometry_6.Geometry -> join_geometry_001_5.Geometry
            _mn_utils_style_cartoon.links.new(
                join_geometry_6.outputs[0], join_geometry_001_5.inputs[0]
            )
            # group_017_1.Mesh -> join_geometry_001_5.Geometry
            _mn_utils_style_cartoon.links.new(
                group_017_1.outputs[0], join_geometry_001_5.inputs[0]
            )
            # switch_40.Output -> join_geometry_001_5.Geometry
            _mn_utils_style_cartoon.links.new(
                switch_40.outputs[0], join_geometry_001_5.inputs[0]
            )
            return _mn_utils_style_cartoon

        _mn_utils_style_cartoon = _mn_utils_style_cartoon_node_group()

        # initialize _mn_surface_smooth_bumps node group
        def _mn_surface_smooth_bumps_node_group():
            _mn_surface_smooth_bumps = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_surface_smooth_bumps"
            )

            _mn_surface_smooth_bumps.color_tag = "NONE"
            _mn_surface_smooth_bumps.description = ""

            _mn_surface_smooth_bumps.is_modifier = True

            # _mn_surface_smooth_bumps interface
            # Socket Geometry
            geometry_socket_30 = _mn_surface_smooth_bumps.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_30.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_31 = _mn_surface_smooth_bumps.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_31.attribute_domain = "POINT"

            # initialize _mn_surface_smooth_bumps nodes
            # node Frame
            frame_16 = _mn_surface_smooth_bumps.nodes.new("NodeFrame")
            frame_16.label = "Smoothen out weird bumps from meshing"
            frame_16.name = "Frame"
            frame_16.label_size = 20
            frame_16.shrink = True

            # node Group Input
            group_input_151 = _mn_surface_smooth_bumps.nodes.new("NodeGroupInput")
            group_input_151.name = "Group Input"

            # node Group Output
            group_output_153 = _mn_surface_smooth_bumps.nodes.new("NodeGroupOutput")
            group_output_153.name = "Group Output"
            group_output_153.is_active_output = True

            # node Set Position.001
            set_position_001_6 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_6.name = "Set Position.001"
            # Offset
            set_position_001_6.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Blur Attribute
            blur_attribute_2 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_2.name = "Blur Attribute"
            blur_attribute_2.data_type = "FLOAT_VECTOR"
            # Iterations
            blur_attribute_2.inputs[1].default_value = 4
            # Weight
            blur_attribute_2.inputs[2].default_value = 1.0

            # node Position
            position_18 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_18.name = "Position"

            # node Compare
            compare_43 = _mn_surface_smooth_bumps.nodes.new("FunctionNodeCompare")
            compare_43.name = "Compare"
            compare_43.data_type = "INT"
            compare_43.mode = "ELEMENT"
            compare_43.operation = "EQUAL"
            # B_INT
            compare_43.inputs[3].default_value = 3

            # node Vertex Neighbors
            vertex_neighbors_1 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeInputMeshVertexNeighbors"
            )
            vertex_neighbors_1.name = "Vertex Neighbors"

            # node Edge Vertices
            edge_vertices_5 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_5.name = "Edge Vertices"

            # node Evaluate at Index.001
            evaluate_at_index_001_9 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_9.name = "Evaluate at Index.001"
            evaluate_at_index_001_9.data_type = "BOOLEAN"
            evaluate_at_index_001_9.domain = "POINT"

            # node Evaluate at Index
            evaluate_at_index_13 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_13.name = "Evaluate at Index"
            evaluate_at_index_13.data_type = "BOOLEAN"
            evaluate_at_index_13.domain = "POINT"

            # node Boolean Math
            boolean_math_33 = _mn_surface_smooth_bumps.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_33.name = "Boolean Math"
            boolean_math_33.operation = "AND"

            # node Edges to Face Groups
            edges_to_face_groups_1 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeEdgesToFaceGroups"
            )
            edges_to_face_groups_1.name = "Edges to Face Groups"

            # node Face Group Boundaries
            face_group_boundaries_1 = _mn_surface_smooth_bumps.nodes.new(
                "GeometryNodeMeshFaceSetBoundaries"
            )
            face_group_boundaries_1.name = "Face Group Boundaries"

            # Set parents
            compare_43.parent = frame_16
            vertex_neighbors_1.parent = frame_16
            edge_vertices_5.parent = frame_16
            evaluate_at_index_001_9.parent = frame_16
            evaluate_at_index_13.parent = frame_16
            boolean_math_33.parent = frame_16
            edges_to_face_groups_1.parent = frame_16
            face_group_boundaries_1.parent = frame_16

            # Set locations
            frame_16.location = (-385.91619873046875, 67.19032287597656)
            group_input_151.location = (-610.1629638671875, 0.0)
            group_output_153.location = (900.947509765625, -17.612947463989258)
            set_position_001_6.location = (460.784423828125, 10.757638931274414)
            blur_attribute_2.location = (460.0, -220.0)
            position_18.location = (460.0, -400.0)
            compare_43.location = (-220.0, -560.0)
            vertex_neighbors_1.location = (-380.0, -560.0)
            edge_vertices_5.location = (-220.0, -420.0)
            evaluate_at_index_001_9.location = (-60.0, -580.0)
            evaluate_at_index_13.location = (-60.0, -420.0)
            boolean_math_33.location = (100.0, -420.0)
            edges_to_face_groups_1.location = (100.0, -560.0)
            face_group_boundaries_1.location = (103.8720703125, -322.7563171386719)

            # Set dimensions
            frame_16.width, frame_16.height = 694.0, 477.0
            group_input_151.width, group_input_151.height = 140.0, 100.0
            group_output_153.width, group_output_153.height = 140.0, 100.0
            set_position_001_6.width, set_position_001_6.height = 140.0, 100.0
            blur_attribute_2.width, blur_attribute_2.height = 140.0, 100.0
            position_18.width, position_18.height = 140.0, 100.0
            compare_43.width, compare_43.height = 140.0, 100.0
            vertex_neighbors_1.width, vertex_neighbors_1.height = 140.0, 100.0
            edge_vertices_5.width, edge_vertices_5.height = 140.0, 100.0
            evaluate_at_index_001_9.width, evaluate_at_index_001_9.height = 140.0, 100.0
            evaluate_at_index_13.width, evaluate_at_index_13.height = 140.0, 100.0
            boolean_math_33.width, boolean_math_33.height = 140.0, 100.0
            edges_to_face_groups_1.width, edges_to_face_groups_1.height = 140.0, 100.0
            face_group_boundaries_1.width, face_group_boundaries_1.height = 150.0, 100.0

            # initialize _mn_surface_smooth_bumps links
            # set_position_001_6.Geometry -> group_output_153.Geometry
            _mn_surface_smooth_bumps.links.new(
                set_position_001_6.outputs[0], group_output_153.inputs[0]
            )
            # group_input_151.Geometry -> set_position_001_6.Geometry
            _mn_surface_smooth_bumps.links.new(
                group_input_151.outputs[0], set_position_001_6.inputs[0]
            )
            # vertex_neighbors_1.Vertex Count -> compare_43.A
            _mn_surface_smooth_bumps.links.new(
                vertex_neighbors_1.outputs[0], compare_43.inputs[2]
            )
            # compare_43.Result -> evaluate_at_index_13.Value
            _mn_surface_smooth_bumps.links.new(
                compare_43.outputs[0], evaluate_at_index_13.inputs[1]
            )
            # compare_43.Result -> evaluate_at_index_001_9.Value
            _mn_surface_smooth_bumps.links.new(
                compare_43.outputs[0], evaluate_at_index_001_9.inputs[1]
            )
            # edge_vertices_5.Vertex Index 1 -> evaluate_at_index_13.Index
            _mn_surface_smooth_bumps.links.new(
                edge_vertices_5.outputs[0], evaluate_at_index_13.inputs[0]
            )
            # edge_vertices_5.Vertex Index 2 -> evaluate_at_index_001_9.Index
            _mn_surface_smooth_bumps.links.new(
                edge_vertices_5.outputs[1], evaluate_at_index_001_9.inputs[0]
            )
            # evaluate_at_index_13.Value -> boolean_math_33.Boolean
            _mn_surface_smooth_bumps.links.new(
                evaluate_at_index_13.outputs[0], boolean_math_33.inputs[0]
            )
            # evaluate_at_index_001_9.Value -> boolean_math_33.Boolean
            _mn_surface_smooth_bumps.links.new(
                evaluate_at_index_001_9.outputs[0], boolean_math_33.inputs[1]
            )
            # boolean_math_33.Boolean -> edges_to_face_groups_1.Boundary Edges
            _mn_surface_smooth_bumps.links.new(
                boolean_math_33.outputs[0], edges_to_face_groups_1.inputs[0]
            )
            # edges_to_face_groups_1.Face Group ID -> face_group_boundaries_1.Face Group ID
            _mn_surface_smooth_bumps.links.new(
                edges_to_face_groups_1.outputs[0], face_group_boundaries_1.inputs[0]
            )
            # blur_attribute_2.Value -> set_position_001_6.Position
            _mn_surface_smooth_bumps.links.new(
                blur_attribute_2.outputs[0], set_position_001_6.inputs[2]
            )
            # position_18.Position -> blur_attribute_2.Value
            _mn_surface_smooth_bumps.links.new(
                position_18.outputs[0], blur_attribute_2.inputs[0]
            )
            # face_group_boundaries_1.Boundary Edges -> set_position_001_6.Selection
            _mn_surface_smooth_bumps.links.new(
                face_group_boundaries_1.outputs[0], set_position_001_6.inputs[1]
            )
            return _mn_surface_smooth_bumps

        _mn_surface_smooth_bumps = _mn_surface_smooth_bumps_node_group()

        # initialize _mn_utils_style_surface_new node group
        def _mn_utils_style_surface_new_node_group():
            _mn_utils_style_surface_new = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_style_surface_new"
            )

            _mn_utils_style_surface_new.color_tag = "GEOMETRY"
            _mn_utils_style_surface_new.description = ""

            _mn_utils_style_surface_new.is_modifier = True

            # _mn_utils_style_surface_new interface
            # Socket Surface Geometry
            surface_geometry_socket = _mn_utils_style_surface_new.interface.new_socket(
                name="Surface Geometry",
                in_out="OUTPUT",
                socket_type="NodeSocketGeometry",
            )
            surface_geometry_socket.attribute_domain = "POINT"

            # Socket Volume
            volume_socket_3 = _mn_utils_style_surface_new.interface.new_socket(
                name="Volume", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            volume_socket_3.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_31 = _mn_utils_style_surface_new.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_31.attribute_domain = "POINT"
            atoms_socket_31.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_56 = _mn_utils_style_surface_new.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_56.attribute_domain = "POINT"
            selection_socket_56.hide_value = True
            selection_socket_56.description = "Selection of atoms to apply this node to"

            # Socket Quality
            quality_socket_4 = _mn_utils_style_surface_new.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_4.subtype = "NONE"
            quality_socket_4.default_value = 12
            quality_socket_4.min_value = 1
            quality_socket_4.max_value = 15
            quality_socket_4.attribute_domain = "POINT"

            # Socket Scale Radii
            scale_radii_socket_3 = _mn_utils_style_surface_new.interface.new_socket(
                name="Scale Radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            scale_radii_socket_3.subtype = "NONE"
            scale_radii_socket_3.default_value = 1.0
            scale_radii_socket_3.min_value = 0.0
            scale_radii_socket_3.max_value = 10.0
            scale_radii_socket_3.attribute_domain = "POINT"

            # Socket Probe Size
            probe_size_socket_3 = _mn_utils_style_surface_new.interface.new_socket(
                name="Probe Size", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            probe_size_socket_3.subtype = "NONE"
            probe_size_socket_3.default_value = 0.6000000238418579
            probe_size_socket_3.min_value = 0.0
            probe_size_socket_3.max_value = 10000.0
            probe_size_socket_3.attribute_domain = "POINT"

            # Socket Color by CA
            color_by_ca_socket_2 = _mn_utils_style_surface_new.interface.new_socket(
                name="Color by CA", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_by_ca_socket_2.attribute_domain = "POINT"

            # Socket Color Blur
            color_blur_socket_2 = _mn_utils_style_surface_new.interface.new_socket(
                name="Color Blur", in_out="INPUT", socket_type="NodeSocketInt"
            )
            color_blur_socket_2.subtype = "NONE"
            color_blur_socket_2.default_value = 1
            color_blur_socket_2.min_value = 0
            color_blur_socket_2.max_value = 20
            color_blur_socket_2.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_13 = _mn_utils_style_surface_new.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_13.attribute_domain = "POINT"
            shade_smooth_socket_13.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Triangulate
            triangulate_socket = _mn_utils_style_surface_new.interface.new_socket(
                name="Triangulate", in_out="INPUT", socket_type="NodeSocketBool"
            )
            triangulate_socket.attribute_domain = "POINT"
            triangulate_socket.hide_value = True

            # Socket Material
            material_socket_18 = _mn_utils_style_surface_new.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_18.attribute_domain = "POINT"
            material_socket_18.description = (
                "Material to apply to the resulting geometry"
            )

            # Socket Relaxation Steps
            relaxation_steps_socket = _mn_utils_style_surface_new.interface.new_socket(
                name="Relaxation Steps", in_out="INPUT", socket_type="NodeSocketInt"
            )
            relaxation_steps_socket.subtype = "NONE"
            relaxation_steps_socket.default_value = 30
            relaxation_steps_socket.min_value = 0
            relaxation_steps_socket.max_value = 2147483647
            relaxation_steps_socket.attribute_domain = "POINT"

            # initialize _mn_utils_style_surface_new nodes
            # node Frame.002
            frame_002_5 = _mn_utils_style_surface_new.nodes.new("NodeFrame")
            frame_002_5.label = "Generate Surface from Measurements"
            frame_002_5.name = "Frame.002"
            frame_002_5.label_size = 20
            frame_002_5.shrink = True

            # node Frame
            frame_17 = _mn_utils_style_surface_new.nodes.new("NodeFrame")
            frame_17.label = "Pull in surface towards atoms"
            frame_17.name = "Frame"
            frame_17.label_size = 20
            frame_17.shrink = True

            # node Frame.001
            frame_001_6 = _mn_utils_style_surface_new.nodes.new("NodeFrame")
            frame_001_6.label = "smoothing of tightened surface"
            frame_001_6.name = "Frame.001"
            frame_001_6.label_size = 20
            frame_001_6.shrink = True

            # node Frame.003
            frame_003_5 = _mn_utils_style_surface_new.nodes.new("NodeFrame")
            frame_003_5.label = "Sample colors of nearest atom"
            frame_003_5.name = "Frame.003"
            frame_003_5.label_size = 20
            frame_003_5.shrink = True

            # node Reroute.009
            reroute_009_8 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_009_8.name = "Reroute.009"
            # node Reroute.004
            reroute_004_12 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_004_12.name = "Reroute.004"
            # node Reroute
            reroute_47 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_47.name = "Reroute"
            # node Math.001
            math_001_27 = _mn_utils_style_surface_new.nodes.new("ShaderNodeMath")
            math_001_27.label = "x * 10"
            math_001_27.name = "Math.001"
            math_001_27.operation = "MULTIPLY"
            math_001_27.use_clamp = False
            # Value_001
            math_001_27.inputs[1].default_value = 50.0

            # node Reroute.001
            reroute_001_33 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_001_33.name = "Reroute.001"
            # node Group Input
            group_input_152 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_152.name = "Group Input"
            group_input_152.outputs[8].hide = True
            group_input_152.outputs[10].hide = True

            # node Separate Geometry
            separate_geometry_20 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_20.name = "Separate Geometry"
            separate_geometry_20.domain = "POINT"

            # node Volume Cube
            volume_cube_1 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeVolumeCube"
            )
            volume_cube_1.name = "Volume Cube"
            # Background
            volume_cube_1.inputs[1].default_value = 0.0

            # node Reroute.003
            reroute_003_17 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_003_17.name = "Reroute.003"
            # node Volume to Mesh
            volume_to_mesh_3 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeVolumeToMesh"
            )
            volume_to_mesh_3.name = "Volume to Mesh"
            volume_to_mesh_3.resolution_mode = "GRID"
            # Threshold
            volume_to_mesh_3.inputs[3].default_value = 0.10000000149011612
            # Adaptivity
            volume_to_mesh_3.inputs[4].default_value = 0.0

            # node Reroute.002
            reroute_002_24 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_002_24.name = "Reroute.002"
            # node Group Output
            group_output_154 = _mn_utils_style_surface_new.nodes.new("NodeGroupOutput")
            group_output_154.name = "Group Output"
            group_output_154.is_active_output = True

            # node Set Shade Smooth.001
            set_shade_smooth_001_1 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_001_1.name = "Set Shade Smooth.001"
            set_shade_smooth_001_1.domain = "FACE"
            # Selection
            set_shade_smooth_001_1.inputs[1].default_value = True

            # node Set Material
            set_material_11 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_11.name = "Set Material"
            # Selection
            set_material_11.inputs[1].default_value = True

            # node Group Input.005
            group_input_005_4 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_005_4.name = "Group Input.005"
            group_input_005_4.outputs[0].hide = True
            group_input_005_4.outputs[1].hide = True
            group_input_005_4.outputs[2].hide = True
            group_input_005_4.outputs[3].hide = True
            group_input_005_4.outputs[4].hide = True
            group_input_005_4.outputs[6].hide = True
            group_input_005_4.outputs[7].hide = True
            group_input_005_4.outputs[8].hide = True
            group_input_005_4.outputs[9].hide = True
            group_input_005_4.outputs[10].hide = True
            group_input_005_4.outputs[11].hide = True

            # node Separate Geometry.001
            separate_geometry_001_12 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_12.name = "Separate Geometry.001"
            separate_geometry_001_12.domain = "POINT"

            # node Switch
            switch_41 = _mn_utils_style_surface_new.nodes.new("GeometryNodeSwitch")
            switch_41.name = "Switch"
            switch_41.input_type = "GEOMETRY"

            # node Reroute.008
            reroute_008_5 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_008_5.name = "Reroute.008"
            # node Reroute.011
            reroute_011_4 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_011_4.name = "Reroute.011"
            # node Boolean Math
            boolean_math_34 = _mn_utils_style_surface_new.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_34.name = "Boolean Math"
            boolean_math_34.operation = "OR"

            # node Capture Attribute
            capture_attribute_12 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_12.name = "Capture Attribute"
            capture_attribute_12.active_index = 0
            capture_attribute_12.capture_items.clear()
            capture_attribute_12.capture_items.new("FLOAT", "Value")
            capture_attribute_12.capture_items["Value"].data_type = "INT"
            capture_attribute_12.domain = "POINT"

            # node Vector Math.001
            vector_math_001_22 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_001_22.name = "Vector Math.001"
            vector_math_001_22.operation = "ADD"

            # node Sample Index
            sample_index_10 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_10.name = "Sample Index"
            sample_index_10.clamp = False
            sample_index_10.data_type = "FLOAT_VECTOR"
            sample_index_10.domain = "POINT"

            # node Position
            position_19 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_19.name = "Position"

            # node Vector Math
            vector_math_34 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_34.name = "Vector Math"
            vector_math_34.operation = "SUBTRACT"

            # node Vector Math.002
            vector_math_002_12 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_002_12.name = "Vector Math.002"
            vector_math_002_12.operation = "NORMALIZE"

            # node Vector Math.003
            vector_math_003_10 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_003_10.name = "Vector Math.003"
            vector_math_003_10.operation = "SCALE"

            # node Sample Index.002
            sample_index_002_8 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_002_8.name = "Sample Index.002"
            sample_index_002_8.clamp = False
            sample_index_002_8.data_type = "FLOAT"
            sample_index_002_8.domain = "POINT"

            # node Reroute.007
            reroute_007_10 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_007_10.name = "Reroute.007"
            # node Math.002
            math_002_17 = _mn_utils_style_surface_new.nodes.new("ShaderNodeMath")
            math_002_17.name = "Math.002"
            math_002_17.operation = "MULTIPLY"
            math_002_17.use_clamp = False

            # node Group Input.003
            group_input_003_9 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_003_9.name = "Group Input.003"
            group_input_003_9.outputs[0].hide = True
            group_input_003_9.outputs[1].hide = True
            group_input_003_9.outputs[2].hide = True
            group_input_003_9.outputs[4].hide = True
            group_input_003_9.outputs[5].hide = True
            group_input_003_9.outputs[6].hide = True
            group_input_003_9.outputs[7].hide = True
            group_input_003_9.outputs[8].hide = True
            group_input_003_9.outputs[9].hide = True
            group_input_003_9.outputs[10].hide = True
            group_input_003_9.outputs[11].hide = True

            # node Named Attribute
            named_attribute_41 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_41.name = "Named Attribute"
            named_attribute_41.data_type = "FLOAT"
            # Name
            named_attribute_41.inputs[0].default_value = "vdw_radii"

            # node Reroute.006
            reroute_006_11 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_006_11.name = "Reroute.006"
            # node Set Position.002
            set_position_002_2 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_002_2.name = "Set Position.002"
            # Selection
            set_position_002_2.inputs[1].default_value = True
            # Offset
            set_position_002_2.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Sample Nearest
            sample_nearest_3 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_3.name = "Sample Nearest"
            sample_nearest_3.domain = "POINT"
            # Sample Position
            sample_nearest_3.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Blur Attribute.001
            blur_attribute_001_2 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_001_2.name = "Blur Attribute.001"
            blur_attribute_001_2.data_type = "FLOAT_VECTOR"
            # Iterations
            blur_attribute_001_2.inputs[1].default_value = 2
            # Weight
            blur_attribute_001_2.inputs[2].default_value = 1.0

            # node Position.002
            position_002_11 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_002_11.name = "Position.002"

            # node Set Position.003
            set_position_003 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_003.name = "Set Position.003"
            # Selection
            set_position_003.inputs[1].default_value = True
            # Position
            set_position_003.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Set Position.004
            set_position_004_2 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_004_2.name = "Set Position.004"
            # Selection
            set_position_004_2.inputs[1].default_value = True
            # Offset
            set_position_004_2.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.005
            vector_math_005_6 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_005_6.name = "Vector Math.005"
            vector_math_005_6.operation = "SCALE"

            # node Normal
            normal_1 = _mn_utils_style_surface_new.nodes.new("GeometryNodeInputNormal")
            normal_1.name = "Normal"

            # node Math.003
            math_003_14 = _mn_utils_style_surface_new.nodes.new("ShaderNodeMath")
            math_003_14.name = "Math.003"
            math_003_14.operation = "MULTIPLY"
            math_003_14.use_clamp = False
            # Value_001
            math_003_14.inputs[1].default_value = -1.7999999523162842

            # node Capture Attribute.001
            capture_attribute_001_5 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_5.name = "Capture Attribute.001"
            capture_attribute_001_5.active_index = 0
            capture_attribute_001_5.capture_items.clear()
            capture_attribute_001_5.capture_items.new("FLOAT", "Value")
            capture_attribute_001_5.capture_items["Value"].data_type = "FLOAT_VECTOR"
            capture_attribute_001_5.domain = "POINT"

            # node Set Position.001
            set_position_001_7 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_001_7.name = "Set Position.001"
            # Selection
            set_position_001_7.inputs[1].default_value = True
            # Offset
            set_position_001_7.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Position.001
            position_001_11 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_11.name = "Position.001"

            # node Vector Math.004
            vector_math_004_9 = _mn_utils_style_surface_new.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_004_9.name = "Vector Math.004"
            vector_math_004_9.operation = "DISTANCE"

            # node Blur Attribute
            blur_attribute_3 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_3.name = "Blur Attribute"
            blur_attribute_3.data_type = "FLOAT_VECTOR"
            # Iterations
            blur_attribute_3.inputs[1].default_value = 2
            # Weight
            blur_attribute_3.inputs[2].default_value = 1.0

            # node Group.003
            group_003_10 = _mn_utils_style_surface_new.nodes.new("GeometryNodeGroup")
            group_003_10.name = "Group.003"
            group_003_10.node_tree = _mn_surface_smooth_bumps

            # node Position.003
            position_003_1 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_003_1.name = "Position.003"

            # node Blur Attribute.004
            blur_attribute_004 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_004.name = "Blur Attribute.004"
            blur_attribute_004.data_type = "FLOAT_VECTOR"

            # node Group.004
            group_004_8 = _mn_utils_style_surface_new.nodes.new("GeometryNodeGroup")
            group_004_8.name = "Group.004"
            group_004_8.node_tree = _utils_bounding_box

            # node Group.005
            group_005_8 = _mn_utils_style_surface_new.nodes.new("GeometryNodeGroup")
            group_005_8.name = "Group.005"
            group_005_8.node_tree = _surface_compute_density_from_points

            # node Reroute.005
            reroute_005_12 = _mn_utils_style_surface_new.nodes.new("NodeReroute")
            reroute_005_12.name = "Reroute.005"
            # node Blur Attribute.002
            blur_attribute_002_1 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_002_1.name = "Blur Attribute.002"
            blur_attribute_002_1.data_type = "FLOAT_COLOR"
            # Weight
            blur_attribute_002_1.inputs[2].default_value = 1.0

            # node Sample Index.003
            sample_index_003_7 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_003_7.name = "Sample Index.003"
            sample_index_003_7.clamp = False
            sample_index_003_7.data_type = "FLOAT_COLOR"
            sample_index_003_7.domain = "POINT"

            # node Sample Nearest.001
            sample_nearest_001_2 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_001_2.name = "Sample Nearest.001"
            sample_nearest_001_2.domain = "POINT"
            # Sample Position
            sample_nearest_001_2.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Named Attribute.002
            named_attribute_002_19 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_19.name = "Named Attribute.002"
            named_attribute_002_19.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_002_19.inputs[0].default_value = "Color"

            # node Group Input.004
            group_input_004_7 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_004_7.name = "Group Input.004"
            group_input_004_7.outputs[0].hide = True
            group_input_004_7.outputs[1].hide = True
            group_input_004_7.outputs[2].hide = True
            group_input_004_7.outputs[3].hide = True
            group_input_004_7.outputs[4].hide = True
            group_input_004_7.outputs[5].hide = True
            group_input_004_7.outputs[7].hide = True
            group_input_004_7.outputs[8].hide = True
            group_input_004_7.outputs[9].hide = True
            group_input_004_7.outputs[10].hide = True
            group_input_004_7.outputs[11].hide = True

            # node Store Named Attribute
            store_named_attribute_18 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_18.name = "Store Named Attribute"
            store_named_attribute_18.data_type = "FLOAT_COLOR"
            store_named_attribute_18.domain = "POINT"
            # Selection
            store_named_attribute_18.inputs[1].default_value = True
            # Name
            store_named_attribute_18.inputs[2].default_value = "Color"

            # node Group Input.001
            group_input_001_25 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_001_25.name = "Group Input.001"
            group_input_001_25.outputs[0].hide = True
            group_input_001_25.outputs[1].hide = True
            group_input_001_25.outputs[2].hide = True
            group_input_001_25.outputs[3].hide = True
            group_input_001_25.outputs[4].hide = True
            group_input_001_25.outputs[5].hide = True
            group_input_001_25.outputs[6].hide = True
            group_input_001_25.outputs[7].hide = True
            group_input_001_25.outputs[8].hide = True
            group_input_001_25.outputs[10].hide = True
            group_input_001_25.outputs[11].hide = True

            # node Group Input.002
            group_input_002_14 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_002_14.name = "Group Input.002"
            group_input_002_14.outputs[0].hide = True
            group_input_002_14.outputs[1].hide = True
            group_input_002_14.outputs[2].hide = True
            group_input_002_14.outputs[3].hide = True
            group_input_002_14.outputs[4].hide = True
            group_input_002_14.outputs[5].hide = True
            group_input_002_14.outputs[6].hide = True
            group_input_002_14.outputs[8].hide = True
            group_input_002_14.outputs[9].hide = True
            group_input_002_14.outputs[10].hide = True
            group_input_002_14.outputs[11].hide = True

            # node Set Position.005
            set_position_005_2 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_005_2.name = "Set Position.005"
            # Selection
            set_position_005_2.inputs[1].default_value = True
            # Offset
            set_position_005_2.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Triangulate
            triangulate = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeTriangulate"
            )
            triangulate.name = "Triangulate"
            triangulate.ngon_method = "BEAUTY"
            triangulate.quad_method = "BEAUTY"
            # Minimum Vertices
            triangulate.inputs[2].default_value = 4

            # node Map Range
            map_range_13 = _mn_utils_style_surface_new.nodes.new("ShaderNodeMapRange")
            map_range_13.name = "Map Range"
            map_range_13.clamp = True
            map_range_13.data_type = "FLOAT"
            map_range_13.interpolation_type = "LINEAR"
            # From Min
            map_range_13.inputs[1].default_value = -0.20000000298023224
            # From Max
            map_range_13.inputs[2].default_value = -1.0
            # To Min
            map_range_13.inputs[3].default_value = 0.0
            # To Max
            map_range_13.inputs[4].default_value = 1.0

            # node Evaluate on Domain
            evaluate_on_domain_3 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeFieldOnDomain"
            )
            evaluate_on_domain_3.name = "Evaluate on Domain"
            evaluate_on_domain_3.data_type = "FLOAT"
            evaluate_on_domain_3.domain = "FACE"

            # node Blur Attribute.003
            blur_attribute_003 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeBlurAttribute"
            )
            blur_attribute_003.name = "Blur Attribute.003"
            blur_attribute_003.data_type = "FLOAT"
            # Iterations
            blur_attribute_003.inputs[1].default_value = 2
            # Weight
            blur_attribute_003.inputs[2].default_value = 1.0

            # node Edge Angle
            edge_angle = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputMeshEdgeAngle"
            )
            edge_angle.name = "Edge Angle"

            # node Group Input.006
            group_input_006_4 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_006_4.name = "Group Input.006"
            group_input_006_4.outputs[0].hide = True
            group_input_006_4.outputs[1].hide = True
            group_input_006_4.outputs[2].hide = True
            group_input_006_4.outputs[3].hide = True
            group_input_006_4.outputs[4].hide = True
            group_input_006_4.outputs[5].hide = True
            group_input_006_4.outputs[6].hide = True
            group_input_006_4.outputs[7].hide = True
            group_input_006_4.outputs[9].hide = True
            group_input_006_4.outputs[10].hide = True
            group_input_006_4.outputs[11].hide = True

            # node Group Input.007
            group_input_007_3 = _mn_utils_style_surface_new.nodes.new("NodeGroupInput")
            group_input_007_3.label = "Relaxation Steps"
            group_input_007_3.name = "Group Input.007"
            group_input_007_3.outputs[0].hide = True
            group_input_007_3.outputs[1].hide = True
            group_input_007_3.outputs[2].hide = True
            group_input_007_3.outputs[3].hide = True
            group_input_007_3.outputs[4].hide = True
            group_input_007_3.outputs[5].hide = True
            group_input_007_3.outputs[6].hide = True
            group_input_007_3.outputs[7].hide = True
            group_input_007_3.outputs[8].hide = True
            group_input_007_3.outputs[9].hide = True
            group_input_007_3.outputs[11].hide = True

            # node Compare.001
            compare_001_26 = _mn_utils_style_surface_new.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_26.name = "Compare.001"
            compare_001_26.data_type = "INT"
            compare_001_26.mode = "ELEMENT"
            compare_001_26.operation = "EQUAL"

            # node MN Select Alpha Carbon.001
            mn_select_alpha_carbon_001 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeGroup"
            )
            mn_select_alpha_carbon_001.label = " Select Alpha Carbon"
            mn_select_alpha_carbon_001.name = "MN Select Alpha Carbon.001"
            mn_select_alpha_carbon_001.node_tree = _mn_constants_atom_name_nucleic

            # node MN Select Alpha Carbon
            mn_select_alpha_carbon_1 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeGroup"
            )
            mn_select_alpha_carbon_1.label = " Select Alpha Carbon"
            mn_select_alpha_carbon_1.name = "MN Select Alpha Carbon"
            mn_select_alpha_carbon_1.node_tree = is_alpha_carbon
            # Socket_1
            mn_select_alpha_carbon_1.inputs[0].default_value = True
            # Socket_3
            mn_select_alpha_carbon_1.inputs[1].default_value = False

            # node Named Attribute.003
            named_attribute_003_9 = _mn_utils_style_surface_new.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_9.name = "Named Attribute.003"
            named_attribute_003_9.data_type = "INT"
            # Name
            named_attribute_003_9.inputs[0].default_value = "atom_name"

            # Set parents
            volume_cube_1.parent = frame_002_5
            reroute_003_17.parent = frame_002_5
            volume_to_mesh_3.parent = frame_002_5
            capture_attribute_12.parent = frame_17
            vector_math_001_22.parent = frame_17
            sample_index_10.parent = frame_17
            position_19.parent = frame_17
            vector_math_34.parent = frame_17
            vector_math_002_12.parent = frame_17
            vector_math_003_10.parent = frame_17
            sample_index_002_8.parent = frame_17
            reroute_007_10.parent = frame_17
            math_002_17.parent = frame_17
            group_input_003_9.parent = frame_17
            named_attribute_41.parent = frame_17
            reroute_006_11.parent = frame_17
            set_position_002_2.parent = frame_17
            sample_nearest_3.parent = frame_17
            blur_attribute_001_2.parent = frame_001_6
            position_002_11.parent = frame_001_6
            set_position_003.parent = frame_001_6
            set_position_004_2.parent = frame_001_6
            vector_math_005_6.parent = frame_001_6
            normal_1.parent = frame_001_6
            math_003_14.parent = frame_001_6
            capture_attribute_001_5.parent = frame_001_6
            set_position_001_7.parent = frame_001_6
            position_001_11.parent = frame_001_6
            vector_math_004_9.parent = frame_001_6
            blur_attribute_3.parent = frame_001_6
            group_003_10.parent = frame_001_6
            position_003_1.parent = frame_001_6
            blur_attribute_004.parent = frame_001_6
            reroute_005_12.parent = frame_003_5
            blur_attribute_002_1.parent = frame_003_5
            sample_index_003_7.parent = frame_003_5
            sample_nearest_001_2.parent = frame_003_5
            named_attribute_002_19.parent = frame_003_5
            group_input_004_7.parent = frame_003_5
            store_named_attribute_18.parent = frame_003_5
            set_position_005_2.parent = frame_001_6
            map_range_13.parent = frame_001_6
            evaluate_on_domain_3.parent = frame_001_6
            blur_attribute_003.parent = frame_001_6
            edge_angle.parent = frame_001_6
            group_input_007_3.parent = frame_001_6

            # Set locations
            frame_002_5.location = (218.288818359375, 125.22808837890625)
            frame_17.location = (-310.0, -12.0)
            frame_001_6.location = (-30.0, 100.0)
            frame_003_5.location = (519.0, -54.0)
            reroute_009_8.location = (4400.0, 440.0)
            reroute_004_12.location = (780.0, -1046.0635986328125)
            reroute_47.location = (1620.0, -1040.0)
            math_001_27.location = (627.5620727539062, 193.03146362304688)
            reroute_001_33.location = (547.5620727539062, 393.0314636230469)
            group_input_152.location = (-152.43792724609375, 333.0314636230469)
            separate_geometry_20.location = (127.56207275390625, 433.0314636230469)
            volume_cube_1.location = (890.0, 370.0)
            reroute_003_17.location = (1101.666748046875, 358.5393981933594)
            volume_to_mesh_3.location = (1216.4453125, 322.5808410644531)
            reroute_002_24.location = (1980.0, -1040.0)
            group_output_154.location = (7801.4853515625, 420.2796630859375)
            set_shade_smooth_001_1.location = (7280.0, 340.0)
            set_material_11.location = (7440.0, 340.0)
            group_input_005_4.location = (5340.0, -500.0)
            separate_geometry_001_12.location = (5500.0, -660.0)
            switch_41.location = (5500.0, -500.0)
            reroute_008_5.location = (5074.79296875, -1040.0)
            reroute_011_4.location = (5420.0, -680.0)
            boolean_math_34.location = (5660.0, -820.0)
            capture_attribute_12.location = (2621.3935546875, 352.30169677734375)
            vector_math_001_22.location = (3494.015869140625, -31.082717895507812)
            sample_index_10.location = (2820.0, 0.0)
            position_19.location = (2620.0, -60.0)
            vector_math_34.location = (2980.0, -40.0)
            vector_math_002_12.location = (3160.0, -40.0)
            vector_math_003_10.location = (3320.0, -40.0)
            sample_index_002_8.location = (2820.0, -220.0)
            reroute_007_10.location = (2580.0, -160.0)
            math_002_17.location = (2660.0, -220.0)
            group_input_003_9.location = (2480.0, -220.0)
            named_attribute_41.location = (2480.0, -280.0)
            reroute_006_11.location = (2780.0, -220.0)
            set_position_002_2.location = (3500.0, 180.0)
            sample_nearest_3.location = (2490.079345703125, 135.77288818359375)
            blur_attribute_001_2.location = (4620.0, -20.0)
            position_002_11.location = (4620.0, -180.0)
            set_position_003.location = (4400.0, 240.0)
            set_position_004_2.location = (4620.0, 240.0)
            vector_math_005_6.location = (4400.0, 80.0)
            normal_1.location = (4240.0, 80.0)
            math_003_14.location = (4400.0, -60.0)
            capture_attribute_001_5.location = (3880.0, 240.0)
            set_position_001_7.location = (4060.0, 240.0)
            position_001_11.location = (3660.0, 40.0)
            vector_math_004_9.location = (4060.0, 20.0)
            blur_attribute_3.location = (3880.0, 40.0)
            group_003_10.location = (5500.0, 240.0)
            position_003_1.location = (5030.0, -240.0)
            blur_attribute_004.location = (5190.0, -240.0)
            group_004_8.location = (627.5620727539062, 433.0314636230469)
            group_005_8.location = (627.5620727539062, 593.0314331054688)
            reroute_005_12.location = (5759.248046875, -86.10336303710938)
            blur_attribute_002_1.location = (6319.248046875, 113.89663696289062)
            sample_index_003_7.location = (6099.248046875, 133.89663696289062)
            sample_nearest_001_2.location = (5879.248046875, -46.103363037109375)
            named_attribute_002_19.location = (5879.248046875, 133.89663696289062)
            group_input_004_7.location = (6099.248046875, -86.10336303710938)
            store_named_attribute_18.location = (6319.248046875, 353.8966369628906)
            group_input_001_25.location = (7440.0, 200.0)
            group_input_002_14.location = (7280.0, 180.0)
            set_position_005_2.location = (5218.373046875, 251.50515747070312)
            triangulate.location = (6024.25439453125, 336.5474853515625)
            map_range_13.location = (4690.0, -420.0)
            evaluate_on_domain_3.location = (4870.0, -420.0)
            blur_attribute_003.location = (5030.0, -420.0)
            edge_angle.location = (4530.0, -420.0)
            group_input_006_4.location = (5820.0, 200.0)
            group_input_007_3.location = (5030.0, -320.0)
            compare_001_26.location = (5500.0, -980.0)
            mn_select_alpha_carbon_001.location = (5260.0, -940.0)
            mn_select_alpha_carbon_1.location = (5260.0, -860.0)
            named_attribute_003_9.location = (5320.0, -1120.0)

            # Set dimensions
            frame_002_5.width, frame_002_5.height = 556.4000244140625, 278.8000183105469
            frame_17.width, frame_17.height = 1220.0, 835.5999755859375
            frame_001_6.width, frame_001_6.height = 2171.52978515625, 979.6000366210938
            frame_003_5.width, frame_003_5.height = 766.5517578125, 590.7999877929688
            reroute_009_8.width, reroute_009_8.height = 16.0, 100.0
            reroute_004_12.width, reroute_004_12.height = 16.0, 100.0
            reroute_47.width, reroute_47.height = 16.0, 100.0
            math_001_27.width, math_001_27.height = 140.0, 100.0
            reroute_001_33.width, reroute_001_33.height = 16.0, 100.0
            group_input_152.width, group_input_152.height = 140.0, 100.0
            separate_geometry_20.width, separate_geometry_20.height = 140.0, 100.0
            volume_cube_1.width, volume_cube_1.height = 140.0, 100.0
            reroute_003_17.width, reroute_003_17.height = 16.0, 100.0
            volume_to_mesh_3.width, volume_to_mesh_3.height = 170.0, 100.0
            reroute_002_24.width, reroute_002_24.height = 16.0, 100.0
            group_output_154.width, group_output_154.height = 140.0, 100.0
            set_shade_smooth_001_1.width, set_shade_smooth_001_1.height = 140.0, 100.0
            set_material_11.width, set_material_11.height = 140.0, 100.0
            group_input_005_4.width, group_input_005_4.height = 140.0, 100.0
            separate_geometry_001_12.width, separate_geometry_001_12.height = (
                140.0,
                100.0,
            )
            switch_41.width, switch_41.height = 140.0, 100.0
            reroute_008_5.width, reroute_008_5.height = 16.0, 100.0
            reroute_011_4.width, reroute_011_4.height = 16.0, 100.0
            boolean_math_34.width, boolean_math_34.height = 140.0, 100.0
            capture_attribute_12.width, capture_attribute_12.height = 140.0, 100.0
            vector_math_001_22.width, vector_math_001_22.height = 140.0, 100.0
            sample_index_10.width, sample_index_10.height = 140.0, 100.0
            position_19.width, position_19.height = 140.0, 100.0
            vector_math_34.width, vector_math_34.height = 140.0, 100.0
            vector_math_002_12.width, vector_math_002_12.height = 140.0, 100.0
            vector_math_003_10.width, vector_math_003_10.height = 140.0, 100.0
            sample_index_002_8.width, sample_index_002_8.height = 140.0, 100.0
            reroute_007_10.width, reroute_007_10.height = 16.0, 100.0
            math_002_17.width, math_002_17.height = 140.0, 100.0
            group_input_003_9.width, group_input_003_9.height = (
                154.36306762695312,
                100.0,
            )
            named_attribute_41.width, named_attribute_41.height = 140.0, 100.0
            reroute_006_11.width, reroute_006_11.height = 16.0, 100.0
            set_position_002_2.width, set_position_002_2.height = 140.0, 100.0
            sample_nearest_3.width, sample_nearest_3.height = 140.0, 100.0
            blur_attribute_001_2.width, blur_attribute_001_2.height = 140.0, 100.0
            position_002_11.width, position_002_11.height = 140.0, 100.0
            set_position_003.width, set_position_003.height = 140.0, 100.0
            set_position_004_2.width, set_position_004_2.height = 140.0, 100.0
            vector_math_005_6.width, vector_math_005_6.height = 140.0, 100.0
            normal_1.width, normal_1.height = 140.0, 100.0
            math_003_14.width, math_003_14.height = 140.0, 100.0
            capture_attribute_001_5.width, capture_attribute_001_5.height = 140.0, 100.0
            set_position_001_7.width, set_position_001_7.height = 140.0, 100.0
            position_001_11.width, position_001_11.height = 140.0, 100.0
            vector_math_004_9.width, vector_math_004_9.height = 140.0, 100.0
            blur_attribute_3.width, blur_attribute_3.height = 140.0, 100.0
            group_003_10.width, group_003_10.height = 271.52978515625, 100.0
            position_003_1.width, position_003_1.height = 140.0, 100.0
            blur_attribute_004.width, blur_attribute_004.height = 140.0, 100.0
            group_004_8.width, group_004_8.height = 400.0, 100.0
            group_005_8.width, group_005_8.height = 400.0, 100.0
            reroute_005_12.width, reroute_005_12.height = 16.0, 100.0
            blur_attribute_002_1.width, blur_attribute_002_1.height = 140.0, 100.0
            sample_index_003_7.width, sample_index_003_7.height = 140.0, 100.0
            sample_nearest_001_2.width, sample_nearest_001_2.height = 140.0, 100.0
            named_attribute_002_19.width, named_attribute_002_19.height = 140.0, 100.0
            group_input_004_7.width, group_input_004_7.height = 140.0, 100.0
            store_named_attribute_18.width, store_named_attribute_18.height = (
                140.0,
                100.0,
            )
            group_input_001_25.width, group_input_001_25.height = 140.0, 100.0
            group_input_002_14.width, group_input_002_14.height = 140.0, 100.0
            set_position_005_2.width, set_position_005_2.height = 140.0, 100.0
            triangulate.width, triangulate.height = 140.0, 100.0
            map_range_13.width, map_range_13.height = 140.0, 100.0
            evaluate_on_domain_3.width, evaluate_on_domain_3.height = 140.0, 100.0
            blur_attribute_003.width, blur_attribute_003.height = 140.0, 100.0
            edge_angle.width, edge_angle.height = 140.0, 100.0
            group_input_006_4.width, group_input_006_4.height = 140.0, 100.0
            group_input_007_3.width, group_input_007_3.height = 140.0, 100.0
            compare_001_26.width, compare_001_26.height = 140.0, 100.0
            mn_select_alpha_carbon_001.width, mn_select_alpha_carbon_001.height = (
                200.0,
                100.0,
            )
            mn_select_alpha_carbon_1.width, mn_select_alpha_carbon_1.height = (
                200.0,
                100.0,
            )
            named_attribute_003_9.width, named_attribute_003_9.height = 140.0, 100.0

            # initialize _mn_utils_style_surface_new links
            # reroute_003_17.Output -> volume_to_mesh_3.Volume
            _mn_utils_style_surface_new.links.new(
                reroute_003_17.outputs[0], volume_to_mesh_3.inputs[0]
            )
            # group_004_8.Min -> volume_cube_1.Min
            _mn_utils_style_surface_new.links.new(
                group_004_8.outputs[0], volume_cube_1.inputs[2]
            )
            # group_004_8.Max -> volume_cube_1.Max
            _mn_utils_style_surface_new.links.new(
                group_004_8.outputs[1], volume_cube_1.inputs[3]
            )
            # group_004_8.X -> volume_cube_1.Resolution X
            _mn_utils_style_surface_new.links.new(
                group_004_8.outputs[2], volume_cube_1.inputs[4]
            )
            # group_004_8.Y -> volume_cube_1.Resolution Y
            _mn_utils_style_surface_new.links.new(
                group_004_8.outputs[3], volume_cube_1.inputs[5]
            )
            # group_004_8.Z -> volume_cube_1.Resolution Z
            _mn_utils_style_surface_new.links.new(
                group_004_8.outputs[4], volume_cube_1.inputs[6]
            )
            # separate_geometry_20.Selection -> reroute_004_12.Input
            _mn_utils_style_surface_new.links.new(
                separate_geometry_20.outputs[0], reroute_004_12.inputs[0]
            )
            # set_material_11.Geometry -> group_output_154.Surface Geometry
            _mn_utils_style_surface_new.links.new(
                set_material_11.outputs[0], group_output_154.inputs[0]
            )
            # reroute_009_8.Output -> group_output_154.Volume
            _mn_utils_style_surface_new.links.new(
                reroute_009_8.outputs[0], group_output_154.inputs[1]
            )
            # math_001_27.Value -> group_004_8.Subdivisions
            _mn_utils_style_surface_new.links.new(
                math_001_27.outputs[0], group_004_8.inputs[1]
            )
            # reroute_001_33.Output -> group_004_8.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_001_33.outputs[0], group_004_8.inputs[0]
            )
            # reroute_001_33.Output -> group_005_8.Atoms
            _mn_utils_style_surface_new.links.new(
                reroute_001_33.outputs[0], group_005_8.inputs[0]
            )
            # group_input_152.Scale Radii -> group_005_8.Scale Radius
            _mn_utils_style_surface_new.links.new(
                group_input_152.outputs[3], group_005_8.inputs[1]
            )
            # group_input_152.Atoms -> separate_geometry_20.Geometry
            _mn_utils_style_surface_new.links.new(
                group_input_152.outputs[0], separate_geometry_20.inputs[0]
            )
            # group_input_152.Selection -> separate_geometry_20.Selection
            _mn_utils_style_surface_new.links.new(
                group_input_152.outputs[1], separate_geometry_20.inputs[1]
            )
            # separate_geometry_20.Selection -> reroute_001_33.Input
            _mn_utils_style_surface_new.links.new(
                separate_geometry_20.outputs[0], reroute_001_33.inputs[0]
            )
            # group_input_152.Quality -> math_001_27.Value
            _mn_utils_style_surface_new.links.new(
                group_input_152.outputs[2], math_001_27.inputs[0]
            )
            # group_input_152.Probe Size -> group_005_8.Probe Size
            _mn_utils_style_surface_new.links.new(
                group_input_152.outputs[4], group_005_8.inputs[2]
            )
            # reroute_003_17.Output -> reroute_009_8.Input
            _mn_utils_style_surface_new.links.new(
                reroute_003_17.outputs[0], reroute_009_8.inputs[0]
            )
            # group_005_8.Result -> volume_cube_1.Density
            _mn_utils_style_surface_new.links.new(
                group_005_8.outputs[0], volume_cube_1.inputs[0]
            )
            # reroute_004_12.Output -> reroute_47.Input
            _mn_utils_style_surface_new.links.new(
                reroute_004_12.outputs[0], reroute_47.inputs[0]
            )
            # reroute_007_10.Output -> sample_index_10.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_007_10.outputs[0], sample_index_10.inputs[0]
            )
            # position_19.Position -> sample_index_10.Value
            _mn_utils_style_surface_new.links.new(
                position_19.outputs[0], sample_index_10.inputs[1]
            )
            # group_input_001_25.Material -> set_material_11.Material
            _mn_utils_style_surface_new.links.new(
                group_input_001_25.outputs[9], set_material_11.inputs[2]
            )
            # volume_to_mesh_3.Mesh -> capture_attribute_12.Geometry
            _mn_utils_style_surface_new.links.new(
                volume_to_mesh_3.outputs[0], capture_attribute_12.inputs[0]
            )
            # sample_nearest_3.Index -> capture_attribute_12.Value
            _mn_utils_style_surface_new.links.new(
                sample_nearest_3.outputs[0], capture_attribute_12.inputs[1]
            )
            # reroute_47.Output -> reroute_002_24.Input
            _mn_utils_style_surface_new.links.new(
                reroute_47.outputs[0], reroute_002_24.inputs[0]
            )
            # reroute_006_11.Output -> sample_index_10.Index
            _mn_utils_style_surface_new.links.new(
                reroute_006_11.outputs[0], sample_index_10.inputs[2]
            )
            # position_19.Position -> vector_math_34.Vector
            _mn_utils_style_surface_new.links.new(
                position_19.outputs[0], vector_math_34.inputs[0]
            )
            # vector_math_34.Vector -> vector_math_002_12.Vector
            _mn_utils_style_surface_new.links.new(
                vector_math_34.outputs[0], vector_math_002_12.inputs[0]
            )
            # reroute_007_10.Output -> sample_index_002_8.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_007_10.outputs[0], sample_index_002_8.inputs[0]
            )
            # reroute_006_11.Output -> sample_index_002_8.Index
            _mn_utils_style_surface_new.links.new(
                reroute_006_11.outputs[0], sample_index_002_8.inputs[2]
            )
            # vector_math_002_12.Vector -> vector_math_003_10.Vector
            _mn_utils_style_surface_new.links.new(
                vector_math_002_12.outputs[0], vector_math_003_10.inputs[0]
            )
            # sample_index_002_8.Value -> vector_math_003_10.Scale
            _mn_utils_style_surface_new.links.new(
                sample_index_002_8.outputs[0], vector_math_003_10.inputs[3]
            )
            # capture_attribute_001_5.Geometry -> set_position_001_7.Geometry
            _mn_utils_style_surface_new.links.new(
                capture_attribute_001_5.outputs[0], set_position_001_7.inputs[0]
            )
            # group_input_003_9.Scale Radii -> math_002_17.Value
            _mn_utils_style_surface_new.links.new(
                group_input_003_9.outputs[3], math_002_17.inputs[0]
            )
            # named_attribute_41.Attribute -> math_002_17.Value
            _mn_utils_style_surface_new.links.new(
                named_attribute_41.outputs[0], math_002_17.inputs[1]
            )
            # math_002_17.Value -> sample_index_002_8.Value
            _mn_utils_style_surface_new.links.new(
                math_002_17.outputs[0], sample_index_002_8.inputs[1]
            )
            # sample_index_10.Value -> vector_math_001_22.Vector
            _mn_utils_style_surface_new.links.new(
                sample_index_10.outputs[0], vector_math_001_22.inputs[0]
            )
            # vector_math_003_10.Vector -> vector_math_001_22.Vector
            _mn_utils_style_surface_new.links.new(
                vector_math_003_10.outputs[0], vector_math_001_22.inputs[1]
            )
            # set_shade_smooth_001_1.Geometry -> set_material_11.Geometry
            _mn_utils_style_surface_new.links.new(
                set_shade_smooth_001_1.outputs[0], set_material_11.inputs[0]
            )
            # sample_index_10.Value -> vector_math_34.Vector
            _mn_utils_style_surface_new.links.new(
                sample_index_10.outputs[0], vector_math_34.inputs[1]
            )
            # volume_cube_1.Volume -> reroute_003_17.Input
            _mn_utils_style_surface_new.links.new(
                volume_cube_1.outputs[0], reroute_003_17.inputs[0]
            )
            # blur_attribute_3.Value -> set_position_001_7.Position
            _mn_utils_style_surface_new.links.new(
                blur_attribute_3.outputs[0], set_position_001_7.inputs[2]
            )
            # capture_attribute_12.Geometry -> set_position_002_2.Geometry
            _mn_utils_style_surface_new.links.new(
                capture_attribute_12.outputs[0], set_position_002_2.inputs[0]
            )
            # vector_math_001_22.Vector -> set_position_002_2.Position
            _mn_utils_style_surface_new.links.new(
                vector_math_001_22.outputs[0], set_position_002_2.inputs[2]
            )
            # position_001_11.Position -> blur_attribute_3.Value
            _mn_utils_style_surface_new.links.new(
                position_001_11.outputs[0], blur_attribute_3.inputs[0]
            )
            # set_position_002_2.Geometry -> capture_attribute_001_5.Geometry
            _mn_utils_style_surface_new.links.new(
                set_position_002_2.outputs[0], capture_attribute_001_5.inputs[0]
            )
            # position_001_11.Position -> capture_attribute_001_5.Value
            _mn_utils_style_surface_new.links.new(
                position_001_11.outputs[0], capture_attribute_001_5.inputs[1]
            )
            # capture_attribute_001_5.Value -> vector_math_004_9.Vector
            _mn_utils_style_surface_new.links.new(
                capture_attribute_001_5.outputs[1], vector_math_004_9.inputs[0]
            )
            # position_001_11.Position -> vector_math_004_9.Vector
            _mn_utils_style_surface_new.links.new(
                position_001_11.outputs[0], vector_math_004_9.inputs[1]
            )
            # set_position_001_7.Geometry -> set_position_003.Geometry
            _mn_utils_style_surface_new.links.new(
                set_position_001_7.outputs[0], set_position_003.inputs[0]
            )
            # vector_math_005_6.Vector -> set_position_003.Offset
            _mn_utils_style_surface_new.links.new(
                vector_math_005_6.outputs[0], set_position_003.inputs[3]
            )
            # normal_1.Normal -> vector_math_005_6.Vector
            _mn_utils_style_surface_new.links.new(
                normal_1.outputs[0], vector_math_005_6.inputs[0]
            )
            # set_position_003.Geometry -> set_position_004_2.Geometry
            _mn_utils_style_surface_new.links.new(
                set_position_003.outputs[0], set_position_004_2.inputs[0]
            )
            # position_002_11.Position -> blur_attribute_001_2.Value
            _mn_utils_style_surface_new.links.new(
                position_002_11.outputs[0], blur_attribute_001_2.inputs[0]
            )
            # reroute_005_12.Output -> sample_index_003_7.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_005_12.outputs[0], sample_index_003_7.inputs[0]
            )
            # named_attribute_002_19.Attribute -> sample_index_003_7.Value
            _mn_utils_style_surface_new.links.new(
                named_attribute_002_19.outputs[0], sample_index_003_7.inputs[1]
            )
            # set_position_005_2.Geometry -> group_003_10.Geometry
            _mn_utils_style_surface_new.links.new(
                set_position_005_2.outputs[0], group_003_10.inputs[0]
            )
            # sample_index_003_7.Value -> blur_attribute_002_1.Value
            _mn_utils_style_surface_new.links.new(
                sample_index_003_7.outputs[0], blur_attribute_002_1.inputs[0]
            )
            # vector_math_004_9.Value -> math_003_14.Value
            _mn_utils_style_surface_new.links.new(
                vector_math_004_9.outputs[1], math_003_14.inputs[0]
            )
            # math_003_14.Value -> vector_math_005_6.Scale
            _mn_utils_style_surface_new.links.new(
                math_003_14.outputs[0], vector_math_005_6.inputs[3]
            )
            # edge_angle.Signed Angle -> map_range_13.Value
            _mn_utils_style_surface_new.links.new(
                edge_angle.outputs[1], map_range_13.inputs[0]
            )
            # blur_attribute_003.Value -> blur_attribute_004.Weight
            _mn_utils_style_surface_new.links.new(
                blur_attribute_003.outputs[0], blur_attribute_004.inputs[2]
            )
            # position_003_1.Position -> blur_attribute_004.Value
            _mn_utils_style_surface_new.links.new(
                position_003_1.outputs[0], blur_attribute_004.inputs[0]
            )
            # blur_attribute_001_2.Value -> set_position_004_2.Position
            _mn_utils_style_surface_new.links.new(
                blur_attribute_001_2.outputs[0], set_position_004_2.inputs[2]
            )
            # set_position_004_2.Geometry -> set_position_005_2.Geometry
            _mn_utils_style_surface_new.links.new(
                set_position_004_2.outputs[0], set_position_005_2.inputs[0]
            )
            # blur_attribute_004.Value -> set_position_005_2.Position
            _mn_utils_style_surface_new.links.new(
                blur_attribute_004.outputs[0], set_position_005_2.inputs[2]
            )
            # map_range_13.Result -> evaluate_on_domain_3.Value
            _mn_utils_style_surface_new.links.new(
                map_range_13.outputs[0], evaluate_on_domain_3.inputs[0]
            )
            # reroute_005_12.Output -> sample_nearest_001_2.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_005_12.outputs[0], sample_nearest_001_2.inputs[0]
            )
            # sample_nearest_001_2.Index -> sample_index_003_7.Index
            _mn_utils_style_surface_new.links.new(
                sample_nearest_001_2.outputs[0], sample_index_003_7.inputs[2]
            )
            # switch_41.Output -> reroute_005_12.Input
            _mn_utils_style_surface_new.links.new(
                switch_41.outputs[0], reroute_005_12.inputs[0]
            )
            # reroute_002_24.Output -> reroute_007_10.Input
            _mn_utils_style_surface_new.links.new(
                reroute_002_24.outputs[0], reroute_007_10.inputs[0]
            )
            # capture_attribute_12.Value -> reroute_006_11.Input
            _mn_utils_style_surface_new.links.new(
                capture_attribute_12.outputs[1], reroute_006_11.inputs[0]
            )
            # reroute_007_10.Output -> sample_nearest_3.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_007_10.outputs[0], sample_nearest_3.inputs[0]
            )
            # triangulate.Mesh -> store_named_attribute_18.Geometry
            _mn_utils_style_surface_new.links.new(
                triangulate.outputs[0], store_named_attribute_18.inputs[0]
            )
            # blur_attribute_002_1.Value -> store_named_attribute_18.Value
            _mn_utils_style_surface_new.links.new(
                blur_attribute_002_1.outputs[0], store_named_attribute_18.inputs[3]
            )
            # reroute_002_24.Output -> reroute_008_5.Input
            _mn_utils_style_surface_new.links.new(
                reroute_002_24.outputs[0], reroute_008_5.inputs[0]
            )
            # group_input_004_7.Color Blur -> blur_attribute_002_1.Iterations
            _mn_utils_style_surface_new.links.new(
                group_input_004_7.outputs[6], blur_attribute_002_1.inputs[1]
            )
            # store_named_attribute_18.Geometry -> set_shade_smooth_001_1.Geometry
            _mn_utils_style_surface_new.links.new(
                store_named_attribute_18.outputs[0], set_shade_smooth_001_1.inputs[0]
            )
            # group_input_002_14.Shade Smooth -> set_shade_smooth_001_1.Shade Smooth
            _mn_utils_style_surface_new.links.new(
                group_input_002_14.outputs[7], set_shade_smooth_001_1.inputs[2]
            )
            # reroute_011_4.Output -> separate_geometry_001_12.Geometry
            _mn_utils_style_surface_new.links.new(
                reroute_011_4.outputs[0], separate_geometry_001_12.inputs[0]
            )
            # separate_geometry_001_12.Selection -> switch_41.True
            _mn_utils_style_surface_new.links.new(
                separate_geometry_001_12.outputs[0], switch_41.inputs[2]
            )
            # reroute_011_4.Output -> switch_41.False
            _mn_utils_style_surface_new.links.new(
                reroute_011_4.outputs[0], switch_41.inputs[1]
            )
            # group_input_005_4.Color by CA -> switch_41.Switch
            _mn_utils_style_surface_new.links.new(
                group_input_005_4.outputs[5], switch_41.inputs[0]
            )
            # compare_001_26.Result -> boolean_math_34.Boolean
            _mn_utils_style_surface_new.links.new(
                compare_001_26.outputs[0], boolean_math_34.inputs[1]
            )
            # boolean_math_34.Boolean -> separate_geometry_001_12.Selection
            _mn_utils_style_surface_new.links.new(
                boolean_math_34.outputs[0], separate_geometry_001_12.inputs[1]
            )
            # reroute_008_5.Output -> reroute_011_4.Input
            _mn_utils_style_surface_new.links.new(
                reroute_008_5.outputs[0], reroute_011_4.inputs[0]
            )
            # evaluate_on_domain_3.Value -> blur_attribute_003.Value
            _mn_utils_style_surface_new.links.new(
                evaluate_on_domain_3.outputs[0], blur_attribute_003.inputs[0]
            )
            # group_003_10.Geometry -> triangulate.Mesh
            _mn_utils_style_surface_new.links.new(
                group_003_10.outputs[0], triangulate.inputs[0]
            )
            # group_input_006_4.Triangulate -> triangulate.Selection
            _mn_utils_style_surface_new.links.new(
                group_input_006_4.outputs[8], triangulate.inputs[1]
            )
            # group_input_007_3.Relaxation Steps -> blur_attribute_004.Iterations
            _mn_utils_style_surface_new.links.new(
                group_input_007_3.outputs[10], blur_attribute_004.inputs[1]
            )
            # mn_select_alpha_carbon_1.Selection -> boolean_math_34.Boolean
            _mn_utils_style_surface_new.links.new(
                mn_select_alpha_carbon_1.outputs[0], boolean_math_34.inputs[0]
            )
            # named_attribute_003_9.Attribute -> compare_001_26.B
            _mn_utils_style_surface_new.links.new(
                named_attribute_003_9.outputs[0], compare_001_26.inputs[3]
            )
            # mn_select_alpha_carbon_001.Side Chain Joint Carbon -> compare_001_26.A
            _mn_utils_style_surface_new.links.new(
                mn_select_alpha_carbon_001.outputs[4], compare_001_26.inputs[2]
            )
            return _mn_utils_style_surface_new

        _mn_utils_style_surface_new = _mn_utils_style_surface_new_node_group()

        # initialize _mn_utils_to_instance_centred node group
        def _mn_utils_to_instance_centred_node_group():
            _mn_utils_to_instance_centred = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_to_instance_centred"
            )

            _mn_utils_to_instance_centred.color_tag = "NONE"
            _mn_utils_to_instance_centred.description = ""

            # _mn_utils_to_instance_centred interface
            # Socket Geometry
            geometry_socket_32 = _mn_utils_to_instance_centred.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_32.attribute_domain = "POINT"

            # Socket Input
            input_socket_6 = _mn_utils_to_instance_centred.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            input_socket_6.attribute_domain = "POINT"

            # initialize _mn_utils_to_instance_centred nodes
            # node Bounding Box
            bounding_box_4 = _mn_utils_to_instance_centred.nodes.new(
                "GeometryNodeBoundBox"
            )
            bounding_box_4.name = "Bounding Box"

            # node Transform Geometry
            transform_geometry_5 = _mn_utils_to_instance_centred.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_5.name = "Transform Geometry"
            transform_geometry_5.mode = "COMPONENTS"
            # Rotation
            transform_geometry_5.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_5.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Transform Geometry.001
            transform_geometry_001_3 = _mn_utils_to_instance_centred.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_001_3.name = "Transform Geometry.001"
            transform_geometry_001_3.mode = "COMPONENTS"
            # Rotation
            transform_geometry_001_3.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_001_3.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Vector Math
            vector_math_35 = _mn_utils_to_instance_centred.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_35.label = "-x"
            vector_math_35.name = "Vector Math"
            vector_math_35.hide = True
            vector_math_35.operation = "SCALE"
            # Scale
            vector_math_35.inputs[3].default_value = -1.0

            # node Mix
            mix_13 = _mn_utils_to_instance_centred.nodes.new("ShaderNodeMix")
            mix_13.label = "lerp(a, b, 0.5)"
            mix_13.name = "Mix"
            mix_13.hide = True
            mix_13.blend_type = "MIX"
            mix_13.clamp_factor = True
            mix_13.clamp_result = False
            mix_13.data_type = "VECTOR"
            mix_13.factor_mode = "UNIFORM"
            # Factor_Float
            mix_13.inputs[0].default_value = 0.5

            # node Group Input
            group_input_153 = _mn_utils_to_instance_centred.nodes.new("NodeGroupInput")
            group_input_153.name = "Group Input"

            # node Geometry to Instance
            geometry_to_instance_7 = _mn_utils_to_instance_centred.nodes.new(
                "GeometryNodeGeometryToInstance"
            )
            geometry_to_instance_7.name = "Geometry to Instance"

            # node Group Output
            group_output_155 = _mn_utils_to_instance_centred.nodes.new(
                "NodeGroupOutput"
            )
            group_output_155.name = "Group Output"
            group_output_155.is_active_output = True

            # node Reroute.001
            reroute_001_34 = _mn_utils_to_instance_centred.nodes.new("NodeReroute")
            reroute_001_34.name = "Reroute.001"

            # Set locations
            bounding_box_4.location = (-338.7969970703125, -30.0)
            transform_geometry_5.location = (21.2030029296875, 90.0)
            transform_geometry_001_3.location = (361.2030029296875, 90.0)
            vector_math_35.location = (-178.7969970703125, -50.0)
            mix_13.location = (-178.7969970703125, -90.0)
            group_input_153.location = (-600.0, 100.0)
            geometry_to_instance_7.location = (181.2030029296875, 90.0)
            group_output_155.location = (560.0, 100.0)
            reroute_001_34.location = (-380.0, 40.0)

            # Set dimensions
            bounding_box_4.width, bounding_box_4.height = 140.0, 100.0
            transform_geometry_5.width, transform_geometry_5.height = 140.0, 100.0
            transform_geometry_001_3.width, transform_geometry_001_3.height = (
                140.0,
                100.0,
            )
            vector_math_35.width, vector_math_35.height = 140.0, 100.0
            mix_13.width, mix_13.height = 140.0, 100.0
            group_input_153.width, group_input_153.height = 140.0, 100.0
            geometry_to_instance_7.width, geometry_to_instance_7.height = 160.0, 100.0
            group_output_155.width, group_output_155.height = 140.0, 100.0
            reroute_001_34.width, reroute_001_34.height = 16.0, 100.0

            # initialize _mn_utils_to_instance_centred links
            # reroute_001_34.Output -> transform_geometry_5.Geometry
            _mn_utils_to_instance_centred.links.new(
                reroute_001_34.outputs[0], transform_geometry_5.inputs[0]
            )
            # reroute_001_34.Output -> bounding_box_4.Geometry
            _mn_utils_to_instance_centred.links.new(
                reroute_001_34.outputs[0], bounding_box_4.inputs[0]
            )
            # transform_geometry_5.Geometry -> geometry_to_instance_7.Geometry
            _mn_utils_to_instance_centred.links.new(
                transform_geometry_5.outputs[0], geometry_to_instance_7.inputs[0]
            )
            # mix_13.Result -> vector_math_35.Vector
            _mn_utils_to_instance_centred.links.new(
                mix_13.outputs[1], vector_math_35.inputs[0]
            )
            # vector_math_35.Vector -> transform_geometry_5.Translation
            _mn_utils_to_instance_centred.links.new(
                vector_math_35.outputs[0], transform_geometry_5.inputs[1]
            )
            # geometry_to_instance_7.Instances -> transform_geometry_001_3.Geometry
            _mn_utils_to_instance_centred.links.new(
                geometry_to_instance_7.outputs[0], transform_geometry_001_3.inputs[0]
            )
            # bounding_box_4.Min -> mix_13.A
            _mn_utils_to_instance_centred.links.new(
                bounding_box_4.outputs[1], mix_13.inputs[4]
            )
            # mix_13.Result -> transform_geometry_001_3.Translation
            _mn_utils_to_instance_centred.links.new(
                mix_13.outputs[1], transform_geometry_001_3.inputs[1]
            )
            # bounding_box_4.Max -> mix_13.B
            _mn_utils_to_instance_centred.links.new(
                bounding_box_4.outputs[2], mix_13.inputs[5]
            )
            # group_input_153.Input -> reroute_001_34.Input
            _mn_utils_to_instance_centred.links.new(
                group_input_153.outputs[0], reroute_001_34.inputs[0]
            )
            # transform_geometry_001_3.Geometry -> group_output_155.Geometry
            _mn_utils_to_instance_centred.links.new(
                transform_geometry_001_3.outputs[0], group_output_155.inputs[0]
            )
            return _mn_utils_to_instance_centred

        _mn_utils_to_instance_centred = _mn_utils_to_instance_centred_node_group()

        # initialize mn_style_surface_old node group
        def mn_style_surface_old_node_group():
            mn_style_surface_old = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_style_surface_old"
            )

            mn_style_surface_old.color_tag = "NONE"
            mn_style_surface_old.description = ""

            # mn_style_surface_old interface
            # Socket Geometry
            geometry_socket_33 = mn_style_surface_old.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_33.attribute_domain = "POINT"

            # Socket Instances
            instances_socket_7 = mn_style_surface_old.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_7.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_32 = mn_style_surface_old.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_32.attribute_domain = "POINT"
            atoms_socket_32.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_57 = mn_style_surface_old.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_57.attribute_domain = "POINT"
            selection_socket_57.hide_value = True
            selection_socket_57.description = "Selection of atoms to apply this node to"

            # Socket Quality
            quality_socket_5 = mn_style_surface_old.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_5.subtype = "NONE"
            quality_socket_5.default_value = 2
            quality_socket_5.min_value = 0
            quality_socket_5.max_value = 5
            quality_socket_5.attribute_domain = "POINT"
            quality_socket_5.description = "Quailty of the surface to generate"

            # Panel Surface
            surface_panel = mn_style_surface_old.interface.new_panel(
                "Surface", default_closed=True
            )
            # Socket Scale Radii
            scale_radii_socket_4 = mn_style_surface_old.interface.new_socket(
                name="Scale Radii",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=surface_panel,
            )
            scale_radii_socket_4.subtype = "NONE"
            scale_radii_socket_4.default_value = 1.0
            scale_radii_socket_4.min_value = 0.0
            scale_radii_socket_4.max_value = 10.0
            scale_radii_socket_4.attribute_domain = "POINT"
            scale_radii_socket_4.description = (
                "Scale the VDW radii of the atoms when creating the surface"
            )

            # Socket Probe Size
            probe_size_socket_4 = mn_style_surface_old.interface.new_socket(
                name="Probe Size",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=surface_panel,
            )
            probe_size_socket_4.subtype = "NONE"
            probe_size_socket_4.default_value = 0.800000011920929
            probe_size_socket_4.min_value = 0.0
            probe_size_socket_4.max_value = 10000.0
            probe_size_socket_4.attribute_domain = "POINT"
            probe_size_socket_4.description = (
                "Scale the probe that is used to check for solvent accessibility"
            )

            # Socket Separate
            separate_socket = mn_style_surface_old.interface.new_socket(
                name="Separate",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=surface_panel,
            )
            separate_socket.attribute_domain = "POINT"
            separate_socket.description = (
                "Whether to create separate surfaces, based on the 'Attribute' name"
            )

            # Socket Attribute
            attribute_socket = mn_style_surface_old.interface.new_socket(
                name="Attribute",
                in_out="INPUT",
                socket_type="NodeSocketString",
                parent=surface_panel,
            )
            attribute_socket.attribute_domain = "POINT"
            attribute_socket.description = "Attribute to separate the surface by"

            # Panel Color
            color_panel_2 = mn_style_surface_old.interface.new_panel(
                "Color", default_closed=True
            )
            # Socket Color by CA
            color_by_ca_socket_3 = mn_style_surface_old.interface.new_socket(
                name="Color by CA",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=color_panel_2,
            )
            color_by_ca_socket_3.attribute_domain = "POINT"
            color_by_ca_socket_3.description = (
                "Only take colors from CA atoms (or similar in nucleic acids)"
            )

            # Socket Color Blur
            color_blur_socket_3 = mn_style_surface_old.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=color_panel_2,
            )
            color_blur_socket_3.subtype = "NONE"
            color_blur_socket_3.default_value = 2
            color_blur_socket_3.min_value = 0
            color_blur_socket_3.max_value = 20
            color_blur_socket_3.attribute_domain = "POINT"
            color_blur_socket_3.description = (
                "When coloring the surface, blur colors from nearby atoms"
            )

            # Panel Material
            material_panel_6 = mn_style_surface_old.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Shade Smooth
            shade_smooth_socket_14 = mn_style_surface_old.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_6,
            )
            shade_smooth_socket_14.attribute_domain = "POINT"
            shade_smooth_socket_14.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_19 = mn_style_surface_old.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_6,
            )
            material_socket_19.attribute_domain = "POINT"
            material_socket_19.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize mn_style_surface_old nodes
            # node Named Attribute
            named_attribute_42 = mn_style_surface_old.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_42.name = "Named Attribute"
            named_attribute_42.data_type = "INT"

            # node Compare
            compare_44 = mn_style_surface_old.nodes.new("FunctionNodeCompare")
            compare_44.name = "Compare"
            compare_44.data_type = "INT"
            compare_44.mode = "ELEMENT"
            compare_44.operation = "EQUAL"

            # node Repeat Input
            repeat_input_1 = mn_style_surface_old.nodes.new("GeometryNodeRepeatInput")
            repeat_input_1.name = "Repeat Input"
            # node Attribute Statistic
            attribute_statistic_1 = mn_style_surface_old.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_1.name = "Attribute Statistic"
            attribute_statistic_1.data_type = "FLOAT"
            attribute_statistic_1.domain = "POINT"
            attribute_statistic_1.inputs[1].hide = True
            attribute_statistic_1.outputs[0].hide = True
            attribute_statistic_1.outputs[1].hide = True
            attribute_statistic_1.outputs[2].hide = True
            attribute_statistic_1.outputs[3].hide = True
            attribute_statistic_1.outputs[5].hide = True
            attribute_statistic_1.outputs[6].hide = True
            attribute_statistic_1.outputs[7].hide = True
            # Selection
            attribute_statistic_1.inputs[1].default_value = True

            # node Reroute
            reroute_48 = mn_style_surface_old.nodes.new("NodeReroute")
            reroute_48.name = "Reroute"
            # node Math.001
            math_001_28 = mn_style_surface_old.nodes.new("ShaderNodeMath")
            math_001_28.label = "x + 1"
            math_001_28.name = "Math.001"
            math_001_28.hide = True
            math_001_28.operation = "ADD"
            math_001_28.use_clamp = False
            # Value_001
            math_001_28.inputs[1].default_value = 1.0

            # node Separate Geometry.002
            separate_geometry_002_5 = mn_style_surface_old.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_5.name = "Separate Geometry.002"
            separate_geometry_002_5.domain = "POINT"

            # node Join Geometry
            join_geometry_7 = mn_style_surface_old.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_7.name = "Join Geometry"

            # node Separate Geometry.001
            separate_geometry_001_13 = mn_style_surface_old.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_13.name = "Separate Geometry.001"
            separate_geometry_001_13.domain = "POINT"

            # node Group.071
            group_071 = mn_style_surface_old.nodes.new("GeometryNodeGroup")
            group_071.name = "Group.071"
            group_071.node_tree = _mn_utils_style_surface_old
            # Input_4
            group_071.inputs[1].default_value = True
            # Input_21
            group_071.inputs[5].default_value = 0

            # node Group.070
            group_070 = mn_style_surface_old.nodes.new("GeometryNodeGroup")
            group_070.name = "Group.070"
            group_070.node_tree = _mn_utils_style_surface_old
            # Input_4
            group_070.inputs[1].default_value = True
            # Input_21
            group_070.inputs[5].default_value = 0

            # node Math
            math_39 = mn_style_surface_old.nodes.new("ShaderNodeMath")
            math_39.label = "x + 1"
            math_39.name = "Math"
            math_39.hide = True
            math_39.operation = "ADD"
            math_39.use_clamp = False
            # Value_001
            math_39.inputs[1].default_value = 1.0

            # node Join Geometry.001
            join_geometry_001_6 = mn_style_surface_old.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_6.name = "Join Geometry.001"

            # node Group
            group_41 = mn_style_surface_old.nodes.new("GeometryNodeGroup")
            group_41.name = "Group"
            group_41.node_tree = _mn_utils_to_instance_centred

            # node Separate Geometry
            separate_geometry_21 = mn_style_surface_old.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_21.name = "Separate Geometry"
            separate_geometry_21.domain = "POINT"

            # node Reroute.001
            reroute_001_35 = mn_style_surface_old.nodes.new("NodeReroute")
            reroute_001_35.name = "Reroute.001"
            # node Group Output
            group_output_156 = mn_style_surface_old.nodes.new("NodeGroupOutput")
            group_output_156.name = "Group Output"
            group_output_156.is_active_output = True

            # node Repeat Output
            repeat_output_1 = mn_style_surface_old.nodes.new("GeometryNodeRepeatOutput")
            repeat_output_1.name = "Repeat Output"
            repeat_output_1.active_index = 3
            repeat_output_1.inspection_index = 0
            repeat_output_1.repeat_items.clear()
            # Create item "Atoms"
            repeat_output_1.repeat_items.new("GEOMETRY", "Atoms")
            # Create item "i"
            repeat_output_1.repeat_items.new("INT", "i")
            # Create item "Surfaces"
            repeat_output_1.repeat_items.new("GEOMETRY", "Surfaces")
            # Create item "Instances"
            repeat_output_1.repeat_items.new("GEOMETRY", "Instances")

            # node Join Geometry.002
            join_geometry_002_1 = mn_style_surface_old.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_002_1.name = "Join Geometry.002"

            # node Group Input
            group_input_154 = mn_style_surface_old.nodes.new("NodeGroupInput")
            group_input_154.name = "Group Input"
            group_input_154.outputs[2].hide = True
            group_input_154.outputs[3].hide = True
            group_input_154.outputs[4].hide = True
            group_input_154.outputs[6].hide = True
            group_input_154.outputs[7].hide = True
            group_input_154.outputs[8].hide = True
            group_input_154.outputs[9].hide = True
            group_input_154.outputs[10].hide = True
            group_input_154.outputs[11].hide = True

            # node Reroute.002
            reroute_002_25 = mn_style_surface_old.nodes.new("NodeReroute")
            reroute_002_25.name = "Reroute.002"
            # node Group Input.001
            group_input_001_26 = mn_style_surface_old.nodes.new("NodeGroupInput")
            group_input_001_26.name = "Group Input.001"
            group_input_001_26.outputs[6].hide = True

            # node Math.002
            math_002_18 = mn_style_surface_old.nodes.new("ShaderNodeMath")
            math_002_18.name = "Math.002"
            math_002_18.operation = "MULTIPLY"
            math_002_18.use_clamp = False
            # Value_001
            math_002_18.inputs[1].default_value = 3.0

            # node Math.003
            math_003_15 = mn_style_surface_old.nodes.new("ShaderNodeMath")
            math_003_15.name = "Math.003"
            math_003_15.operation = "ADD"
            math_003_15.use_clamp = False
            # Value_001
            math_003_15.inputs[1].default_value = 2.0

            # node Group Input.002
            group_input_002_15 = mn_style_surface_old.nodes.new("NodeGroupInput")
            group_input_002_15.name = "Group Input.002"
            group_input_002_15.outputs[0].hide = True
            group_input_002_15.outputs[1].hide = True
            group_input_002_15.outputs[2].hide = True
            group_input_002_15.outputs[3].hide = True
            group_input_002_15.outputs[4].hide = True
            group_input_002_15.outputs[5].hide = True
            group_input_002_15.outputs[7].hide = True
            group_input_002_15.outputs[8].hide = True
            group_input_002_15.outputs[9].hide = True
            group_input_002_15.outputs[10].hide = True
            group_input_002_15.outputs[11].hide = True

            # Process zone input Repeat Input
            repeat_input_1.pair_with_output(repeat_output_1)
            # Item_1
            repeat_input_1.inputs[2].default_value = 0

            # Set locations
            named_attribute_42.location = (-702.0, 60.0)
            compare_44.location = (-40.0, -200.0)
            repeat_input_1.location = (-40.0, 100.0)
            attribute_statistic_1.location = (-300.0, 100.0)
            reroute_48.location = (-340.0, -100.0)
            math_001_28.location = (-300.0, 140.0)
            separate_geometry_002_5.location = (-521.051513671875, -390.30389404296875)
            join_geometry_7.location = (800.0, -60.0)
            separate_geometry_001_13.location = (-740.0, -380.0)
            group_071.location = (440.0, -580.0)
            group_070.location = (442.05645751953125, -137.9451904296875)
            math_39.location = (260.0, 61.039306640625)
            join_geometry_001_6.location = (1680.0, -20.0)
            group_41.location = (800.0, -140.0)
            separate_geometry_21.location = (220.0, -40.0)
            reroute_001_35.location = (2040.0, -160.0)
            group_output_156.location = (2260.0, 140.0)
            repeat_output_1.location = (1860.0, 180.0)
            join_geometry_002_1.location = (2100.0, 160.0)
            group_input_154.location = (-980.0, -460.0)
            reroute_002_25.location = (-120.0, -580.0)
            group_input_001_26.location = (-480.0, -740.0)
            math_002_18.location = (-300.0, -700.0)
            math_003_15.location = (-300.0, -540.0)
            group_input_002_15.location = (-880.0, 60.0)

            # Set dimensions
            named_attribute_42.width, named_attribute_42.height = 140.0, 100.0
            compare_44.width, compare_44.height = 140.0, 100.0
            repeat_input_1.width, repeat_input_1.height = 140.0, 100.0
            attribute_statistic_1.width, attribute_statistic_1.height = 140.0, 100.0
            reroute_48.width, reroute_48.height = 16.0, 100.0
            math_001_28.width, math_001_28.height = 140.0, 100.0
            separate_geometry_002_5.width, separate_geometry_002_5.height = 140.0, 100.0
            join_geometry_7.width, join_geometry_7.height = 140.0, 100.0
            separate_geometry_001_13.width, separate_geometry_001_13.height = (
                140.0,
                100.0,
            )
            group_071.width, group_071.height = 240.75701904296875, 100.0
            group_070.width, group_070.height = 240.75701904296875, 100.0
            math_39.width, math_39.height = 140.0, 100.0
            join_geometry_001_6.width, join_geometry_001_6.height = 140.0, 100.0
            group_41.width, group_41.height = 225.6224365234375, 100.0
            separate_geometry_21.width, separate_geometry_21.height = 140.0, 100.0
            reroute_001_35.width, reroute_001_35.height = 16.0, 100.0
            group_output_156.width, group_output_156.height = 140.0, 100.0
            repeat_output_1.width, repeat_output_1.height = 140.0, 100.0
            join_geometry_002_1.width, join_geometry_002_1.height = 140.0, 100.0
            group_input_154.width, group_input_154.height = 140.0, 100.0
            reroute_002_25.width, reroute_002_25.height = 16.0, 100.0
            group_input_001_26.width, group_input_001_26.height = 140.0, 100.0
            math_002_18.width, math_002_18.height = 140.0, 100.0
            math_003_15.width, math_003_15.height = 140.0, 100.0
            group_input_002_15.width, group_input_002_15.height = 140.0, 100.0

            # initialize mn_style_surface_old links
            # repeat_input_1.i -> math_39.Value
            mn_style_surface_old.links.new(repeat_input_1.outputs[1], math_39.inputs[0])
            # math_39.Value -> repeat_output_1.i
            mn_style_surface_old.links.new(
                math_39.outputs[0], repeat_output_1.inputs[1]
            )
            # repeat_input_1.Atoms -> separate_geometry_21.Geometry
            mn_style_surface_old.links.new(
                repeat_input_1.outputs[0], separate_geometry_21.inputs[0]
            )
            # repeat_input_1.i -> compare_44.A
            mn_style_surface_old.links.new(
                repeat_input_1.outputs[1], compare_44.inputs[2]
            )
            # named_attribute_42.Attribute -> attribute_statistic_1.Attribute
            mn_style_surface_old.links.new(
                named_attribute_42.outputs[0], attribute_statistic_1.inputs[2]
            )
            # named_attribute_42.Attribute -> compare_44.B
            mn_style_surface_old.links.new(
                named_attribute_42.outputs[0], compare_44.inputs[3]
            )
            # compare_44.Result -> separate_geometry_21.Selection
            mn_style_surface_old.links.new(
                compare_44.outputs[0], separate_geometry_21.inputs[1]
            )
            # separate_geometry_21.Inverted -> repeat_output_1.Atoms
            mn_style_surface_old.links.new(
                separate_geometry_21.outputs[1], repeat_output_1.inputs[0]
            )
            # separate_geometry_21.Selection -> group_070.Atoms
            mn_style_surface_old.links.new(
                separate_geometry_21.outputs[0], group_070.inputs[0]
            )
            # group_070.Geometry -> join_geometry_7.Geometry
            mn_style_surface_old.links.new(
                group_070.outputs[0], join_geometry_7.inputs[0]
            )
            # join_geometry_7.Geometry -> repeat_output_1.Surfaces
            mn_style_surface_old.links.new(
                join_geometry_7.outputs[0], repeat_output_1.inputs[2]
            )
            # group_input_001_26.Material -> group_070.Material
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[10], group_070.inputs[9]
            )
            # group_input_154.Atoms -> separate_geometry_001_13.Geometry
            mn_style_surface_old.links.new(
                group_input_154.outputs[0], separate_geometry_001_13.inputs[0]
            )
            # group_input_154.Selection -> separate_geometry_001_13.Selection
            mn_style_surface_old.links.new(
                group_input_154.outputs[1], separate_geometry_001_13.inputs[1]
            )
            # reroute_48.Output -> attribute_statistic_1.Geometry
            mn_style_surface_old.links.new(
                reroute_48.outputs[0], attribute_statistic_1.inputs[0]
            )
            # reroute_48.Output -> repeat_input_1.Atoms
            mn_style_surface_old.links.new(
                reroute_48.outputs[0], repeat_input_1.inputs[1]
            )
            # reroute_002_25.Output -> group_070.Quality
            mn_style_surface_old.links.new(
                reroute_002_25.outputs[0], group_070.inputs[2]
            )
            # group_input_001_26.Scale Radii -> group_070.Scale Radii
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[3], group_070.inputs[3]
            )
            # group_input_001_26.Probe Size -> group_070.Probe Size
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[4], group_070.inputs[4]
            )
            # group_input_001_26.Color by CA -> group_070.Color by CA
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[7], group_070.inputs[6]
            )
            # group_input_001_26.Color Blur -> group_070.Interpolate Color
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[8], group_070.inputs[7]
            )
            # group_input_001_26.Shade Smooth -> group_070.Shade Smooth
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[9], group_070.inputs[8]
            )
            # group_41.Geometry -> join_geometry_001_6.Geometry
            mn_style_surface_old.links.new(
                group_41.outputs[0], join_geometry_001_6.inputs[0]
            )
            # join_geometry_001_6.Geometry -> repeat_output_1.Instances
            mn_style_surface_old.links.new(
                join_geometry_001_6.outputs[0], repeat_output_1.inputs[3]
            )
            # repeat_output_1.Instances -> group_output_156.Instances
            mn_style_surface_old.links.new(
                repeat_output_1.outputs[3], group_output_156.inputs[1]
            )
            # math_001_28.Value -> repeat_input_1.Iterations
            mn_style_surface_old.links.new(
                math_001_28.outputs[0], repeat_input_1.inputs[0]
            )
            # attribute_statistic_1.Max -> math_001_28.Value
            mn_style_surface_old.links.new(
                attribute_statistic_1.outputs[4], math_001_28.inputs[0]
            )
            # group_input_001_26.Material -> group_071.Material
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[10], group_071.inputs[9]
            )
            # reroute_002_25.Output -> group_071.Quality
            mn_style_surface_old.links.new(
                reroute_002_25.outputs[0], group_071.inputs[2]
            )
            # group_input_001_26.Scale Radii -> group_071.Scale Radii
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[3], group_071.inputs[3]
            )
            # group_input_001_26.Probe Size -> group_071.Probe Size
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[4], group_071.inputs[4]
            )
            # group_input_001_26.Color by CA -> group_071.Color by CA
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[7], group_071.inputs[6]
            )
            # group_input_001_26.Color Blur -> group_071.Interpolate Color
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[8], group_071.inputs[7]
            )
            # group_input_001_26.Shade Smooth -> group_071.Shade Smooth
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[9], group_071.inputs[8]
            )
            # separate_geometry_001_13.Selection -> separate_geometry_002_5.Geometry
            mn_style_surface_old.links.new(
                separate_geometry_001_13.outputs[0], separate_geometry_002_5.inputs[0]
            )
            # group_input_154.Separate -> separate_geometry_002_5.Selection
            mn_style_surface_old.links.new(
                group_input_154.outputs[5], separate_geometry_002_5.inputs[1]
            )
            # separate_geometry_002_5.Selection -> reroute_48.Input
            mn_style_surface_old.links.new(
                separate_geometry_002_5.outputs[0], reroute_48.inputs[0]
            )
            # separate_geometry_002_5.Inverted -> group_071.Atoms
            mn_style_surface_old.links.new(
                separate_geometry_002_5.outputs[1], group_071.inputs[0]
            )
            # reroute_001_35.Output -> join_geometry_002_1.Geometry
            mn_style_surface_old.links.new(
                reroute_001_35.outputs[0], join_geometry_002_1.inputs[0]
            )
            # join_geometry_002_1.Geometry -> group_output_156.Geometry
            mn_style_surface_old.links.new(
                join_geometry_002_1.outputs[0], group_output_156.inputs[0]
            )
            # group_070.Geometry -> group_41.Input
            mn_style_surface_old.links.new(group_070.outputs[0], group_41.inputs[0])
            # group_071.Geometry -> reroute_001_35.Input
            mn_style_surface_old.links.new(
                group_071.outputs[0], reroute_001_35.inputs[0]
            )
            # group_input_001_26.Quality -> math_002_18.Value
            mn_style_surface_old.links.new(
                group_input_001_26.outputs[2], math_002_18.inputs[0]
            )
            # math_002_18.Value -> math_003_15.Value
            mn_style_surface_old.links.new(
                math_002_18.outputs[0], math_003_15.inputs[0]
            )
            # math_003_15.Value -> reroute_002_25.Input
            mn_style_surface_old.links.new(
                math_003_15.outputs[0], reroute_002_25.inputs[0]
            )
            # group_input_002_15.Attribute -> named_attribute_42.Name
            mn_style_surface_old.links.new(
                group_input_002_15.outputs[6], named_attribute_42.inputs[0]
            )
            # repeat_input_1.Instances -> join_geometry_001_6.Geometry
            mn_style_surface_old.links.new(
                repeat_input_1.outputs[3], join_geometry_001_6.inputs[0]
            )
            # repeat_input_1.Surfaces -> join_geometry_7.Geometry
            mn_style_surface_old.links.new(
                repeat_input_1.outputs[2], join_geometry_7.inputs[0]
            )
            # repeat_output_1.Surfaces -> join_geometry_002_1.Geometry
            mn_style_surface_old.links.new(
                repeat_output_1.outputs[2], join_geometry_002_1.inputs[0]
            )
            return mn_style_surface_old

        mn_style_surface_old = mn_style_surface_old_node_group()

        # initialize topology_break_bonds node group
        def topology_break_bonds_node_group():
            topology_break_bonds = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Topology Break Bonds"
            )

            topology_break_bonds.color_tag = "GEOMETRY"
            topology_break_bonds.description = ""

            topology_break_bonds.is_modifier = True

            # topology_break_bonds interface
            # Socket Atoms
            atoms_socket_33 = topology_break_bonds.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_33.attribute_domain = "POINT"
            atoms_socket_33.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Atoms
            atoms_socket_34 = topology_break_bonds.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_34.attribute_domain = "POINT"
            atoms_socket_34.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_58 = topology_break_bonds.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_58.attribute_domain = "POINT"
            selection_socket_58.hide_value = True
            selection_socket_58.description = "Selection of atoms to apply this node to"

            # Socket Cutoff
            cutoff_socket = topology_break_bonds.interface.new_socket(
                name="Cutoff", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            cutoff_socket.subtype = "NONE"
            cutoff_socket.default_value = 2.5
            cutoff_socket.min_value = 0.0
            cutoff_socket.max_value = 10000.0
            cutoff_socket.attribute_domain = "POINT"
            cutoff_socket.description = (
                "Cutoff distance over which to remove bonds (Angstrom)"
            )

            # initialize topology_break_bonds nodes
            # node Compare
            compare_45 = topology_break_bonds.nodes.new("FunctionNodeCompare")
            compare_45.name = "Compare"
            compare_45.data_type = "FLOAT"
            compare_45.mode = "ELEMENT"
            compare_45.operation = "GREATER_THAN"

            # node Boolean Math
            boolean_math_35 = topology_break_bonds.nodes.new("FunctionNodeBooleanMath")
            boolean_math_35.name = "Boolean Math"
            boolean_math_35.operation = "OR"

            # node Vector Math
            vector_math_36 = topology_break_bonds.nodes.new("ShaderNodeVectorMath")
            vector_math_36.name = "Vector Math"
            vector_math_36.operation = "DISTANCE"

            # node Edge Vertices
            edge_vertices_6 = topology_break_bonds.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_6.name = "Edge Vertices"

            # node Delete Geometry
            delete_geometry_5 = topology_break_bonds.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry_5.name = "Delete Geometry"
            delete_geometry_5.domain = "EDGE"
            delete_geometry_5.mode = "EDGE_FACE"

            # node Group Input.001
            group_input_001_27 = topology_break_bonds.nodes.new("NodeGroupInput")
            group_input_001_27.name = "Group Input.001"
            group_input_001_27.outputs[0].hide = True
            group_input_001_27.outputs[1].hide = True
            group_input_001_27.outputs[3].hide = True

            # node Group Input
            group_input_155 = topology_break_bonds.nodes.new("NodeGroupInput")
            group_input_155.name = "Group Input"
            group_input_155.outputs[2].hide = True
            group_input_155.outputs[3].hide = True

            # node Group Output
            group_output_157 = topology_break_bonds.nodes.new("NodeGroupOutput")
            group_output_157.name = "Group Output"
            group_output_157.is_active_output = True

            # node Group
            group_42 = topology_break_bonds.nodes.new("GeometryNodeGroup")
            group_42.name = "Group"
            group_42.node_tree = mn_units

            # Set locations
            compare_45.location = (220.0, -20.0)
            boolean_math_35.location = (460.0, 0.0)
            vector_math_36.location = (60.0, -20.0)
            edge_vertices_6.location = (-100.0, -20.0)
            delete_geometry_5.location = (460.0, 160.0)
            group_input_001_27.location = (-100.0, -160.0)
            group_input_155.location = (220.0, 140.0)
            group_output_157.location = (660.0, 160.0)
            group_42.location = (54.12406921386719, -160.0)

            # Set dimensions
            compare_45.width, compare_45.height = 140.0, 100.0
            boolean_math_35.width, boolean_math_35.height = 140.0, 100.0
            vector_math_36.width, vector_math_36.height = 140.0, 100.0
            edge_vertices_6.width, edge_vertices_6.height = 140.0, 100.0
            delete_geometry_5.width, delete_geometry_5.height = 140.0, 100.0
            group_input_001_27.width, group_input_001_27.height = 140.0, 100.0
            group_input_155.width, group_input_155.height = 140.0, 100.0
            group_output_157.width, group_output_157.height = 140.0, 100.0
            group_42.width, group_42.height = 145.8759307861328, 100.0

            # initialize topology_break_bonds links
            # group_input_155.Atoms -> delete_geometry_5.Geometry
            topology_break_bonds.links.new(
                group_input_155.outputs[0], delete_geometry_5.inputs[0]
            )
            # delete_geometry_5.Geometry -> group_output_157.Atoms
            topology_break_bonds.links.new(
                delete_geometry_5.outputs[0], group_output_157.inputs[0]
            )
            # edge_vertices_6.Position 1 -> vector_math_36.Vector
            topology_break_bonds.links.new(
                edge_vertices_6.outputs[2], vector_math_36.inputs[0]
            )
            # edge_vertices_6.Position 2 -> vector_math_36.Vector
            topology_break_bonds.links.new(
                edge_vertices_6.outputs[3], vector_math_36.inputs[1]
            )
            # vector_math_36.Value -> compare_45.A
            topology_break_bonds.links.new(
                vector_math_36.outputs[1], compare_45.inputs[0]
            )
            # group_42.Angstrom -> compare_45.B
            topology_break_bonds.links.new(group_42.outputs[0], compare_45.inputs[1])
            # compare_45.Result -> boolean_math_35.Boolean
            topology_break_bonds.links.new(
                compare_45.outputs[0], boolean_math_35.inputs[1]
            )
            # boolean_math_35.Boolean -> delete_geometry_5.Selection
            topology_break_bonds.links.new(
                boolean_math_35.outputs[0], delete_geometry_5.inputs[1]
            )
            # group_input_001_27.Cutoff -> group_42.Value
            topology_break_bonds.links.new(
                group_input_001_27.outputs[2], group_42.inputs[0]
            )
            # group_input_155.Selection -> boolean_math_35.Boolean
            topology_break_bonds.links.new(
                group_input_155.outputs[1], boolean_math_35.inputs[0]
            )
            return topology_break_bonds

        topology_break_bonds = topology_break_bonds_node_group()

        # initialize mn_utils_primitive_atom node group
        def mn_utils_primitive_atom_node_group():
            mn_utils_primitive_atom = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_utils_primitive_atom"
            )

            mn_utils_primitive_atom.color_tag = "NONE"
            mn_utils_primitive_atom.description = ""

            mn_utils_primitive_atom.is_modifier = True

            # mn_utils_primitive_atom interface
            # Socket Geometry
            geometry_socket_34 = mn_utils_primitive_atom.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_34.attribute_domain = "POINT"

            # Socket Position
            position_socket_9 = mn_utils_primitive_atom.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket_9.subtype = "NONE"
            position_socket_9.default_value = (0.0, 0.0, 0.0)
            position_socket_9.min_value = -3.4028234663852886e38
            position_socket_9.max_value = 3.4028234663852886e38
            position_socket_9.attribute_domain = "POINT"

            # Socket vdw_radii
            vdw_radii_socket = mn_utils_primitive_atom.interface.new_socket(
                name="vdw_radii", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            vdw_radii_socket.subtype = "DISTANCE"
            vdw_radii_socket.default_value = 0.10000000149011612
            vdw_radii_socket.min_value = 0.0
            vdw_radii_socket.max_value = 3.4028234663852886e38
            vdw_radii_socket.attribute_domain = "POINT"

            # Socket b_factor
            b_factor_socket_3 = mn_utils_primitive_atom.interface.new_socket(
                name="b_factor", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            b_factor_socket_3.subtype = "NONE"
            b_factor_socket_3.default_value = 0.0
            b_factor_socket_3.min_value = -3.4028234663852886e38
            b_factor_socket_3.max_value = 3.4028234663852886e38
            b_factor_socket_3.attribute_domain = "POINT"

            # Socket atomic_number
            atomic_number_socket_3 = mn_utils_primitive_atom.interface.new_socket(
                name="atomic_number", in_out="INPUT", socket_type="NodeSocketInt"
            )
            atomic_number_socket_3.subtype = "NONE"
            atomic_number_socket_3.default_value = 0
            atomic_number_socket_3.min_value = -2147483648
            atomic_number_socket_3.max_value = 2147483647
            atomic_number_socket_3.attribute_domain = "POINT"

            # Socket res_name
            res_name_socket_1 = mn_utils_primitive_atom.interface.new_socket(
                name="res_name", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_name_socket_1.subtype = "NONE"
            res_name_socket_1.default_value = 0
            res_name_socket_1.min_value = -2147483648
            res_name_socket_1.max_value = 2147483647
            res_name_socket_1.attribute_domain = "POINT"

            # Socket res_id
            res_id_socket_4 = mn_utils_primitive_atom.interface.new_socket(
                name="res_id", in_out="INPUT", socket_type="NodeSocketInt"
            )
            res_id_socket_4.subtype = "NONE"
            res_id_socket_4.default_value = 0
            res_id_socket_4.min_value = -2147483648
            res_id_socket_4.max_value = 2147483647
            res_id_socket_4.attribute_domain = "POINT"

            # Socket is_backbone
            is_backbone_socket_2 = mn_utils_primitive_atom.interface.new_socket(
                name="is_backbone", in_out="INPUT", socket_type="NodeSocketBool"
            )
            is_backbone_socket_2.attribute_domain = "POINT"

            # Socket is_peptide
            is_peptide_socket_1 = mn_utils_primitive_atom.interface.new_socket(
                name="is_peptide", in_out="INPUT", socket_type="NodeSocketBool"
            )
            is_peptide_socket_1.attribute_domain = "POINT"

            # Socket is_alpha_carbon
            is_alpha_carbon_socket_1 = mn_utils_primitive_atom.interface.new_socket(
                name="is_alpha_carbon", in_out="INPUT", socket_type="NodeSocketBool"
            )
            is_alpha_carbon_socket_1.attribute_domain = "POINT"

            # Socket is_nucleic
            is_nucleic_socket_1 = mn_utils_primitive_atom.interface.new_socket(
                name="is_nucleic", in_out="INPUT", socket_type="NodeSocketBool"
            )
            is_nucleic_socket_1.attribute_domain = "POINT"

            # initialize mn_utils_primitive_atom nodes
            # node Points
            points_2 = mn_utils_primitive_atom.nodes.new("GeometryNodePoints")
            points_2.name = "Points"
            # Count
            points_2.inputs[0].default_value = 1

            # node Store Named Attribute
            store_named_attribute_19 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_19.name = "Store Named Attribute"
            store_named_attribute_19.data_type = "FLOAT"
            store_named_attribute_19.domain = "POINT"
            # Selection
            store_named_attribute_19.inputs[1].default_value = True
            # Name
            store_named_attribute_19.inputs[2].default_value = "vdw_radii"

            # node Store Named Attribute.001
            store_named_attribute_001_7 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_7.name = "Store Named Attribute.001"
            store_named_attribute_001_7.data_type = "FLOAT"
            store_named_attribute_001_7.domain = "POINT"
            # Selection
            store_named_attribute_001_7.inputs[1].default_value = True
            # Name
            store_named_attribute_001_7.inputs[2].default_value = "b_factor"

            # node Store Named Attribute.002
            store_named_attribute_002_5 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_5.name = "Store Named Attribute.002"
            store_named_attribute_002_5.data_type = "INT"
            store_named_attribute_002_5.domain = "POINT"
            # Selection
            store_named_attribute_002_5.inputs[1].default_value = True
            # Name
            store_named_attribute_002_5.inputs[2].default_value = "atomic_number"

            # node Store Named Attribute.004
            store_named_attribute_004_5 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_5.name = "Store Named Attribute.004"
            store_named_attribute_004_5.data_type = "INT"
            store_named_attribute_004_5.domain = "POINT"
            # Selection
            store_named_attribute_004_5.inputs[1].default_value = True
            # Name
            store_named_attribute_004_5.inputs[2].default_value = "res_name"

            # node Store Named Attribute.005
            store_named_attribute_005_4 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005_4.name = "Store Named Attribute.005"
            store_named_attribute_005_4.data_type = "INT"
            store_named_attribute_005_4.domain = "POINT"
            # Selection
            store_named_attribute_005_4.inputs[1].default_value = True
            # Name
            store_named_attribute_005_4.inputs[2].default_value = "res_id"

            # node Store Named Attribute.006
            store_named_attribute_006_2 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_006_2.name = "Store Named Attribute.006"
            store_named_attribute_006_2.data_type = "BOOLEAN"
            store_named_attribute_006_2.domain = "POINT"
            # Selection
            store_named_attribute_006_2.inputs[1].default_value = True
            # Name
            store_named_attribute_006_2.inputs[2].default_value = "is_backbone"

            # node Store Named Attribute.010
            store_named_attribute_010_1 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_010_1.name = "Store Named Attribute.010"
            store_named_attribute_010_1.data_type = "BOOLEAN"
            store_named_attribute_010_1.domain = "POINT"
            # Selection
            store_named_attribute_010_1.inputs[1].default_value = True
            # Name
            store_named_attribute_010_1.inputs[2].default_value = "is_peptide"

            # node Store Named Attribute.012
            store_named_attribute_012 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_012.name = "Store Named Attribute.012"
            store_named_attribute_012.data_type = "BOOLEAN"
            store_named_attribute_012.domain = "POINT"
            # Selection
            store_named_attribute_012.inputs[1].default_value = True
            # Name
            store_named_attribute_012.inputs[2].default_value = "is_alpha_carbon"

            # node Store Named Attribute.008
            store_named_attribute_008_1 = mn_utils_primitive_atom.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_008_1.name = "Store Named Attribute.008"
            store_named_attribute_008_1.data_type = "BOOLEAN"
            store_named_attribute_008_1.domain = "POINT"
            # Selection
            store_named_attribute_008_1.inputs[1].default_value = True
            # Name
            store_named_attribute_008_1.inputs[2].default_value = "is_nucleic"

            # node Group Output
            group_output_158 = mn_utils_primitive_atom.nodes.new("NodeGroupOutput")
            group_output_158.name = "Group Output"
            group_output_158.is_active_output = True

            # node Group Input
            group_input_156 = mn_utils_primitive_atom.nodes.new("NodeGroupInput")
            group_input_156.name = "Group Input"

            # Set locations
            points_2.location = (-80.0, 0.0)
            store_named_attribute_19.location = (90.0, 0.0)
            store_named_attribute_001_7.location = (260.0, 0.0)
            store_named_attribute_002_5.location = (420.0, 0.0)
            store_named_attribute_004_5.location = (580.0, 0.0)
            store_named_attribute_005_4.location = (740.0, 0.0)
            store_named_attribute_006_2.location = (900.0, 0.0)
            store_named_attribute_010_1.location = (1060.0, 0.0)
            store_named_attribute_012.location = (1220.0, 0.0)
            store_named_attribute_008_1.location = (1380.0, 0.0)
            group_output_158.location = (1560.0, 0.0)
            group_input_156.location = (-301.4026794433594, -162.99154663085938)

            # Set dimensions
            points_2.width, points_2.height = 140.0, 100.0
            store_named_attribute_19.width, store_named_attribute_19.height = (
                140.0,
                100.0,
            )
            store_named_attribute_001_7.width, store_named_attribute_001_7.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002_5.width, store_named_attribute_002_5.height = (
                140.0,
                100.0,
            )
            store_named_attribute_004_5.width, store_named_attribute_004_5.height = (
                140.0,
                100.0,
            )
            store_named_attribute_005_4.width, store_named_attribute_005_4.height = (
                140.0,
                100.0,
            )
            store_named_attribute_006_2.width, store_named_attribute_006_2.height = (
                140.0,
                100.0,
            )
            store_named_attribute_010_1.width, store_named_attribute_010_1.height = (
                140.0,
                100.0,
            )
            store_named_attribute_012.width, store_named_attribute_012.height = (
                140.0,
                100.0,
            )
            store_named_attribute_008_1.width, store_named_attribute_008_1.height = (
                140.0,
                100.0,
            )
            group_output_158.width, group_output_158.height = 140.0, 100.0
            group_input_156.width, group_input_156.height = 140.0, 100.0

            # initialize mn_utils_primitive_atom links
            # points_2.Points -> store_named_attribute_19.Geometry
            mn_utils_primitive_atom.links.new(
                points_2.outputs[0], store_named_attribute_19.inputs[0]
            )
            # group_input_156.Position -> points_2.Position
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[0], points_2.inputs[1]
            )
            # group_input_156.vdw_radii -> points_2.Radius
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[1], points_2.inputs[2]
            )
            # group_input_156.vdw_radii -> store_named_attribute_19.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[1], store_named_attribute_19.inputs[3]
            )
            # store_named_attribute_19.Geometry -> store_named_attribute_001_7.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_19.outputs[0],
                store_named_attribute_001_7.inputs[0],
            )
            # group_input_156.b_factor -> store_named_attribute_001_7.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[2], store_named_attribute_001_7.inputs[3]
            )
            # store_named_attribute_001_7.Geometry -> store_named_attribute_002_5.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_001_7.outputs[0],
                store_named_attribute_002_5.inputs[0],
            )
            # store_named_attribute_002_5.Geometry -> store_named_attribute_004_5.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_002_5.outputs[0],
                store_named_attribute_004_5.inputs[0],
            )
            # store_named_attribute_004_5.Geometry -> store_named_attribute_005_4.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_004_5.outputs[0],
                store_named_attribute_005_4.inputs[0],
            )
            # store_named_attribute_005_4.Geometry -> store_named_attribute_006_2.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_005_4.outputs[0],
                store_named_attribute_006_2.inputs[0],
            )
            # store_named_attribute_008_1.Geometry -> group_output_158.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_008_1.outputs[0], group_output_158.inputs[0]
            )
            # store_named_attribute_012.Geometry -> store_named_attribute_008_1.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_012.outputs[0],
                store_named_attribute_008_1.inputs[0],
            )
            # store_named_attribute_006_2.Geometry -> store_named_attribute_010_1.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_006_2.outputs[0],
                store_named_attribute_010_1.inputs[0],
            )
            # store_named_attribute_010_1.Geometry -> store_named_attribute_012.Geometry
            mn_utils_primitive_atom.links.new(
                store_named_attribute_010_1.outputs[0],
                store_named_attribute_012.inputs[0],
            )
            # group_input_156.atomic_number -> store_named_attribute_002_5.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[3], store_named_attribute_002_5.inputs[3]
            )
            # group_input_156.res_name -> store_named_attribute_004_5.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[4], store_named_attribute_004_5.inputs[3]
            )
            # group_input_156.res_id -> store_named_attribute_005_4.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[5], store_named_attribute_005_4.inputs[3]
            )
            # group_input_156.is_backbone -> store_named_attribute_006_2.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[6], store_named_attribute_006_2.inputs[3]
            )
            # group_input_156.is_peptide -> store_named_attribute_010_1.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[7], store_named_attribute_010_1.inputs[3]
            )
            # group_input_156.is_alpha_carbon -> store_named_attribute_012.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[8], store_named_attribute_012.inputs[3]
            )
            # group_input_156.is_nucleic -> store_named_attribute_008_1.Value
            mn_utils_primitive_atom.links.new(
                group_input_156.outputs[9], store_named_attribute_008_1.inputs[3]
            )
            return mn_utils_primitive_atom

        mn_utils_primitive_atom = mn_utils_primitive_atom_node_group()

        # initialize boolean_run_mask node group
        def boolean_run_mask_node_group():
            boolean_run_mask = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Boolean Run Mask"
            )

            boolean_run_mask.color_tag = "CONVERTER"
            boolean_run_mask.description = ""

            # boolean_run_mask interface
            # Socket Boolean
            boolean_socket_6 = boolean_run_mask.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_6.attribute_domain = "POINT"

            # Socket Boolean
            boolean_socket_7 = boolean_run_mask.interface.new_socket(
                name="Boolean", in_out="INPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_7.attribute_domain = "POINT"

            # Socket Lag Start
            lag_start_socket = boolean_run_mask.interface.new_socket(
                name="Lag Start", in_out="INPUT", socket_type="NodeSocketInt"
            )
            lag_start_socket.subtype = "NONE"
            lag_start_socket.default_value = 0
            lag_start_socket.min_value = 0
            lag_start_socket.max_value = 2147483647
            lag_start_socket.attribute_domain = "POINT"
            lag_start_socket.description = (
                "The first N values in a run are made to be false"
            )

            # Socket Min Length
            min_length_socket = boolean_run_mask.interface.new_socket(
                name="Min Length", in_out="INPUT", socket_type="NodeSocketInt"
            )
            min_length_socket.subtype = "NONE"
            min_length_socket.default_value = 0
            min_length_socket.min_value = 0
            min_length_socket.max_value = 2147483647
            min_length_socket.attribute_domain = "POINT"
            min_length_socket.description = (
                "Run is only valid if it contains at least N values"
            )

            # Socket Trim End
            trim_end_socket = boolean_run_mask.interface.new_socket(
                name="Trim End", in_out="INPUT", socket_type="NodeSocketInt"
            )
            trim_end_socket.subtype = "NONE"
            trim_end_socket.default_value = 0
            trim_end_socket.min_value = -2147483648
            trim_end_socket.max_value = 2147483647
            trim_end_socket.attribute_domain = "POINT"

            # initialize boolean_run_mask nodes
            # node Group Output
            group_output_159 = boolean_run_mask.nodes.new("NodeGroupOutput")
            group_output_159.name = "Group Output"
            group_output_159.is_active_output = True

            # node Group Input
            group_input_157 = boolean_run_mask.nodes.new("NodeGroupInput")
            group_input_157.name = "Group Input"
            group_input_157.outputs[3].hide = True

            # node Accumulate Field
            accumulate_field_8 = boolean_run_mask.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_8.name = "Accumulate Field"
            accumulate_field_8.data_type = "INT"
            accumulate_field_8.domain = "POINT"
            # Group Index
            accumulate_field_8.inputs[1].default_value = 0

            # node Boolean Math.001
            boolean_math_001_30 = boolean_run_mask.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_30.name = "Boolean Math.001"
            boolean_math_001_30.operation = "NOT"

            # node Accumulate Field.001
            accumulate_field_001_6 = boolean_run_mask.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_6.name = "Accumulate Field.001"
            accumulate_field_001_6.data_type = "INT"
            accumulate_field_001_6.domain = "POINT"
            # Value
            accumulate_field_001_6.inputs[0].default_value = 1

            # node Compare
            compare_46 = boolean_run_mask.nodes.new("FunctionNodeCompare")
            compare_46.name = "Compare"
            compare_46.data_type = "INT"
            compare_46.mode = "ELEMENT"
            compare_46.operation = "GREATER_THAN"

            # node Boolean Math.002
            boolean_math_002_19 = boolean_run_mask.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_19.name = "Boolean Math.002"
            boolean_math_002_19.operation = "AND"

            # node Reroute
            reroute_49 = boolean_run_mask.nodes.new("NodeReroute")
            reroute_49.name = "Reroute"
            # node Boolean Math.003
            boolean_math_003_10 = boolean_run_mask.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_10.name = "Boolean Math.003"
            boolean_math_003_10.operation = "AND"

            # node Compare.001
            compare_001_27 = boolean_run_mask.nodes.new("FunctionNodeCompare")
            compare_001_27.name = "Compare.001"
            compare_001_27.data_type = "INT"
            compare_001_27.mode = "ELEMENT"
            compare_001_27.operation = "GREATER_THAN"

            # node Boolean Math.004
            boolean_math_004_7 = boolean_run_mask.nodes.new("FunctionNodeBooleanMath")
            boolean_math_004_7.name = "Boolean Math.004"
            boolean_math_004_7.operation = "AND"

            # node Compare.002
            compare_002_16 = boolean_run_mask.nodes.new("FunctionNodeCompare")
            compare_002_16.name = "Compare.002"
            compare_002_16.data_type = "INT"
            compare_002_16.mode = "ELEMENT"
            compare_002_16.operation = "GREATER_THAN"

            # node Math
            math_40 = boolean_run_mask.nodes.new("ShaderNodeMath")
            math_40.name = "Math"
            math_40.operation = "SUBTRACT"
            math_40.use_clamp = False

            # node Group Input.001
            group_input_001_28 = boolean_run_mask.nodes.new("NodeGroupInput")
            group_input_001_28.name = "Group Input.001"
            group_input_001_28.outputs[0].hide = True
            group_input_001_28.outputs[1].hide = True
            group_input_001_28.outputs[2].hide = True
            group_input_001_28.outputs[4].hide = True

            # Set locations
            group_output_159.location = (860.0001220703125, 60.0)
            group_input_157.location = (-460.0031433105469, 0.0)
            accumulate_field_8.location = (-100.0, -300.0)
            boolean_math_001_30.location = (-260.0, -300.0)
            accumulate_field_001_6.location = (60.0, -300.0)
            compare_46.location = (260.0031433105469, -80.0)
            boolean_math_002_19.location = (260.0, 60.0)
            reroute_49.location = (-260.0031433105469, -29.36541748046875)
            boolean_math_003_10.location = (420.0, 60.0)
            compare_001_27.location = (420.0, -80.0)
            boolean_math_004_7.location = (580.0, 60.0)
            compare_002_16.location = (580.0, -80.0)
            math_40.location = (420.0, -240.0)
            group_input_001_28.location = (580.0, -240.0)

            # Set dimensions
            group_output_159.width, group_output_159.height = 140.0, 100.0
            group_input_157.width, group_input_157.height = 140.0, 100.0
            accumulate_field_8.width, accumulate_field_8.height = 140.0, 100.0
            boolean_math_001_30.width, boolean_math_001_30.height = 140.0, 100.0
            accumulate_field_001_6.width, accumulate_field_001_6.height = 140.0, 100.0
            compare_46.width, compare_46.height = 140.0, 100.0
            boolean_math_002_19.width, boolean_math_002_19.height = 140.0, 100.0
            reroute_49.width, reroute_49.height = 16.0, 100.0
            boolean_math_003_10.width, boolean_math_003_10.height = 140.0, 100.0
            compare_001_27.width, compare_001_27.height = 140.0, 100.0
            boolean_math_004_7.width, boolean_math_004_7.height = 140.0, 100.0
            compare_002_16.width, compare_002_16.height = 140.0, 100.0
            math_40.width, math_40.height = 140.0, 100.0
            group_input_001_28.width, group_input_001_28.height = 140.0, 100.0

            # initialize boolean_run_mask links
            # boolean_math_001_30.Boolean -> accumulate_field_8.Value
            boolean_run_mask.links.new(
                boolean_math_001_30.outputs[0], accumulate_field_8.inputs[0]
            )
            # reroute_49.Output -> boolean_math_001_30.Boolean
            boolean_run_mask.links.new(
                reroute_49.outputs[0], boolean_math_001_30.inputs[0]
            )
            # compare_46.Result -> boolean_math_002_19.Boolean
            boolean_run_mask.links.new(
                compare_46.outputs[0], boolean_math_002_19.inputs[1]
            )
            # group_input_157.Boolean -> reroute_49.Input
            boolean_run_mask.links.new(group_input_157.outputs[0], reroute_49.inputs[0])
            # boolean_math_004_7.Boolean -> group_output_159.Boolean
            boolean_run_mask.links.new(
                boolean_math_004_7.outputs[0], group_output_159.inputs[0]
            )
            # group_input_157.Lag Start -> compare_46.B
            boolean_run_mask.links.new(group_input_157.outputs[1], compare_46.inputs[3])
            # boolean_math_002_19.Boolean -> boolean_math_003_10.Boolean
            boolean_run_mask.links.new(
                boolean_math_002_19.outputs[0], boolean_math_003_10.inputs[0]
            )
            # accumulate_field_001_6.Total -> compare_001_27.A
            boolean_run_mask.links.new(
                accumulate_field_001_6.outputs[2], compare_001_27.inputs[2]
            )
            # group_input_157.Min Length -> compare_001_27.B
            boolean_run_mask.links.new(
                group_input_157.outputs[2], compare_001_27.inputs[3]
            )
            # compare_001_27.Result -> boolean_math_003_10.Boolean
            boolean_run_mask.links.new(
                compare_001_27.outputs[0], boolean_math_003_10.inputs[1]
            )
            # reroute_49.Output -> boolean_math_002_19.Boolean
            boolean_run_mask.links.new(
                reroute_49.outputs[0], boolean_math_002_19.inputs[0]
            )
            # accumulate_field_8.Trailing -> accumulate_field_001_6.Group ID
            boolean_run_mask.links.new(
                accumulate_field_8.outputs[1], accumulate_field_001_6.inputs[1]
            )
            # boolean_math_003_10.Boolean -> boolean_math_004_7.Boolean
            boolean_run_mask.links.new(
                boolean_math_003_10.outputs[0], boolean_math_004_7.inputs[0]
            )
            # accumulate_field_001_6.Total -> math_40.Value
            boolean_run_mask.links.new(
                accumulate_field_001_6.outputs[2], math_40.inputs[0]
            )
            # accumulate_field_001_6.Leading -> math_40.Value
            boolean_run_mask.links.new(
                accumulate_field_001_6.outputs[0], math_40.inputs[1]
            )
            # math_40.Value -> compare_002_16.A
            boolean_run_mask.links.new(math_40.outputs[0], compare_002_16.inputs[2])
            # group_input_001_28.Trim End -> compare_002_16.B
            boolean_run_mask.links.new(
                group_input_001_28.outputs[3], compare_002_16.inputs[3]
            )
            # compare_002_16.Result -> boolean_math_004_7.Boolean
            boolean_run_mask.links.new(
                compare_002_16.outputs[0], boolean_math_004_7.inputs[1]
            )
            # accumulate_field_001_6.Leading -> compare_46.A
            boolean_run_mask.links.new(
                accumulate_field_001_6.outputs[0], compare_46.inputs[2]
            )
            return boolean_run_mask

        boolean_run_mask = boolean_run_mask_node_group()

        # initialize world_to_angstrom node group
        def world_to_angstrom_node_group():
            world_to_angstrom = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="World to Angstrom"
            )

            world_to_angstrom.color_tag = "NONE"
            world_to_angstrom.description = ""

            # world_to_angstrom interface
            # Socket Angstrom
            angstrom_socket_1 = world_to_angstrom.interface.new_socket(
                name="Angstrom", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angstrom_socket_1.subtype = "NONE"
            angstrom_socket_1.default_value = 0.0
            angstrom_socket_1.min_value = -3.4028234663852886e38
            angstrom_socket_1.max_value = 3.4028234663852886e38
            angstrom_socket_1.attribute_domain = "POINT"

            # Socket World
            world_socket = world_to_angstrom.interface.new_socket(
                name="World", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            world_socket.subtype = "NONE"
            world_socket.default_value = 0.5
            world_socket.min_value = -10000.0
            world_socket.max_value = 10000.0
            world_socket.attribute_domain = "POINT"

            # initialize world_to_angstrom nodes
            # node Group Output
            group_output_160 = world_to_angstrom.nodes.new("NodeGroupOutput")
            group_output_160.name = "Group Output"
            group_output_160.is_active_output = True

            # node Group Input
            group_input_158 = world_to_angstrom.nodes.new("NodeGroupInput")
            group_input_158.name = "Group Input"

            # node Group
            group_43 = world_to_angstrom.nodes.new("GeometryNodeGroup")
            group_43.name = "Group"
            group_43.node_tree = _mn_world_scale

            # node Math
            math_41 = world_to_angstrom.nodes.new("ShaderNodeMath")
            math_41.name = "Math"
            math_41.operation = "DIVIDE"
            math_41.use_clamp = False

            # Set locations
            group_output_160.location = (190.0, 0.0)
            group_input_158.location = (-200.0, 0.0)
            group_43.location = (0.0, -80.0)
            math_41.location = (0.0, 80.0)

            # Set dimensions
            group_output_160.width, group_output_160.height = 140.0, 100.0
            group_input_158.width, group_input_158.height = 140.0, 100.0
            group_43.width, group_43.height = 140.0, 100.0
            math_41.width, math_41.height = 140.0, 100.0

            # initialize world_to_angstrom links
            # group_43.world_scale -> math_41.Value
            world_to_angstrom.links.new(group_43.outputs[0], math_41.inputs[1])
            # group_input_158.World -> math_41.Value
            world_to_angstrom.links.new(group_input_158.outputs[0], math_41.inputs[0])
            # math_41.Value -> group_output_160.Angstrom
            world_to_angstrom.links.new(math_41.outputs[0], group_output_160.inputs[0])
            return world_to_angstrom

        world_to_angstrom = world_to_angstrom_node_group()

        # initialize nodegroup_001 node group
        def nodegroup_001_node_group():
            nodegroup_001 = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="NodeGroup.001"
            )

            nodegroup_001.color_tag = "NONE"
            nodegroup_001.description = ""

            # nodegroup_001 interface
            # Socket Value
            value_socket_19 = nodegroup_001.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_19.subtype = "NONE"
            value_socket_19.default_value = 0.0
            value_socket_19.min_value = -3.4028234663852886e38
            value_socket_19.max_value = 3.4028234663852886e38
            value_socket_19.attribute_domain = "POINT"

            # Socket Vector
            vector_socket_9 = nodegroup_001.interface.new_socket(
                name="Vector", in_out="INPUT", socket_type="NodeSocketVector"
            )
            vector_socket_9.subtype = "NONE"
            vector_socket_9.default_value = (0.0, 0.0, 0.0)
            vector_socket_9.min_value = -10000.0
            vector_socket_9.max_value = 10000.0
            vector_socket_9.attribute_domain = "POINT"

            # Socket Vector
            vector_socket_10 = nodegroup_001.interface.new_socket(
                name="Vector", in_out="INPUT", socket_type="NodeSocketVector"
            )
            vector_socket_10.subtype = "NONE"
            vector_socket_10.default_value = (0.0, 0.0, 0.0)
            vector_socket_10.min_value = -10000.0
            vector_socket_10.max_value = 10000.0
            vector_socket_10.attribute_domain = "POINT"

            # initialize nodegroup_001 nodes
            # node Group Output
            group_output_161 = nodegroup_001.nodes.new("NodeGroupOutput")
            group_output_161.name = "Group Output"
            group_output_161.is_active_output = True

            # node Group Input
            group_input_159 = nodegroup_001.nodes.new("NodeGroupInput")
            group_input_159.name = "Group Input"

            # node Vector Math.002
            vector_math_002_13 = nodegroup_001.nodes.new("ShaderNodeVectorMath")
            vector_math_002_13.name = "Vector Math.002"
            vector_math_002_13.operation = "DISTANCE"

            # node Math.002
            math_002_19 = nodegroup_001.nodes.new("ShaderNodeMath")
            math_002_19.name = "Math.002"
            math_002_19.operation = "DIVIDE"
            math_002_19.use_clamp = False
            # Value
            math_002_19.inputs[0].default_value = 1.0

            # node Group.001
            group_001_29 = nodegroup_001.nodes.new("GeometryNodeGroup")
            group_001_29.name = "Group.001"
            group_001_29.node_tree = world_to_angstrom

            # Set locations
            group_output_161.location = (670.8533325195312, -4.1087493896484375)
            group_input_159.location = (-280.0, 0.0)
            vector_math_002_13.location = (-80.0, 0.0)
            math_002_19.location = (260.0, 0.0)
            group_001_29.location = (80.0, 0.0)

            # Set dimensions
            group_output_161.width, group_output_161.height = 140.0, 100.0
            group_input_159.width, group_input_159.height = 140.0, 100.0
            vector_math_002_13.width, vector_math_002_13.height = 140.0, 100.0
            math_002_19.width, math_002_19.height = 140.0, 100.0
            group_001_29.width, group_001_29.height = 152.50686645507812, 100.0

            # initialize nodegroup_001 links
            # group_001_29.Angstrom -> math_002_19.Value
            nodegroup_001.links.new(group_001_29.outputs[0], math_002_19.inputs[1])
            # group_input_159.Vector -> vector_math_002_13.Vector
            nodegroup_001.links.new(
                group_input_159.outputs[1], vector_math_002_13.inputs[1]
            )
            # group_input_159.Vector -> vector_math_002_13.Vector
            nodegroup_001.links.new(
                group_input_159.outputs[0], vector_math_002_13.inputs[0]
            )
            # math_002_19.Value -> group_output_161.Value
            nodegroup_001.links.new(math_002_19.outputs[0], group_output_161.inputs[0])
            # vector_math_002_13.Value -> group_001_29.World
            nodegroup_001.links.new(
                vector_math_002_13.outputs[1], group_001_29.inputs[0]
            )
            return nodegroup_001

        nodegroup_001 = nodegroup_001_node_group()

        # initialize hbond_energy node group
        def hbond_energy_node_group():
            hbond_energy = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="HBond Energy"
            )

            hbond_energy.color_tag = "NONE"
            hbond_energy.description = ""

            # hbond_energy interface
            # Socket Is Bonded
            is_bonded_socket = hbond_energy.interface.new_socket(
                name="Is Bonded", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_bonded_socket.attribute_domain = "POINT"

            # Socket Bond Energy
            bond_energy_socket = hbond_energy.interface.new_socket(
                name="Bond Energy", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            bond_energy_socket.subtype = "NONE"
            bond_energy_socket.default_value = 0.0
            bond_energy_socket.min_value = -3.4028234663852886e38
            bond_energy_socket.max_value = 3.4028234663852886e38
            bond_energy_socket.attribute_domain = "POINT"

            # Socket Bond Vector
            bond_vector_socket = hbond_energy.interface.new_socket(
                name="Bond Vector", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            bond_vector_socket.subtype = "NONE"
            bond_vector_socket.default_value = (0.0, 0.0, 0.0)
            bond_vector_socket.min_value = -3.4028234663852886e38
            bond_vector_socket.max_value = 3.4028234663852886e38
            bond_vector_socket.attribute_domain = "POINT"

            # Socket O
            o_socket_2 = hbond_energy.interface.new_socket(
                name="O", in_out="INPUT", socket_type="NodeSocketVector"
            )
            o_socket_2.subtype = "NONE"
            o_socket_2.default_value = (0.0, 0.0, 0.0)
            o_socket_2.min_value = -3.4028234663852886e38
            o_socket_2.max_value = 3.4028234663852886e38
            o_socket_2.attribute_domain = "POINT"

            # Socket C
            c_socket_6 = hbond_energy.interface.new_socket(
                name="C", in_out="INPUT", socket_type="NodeSocketVector"
            )
            c_socket_6.subtype = "NONE"
            c_socket_6.default_value = (0.0, 0.0, 0.0)
            c_socket_6.min_value = -3.4028234663852886e38
            c_socket_6.max_value = 3.4028234663852886e38
            c_socket_6.attribute_domain = "POINT"

            # Socket N
            n_socket_2 = hbond_energy.interface.new_socket(
                name="N", in_out="INPUT", socket_type="NodeSocketVector"
            )
            n_socket_2.subtype = "NONE"
            n_socket_2.default_value = (0.0, 0.0, 0.0)
            n_socket_2.min_value = -3.4028234663852886e38
            n_socket_2.max_value = 3.4028234663852886e38
            n_socket_2.attribute_domain = "POINT"

            # Socket H
            h_socket = hbond_energy.interface.new_socket(
                name="H", in_out="INPUT", socket_type="NodeSocketVector"
            )
            h_socket.subtype = "NONE"
            h_socket.default_value = (0.0, 0.0, 0.0)
            h_socket.min_value = -3.4028234663852886e38
            h_socket.max_value = 3.4028234663852886e38
            h_socket.attribute_domain = "POINT"

            # initialize hbond_energy nodes
            # node Group Output
            group_output_162 = hbond_energy.nodes.new("NodeGroupOutput")
            group_output_162.name = "Group Output"
            group_output_162.is_active_output = True

            # node Group Input
            group_input_160 = hbond_energy.nodes.new("NodeGroupInput")
            group_input_160.name = "Group Input"

            # node Group.003
            group_003_11 = hbond_energy.nodes.new("GeometryNodeGroup")
            group_003_11.label = "1/r(ON)"
            group_003_11.name = "Group.003"
            group_003_11.node_tree = nodegroup_001

            # node Group.008
            group_008_4 = hbond_energy.nodes.new("GeometryNodeGroup")
            group_008_4.label = "1/r(CH)"
            group_008_4.name = "Group.008"
            group_008_4.node_tree = nodegroup_001

            # node Group.009
            group_009_4 = hbond_energy.nodes.new("GeometryNodeGroup")
            group_009_4.label = "1/r(OH)"
            group_009_4.name = "Group.009"
            group_009_4.node_tree = nodegroup_001

            # node Group.010
            group_010_5 = hbond_energy.nodes.new("GeometryNodeGroup")
            group_010_5.label = "1/r(CN)"
            group_010_5.name = "Group.010"
            group_010_5.node_tree = nodegroup_001

            # node Math.002
            math_002_20 = hbond_energy.nodes.new("ShaderNodeMath")
            math_002_20.name = "Math.002"
            math_002_20.hide = True
            math_002_20.operation = "ADD"
            math_002_20.use_clamp = False

            # node Math.003
            math_003_16 = hbond_energy.nodes.new("ShaderNodeMath")
            math_003_16.name = "Math.003"
            math_003_16.hide = True
            math_003_16.operation = "SUBTRACT"
            math_003_16.use_clamp = False

            # node Math.004
            math_004_6 = hbond_energy.nodes.new("ShaderNodeMath")
            math_004_6.name = "Math.004"
            math_004_6.hide = True
            math_004_6.operation = "SUBTRACT"
            math_004_6.use_clamp = False

            # node Math.005
            math_005_5 = hbond_energy.nodes.new("ShaderNodeMath")
            math_005_5.label = "* q1q2"
            math_005_5.name = "Math.005"
            math_005_5.operation = "MULTIPLY"
            math_005_5.use_clamp = False
            # Value_001
            math_005_5.inputs[1].default_value = 0.08399999886751175

            # node Math.006
            math_006_5 = hbond_energy.nodes.new("ShaderNodeMath")
            math_006_5.label = "*f"
            math_006_5.name = "Math.006"
            math_006_5.operation = "MULTIPLY"
            math_006_5.use_clamp = False
            # Value_001
            math_006_5.inputs[1].default_value = 332.0

            # node Vector Math
            vector_math_37 = hbond_energy.nodes.new("ShaderNodeVectorMath")
            vector_math_37.name = "Vector Math"
            vector_math_37.operation = "SUBTRACT"

            # node Math.007
            math_007_3 = hbond_energy.nodes.new("ShaderNodeMath")
            math_007_3.label = "*e"
            math_007_3.name = "Math.007"
            math_007_3.mute = True
            math_007_3.operation = "MULTIPLY"
            math_007_3.use_clamp = False
            # Value_001
            math_007_3.inputs[1].default_value = -1.0

            # node Compare
            compare_47 = hbond_energy.nodes.new("FunctionNodeCompare")
            compare_47.label = "Cutoff kcal/mol"
            compare_47.name = "Compare"
            compare_47.data_type = "FLOAT"
            compare_47.mode = "ELEMENT"
            compare_47.operation = "LESS_THAN"
            # B
            compare_47.inputs[1].default_value = -0.5

            # node Group Input.001
            group_input_001_29 = hbond_energy.nodes.new("NodeGroupInput")
            group_input_001_29.name = "Group Input.001"

            # Set locations
            group_output_162.location = (900.0, 40.0)
            group_input_160.location = (-644.257568359375, 10.571624755859375)
            group_003_11.location = (-355.197021484375, 210.6334228515625)
            group_008_4.location = (-360.0, 69.3665771484375)
            group_009_4.location = (-360.0, -70.6334228515625)
            group_010_5.location = (-360.0, -210.6334228515625)
            math_002_20.location = (-180.0, 60.0)
            math_003_16.location = (-180.0, -80.0)
            math_004_6.location = (-180.0, -220.0)
            math_005_5.location = (320.0, 100.0)
            math_006_5.location = (480.0, 100.0)
            vector_math_37.location = (480.0, -60.0)
            math_007_3.location = (160.0, 100.0)
            compare_47.location = (720.0, 220.0)
            group_input_001_29.location = (320.0, -60.0)

            # Set dimensions
            group_output_162.width, group_output_162.height = 140.0, 100.0
            group_input_160.width, group_input_160.height = 140.0, 100.0
            group_003_11.width, group_003_11.height = 140.0, 100.0
            group_008_4.width, group_008_4.height = 140.0, 100.0
            group_009_4.width, group_009_4.height = 140.0, 100.0
            group_010_5.width, group_010_5.height = 140.0, 100.0
            math_002_20.width, math_002_20.height = 140.0, 100.0
            math_003_16.width, math_003_16.height = 140.0, 100.0
            math_004_6.width, math_004_6.height = 140.0, 100.0
            math_005_5.width, math_005_5.height = 140.0, 100.0
            math_006_5.width, math_006_5.height = 140.0, 100.0
            vector_math_37.width, vector_math_37.height = 140.0, 100.0
            math_007_3.width, math_007_3.height = 140.0, 100.0
            compare_47.width, compare_47.height = 140.0, 100.0
            group_input_001_29.width, group_input_001_29.height = 140.0, 100.0

            # initialize hbond_energy links
            # math_002_20.Value -> math_003_16.Value
            hbond_energy.links.new(math_002_20.outputs[0], math_003_16.inputs[0])
            # group_009_4.Value -> math_003_16.Value
            hbond_energy.links.new(group_009_4.outputs[0], math_003_16.inputs[1])
            # math_007_3.Value -> math_005_5.Value
            hbond_energy.links.new(math_007_3.outputs[0], math_005_5.inputs[0])
            # group_008_4.Value -> math_002_20.Value
            hbond_energy.links.new(group_008_4.outputs[0], math_002_20.inputs[1])
            # math_003_16.Value -> math_004_6.Value
            hbond_energy.links.new(math_003_16.outputs[0], math_004_6.inputs[0])
            # group_010_5.Value -> math_004_6.Value
            hbond_energy.links.new(group_010_5.outputs[0], math_004_6.inputs[1])
            # group_003_11.Value -> math_002_20.Value
            hbond_energy.links.new(group_003_11.outputs[0], math_002_20.inputs[0])
            # math_005_5.Value -> math_006_5.Value
            hbond_energy.links.new(math_005_5.outputs[0], math_006_5.inputs[0])
            # math_006_5.Value -> group_output_162.Bond Energy
            hbond_energy.links.new(math_006_5.outputs[0], group_output_162.inputs[1])
            # math_004_6.Value -> math_007_3.Value
            hbond_energy.links.new(math_004_6.outputs[0], math_007_3.inputs[0])
            # vector_math_37.Vector -> group_output_162.Bond Vector
            hbond_energy.links.new(
                vector_math_37.outputs[0], group_output_162.inputs[2]
            )
            # math_006_5.Value -> compare_47.A
            hbond_energy.links.new(math_006_5.outputs[0], compare_47.inputs[0])
            # compare_47.Result -> group_output_162.Is Bonded
            hbond_energy.links.new(compare_47.outputs[0], group_output_162.inputs[0])
            # group_input_160.O -> group_003_11.Vector
            hbond_energy.links.new(group_input_160.outputs[0], group_003_11.inputs[0])
            # group_input_160.N -> group_003_11.Vector
            hbond_energy.links.new(group_input_160.outputs[2], group_003_11.inputs[1])
            # group_input_160.C -> group_008_4.Vector
            hbond_energy.links.new(group_input_160.outputs[1], group_008_4.inputs[0])
            # group_input_160.H -> group_008_4.Vector
            hbond_energy.links.new(group_input_160.outputs[3], group_008_4.inputs[1])
            # group_input_160.O -> group_009_4.Vector
            hbond_energy.links.new(group_input_160.outputs[0], group_009_4.inputs[0])
            # group_input_160.H -> group_009_4.Vector
            hbond_energy.links.new(group_input_160.outputs[3], group_009_4.inputs[1])
            # group_input_160.C -> group_010_5.Vector
            hbond_energy.links.new(group_input_160.outputs[1], group_010_5.inputs[0])
            # group_input_160.N -> group_010_5.Vector
            hbond_energy.links.new(group_input_160.outputs[2], group_010_5.inputs[1])
            # group_input_001_29.H -> vector_math_37.Vector
            hbond_energy.links.new(
                group_input_001_29.outputs[3], vector_math_37.inputs[1]
            )
            # group_input_001_29.O -> vector_math_37.Vector
            hbond_energy.links.new(
                group_input_001_29.outputs[0], vector_math_37.inputs[0]
            )
            return hbond_energy

        hbond_energy = hbond_energy_node_group()

        # initialize backbone_nh node group
        def backbone_nh_node_group():
            backbone_nh = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Backbone NH"
            )

            backbone_nh.color_tag = "NONE"
            backbone_nh.description = ""

            # backbone_nh interface
            # Socket H
            h_socket_1 = backbone_nh.interface.new_socket(
                name="H", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            h_socket_1.subtype = "NONE"
            h_socket_1.default_value = (0.0, 0.0, 0.0)
            h_socket_1.min_value = -3.4028234663852886e38
            h_socket_1.max_value = 3.4028234663852886e38
            h_socket_1.attribute_domain = "POINT"

            # Socket Value
            value_socket_20 = backbone_nh.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_20.subtype = "NONE"
            value_socket_20.default_value = 1.0
            value_socket_20.min_value = -10000.0
            value_socket_20.max_value = 10000.0
            value_socket_20.attribute_domain = "POINT"

            # initialize backbone_nh nodes
            # node Group Output
            group_output_163 = backbone_nh.nodes.new("NodeGroupOutput")
            group_output_163.name = "Group Output"
            group_output_163.is_active_output = True

            # node Group Input
            group_input_161 = backbone_nh.nodes.new("NodeGroupInput")
            group_input_161.name = "Group Input"

            # node Named Attribute
            named_attribute_43 = backbone_nh.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_43.name = "Named Attribute"
            named_attribute_43.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_43.inputs[0].default_value = "backbone_N"

            # node Named Attribute.001
            named_attribute_001_25 = backbone_nh.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_25.name = "Named Attribute.001"
            named_attribute_001_25.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_25.inputs[0].default_value = "backbone_CA"

            # node Named Attribute.002
            named_attribute_002_20 = backbone_nh.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_20.name = "Named Attribute.002"
            named_attribute_002_20.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_002_20.inputs[0].default_value = "backbone_C"

            # node Group.002
            group_002_17 = backbone_nh.nodes.new("GeometryNodeGroup")
            group_002_17.name = "Group.002"
            group_002_17.node_tree = offset_vector
            # Socket_2
            group_002_17.inputs[0].default_value = 0
            # Socket_3
            group_002_17.inputs[2].default_value = -1

            # node Vector Math
            vector_math_38 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_38.name = "Vector Math"
            vector_math_38.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_23 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_001_23.name = "Vector Math.001"
            vector_math_001_23.operation = "SUBTRACT"

            # node Vector Math.002
            vector_math_002_14 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_002_14.name = "Vector Math.002"
            vector_math_002_14.operation = "NORMALIZE"

            # node Vector Math.003
            vector_math_003_11 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_003_11.name = "Vector Math.003"
            vector_math_003_11.operation = "NORMALIZE"

            # node Vector Math.005
            vector_math_005_7 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_005_7.name = "Vector Math.005"
            vector_math_005_7.operation = "ADD"

            # node Vector Math.006
            vector_math_006_4 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_006_4.name = "Vector Math.006"
            vector_math_006_4.operation = "ADD"

            # node Vector Math.004
            vector_math_004_10 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_004_10.name = "Vector Math.004"
            vector_math_004_10.operation = "SCALE"

            # node Group.003
            group_003_12 = backbone_nh.nodes.new("GeometryNodeGroup")
            group_003_12.name = "Group.003"
            group_003_12.node_tree = mn_units

            # node Vector Math.007
            vector_math_007_4 = backbone_nh.nodes.new("ShaderNodeVectorMath")
            vector_math_007_4.name = "Vector Math.007"
            vector_math_007_4.operation = "NORMALIZE"

            # Set locations
            group_output_163.location = (620.0, 0.0)
            group_input_161.location = (-630.0, 0.0)
            named_attribute_43.location = (-430.0, 140.0)
            named_attribute_001_25.location = (-430.0, 0.0)
            named_attribute_002_20.location = (-430.0, -140.0)
            group_002_17.location = (-210.0, -120.0)
            vector_math_38.location = (-50.0, 0.0)
            vector_math_001_23.location = (-50.0, 140.0)
            vector_math_002_14.location = (110.0, 140.0)
            vector_math_003_11.location = (110.0, 0.0)
            vector_math_005_7.location = (270.0, 140.0)
            vector_math_006_4.location = (430.0, 140.0)
            vector_math_004_10.location = (260.0, -120.0)
            group_003_12.location = (100.0, -120.0)
            vector_math_007_4.location = (260.0, 0.0)

            # Set dimensions
            group_output_163.width, group_output_163.height = 140.0, 100.0
            group_input_161.width, group_input_161.height = 140.0, 100.0
            named_attribute_43.width, named_attribute_43.height = (
                189.579833984375,
                100.0,
            )
            named_attribute_001_25.width, named_attribute_001_25.height = (
                189.579833984375,
                100.0,
            )
            named_attribute_002_20.width, named_attribute_002_20.height = (
                189.579833984375,
                100.0,
            )
            group_002_17.width, group_002_17.height = 140.0, 100.0
            vector_math_38.width, vector_math_38.height = 140.0, 100.0
            vector_math_001_23.width, vector_math_001_23.height = 140.0, 100.0
            vector_math_002_14.width, vector_math_002_14.height = 140.0, 100.0
            vector_math_003_11.width, vector_math_003_11.height = 140.0, 100.0
            vector_math_005_7.width, vector_math_005_7.height = 140.0, 100.0
            vector_math_006_4.width, vector_math_006_4.height = 140.0, 100.0
            vector_math_004_10.width, vector_math_004_10.height = 140.0, 100.0
            group_003_12.width, group_003_12.height = 140.0, 100.0
            vector_math_007_4.width, vector_math_007_4.height = 140.0, 100.0

            # initialize backbone_nh links
            # vector_math_004_10.Vector -> vector_math_006_4.Vector
            backbone_nh.links.new(
                vector_math_004_10.outputs[0], vector_math_006_4.inputs[1]
            )
            # named_attribute_001_25.Attribute -> vector_math_001_23.Vector
            backbone_nh.links.new(
                named_attribute_001_25.outputs[0], vector_math_001_23.inputs[1]
            )
            # named_attribute_002_20.Attribute -> group_002_17.Position
            backbone_nh.links.new(
                named_attribute_002_20.outputs[0], group_002_17.inputs[1]
            )
            # named_attribute_43.Attribute -> vector_math_38.Vector
            backbone_nh.links.new(
                named_attribute_43.outputs[0], vector_math_38.inputs[0]
            )
            # vector_math_38.Vector -> vector_math_003_11.Vector
            backbone_nh.links.new(
                vector_math_38.outputs[0], vector_math_003_11.inputs[0]
            )
            # group_003_12.Angstrom -> vector_math_004_10.Scale
            backbone_nh.links.new(group_003_12.outputs[0], vector_math_004_10.inputs[3])
            # vector_math_003_11.Vector -> vector_math_005_7.Vector
            backbone_nh.links.new(
                vector_math_003_11.outputs[0], vector_math_005_7.inputs[1]
            )
            # group_002_17.Value -> vector_math_38.Vector
            backbone_nh.links.new(group_002_17.outputs[0], vector_math_38.inputs[1])
            # vector_math_002_14.Vector -> vector_math_005_7.Vector
            backbone_nh.links.new(
                vector_math_002_14.outputs[0], vector_math_005_7.inputs[0]
            )
            # named_attribute_43.Attribute -> vector_math_001_23.Vector
            backbone_nh.links.new(
                named_attribute_43.outputs[0], vector_math_001_23.inputs[0]
            )
            # vector_math_001_23.Vector -> vector_math_002_14.Vector
            backbone_nh.links.new(
                vector_math_001_23.outputs[0], vector_math_002_14.inputs[0]
            )
            # named_attribute_43.Attribute -> vector_math_006_4.Vector
            backbone_nh.links.new(
                named_attribute_43.outputs[0], vector_math_006_4.inputs[0]
            )
            # vector_math_006_4.Vector -> group_output_163.H
            backbone_nh.links.new(
                vector_math_006_4.outputs[0], group_output_163.inputs[0]
            )
            # group_input_161.Value -> group_003_12.Value
            backbone_nh.links.new(group_input_161.outputs[0], group_003_12.inputs[0])
            # vector_math_005_7.Vector -> vector_math_007_4.Vector
            backbone_nh.links.new(
                vector_math_005_7.outputs[0], vector_math_007_4.inputs[0]
            )
            # vector_math_007_4.Vector -> vector_math_004_10.Vector
            backbone_nh.links.new(
                vector_math_007_4.outputs[0], vector_math_004_10.inputs[0]
            )
            return backbone_nh

        backbone_nh = backbone_nh_node_group()

        # initialize mn_topo_backbone node group
        def mn_topo_backbone_node_group():
            mn_topo_backbone = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_topo_backbone"
            )

            mn_topo_backbone.color_tag = "NONE"
            mn_topo_backbone.description = ""

            # mn_topo_backbone interface
            # Socket O
            o_socket_3 = mn_topo_backbone.interface.new_socket(
                name="O", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            o_socket_3.subtype = "NONE"
            o_socket_3.default_value = (0.0, 0.0, 0.0)
            o_socket_3.min_value = -3.4028234663852886e38
            o_socket_3.max_value = 3.4028234663852886e38
            o_socket_3.attribute_domain = "POINT"

            # Socket C
            c_socket_7 = mn_topo_backbone.interface.new_socket(
                name="C", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            c_socket_7.subtype = "NONE"
            c_socket_7.default_value = (0.0, 0.0, 0.0)
            c_socket_7.min_value = -3.4028234663852886e38
            c_socket_7.max_value = 3.4028234663852886e38
            c_socket_7.attribute_domain = "POINT"

            # Socket CA
            ca_socket_1 = mn_topo_backbone.interface.new_socket(
                name="CA", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ca_socket_1.subtype = "NONE"
            ca_socket_1.default_value = (0.0, 0.0, 0.0)
            ca_socket_1.min_value = -3.4028234663852886e38
            ca_socket_1.max_value = 3.4028234663852886e38
            ca_socket_1.attribute_domain = "POINT"

            # Socket N
            n_socket_3 = mn_topo_backbone.interface.new_socket(
                name="N", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            n_socket_3.subtype = "NONE"
            n_socket_3.default_value = (0.0, 0.0, 0.0)
            n_socket_3.min_value = -3.4028234663852886e38
            n_socket_3.max_value = 3.4028234663852886e38
            n_socket_3.attribute_domain = "POINT"

            # Socket NH
            nh_socket = mn_topo_backbone.interface.new_socket(
                name="NH", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            nh_socket.subtype = "NONE"
            nh_socket.default_value = (0.0, 0.0, 0.0)
            nh_socket.min_value = -3.4028234663852886e38
            nh_socket.max_value = 3.4028234663852886e38
            nh_socket.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_14 = mn_topo_backbone.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_14.subtype = "NONE"
            offset_socket_14.default_value = 0
            offset_socket_14.min_value = -2147483648
            offset_socket_14.max_value = 2147483647
            offset_socket_14.attribute_domain = "POINT"

            # initialize mn_topo_backbone nodes
            # node Group Output
            group_output_164 = mn_topo_backbone.nodes.new("NodeGroupOutput")
            group_output_164.name = "Group Output"
            group_output_164.is_active_output = True

            # node Group Input
            group_input_162 = mn_topo_backbone.nodes.new("NodeGroupInput")
            group_input_162.name = "Group Input"

            # node Named Attribute.001
            named_attribute_001_26 = mn_topo_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_26.name = "Named Attribute.001"
            named_attribute_001_26.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_001_26.inputs[0].default_value = "backbone_O"

            # node Named Attribute.002
            named_attribute_002_21 = mn_topo_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_21.name = "Named Attribute.002"
            named_attribute_002_21.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_002_21.inputs[0].default_value = "backbone_C"

            # node Evaluate at Index
            evaluate_at_index_14 = mn_topo_backbone.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_14.name = "Evaluate at Index"
            evaluate_at_index_14.data_type = "FLOAT_VECTOR"
            evaluate_at_index_14.domain = "POINT"

            # node Math
            math_42 = mn_topo_backbone.nodes.new("ShaderNodeMath")
            math_42.name = "Math"
            math_42.operation = "ADD"
            math_42.use_clamp = False

            # node Index
            index_19 = mn_topo_backbone.nodes.new("GeometryNodeInputIndex")
            index_19.name = "Index"

            # node Evaluate at Index.001
            evaluate_at_index_001_10 = mn_topo_backbone.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_10.name = "Evaluate at Index.001"
            evaluate_at_index_001_10.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001_10.domain = "POINT"

            # node Named Attribute.003
            named_attribute_003_10 = mn_topo_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_10.name = "Named Attribute.003"
            named_attribute_003_10.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_003_10.inputs[0].default_value = "backbone_CA"

            # node Evaluate at Index.002
            evaluate_at_index_002_4 = mn_topo_backbone.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_4.name = "Evaluate at Index.002"
            evaluate_at_index_002_4.data_type = "FLOAT_VECTOR"
            evaluate_at_index_002_4.domain = "POINT"

            # node Evaluate at Index.003
            evaluate_at_index_003_2 = mn_topo_backbone.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_003_2.name = "Evaluate at Index.003"
            evaluate_at_index_003_2.data_type = "FLOAT_VECTOR"
            evaluate_at_index_003_2.domain = "POINT"

            # node Named Attribute.004
            named_attribute_004_6 = mn_topo_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_6.name = "Named Attribute.004"
            named_attribute_004_6.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_004_6.inputs[0].default_value = "backbone_N"

            # node Reroute
            reroute_50 = mn_topo_backbone.nodes.new("NodeReroute")
            reroute_50.name = "Reroute"
            # node Group
            group_44 = mn_topo_backbone.nodes.new("GeometryNodeGroup")
            group_44.name = "Group"
            group_44.node_tree = backbone_nh
            # Socket_1
            group_44.inputs[0].default_value = 1.0099999904632568

            # node Evaluate at Index.004
            evaluate_at_index_004_2 = mn_topo_backbone.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_004_2.name = "Evaluate at Index.004"
            evaluate_at_index_004_2.data_type = "FLOAT_VECTOR"
            evaluate_at_index_004_2.domain = "POINT"

            # node Named Attribute.005
            named_attribute_005_3 = mn_topo_backbone.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_005_3.name = "Named Attribute.005"
            named_attribute_005_3.data_type = "FLOAT_VECTOR"
            # Name
            named_attribute_005_3.inputs[0].default_value = "backbone_NH"

            # node Switch
            switch_42 = mn_topo_backbone.nodes.new("GeometryNodeSwitch")
            switch_42.name = "Switch"
            switch_42.input_type = "VECTOR"

            # node Boolean Math
            boolean_math_36 = mn_topo_backbone.nodes.new("FunctionNodeBooleanMath")
            boolean_math_36.name = "Boolean Math"
            boolean_math_36.operation = "NOT"

            # Set locations
            group_output_164.location = (320.0, -220.0)
            group_input_162.location = (-520.0, -260.0)
            named_attribute_001_26.location = (-300.0, 40.0)
            named_attribute_002_21.location = (-300.0, -100.0)
            evaluate_at_index_14.location = (80.0, -14.04681396484375)
            math_42.location = (-260.0, -260.0)
            index_19.location = (-520.0, -360.0)
            evaluate_at_index_001_10.location = (80.0, -170.47593688964844)
            named_attribute_003_10.location = (-300.0, -460.0)
            evaluate_at_index_002_4.location = (80.0, -326.90509033203125)
            evaluate_at_index_003_2.location = (80.0, -480.0)
            named_attribute_004_6.location = (-300.0, -600.0)
            reroute_50.location = (20.0, -340.0)
            group_44.location = (-640.0, -920.0)
            evaluate_at_index_004_2.location = (77.81956481933594, -655.5125732421875)
            named_attribute_005_3.location = (-640.0, -780.0)
            switch_42.location = (-240.0, -780.0)
            boolean_math_36.location = (-420.0, -780.0)

            # Set dimensions
            group_output_164.width, group_output_164.height = 140.0, 100.0
            group_input_162.width, group_input_162.height = 140.0, 100.0
            named_attribute_001_26.width, named_attribute_001_26.height = (
                186.42977905273438,
                100.0,
            )
            named_attribute_002_21.width, named_attribute_002_21.height = (
                186.42977905273438,
                100.0,
            )
            evaluate_at_index_14.width, evaluate_at_index_14.height = 140.0, 100.0
            math_42.width, math_42.height = 140.0, 100.0
            index_19.width, index_19.height = 140.0, 100.0
            evaluate_at_index_001_10.width, evaluate_at_index_001_10.height = (
                140.0,
                100.0,
            )
            named_attribute_003_10.width, named_attribute_003_10.height = (
                186.42977905273438,
                100.0,
            )
            evaluate_at_index_002_4.width, evaluate_at_index_002_4.height = 140.0, 100.0
            evaluate_at_index_003_2.width, evaluate_at_index_003_2.height = 140.0, 100.0
            named_attribute_004_6.width, named_attribute_004_6.height = (
                186.42977905273438,
                100.0,
            )
            reroute_50.width, reroute_50.height = 16.0, 100.0
            group_44.width, group_44.height = 186.0294189453125, 100.0
            evaluate_at_index_004_2.width, evaluate_at_index_004_2.height = 140.0, 100.0
            named_attribute_005_3.width, named_attribute_005_3.height = (
                186.42977905273438,
                100.0,
            )
            switch_42.width, switch_42.height = 140.0, 100.0
            boolean_math_36.width, boolean_math_36.height = 140.0, 100.0

            # initialize mn_topo_backbone links
            # named_attribute_001_26.Attribute -> evaluate_at_index_14.Value
            mn_topo_backbone.links.new(
                named_attribute_001_26.outputs[0], evaluate_at_index_14.inputs[1]
            )
            # reroute_50.Output -> evaluate_at_index_14.Index
            mn_topo_backbone.links.new(
                reroute_50.outputs[0], evaluate_at_index_14.inputs[0]
            )
            # group_input_162.Offset -> math_42.Value
            mn_topo_backbone.links.new(group_input_162.outputs[0], math_42.inputs[0])
            # reroute_50.Output -> evaluate_at_index_001_10.Index
            mn_topo_backbone.links.new(
                reroute_50.outputs[0], evaluate_at_index_001_10.inputs[0]
            )
            # named_attribute_002_21.Attribute -> evaluate_at_index_001_10.Value
            mn_topo_backbone.links.new(
                named_attribute_002_21.outputs[0], evaluate_at_index_001_10.inputs[1]
            )
            # reroute_50.Output -> evaluate_at_index_002_4.Index
            mn_topo_backbone.links.new(
                reroute_50.outputs[0], evaluate_at_index_002_4.inputs[0]
            )
            # named_attribute_003_10.Attribute -> evaluate_at_index_002_4.Value
            mn_topo_backbone.links.new(
                named_attribute_003_10.outputs[0], evaluate_at_index_002_4.inputs[1]
            )
            # reroute_50.Output -> evaluate_at_index_003_2.Index
            mn_topo_backbone.links.new(
                reroute_50.outputs[0], evaluate_at_index_003_2.inputs[0]
            )
            # named_attribute_004_6.Attribute -> evaluate_at_index_003_2.Value
            mn_topo_backbone.links.new(
                named_attribute_004_6.outputs[0], evaluate_at_index_003_2.inputs[1]
            )
            # index_19.Index -> math_42.Value
            mn_topo_backbone.links.new(index_19.outputs[0], math_42.inputs[1])
            # math_42.Value -> reroute_50.Input
            mn_topo_backbone.links.new(math_42.outputs[0], reroute_50.inputs[0])
            # evaluate_at_index_003_2.Value -> group_output_164.N
            mn_topo_backbone.links.new(
                evaluate_at_index_003_2.outputs[0], group_output_164.inputs[3]
            )
            # evaluate_at_index_002_4.Value -> group_output_164.CA
            mn_topo_backbone.links.new(
                evaluate_at_index_002_4.outputs[0], group_output_164.inputs[2]
            )
            # evaluate_at_index_001_10.Value -> group_output_164.C
            mn_topo_backbone.links.new(
                evaluate_at_index_001_10.outputs[0], group_output_164.inputs[1]
            )
            # evaluate_at_index_14.Value -> group_output_164.O
            mn_topo_backbone.links.new(
                evaluate_at_index_14.outputs[0], group_output_164.inputs[0]
            )
            # reroute_50.Output -> evaluate_at_index_004_2.Index
            mn_topo_backbone.links.new(
                reroute_50.outputs[0], evaluate_at_index_004_2.inputs[0]
            )
            # evaluate_at_index_004_2.Value -> group_output_164.NH
            mn_topo_backbone.links.new(
                evaluate_at_index_004_2.outputs[0], group_output_164.inputs[4]
            )
            # group_44.H -> switch_42.True
            mn_topo_backbone.links.new(group_44.outputs[0], switch_42.inputs[2])
            # switch_42.Output -> evaluate_at_index_004_2.Value
            mn_topo_backbone.links.new(
                switch_42.outputs[0], evaluate_at_index_004_2.inputs[1]
            )
            # named_attribute_005_3.Exists -> boolean_math_36.Boolean
            mn_topo_backbone.links.new(
                named_attribute_005_3.outputs[1], boolean_math_36.inputs[0]
            )
            # boolean_math_36.Boolean -> switch_42.Switch
            mn_topo_backbone.links.new(boolean_math_36.outputs[0], switch_42.inputs[0])
            # named_attribute_005_3.Attribute -> switch_42.False
            mn_topo_backbone.links.new(
                named_attribute_005_3.outputs[0], switch_42.inputs[1]
            )
            return mn_topo_backbone

        mn_topo_backbone = mn_topo_backbone_node_group()

        # initialize hbond_backbone_check node group
        def hbond_backbone_check_node_group():
            hbond_backbone_check = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="HBond Backbone Check"
            )

            hbond_backbone_check.color_tag = "NONE"
            hbond_backbone_check.description = ""

            # hbond_backbone_check interface
            # Socket Is Bonded
            is_bonded_socket_1 = hbond_backbone_check.interface.new_socket(
                name="Is Bonded", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_bonded_socket_1.attribute_domain = "POINT"

            # Socket Bond Energy
            bond_energy_socket_1 = hbond_backbone_check.interface.new_socket(
                name="Bond Energy", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            bond_energy_socket_1.subtype = "NONE"
            bond_energy_socket_1.default_value = 0.0
            bond_energy_socket_1.min_value = -3.4028234663852886e38
            bond_energy_socket_1.max_value = 3.4028234663852886e38
            bond_energy_socket_1.attribute_domain = "POINT"

            # Socket H->O
            h__o_socket = hbond_backbone_check.interface.new_socket(
                name="H->O", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            h__o_socket.subtype = "NONE"
            h__o_socket.default_value = (0.0, 0.0, 0.0)
            h__o_socket.min_value = -3.4028234663852886e38
            h__o_socket.max_value = 3.4028234663852886e38
            h__o_socket.attribute_domain = "POINT"

            # Panel CO
            co_panel = hbond_backbone_check.interface.new_panel("CO")
            # Socket CO Index
            co_index_socket = hbond_backbone_check.interface.new_socket(
                name="CO Index",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=co_panel,
            )
            co_index_socket.subtype = "NONE"
            co_index_socket.default_value = 0
            co_index_socket.min_value = 0
            co_index_socket.max_value = 2147483647
            co_index_socket.attribute_domain = "POINT"

            # Socket CO Offset
            co_offset_socket = hbond_backbone_check.interface.new_socket(
                name="CO Offset",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=co_panel,
            )
            co_offset_socket.subtype = "NONE"
            co_offset_socket.default_value = 0
            co_offset_socket.min_value = -2147483648
            co_offset_socket.max_value = 2147483647
            co_offset_socket.attribute_domain = "POINT"

            # Panel NH
            nh_panel = hbond_backbone_check.interface.new_panel("NH")
            # Socket NH Index
            nh_index_socket = hbond_backbone_check.interface.new_socket(
                name="NH Index",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=nh_panel,
            )
            nh_index_socket.subtype = "NONE"
            nh_index_socket.default_value = 0
            nh_index_socket.min_value = 0
            nh_index_socket.max_value = 2147483647
            nh_index_socket.attribute_domain = "POINT"

            # Socket NH Offset
            nh_offset_socket = hbond_backbone_check.interface.new_socket(
                name="NH Offset",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=nh_panel,
            )
            nh_offset_socket.subtype = "NONE"
            nh_offset_socket.default_value = 0
            nh_offset_socket.min_value = -2147483648
            nh_offset_socket.max_value = 2147483647
            nh_offset_socket.attribute_domain = "POINT"

            # initialize hbond_backbone_check nodes
            # node Group Output
            group_output_165 = hbond_backbone_check.nodes.new("NodeGroupOutput")
            group_output_165.name = "Group Output"
            group_output_165.is_active_output = True

            # node Group Input
            group_input_163 = hbond_backbone_check.nodes.new("NodeGroupInput")
            group_input_163.name = "Group Input"

            # node Group.008
            group_008_5 = hbond_backbone_check.nodes.new("GeometryNodeGroup")
            group_008_5.name = "Group.008"
            group_008_5.node_tree = hbond_energy

            # node Group.009
            group_009_5 = hbond_backbone_check.nodes.new("GeometryNodeGroup")
            group_009_5.name = "Group.009"
            group_009_5.node_tree = mn_topo_backbone
            # Socket_3
            group_009_5.inputs[0].default_value = 0

            # node Evaluate at Index
            evaluate_at_index_15 = hbond_backbone_check.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_15.name = "Evaluate at Index"
            evaluate_at_index_15.data_type = "FLOAT_VECTOR"
            evaluate_at_index_15.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_11 = hbond_backbone_check.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_11.name = "Evaluate at Index.001"
            evaluate_at_index_001_11.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001_11.domain = "POINT"

            # node Evaluate at Index.002
            evaluate_at_index_002_5 = hbond_backbone_check.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_5.name = "Evaluate at Index.002"
            evaluate_at_index_002_5.data_type = "FLOAT_VECTOR"
            evaluate_at_index_002_5.domain = "POINT"

            # node Evaluate at Index.003
            evaluate_at_index_003_3 = hbond_backbone_check.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_003_3.name = "Evaluate at Index.003"
            evaluate_at_index_003_3.data_type = "FLOAT_VECTOR"
            evaluate_at_index_003_3.domain = "POINT"

            # node Math
            math_43 = hbond_backbone_check.nodes.new("ShaderNodeMath")
            math_43.name = "Math"
            math_43.operation = "ADD"
            math_43.use_clamp = False

            # node Math.001
            math_001_29 = hbond_backbone_check.nodes.new("ShaderNodeMath")
            math_001_29.name = "Math.001"
            math_001_29.operation = "ADD"
            math_001_29.use_clamp = False

            # node Math.002
            math_002_21 = hbond_backbone_check.nodes.new("ShaderNodeMath")
            math_002_21.name = "Math.002"
            math_002_21.operation = "SUBTRACT"
            math_002_21.use_clamp = False

            # node Math.003
            math_003_17 = hbond_backbone_check.nodes.new("ShaderNodeMath")
            math_003_17.name = "Math.003"
            math_003_17.operation = "ABSOLUTE"
            math_003_17.use_clamp = False

            # node Compare
            compare_48 = hbond_backbone_check.nodes.new("FunctionNodeCompare")
            compare_48.name = "Compare"
            compare_48.data_type = "FLOAT"
            compare_48.mode = "ELEMENT"
            compare_48.operation = "GREATER_THAN"

            # node Integer
            integer_7 = hbond_backbone_check.nodes.new("FunctionNodeInputInt")
            integer_7.name = "Integer"
            integer_7.integer = 2

            # node Frame
            frame_18 = hbond_backbone_check.nodes.new("NodeFrame")
            frame_18.label = "Check not bonded to +/- residues"
            frame_18.name = "Frame"
            frame_18.label_size = 20
            frame_18.shrink = True

            # node Switch
            switch_43 = hbond_backbone_check.nodes.new("GeometryNodeSwitch")
            switch_43.name = "Switch"
            switch_43.input_type = "BOOLEAN"
            # False
            switch_43.inputs[1].default_value = False

            # node Compare.001
            compare_001_28 = hbond_backbone_check.nodes.new("FunctionNodeCompare")
            compare_001_28.name = "Compare.001"
            compare_001_28.data_type = "FLOAT"
            compare_001_28.mode = "ELEMENT"
            compare_001_28.operation = "LESS_THAN"

            # node Vector Math
            vector_math_39 = hbond_backbone_check.nodes.new("ShaderNodeVectorMath")
            vector_math_39.name = "Vector Math"
            vector_math_39.operation = "LENGTH"

            # node Group
            group_45 = hbond_backbone_check.nodes.new("GeometryNodeGroup")
            group_45.name = "Group"
            group_45.node_tree = mn_units
            # Input_1
            group_45.inputs[0].default_value = 3.0

            # Set parents
            math_002_21.parent = frame_18
            math_003_17.parent = frame_18
            compare_48.parent = frame_18
            integer_7.parent = frame_18

            # Set locations
            group_output_165.location = (820.0, 240.0)
            group_input_163.location = (-680.0, 140.0)
            group_008_5.location = (224.2731170654297, 240.0)
            group_009_5.location = (-480.0, 460.0)
            evaluate_at_index_15.location = (-20.0, 40.0)
            evaluate_at_index_001_11.location = (-20.0, -120.0)
            evaluate_at_index_002_5.location = (-20.0, 400.0)
            evaluate_at_index_003_3.location = (-20.0, 240.0)
            math_43.location = (-480.0, 240.0)
            math_001_29.location = (-480.0, 80.0)
            math_002_21.location = (70.0, 640.0)
            math_003_17.location = (240.0, 640.0)
            compare_48.location = (420.0, 640.0)
            integer_7.location = (240.0, 500.0)
            frame_18.location = (-70.0, 40.0)
            switch_43.location = (620.0, 340.0)
            compare_001_28.location = (520.0, 140.0)
            vector_math_39.location = (260.0, 20.0)
            group_45.location = (520.0, -20.0)

            # Set dimensions
            group_output_165.width, group_output_165.height = 140.0, 100.0
            group_input_163.width, group_input_163.height = 140.0, 100.0
            group_008_5.width, group_008_5.height = 184.92144775390625, 100.0
            group_009_5.width, group_009_5.height = 140.0, 100.0
            evaluate_at_index_15.width, evaluate_at_index_15.height = 140.0, 100.0
            evaluate_at_index_001_11.width, evaluate_at_index_001_11.height = (
                140.0,
                100.0,
            )
            evaluate_at_index_002_5.width, evaluate_at_index_002_5.height = 140.0, 100.0
            evaluate_at_index_003_3.width, evaluate_at_index_003_3.height = 140.0, 100.0
            math_43.width, math_43.height = 140.0, 100.0
            math_001_29.width, math_001_29.height = 140.0, 100.0
            math_002_21.width, math_002_21.height = 140.0, 100.0
            math_003_17.width, math_003_17.height = 140.0, 100.0
            compare_48.width, compare_48.height = 140.0, 100.0
            integer_7.width, integer_7.height = 140.0, 100.0
            frame_18.width, frame_18.height = 550.0, 284.0
            switch_43.width, switch_43.height = 140.0, 100.0
            compare_001_28.width, compare_001_28.height = 140.0, 100.0
            vector_math_39.width, vector_math_39.height = 140.0, 100.0
            group_45.width, group_45.height = 140.0, 100.0

            # initialize hbond_backbone_check links
            # evaluate_at_index_001_11.Value -> group_008_5.H
            hbond_backbone_check.links.new(
                evaluate_at_index_001_11.outputs[0], group_008_5.inputs[3]
            )
            # evaluate_at_index_15.Value -> group_008_5.N
            hbond_backbone_check.links.new(
                evaluate_at_index_15.outputs[0], group_008_5.inputs[2]
            )
            # evaluate_at_index_002_5.Value -> group_008_5.O
            hbond_backbone_check.links.new(
                evaluate_at_index_002_5.outputs[0], group_008_5.inputs[0]
            )
            # math_001_29.Value -> evaluate_at_index_001_11.Index
            hbond_backbone_check.links.new(
                math_001_29.outputs[0], evaluate_at_index_001_11.inputs[0]
            )
            # math_001_29.Value -> evaluate_at_index_15.Index
            hbond_backbone_check.links.new(
                math_001_29.outputs[0], evaluate_at_index_15.inputs[0]
            )
            # evaluate_at_index_003_3.Value -> group_008_5.C
            hbond_backbone_check.links.new(
                evaluate_at_index_003_3.outputs[0], group_008_5.inputs[1]
            )
            # group_008_5.Bond Energy -> group_output_165.Bond Energy
            hbond_backbone_check.links.new(
                group_008_5.outputs[1], group_output_165.inputs[1]
            )
            # group_008_5.Bond Vector -> group_output_165.H->O
            hbond_backbone_check.links.new(
                group_008_5.outputs[2], group_output_165.inputs[2]
            )
            # math_43.Value -> evaluate_at_index_002_5.Index
            hbond_backbone_check.links.new(
                math_43.outputs[0], evaluate_at_index_002_5.inputs[0]
            )
            # math_43.Value -> evaluate_at_index_003_3.Index
            hbond_backbone_check.links.new(
                math_43.outputs[0], evaluate_at_index_003_3.inputs[0]
            )
            # group_input_163.CO Index -> math_43.Value
            hbond_backbone_check.links.new(
                group_input_163.outputs[0], math_43.inputs[0]
            )
            # group_input_163.CO Offset -> math_43.Value
            hbond_backbone_check.links.new(
                group_input_163.outputs[1], math_43.inputs[1]
            )
            # group_input_163.NH Index -> math_001_29.Value
            hbond_backbone_check.links.new(
                group_input_163.outputs[2], math_001_29.inputs[0]
            )
            # group_input_163.NH Offset -> math_001_29.Value
            hbond_backbone_check.links.new(
                group_input_163.outputs[3], math_001_29.inputs[1]
            )
            # math_43.Value -> math_002_21.Value
            hbond_backbone_check.links.new(math_43.outputs[0], math_002_21.inputs[0])
            # math_001_29.Value -> math_002_21.Value
            hbond_backbone_check.links.new(
                math_001_29.outputs[0], math_002_21.inputs[1]
            )
            # math_002_21.Value -> math_003_17.Value
            hbond_backbone_check.links.new(
                math_002_21.outputs[0], math_003_17.inputs[0]
            )
            # math_003_17.Value -> compare_48.A
            hbond_backbone_check.links.new(math_003_17.outputs[0], compare_48.inputs[0])
            # integer_7.Integer -> compare_48.B
            hbond_backbone_check.links.new(integer_7.outputs[0], compare_48.inputs[1])
            # compare_48.Result -> switch_43.Switch
            hbond_backbone_check.links.new(compare_48.outputs[0], switch_43.inputs[0])
            # group_008_5.Bond Vector -> vector_math_39.Vector
            hbond_backbone_check.links.new(
                group_008_5.outputs[2], vector_math_39.inputs[0]
            )
            # vector_math_39.Value -> compare_001_28.A
            hbond_backbone_check.links.new(
                vector_math_39.outputs[1], compare_001_28.inputs[0]
            )
            # group_45.Angstrom -> compare_001_28.B
            hbond_backbone_check.links.new(
                group_45.outputs[0], compare_001_28.inputs[1]
            )
            # switch_43.Output -> group_output_165.Is Bonded
            hbond_backbone_check.links.new(
                switch_43.outputs[0], group_output_165.inputs[0]
            )
            # group_008_5.Is Bonded -> switch_43.True
            hbond_backbone_check.links.new(group_008_5.outputs[0], switch_43.inputs[2])
            # group_009_5.O -> evaluate_at_index_002_5.Value
            hbond_backbone_check.links.new(
                group_009_5.outputs[0], evaluate_at_index_002_5.inputs[1]
            )
            # group_009_5.C -> evaluate_at_index_003_3.Value
            hbond_backbone_check.links.new(
                group_009_5.outputs[1], evaluate_at_index_003_3.inputs[1]
            )
            # group_009_5.N -> evaluate_at_index_15.Value
            hbond_backbone_check.links.new(
                group_009_5.outputs[3], evaluate_at_index_15.inputs[1]
            )
            # group_009_5.NH -> evaluate_at_index_001_11.Value
            hbond_backbone_check.links.new(
                group_009_5.outputs[4], evaluate_at_index_001_11.inputs[1]
            )
            return hbond_backbone_check

        hbond_backbone_check = hbond_backbone_check_node_group()

        # initialize boolean_run_fill node group
        def boolean_run_fill_node_group():
            boolean_run_fill = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Boolean Run Fill"
            )

            boolean_run_fill.color_tag = "CONVERTER"
            boolean_run_fill.description = ""

            # boolean_run_fill interface
            # Socket Boolean
            boolean_socket_8 = boolean_run_fill.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_8.attribute_domain = "POINT"

            # Socket Boolean
            boolean_socket_9 = boolean_run_fill.interface.new_socket(
                name="Boolean", in_out="INPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_9.attribute_domain = "POINT"
            boolean_socket_9.description = "Boolean array to fill runs of False"

            # Socket Fill Size
            fill_size_socket = boolean_run_fill.interface.new_socket(
                name="Fill Size", in_out="INPUT", socket_type="NodeSocketInt"
            )
            fill_size_socket.subtype = "NONE"
            fill_size_socket.default_value = 3
            fill_size_socket.min_value = -2147483648
            fill_size_socket.max_value = 2147483647
            fill_size_socket.attribute_domain = "POINT"
            fill_size_socket.description = (
                "Set a run of False to True if length equal or less than Fill Size"
            )

            # initialize boolean_run_fill nodes
            # node Group Output
            group_output_166 = boolean_run_fill.nodes.new("NodeGroupOutput")
            group_output_166.name = "Group Output"
            group_output_166.is_active_output = True

            # node Group Input
            group_input_164 = boolean_run_fill.nodes.new("NodeGroupInput")
            group_input_164.name = "Group Input"

            # node Accumulate Field
            accumulate_field_9 = boolean_run_fill.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_9.name = "Accumulate Field"
            accumulate_field_9.data_type = "INT"
            accumulate_field_9.domain = "POINT"
            # Group Index
            accumulate_field_9.inputs[1].default_value = 0

            # node Accumulate Field.001
            accumulate_field_001_7 = boolean_run_fill.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_7.name = "Accumulate Field.001"
            accumulate_field_001_7.data_type = "INT"
            accumulate_field_001_7.domain = "POINT"
            # Value
            accumulate_field_001_7.inputs[0].default_value = 1

            # node Compare
            compare_49 = boolean_run_fill.nodes.new("FunctionNodeCompare")
            compare_49.name = "Compare"
            compare_49.data_type = "INT"
            compare_49.mode = "ELEMENT"
            compare_49.operation = "LESS_EQUAL"

            # node Compare.001
            compare_001_29 = boolean_run_fill.nodes.new("FunctionNodeCompare")
            compare_001_29.name = "Compare.001"
            compare_001_29.data_type = "INT"
            compare_001_29.mode = "ELEMENT"
            compare_001_29.operation = "LESS_EQUAL"

            # node Boolean Math.010
            boolean_math_010_2 = boolean_run_fill.nodes.new("FunctionNodeBooleanMath")
            boolean_math_010_2.name = "Boolean Math.010"
            boolean_math_010_2.operation = "AND"

            # node Boolean Math
            boolean_math_37 = boolean_run_fill.nodes.new("FunctionNodeBooleanMath")
            boolean_math_37.name = "Boolean Math"
            boolean_math_37.operation = "OR"

            # node Reroute
            reroute_51 = boolean_run_fill.nodes.new("NodeReroute")
            reroute_51.name = "Reroute"
            # node Reroute.001
            reroute_001_36 = boolean_run_fill.nodes.new("NodeReroute")
            reroute_001_36.name = "Reroute.001"
            # node Reroute.003
            reroute_003_18 = boolean_run_fill.nodes.new("NodeReroute")
            reroute_003_18.name = "Reroute.003"
            # node Reroute.002
            reroute_002_26 = boolean_run_fill.nodes.new("NodeReroute")
            reroute_002_26.name = "Reroute.002"

            # Set locations
            group_output_166.location = (430.0, 0.0)
            group_input_164.location = (-480.0, -20.0)
            accumulate_field_9.location = (-220.0, -120.0)
            accumulate_field_001_7.location = (-60.0, -120.0)
            compare_49.location = (100.0, -120.0)
            compare_001_29.location = (100.0, -280.0)
            boolean_math_010_2.location = (260.0, -120.0)
            boolean_math_37.location = (260.0, 20.0)
            reroute_51.location = (60.0, -380.0)
            reroute_001_36.location = (-280.0, -380.0)
            reroute_003_18.location = (-300.0, -80.0)
            reroute_002_26.location = (-240.0, -60.0)

            # Set dimensions
            group_output_166.width, group_output_166.height = 140.0, 100.0
            group_input_164.width, group_input_164.height = 140.0, 100.0
            accumulate_field_9.width, accumulate_field_9.height = 140.0, 100.0
            accumulate_field_001_7.width, accumulate_field_001_7.height = 140.0, 100.0
            compare_49.width, compare_49.height = 140.0, 100.0
            compare_001_29.width, compare_001_29.height = 140.0, 100.0
            boolean_math_010_2.width, boolean_math_010_2.height = 140.0, 100.0
            boolean_math_37.width, boolean_math_37.height = 140.0, 100.0
            reroute_51.width, reroute_51.height = 16.0, 100.0
            reroute_001_36.width, reroute_001_36.height = 16.0, 100.0
            reroute_003_18.width, reroute_003_18.height = 16.0, 100.0
            reroute_002_26.width, reroute_002_26.height = 16.0, 100.0

            # initialize boolean_run_fill links
            # accumulate_field_001_7.Trailing -> compare_49.A
            boolean_run_fill.links.new(
                accumulate_field_001_7.outputs[1], compare_49.inputs[2]
            )
            # accumulate_field_9.Leading -> accumulate_field_001_7.Group ID
            boolean_run_fill.links.new(
                accumulate_field_9.outputs[0], accumulate_field_001_7.inputs[1]
            )
            # compare_001_29.Result -> boolean_math_010_2.Boolean
            boolean_run_fill.links.new(
                compare_001_29.outputs[0], boolean_math_010_2.inputs[1]
            )
            # compare_49.Result -> boolean_math_010_2.Boolean
            boolean_run_fill.links.new(
                compare_49.outputs[0], boolean_math_010_2.inputs[0]
            )
            # accumulate_field_001_7.Total -> compare_001_29.A
            boolean_run_fill.links.new(
                accumulate_field_001_7.outputs[2], compare_001_29.inputs[2]
            )
            # reroute_51.Output -> compare_49.B
            boolean_run_fill.links.new(reroute_51.outputs[0], compare_49.inputs[3])
            # reroute_51.Output -> compare_001_29.B
            boolean_run_fill.links.new(reroute_51.outputs[0], compare_001_29.inputs[3])
            # reroute_002_26.Output -> accumulate_field_9.Value
            boolean_run_fill.links.new(
                reroute_002_26.outputs[0], accumulate_field_9.inputs[0]
            )
            # reroute_002_26.Output -> boolean_math_37.Boolean
            boolean_run_fill.links.new(
                reroute_002_26.outputs[0], boolean_math_37.inputs[0]
            )
            # boolean_math_010_2.Boolean -> boolean_math_37.Boolean
            boolean_run_fill.links.new(
                boolean_math_010_2.outputs[0], boolean_math_37.inputs[1]
            )
            # boolean_math_37.Boolean -> group_output_166.Boolean
            boolean_run_fill.links.new(
                boolean_math_37.outputs[0], group_output_166.inputs[0]
            )
            # reroute_001_36.Output -> reroute_51.Input
            boolean_run_fill.links.new(reroute_001_36.outputs[0], reroute_51.inputs[0])
            # reroute_003_18.Output -> reroute_001_36.Input
            boolean_run_fill.links.new(
                reroute_003_18.outputs[0], reroute_001_36.inputs[0]
            )
            # group_input_164.Fill Size -> reroute_003_18.Input
            boolean_run_fill.links.new(
                group_input_164.outputs[1], reroute_003_18.inputs[0]
            )
            # group_input_164.Boolean -> reroute_002_26.Input
            boolean_run_fill.links.new(
                group_input_164.outputs[0], reroute_002_26.inputs[0]
            )
            return boolean_run_fill

        boolean_run_fill = boolean_run_fill_node_group()

        # initialize offset_boolean node group
        def offset_boolean_node_group():
            offset_boolean = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Offset Boolean"
            )

            offset_boolean.color_tag = "CONVERTER"
            offset_boolean.description = ""

            # offset_boolean interface
            # Socket Boolean
            boolean_socket_10 = offset_boolean.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_10.attribute_domain = "POINT"

            # Socket Index
            index_socket_12 = offset_boolean.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_12.subtype = "NONE"
            index_socket_12.default_value = 0
            index_socket_12.min_value = 0
            index_socket_12.max_value = 2147483647
            index_socket_12.attribute_domain = "POINT"

            # Socket Boolean
            boolean_socket_11 = offset_boolean.interface.new_socket(
                name="Boolean", in_out="INPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_11.attribute_domain = "POINT"
            boolean_socket_11.hide_value = True

            # Socket Offset
            offset_socket_15 = offset_boolean.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_15.subtype = "NONE"
            offset_socket_15.default_value = 0
            offset_socket_15.min_value = -2147483647
            offset_socket_15.max_value = 2147483647
            offset_socket_15.attribute_domain = "POINT"

            # initialize offset_boolean nodes
            # node Group Output
            group_output_167 = offset_boolean.nodes.new("NodeGroupOutput")
            group_output_167.name = "Group Output"
            group_output_167.is_active_output = True

            # node Group Input
            group_input_165 = offset_boolean.nodes.new("NodeGroupInput")
            group_input_165.name = "Group Input"

            # node Evaluate at Index
            evaluate_at_index_16 = offset_boolean.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_16.name = "Evaluate at Index"
            evaluate_at_index_16.data_type = "BOOLEAN"
            evaluate_at_index_16.domain = "POINT"

            # node Math
            math_44 = offset_boolean.nodes.new("ShaderNodeMath")
            math_44.name = "Math"
            math_44.operation = "ADD"
            math_44.use_clamp = False

            # Set locations
            group_output_167.location = (190.0, 0.0)
            group_input_165.location = (-344.3331298828125, -46.23834991455078)
            evaluate_at_index_16.location = (0.0, 0.0)
            math_44.location = (-160.0, 0.0)

            # Set dimensions
            group_output_167.width, group_output_167.height = 140.0, 100.0
            group_input_165.width, group_input_165.height = 140.0, 100.0
            evaluate_at_index_16.width, evaluate_at_index_16.height = 140.0, 100.0
            math_44.width, math_44.height = 140.0, 100.0

            # initialize offset_boolean links
            # evaluate_at_index_16.Value -> group_output_167.Boolean
            offset_boolean.links.new(
                evaluate_at_index_16.outputs[0], group_output_167.inputs[0]
            )
            # group_input_165.Boolean -> evaluate_at_index_16.Value
            offset_boolean.links.new(
                group_input_165.outputs[1], evaluate_at_index_16.inputs[1]
            )
            # group_input_165.Index -> math_44.Value
            offset_boolean.links.new(group_input_165.outputs[0], math_44.inputs[1])
            # math_44.Value -> evaluate_at_index_16.Index
            offset_boolean.links.new(math_44.outputs[0], evaluate_at_index_16.inputs[0])
            # group_input_165.Offset -> math_44.Value
            offset_boolean.links.new(group_input_165.outputs[2], math_44.inputs[0])
            return offset_boolean

        offset_boolean = offset_boolean_node_group()

        # initialize _mn_topo_phi_psi node group
        def _mn_topo_phi_psi_node_group():
            _mn_topo_phi_psi = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_topo_phi_psi"
            )

            _mn_topo_phi_psi.color_tag = "NONE"
            _mn_topo_phi_psi.description = ""

            # _mn_topo_phi_psi interface
            # Socket Angle
            angle_socket_7 = _mn_topo_phi_psi.interface.new_socket(
                name="Angle", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            angle_socket_7.subtype = "ANGLE"
            angle_socket_7.default_value = 0.0
            angle_socket_7.min_value = -3.4028234663852886e38
            angle_socket_7.max_value = 3.4028234663852886e38
            angle_socket_7.attribute_domain = "POINT"

            # Socket BA⟂(BC)
            ba__bc__socket_1 = _mn_topo_phi_psi.interface.new_socket(
                name="BA⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ba__bc__socket_1.subtype = "NONE"
            ba__bc__socket_1.default_value = (0.0, 0.0, 0.0)
            ba__bc__socket_1.min_value = -3.4028234663852886e38
            ba__bc__socket_1.max_value = 3.4028234663852886e38
            ba__bc__socket_1.attribute_domain = "POINT"

            # Socket CD⟂(BC)
            cd__bc__socket_1 = _mn_topo_phi_psi.interface.new_socket(
                name="CD⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            cd__bc__socket_1.subtype = "NONE"
            cd__bc__socket_1.default_value = (0.0, 0.0, 0.0)
            cd__bc__socket_1.min_value = -3.4028234663852886e38
            cd__bc__socket_1.max_value = 3.4028234663852886e38
            cd__bc__socket_1.attribute_domain = "POINT"

            # Socket BC
            bc_socket_1 = _mn_topo_phi_psi.interface.new_socket(
                name="BC", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            bc_socket_1.subtype = "NONE"
            bc_socket_1.default_value = (0.0, 0.0, 0.0)
            bc_socket_1.min_value = -3.4028234663852886e38
            bc_socket_1.max_value = 3.4028234663852886e38
            bc_socket_1.attribute_domain = "POINT"

            # Socket A
            a_socket_9 = _mn_topo_phi_psi.interface.new_socket(
                name="A", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            a_socket_9.subtype = "NONE"
            a_socket_9.default_value = (0.0, 0.0, 0.0)
            a_socket_9.min_value = -3.4028234663852886e38
            a_socket_9.max_value = 3.4028234663852886e38
            a_socket_9.attribute_domain = "POINT"

            # Socket B
            b_socket_5 = _mn_topo_phi_psi.interface.new_socket(
                name="B", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            b_socket_5.subtype = "NONE"
            b_socket_5.default_value = (0.0, 0.0, 0.0)
            b_socket_5.min_value = -3.4028234663852886e38
            b_socket_5.max_value = 3.4028234663852886e38
            b_socket_5.attribute_domain = "POINT"

            # Socket C
            c_socket_8 = _mn_topo_phi_psi.interface.new_socket(
                name="C", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            c_socket_8.subtype = "NONE"
            c_socket_8.default_value = (0.0, 0.0, 0.0)
            c_socket_8.min_value = -3.4028234663852886e38
            c_socket_8.max_value = 3.4028234663852886e38
            c_socket_8.attribute_domain = "POINT"

            # Socket D
            d_socket_1 = _mn_topo_phi_psi.interface.new_socket(
                name="D", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            d_socket_1.subtype = "NONE"
            d_socket_1.default_value = (0.0, 0.0, 0.0)
            d_socket_1.min_value = -3.4028234663852886e38
            d_socket_1.max_value = 3.4028234663852886e38
            d_socket_1.attribute_domain = "POINT"

            # Socket Menu
            menu_socket_1 = _mn_topo_phi_psi.interface.new_socket(
                name="Menu", in_out="INPUT", socket_type="NodeSocketMenu"
            )
            menu_socket_1.attribute_domain = "POINT"

            # initialize _mn_topo_phi_psi nodes
            # node Group Output
            group_output_168 = _mn_topo_phi_psi.nodes.new("NodeGroupOutput")
            group_output_168.name = "Group Output"
            group_output_168.is_active_output = True

            # node Group Input
            group_input_166 = _mn_topo_phi_psi.nodes.new("NodeGroupInput")
            group_input_166.name = "Group Input"

            # node Group.005
            group_005_9 = _mn_topo_phi_psi.nodes.new("GeometryNodeGroup")
            group_005_9.name = "Group.005"
            group_005_9.node_tree = mn_topo_backbone
            # Socket_3
            group_005_9.inputs[0].default_value = 1

            # node Group.007
            group_007_7 = _mn_topo_phi_psi.nodes.new("GeometryNodeGroup")
            group_007_7.name = "Group.007"
            group_007_7.node_tree = mn_topo_backbone
            # Socket_3
            group_007_7.inputs[0].default_value = -1

            # node Group.008
            group_008_6 = _mn_topo_phi_psi.nodes.new("GeometryNodeGroup")
            group_008_6.name = "Group.008"
            group_008_6.node_tree = mn_topo_backbone
            # Socket_3
            group_008_6.inputs[0].default_value = 0

            # node Group.009
            group_009_6 = _mn_topo_phi_psi.nodes.new("GeometryNodeGroup")
            group_009_6.name = "Group.009"
            group_009_6.node_tree = dihedral_angle

            # node Menu Switch
            menu_switch_1 = _mn_topo_phi_psi.nodes.new("GeometryNodeMenuSwitch")
            menu_switch_1.name = "Menu Switch"
            menu_switch_1.active_index = 1
            menu_switch_1.data_type = "INT"
            menu_switch_1.enum_items.clear()
            menu_switch_1.enum_items.new("Phi")
            menu_switch_1.enum_items[0].description = ""
            menu_switch_1.enum_items.new("Psi")
            menu_switch_1.enum_items[1].description = ""
            # Item_0
            menu_switch_1.inputs[1].default_value = 0
            # Item_1
            menu_switch_1.inputs[2].default_value = 1

            # node Index Switch
            index_switch_7 = _mn_topo_phi_psi.nodes.new("GeometryNodeIndexSwitch")
            index_switch_7.name = "Index Switch"
            index_switch_7.data_type = "VECTOR"
            index_switch_7.index_switch_items.clear()
            index_switch_7.index_switch_items.new()
            index_switch_7.index_switch_items.new()

            # node Index Switch.001
            index_switch_001 = _mn_topo_phi_psi.nodes.new("GeometryNodeIndexSwitch")
            index_switch_001.name = "Index Switch.001"
            index_switch_001.data_type = "VECTOR"
            index_switch_001.index_switch_items.clear()
            index_switch_001.index_switch_items.new()
            index_switch_001.index_switch_items.new()

            # node Index Switch.002
            index_switch_002_1 = _mn_topo_phi_psi.nodes.new("GeometryNodeIndexSwitch")
            index_switch_002_1.name = "Index Switch.002"
            index_switch_002_1.data_type = "VECTOR"
            index_switch_002_1.index_switch_items.clear()
            index_switch_002_1.index_switch_items.new()
            index_switch_002_1.index_switch_items.new()

            # Set locations
            group_output_168.location = (698.508544921875, 198.78929138183594)
            group_input_166.location = (-520.0, 280.0)
            group_005_9.location = (-380.0, -320.0)
            group_007_7.location = (-380.0, -120.0)
            group_008_6.location = (-380.0, 80.0)
            group_009_6.location = (272.33380126953125, 98.96731567382812)
            menu_switch_1.location = (-340.0, 260.0)
            index_switch_7.location = (-20.0, 140.0)
            index_switch_001.location = (-20.0, -100.0)
            index_switch_002_1.location = (-20.0, -280.0)

            # Set dimensions
            group_output_168.width, group_output_168.height = 140.0, 100.0
            group_input_166.width, group_input_166.height = 140.0, 100.0
            group_005_9.width, group_005_9.height = 171.90289306640625, 100.0
            group_007_7.width, group_007_7.height = 171.90289306640625, 100.0
            group_008_6.width, group_008_6.height = 171.90289306640625, 100.0
            group_009_6.width, group_009_6.height = 299.8184509277344, 100.0
            menu_switch_1.width, menu_switch_1.height = 140.0, 100.0
            index_switch_7.width, index_switch_7.height = 140.0, 100.0
            index_switch_001.width, index_switch_001.height = 140.0, 100.0
            index_switch_002_1.width, index_switch_002_1.height = 140.0, 100.0

            # initialize _mn_topo_phi_psi links
            # group_008_6.CA -> group_009_6.B
            _mn_topo_phi_psi.links.new(group_008_6.outputs[2], group_009_6.inputs[1])
            # index_switch_002_1.Output -> group_009_6.D
            _mn_topo_phi_psi.links.new(
                index_switch_002_1.outputs[0], group_009_6.inputs[3]
            )
            # index_switch_7.Output -> group_009_6.A
            _mn_topo_phi_psi.links.new(index_switch_7.outputs[0], group_009_6.inputs[0])
            # index_switch_001.Output -> group_009_6.C
            _mn_topo_phi_psi.links.new(
                index_switch_001.outputs[0], group_009_6.inputs[2]
            )
            # group_009_6.Angle -> group_output_168.Angle
            _mn_topo_phi_psi.links.new(
                group_009_6.outputs[0], group_output_168.inputs[0]
            )
            # group_009_6.BA⟂(BC) -> group_output_168.BA⟂(BC)
            _mn_topo_phi_psi.links.new(
                group_009_6.outputs[1], group_output_168.inputs[1]
            )
            # group_009_6.BC -> group_output_168.BC
            _mn_topo_phi_psi.links.new(
                group_009_6.outputs[3], group_output_168.inputs[3]
            )
            # index_switch_7.Output -> group_output_168.A
            _mn_topo_phi_psi.links.new(
                index_switch_7.outputs[0], group_output_168.inputs[4]
            )
            # group_008_6.CA -> group_output_168.B
            _mn_topo_phi_psi.links.new(
                group_008_6.outputs[2], group_output_168.inputs[5]
            )
            # index_switch_001.Output -> group_output_168.C
            _mn_topo_phi_psi.links.new(
                index_switch_001.outputs[0], group_output_168.inputs[6]
            )
            # index_switch_002_1.Output -> group_output_168.D
            _mn_topo_phi_psi.links.new(
                index_switch_002_1.outputs[0], group_output_168.inputs[7]
            )
            # group_009_6.CD⟂(BC) -> group_output_168.CD⟂(BC)
            _mn_topo_phi_psi.links.new(
                group_009_6.outputs[2], group_output_168.inputs[2]
            )
            # menu_switch_1.Output -> index_switch_7.Index
            _mn_topo_phi_psi.links.new(
                menu_switch_1.outputs[0], index_switch_7.inputs[0]
            )
            # group_input_166.Menu -> menu_switch_1.Menu
            _mn_topo_phi_psi.links.new(
                group_input_166.outputs[0], menu_switch_1.inputs[0]
            )
            # group_008_6.C -> index_switch_7.0
            _mn_topo_phi_psi.links.new(group_008_6.outputs[1], index_switch_7.inputs[1])
            # menu_switch_1.Output -> index_switch_001.Index
            _mn_topo_phi_psi.links.new(
                menu_switch_1.outputs[0], index_switch_001.inputs[0]
            )
            # group_008_6.N -> index_switch_001.0
            _mn_topo_phi_psi.links.new(
                group_008_6.outputs[3], index_switch_001.inputs[1]
            )
            # group_008_6.C -> index_switch_001.1
            _mn_topo_phi_psi.links.new(
                group_008_6.outputs[1], index_switch_001.inputs[2]
            )
            # menu_switch_1.Output -> index_switch_002_1.Index
            _mn_topo_phi_psi.links.new(
                menu_switch_1.outputs[0], index_switch_002_1.inputs[0]
            )
            # group_007_7.C -> index_switch_002_1.0
            _mn_topo_phi_psi.links.new(
                group_007_7.outputs[1], index_switch_002_1.inputs[1]
            )
            # group_005_9.N -> index_switch_002_1.1
            _mn_topo_phi_psi.links.new(
                group_005_9.outputs[3], index_switch_002_1.inputs[2]
            )
            # group_008_6.N -> index_switch_7.1
            _mn_topo_phi_psi.links.new(group_008_6.outputs[3], index_switch_7.inputs[2])
            return _mn_topo_phi_psi

        _mn_topo_phi_psi = _mn_topo_phi_psi_node_group()

        # initialize between_float node group
        def between_float_node_group():
            between_float = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Between Float"
            )

            between_float.color_tag = "CONVERTER"
            between_float.description = ""

            # between_float interface
            # Socket Boolean
            boolean_socket_12 = between_float.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_12.attribute_domain = "POINT"

            # Socket Value
            value_socket_21 = between_float.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_21.subtype = "NONE"
            value_socket_21.default_value = 0.0
            value_socket_21.min_value = -3.4028234663852886e38
            value_socket_21.max_value = 3.4028234663852886e38
            value_socket_21.attribute_domain = "POINT"

            # Socket Lower
            lower_socket = between_float.interface.new_socket(
                name="Lower", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            lower_socket.subtype = "NONE"
            lower_socket.default_value = 0.0
            lower_socket.min_value = -3.4028234663852886e38
            lower_socket.max_value = 3.4028234663852886e38
            lower_socket.attribute_domain = "POINT"

            # Socket Upper
            upper_socket = between_float.interface.new_socket(
                name="Upper", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            upper_socket.subtype = "NONE"
            upper_socket.default_value = 0.0
            upper_socket.min_value = -3.4028234663852886e38
            upper_socket.max_value = 3.4028234663852886e38
            upper_socket.attribute_domain = "POINT"

            # initialize between_float nodes
            # node Group Output
            group_output_169 = between_float.nodes.new("NodeGroupOutput")
            group_output_169.name = "Group Output"
            group_output_169.is_active_output = True

            # node Group Input
            group_input_167 = between_float.nodes.new("NodeGroupInput")
            group_input_167.name = "Group Input"

            # node Compare
            compare_50 = between_float.nodes.new("FunctionNodeCompare")
            compare_50.name = "Compare"
            compare_50.data_type = "FLOAT"
            compare_50.mode = "ELEMENT"
            compare_50.operation = "LESS_EQUAL"

            # node Compare.001
            compare_001_30 = between_float.nodes.new("FunctionNodeCompare")
            compare_001_30.name = "Compare.001"
            compare_001_30.data_type = "FLOAT"
            compare_001_30.mode = "ELEMENT"
            compare_001_30.operation = "GREATER_EQUAL"

            # node Boolean Math
            boolean_math_38 = between_float.nodes.new("FunctionNodeBooleanMath")
            boolean_math_38.name = "Boolean Math"
            boolean_math_38.operation = "AND"

            # Set locations
            group_output_169.location = (270.0, 0.0)
            group_input_167.location = (-280.0, 0.0)
            compare_50.location = (-80.0, -80.0)
            compare_001_30.location = (-80.0, 80.0)
            boolean_math_38.location = (80.0, 80.0)

            # Set dimensions
            group_output_169.width, group_output_169.height = 140.0, 100.0
            group_input_167.width, group_input_167.height = 140.0, 100.0
            compare_50.width, compare_50.height = 140.0, 100.0
            compare_001_30.width, compare_001_30.height = 140.0, 100.0
            boolean_math_38.width, boolean_math_38.height = 140.0, 100.0

            # initialize between_float links
            # compare_50.Result -> boolean_math_38.Boolean
            between_float.links.new(compare_50.outputs[0], boolean_math_38.inputs[1])
            # compare_001_30.Result -> boolean_math_38.Boolean
            between_float.links.new(
                compare_001_30.outputs[0], boolean_math_38.inputs[0]
            )
            # group_input_167.Value -> compare_50.A
            between_float.links.new(group_input_167.outputs[0], compare_50.inputs[2])
            # group_input_167.Value -> compare_001_30.A
            between_float.links.new(
                group_input_167.outputs[0], compare_001_30.inputs[2]
            )
            # boolean_math_38.Boolean -> group_output_169.Boolean
            between_float.links.new(
                boolean_math_38.outputs[0], group_output_169.inputs[0]
            )
            # group_input_167.Lower -> compare_001_30.B
            between_float.links.new(
                group_input_167.outputs[1], compare_001_30.inputs[3]
            )
            # group_input_167.Upper -> compare_50.B
            between_float.links.new(group_input_167.outputs[2], compare_50.inputs[3])
            # group_input_167.Value -> compare_001_30.A
            between_float.links.new(
                group_input_167.outputs[0], compare_001_30.inputs[0]
            )
            # group_input_167.Value -> compare_50.A
            between_float.links.new(group_input_167.outputs[0], compare_50.inputs[0])
            # group_input_167.Lower -> compare_001_30.B
            between_float.links.new(
                group_input_167.outputs[1], compare_001_30.inputs[1]
            )
            # group_input_167.Upper -> compare_50.B
            between_float.links.new(group_input_167.outputs[2], compare_50.inputs[1])
            return between_float

        between_float = between_float_node_group()

        # initialize helix_detect node group
        def helix_detect_node_group():
            helix_detect = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Helix Detect"
            )

            helix_detect.color_tag = "NONE"
            helix_detect.description = ""

            # helix_detect interface
            # Socket Boolean
            boolean_socket_13 = helix_detect.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_13.attribute_domain = "POINT"

            # Socket Helix Size
            helix_size_socket = helix_detect.interface.new_socket(
                name="Helix Size", in_out="INPUT", socket_type="NodeSocketInt"
            )
            helix_size_socket.subtype = "NONE"
            helix_size_socket.default_value = 3
            helix_size_socket.min_value = -2147483648
            helix_size_socket.max_value = 2147483647
            helix_size_socket.attribute_domain = "POINT"

            # initialize helix_detect nodes
            # node Group Output
            group_output_170 = helix_detect.nodes.new("NodeGroupOutput")
            group_output_170.name = "Group Output"
            group_output_170.is_active_output = True

            # node Group Input
            group_input_168 = helix_detect.nodes.new("NodeGroupInput")
            group_input_168.name = "Group Input"

            # node Group.003
            group_003_13 = helix_detect.nodes.new("GeometryNodeGroup")
            group_003_13.name = "Group.003"
            group_003_13.node_tree = hbond_backbone_check
            # Socket_3
            group_003_13.inputs[0].default_value = 0
            # Socket_5
            group_003_13.inputs[1].default_value = 0
            # Socket_0
            group_003_13.inputs[2].default_value = 0

            # node Group.017
            group_017_2 = helix_detect.nodes.new("GeometryNodeGroup")
            group_017_2.name = "Group.017"
            group_017_2.node_tree = boolean_run_fill

            # node Math
            math_45 = helix_detect.nodes.new("ShaderNodeMath")
            math_45.name = "Math"
            math_45.operation = "MULTIPLY"
            math_45.use_clamp = False
            # Value_001
            math_45.inputs[1].default_value = -1.0

            # node Reroute
            reroute_52 = helix_detect.nodes.new("NodeReroute")
            reroute_52.name = "Reroute"
            # node Group
            group_46 = helix_detect.nodes.new("GeometryNodeGroup")
            group_46.name = "Group"
            group_46.node_tree = offset_boolean
            # Socket_1
            group_46.inputs[0].default_value = 0
            # Socket_3
            group_46.inputs[2].default_value = -1

            # node Boolean Math
            boolean_math_39 = helix_detect.nodes.new("FunctionNodeBooleanMath")
            boolean_math_39.name = "Boolean Math"
            boolean_math_39.operation = "AND"

            # node Boolean Math.001
            boolean_math_001_31 = helix_detect.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_31.name = "Boolean Math.001"
            boolean_math_001_31.operation = "OR"

            # node Group.001
            group_001_30 = helix_detect.nodes.new("GeometryNodeGroup")
            group_001_30.name = "Group.001"
            group_001_30.node_tree = offset_boolean
            # Socket_1
            group_001_30.inputs[0].default_value = 0

            # node Frame
            frame_19 = helix_detect.nodes.new("NodeFrame")
            frame_19.label = (
                "Look to see if bonded with i - n residue, being end of helix"
            )
            frame_19.name = "Frame"
            frame_19.label_size = 20
            frame_19.shrink = True

            # node Frame.001
            frame_001_7 = helix_detect.nodes.new("NodeFrame")
            frame_001_7.label = (
                "i and i-1 are both Hbonded n residues ahead (i..i+n are helix)"
            )
            frame_001_7.name = "Frame.001"
            frame_001_7.label_size = 20
            frame_001_7.shrink = True

            # node Frame.002
            frame_002_6 = helix_detect.nodes.new("NodeFrame")
            frame_002_6.label = "Assign to in-between residues"
            frame_002_6.name = "Frame.002"
            frame_002_6.label_size = 20
            frame_002_6.shrink = True

            # node Group.002
            group_002_18 = helix_detect.nodes.new("GeometryNodeGroup")
            group_002_18.name = "Group.002"
            group_002_18.node_tree = _mn_topo_phi_psi
            # Socket_11
            group_002_18.inputs[0].default_value = "Phi"

            # node Boolean Math.003
            boolean_math_003_11 = helix_detect.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_11.name = "Boolean Math.003"
            boolean_math_003_11.operation = "AND"

            # node Group.004
            group_004_9 = helix_detect.nodes.new("GeometryNodeGroup")
            group_004_9.name = "Group.004"
            group_004_9.node_tree = _mn_topo_phi_psi
            # Socket_11
            group_004_9.inputs[0].default_value = "Psi"

            # node Group.005
            group_005_10 = helix_detect.nodes.new("GeometryNodeGroup")
            group_005_10.name = "Group.005"
            group_005_10.node_tree = between_float
            # Socket_2
            group_005_10.inputs[1].default_value = -120.0
            # Socket_3
            group_005_10.inputs[2].default_value = 45.0

            # node Math.002
            math_002_22 = helix_detect.nodes.new("ShaderNodeMath")
            math_002_22.name = "Math.002"
            math_002_22.operation = "DEGREES"
            math_002_22.use_clamp = False

            # node Group.006
            group_006_7 = helix_detect.nodes.new("GeometryNodeGroup")
            group_006_7.name = "Group.006"
            group_006_7.node_tree = between_float
            # Socket_2
            group_006_7.inputs[1].default_value = -180.0
            # Socket_3
            group_006_7.inputs[2].default_value = 10.0

            # node Math.003
            math_003_18 = helix_detect.nodes.new("ShaderNodeMath")
            math_003_18.name = "Math.003"
            math_003_18.operation = "DEGREES"
            math_003_18.use_clamp = False

            # node Boolean Math.002
            boolean_math_002_20 = helix_detect.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_20.name = "Boolean Math.002"
            boolean_math_002_20.operation = "AND"

            # node Frame.003
            frame_003_6 = helix_detect.nodes.new("NodeFrame")
            frame_003_6.label = (
                "extra dihedral check, to discard turns in helix-turn-helix"
            )
            frame_003_6.name = "Frame.003"
            frame_003_6.label_size = 20
            frame_003_6.shrink = True

            # Set parents
            group_003_13.parent = frame_001_7
            group_017_2.parent = frame_002_6
            group_46.parent = frame_001_7
            boolean_math_39.parent = frame_001_7
            group_001_30.parent = frame_19
            group_002_18.parent = frame_003_6
            group_004_9.parent = frame_003_6
            group_005_10.parent = frame_003_6
            math_002_22.parent = frame_003_6
            group_006_7.parent = frame_003_6
            math_003_18.parent = frame_003_6
            boolean_math_002_20.parent = frame_003_6

            # Set locations
            group_output_170.location = (680.0, 180.0)
            group_input_168.location = (-800.0, -260.0)
            group_003_13.location = (-500.0, 100.0)
            group_017_2.location = (320.0, -20.0)
            math_45.location = (-300.0, -180.0)
            reroute_52.location = (-540.0, -200.0)
            group_46.location = (-500.0, 240.0)
            boolean_math_39.location = (-340.0, 240.0)
            boolean_math_001_31.location = (-40.0, 240.0)
            group_001_30.location = (-40.0, 20.0)
            frame_19.location = (-10.0, -20.0)
            frame_001_7.location = (10.0, 40.0)
            frame_002_6.location = (-30.0, 200.0)
            group_002_18.location = (254.93621826171875, -98.54428100585938)
            boolean_math_003_11.location = (500.0, 180.0)
            group_004_9.location = (254.93621826171875, -378.5442810058594)
            group_005_10.location = (574.9362182617188, -98.54428100585938)
            math_002_22.location = (414.93621826171875, -98.54428100585938)
            group_006_7.location = (574.9362182617188, -378.5442810058594)
            math_003_18.location = (414.93621826171875, -378.5442810058594)
            boolean_math_002_20.location = (774.9362182617188, -98.54428100585938)
            frame_003_6.location = (35.0, 99.0)

            # Set dimensions
            group_output_170.width, group_output_170.height = 140.0, 100.0
            group_input_168.width, group_input_168.height = 140.0, 100.0
            group_003_13.width, group_003_13.height = 140.0, 100.0
            group_017_2.width, group_017_2.height = 144.84217834472656, 100.0
            math_45.width, math_45.height = 140.0, 100.0
            reroute_52.width, reroute_52.height = 16.0, 100.0
            group_46.width, group_46.height = 140.0, 100.0
            boolean_math_39.width, boolean_math_39.height = 140.0, 100.0
            boolean_math_001_31.width, boolean_math_001_31.height = 140.0, 100.0
            group_001_30.width, group_001_30.height = 140.0, 100.0
            frame_19.width, frame_19.height = 200.0, 187.0
            frame_001_7.width, frame_001_7.height = 360.0, 474.0
            frame_002_6.width, frame_002_6.height = 204.8421630859375, 165.0
            group_002_18.width, group_002_18.height = 140.0, 100.0
            boolean_math_003_11.width, boolean_math_003_11.height = 140.0, 100.0
            group_004_9.width, group_004_9.height = 140.0, 100.0
            group_005_10.width, group_005_10.height = 176.237548828125, 100.0
            math_002_22.width, math_002_22.height = 140.0, 100.0
            group_006_7.width, group_006_7.height = 176.237548828125, 100.0
            math_003_18.width, math_003_18.height = 140.0, 100.0
            boolean_math_002_20.width, boolean_math_002_20.height = 140.0, 100.0
            frame_003_6.width, frame_003_6.height = 720.0, 602.0

            # initialize helix_detect links
            # group_input_168.Helix Size -> math_45.Value
            helix_detect.links.new(group_input_168.outputs[0], math_45.inputs[0])
            # group_input_168.Helix Size -> reroute_52.Input
            helix_detect.links.new(group_input_168.outputs[0], reroute_52.inputs[0])
            # reroute_52.Output -> group_003_13.NH Offset
            helix_detect.links.new(reroute_52.outputs[0], group_003_13.inputs[3])
            # group_003_13.Is Bonded -> group_46.Boolean
            helix_detect.links.new(group_003_13.outputs[0], group_46.inputs[1])
            # group_46.Boolean -> boolean_math_39.Boolean
            helix_detect.links.new(group_46.outputs[0], boolean_math_39.inputs[0])
            # group_003_13.Is Bonded -> boolean_math_39.Boolean
            helix_detect.links.new(group_003_13.outputs[0], boolean_math_39.inputs[1])
            # boolean_math_001_31.Boolean -> group_017_2.Boolean
            helix_detect.links.new(
                boolean_math_001_31.outputs[0], group_017_2.inputs[0]
            )
            # boolean_math_39.Boolean -> boolean_math_001_31.Boolean
            helix_detect.links.new(
                boolean_math_39.outputs[0], boolean_math_001_31.inputs[0]
            )
            # boolean_math_39.Boolean -> group_001_30.Boolean
            helix_detect.links.new(boolean_math_39.outputs[0], group_001_30.inputs[1])
            # group_001_30.Boolean -> boolean_math_001_31.Boolean
            helix_detect.links.new(
                group_001_30.outputs[0], boolean_math_001_31.inputs[1]
            )
            # math_45.Value -> group_001_30.Offset
            helix_detect.links.new(math_45.outputs[0], group_001_30.inputs[2])
            # reroute_52.Output -> group_017_2.Fill Size
            helix_detect.links.new(reroute_52.outputs[0], group_017_2.inputs[1])
            # group_017_2.Boolean -> boolean_math_003_11.Boolean
            helix_detect.links.new(
                group_017_2.outputs[0], boolean_math_003_11.inputs[0]
            )
            # boolean_math_003_11.Boolean -> group_output_170.Boolean
            helix_detect.links.new(
                boolean_math_003_11.outputs[0], group_output_170.inputs[0]
            )
            # boolean_math_002_20.Boolean -> boolean_math_003_11.Boolean
            helix_detect.links.new(
                boolean_math_002_20.outputs[0], boolean_math_003_11.inputs[1]
            )
            # group_002_18.Angle -> math_002_22.Value
            helix_detect.links.new(group_002_18.outputs[0], math_002_22.inputs[0])
            # math_002_22.Value -> group_005_10.Value
            helix_detect.links.new(math_002_22.outputs[0], group_005_10.inputs[0])
            # math_003_18.Value -> group_006_7.Value
            helix_detect.links.new(math_003_18.outputs[0], group_006_7.inputs[0])
            # group_004_9.Angle -> math_003_18.Value
            helix_detect.links.new(group_004_9.outputs[0], math_003_18.inputs[0])
            # group_005_10.Boolean -> boolean_math_002_20.Boolean
            helix_detect.links.new(
                group_005_10.outputs[0], boolean_math_002_20.inputs[0]
            )
            # group_006_7.Boolean -> boolean_math_002_20.Boolean
            helix_detect.links.new(
                group_006_7.outputs[0], boolean_math_002_20.inputs[1]
            )
            return helix_detect

        helix_detect = helix_detect_node_group()

        # initialize _mn_topo_calc_helix node group
        def _mn_topo_calc_helix_node_group():
            _mn_topo_calc_helix = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_topo_calc_helix"
            )

            _mn_topo_calc_helix.color_tag = "NONE"
            _mn_topo_calc_helix.description = ""

            # _mn_topo_calc_helix interface
            # Socket Is Helix
            is_helix_socket_1 = _mn_topo_calc_helix.interface.new_socket(
                name="Is Helix", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_helix_socket_1.attribute_domain = "POINT"

            # Socket Bonded Index
            bonded_index_socket = _mn_topo_calc_helix.interface.new_socket(
                name="Bonded Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            bonded_index_socket.subtype = "NONE"
            bonded_index_socket.default_value = 0
            bonded_index_socket.min_value = -2147483648
            bonded_index_socket.max_value = 2147483647
            bonded_index_socket.attribute_domain = "POINT"

            # initialize _mn_topo_calc_helix nodes
            # node Group Output
            group_output_171 = _mn_topo_calc_helix.nodes.new("NodeGroupOutput")
            group_output_171.name = "Group Output"
            group_output_171.is_active_output = True

            # node Group.001
            group_001_31 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_001_31.name = "Group.001"
            group_001_31.node_tree = boolean_run_mask
            # Socket_2
            group_001_31.inputs[1].default_value = 0
            # Socket_3
            group_001_31.inputs[2].default_value = 5
            # Socket_6
            group_001_31.inputs[3].default_value = 0

            # node Boolean Math.004
            boolean_math_004_8 = _mn_topo_calc_helix.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_8.name = "Boolean Math.004"
            boolean_math_004_8.operation = "OR"

            # node Boolean Math.005
            boolean_math_005_4 = _mn_topo_calc_helix.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_005_4.name = "Boolean Math.005"
            boolean_math_005_4.operation = "OR"

            # node Group
            group_47 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_47.name = "Group"
            group_47.node_tree = helix_detect
            # Socket_1
            group_47.inputs[0].default_value = 3

            # node Group.002
            group_002_19 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_002_19.name = "Group.002"
            group_002_19.node_tree = helix_detect
            # Socket_1
            group_002_19.inputs[0].default_value = 4

            # node Group.003
            group_003_14 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_003_14.name = "Group.003"
            group_003_14.node_tree = helix_detect
            # Socket_1
            group_003_14.inputs[0].default_value = 5

            # node Group.004
            group_004_10 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_004_10.name = "Group.004"
            group_004_10.node_tree = offset_integer
            # Socket_1
            group_004_10.inputs[0].default_value = 0
            # Socket_2
            group_004_10.inputs[2].default_value = 3

            # node Index
            index_20 = _mn_topo_calc_helix.nodes.new("GeometryNodeInputIndex")
            index_20.name = "Index"

            # node Switch
            switch_44 = _mn_topo_calc_helix.nodes.new("GeometryNodeSwitch")
            switch_44.name = "Switch"
            switch_44.input_type = "INT"
            # False
            switch_44.inputs[1].default_value = -1

            # node Switch.001
            switch_001_24 = _mn_topo_calc_helix.nodes.new("GeometryNodeSwitch")
            switch_001_24.name = "Switch.001"
            switch_001_24.input_type = "INT"

            # node Group.005
            group_005_11 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_005_11.name = "Group.005"
            group_005_11.node_tree = offset_integer
            # Socket_1
            group_005_11.inputs[0].default_value = 0
            # Socket_2
            group_005_11.inputs[2].default_value = 4

            # node Switch.002
            switch_002_18 = _mn_topo_calc_helix.nodes.new("GeometryNodeSwitch")
            switch_002_18.name = "Switch.002"
            switch_002_18.input_type = "INT"

            # node Group.006
            group_006_8 = _mn_topo_calc_helix.nodes.new("GeometryNodeGroup")
            group_006_8.name = "Group.006"
            group_006_8.node_tree = offset_integer
            # Socket_1
            group_006_8.inputs[0].default_value = 0
            # Socket_2
            group_006_8.inputs[2].default_value = 5

            # node Frame
            frame_20 = _mn_topo_calc_helix.nodes.new("NodeFrame")
            frame_20.label = (
                "If part of a helix, return the Index of the CA that is bonded"
            )
            frame_20.name = "Frame"
            frame_20.label_size = 20
            frame_20.shrink = True

            # Set parents
            group_004_10.parent = frame_20
            index_20.parent = frame_20
            switch_44.parent = frame_20
            switch_001_24.parent = frame_20
            group_005_11.parent = frame_20
            switch_002_18.parent = frame_20
            group_006_8.parent = frame_20

            # Set locations
            group_output_171.location = (900.0, 620.0)
            group_001_31.location = (660.0, 620.0)
            boolean_math_004_8.location = (320.0, 620.0)
            boolean_math_005_4.location = (500.0, 620.0)
            group_47.location = (137.64556884765625, 620.0)
            group_002_19.location = (140.0, 500.0)
            group_003_14.location = (320.0, 480.0)
            group_004_10.location = (320.0, 840.0)
            index_20.location = (140.0, 820.0)
            switch_44.location = (320.0, 1000.0)
            switch_001_24.location = (480.0, 1000.0)
            group_005_11.location = (480.0, 840.0)
            switch_002_18.location = (640.0, 1000.0)
            group_006_8.location = (640.0, 840.0)
            frame_20.location = (0.0, 0.0)

            # Set dimensions
            group_output_171.width, group_output_171.height = 140.0, 100.0
            group_001_31.width, group_001_31.height = 208.096435546875, 100.0
            boolean_math_004_8.width, boolean_math_004_8.height = 140.0, 100.0
            boolean_math_005_4.width, boolean_math_005_4.height = 140.0, 100.0
            group_47.width, group_47.height = 142.35443115234375, 100.0
            group_002_19.width, group_002_19.height = 140.0, 100.0
            group_003_14.width, group_003_14.height = 140.0, 100.0
            group_004_10.width, group_004_10.height = 140.0, 100.0
            index_20.width, index_20.height = 140.0, 100.0
            switch_44.width, switch_44.height = 140.0, 100.0
            switch_001_24.width, switch_001_24.height = 140.0, 100.0
            group_005_11.width, group_005_11.height = 140.0, 100.0
            switch_002_18.width, switch_002_18.height = 140.0, 100.0
            group_006_8.width, group_006_8.height = 140.0, 100.0
            frame_20.width, frame_20.height = 700.0, 372.0

            # initialize _mn_topo_calc_helix links
            # boolean_math_004_8.Boolean -> boolean_math_005_4.Boolean
            _mn_topo_calc_helix.links.new(
                boolean_math_004_8.outputs[0], boolean_math_005_4.inputs[0]
            )
            # group_001_31.Boolean -> group_output_171.Is Helix
            _mn_topo_calc_helix.links.new(
                group_001_31.outputs[0], group_output_171.inputs[0]
            )
            # group_47.Boolean -> boolean_math_004_8.Boolean
            _mn_topo_calc_helix.links.new(
                group_47.outputs[0], boolean_math_004_8.inputs[0]
            )
            # group_002_19.Boolean -> boolean_math_004_8.Boolean
            _mn_topo_calc_helix.links.new(
                group_002_19.outputs[0], boolean_math_004_8.inputs[1]
            )
            # group_003_14.Boolean -> boolean_math_005_4.Boolean
            _mn_topo_calc_helix.links.new(
                group_003_14.outputs[0], boolean_math_005_4.inputs[1]
            )
            # boolean_math_005_4.Boolean -> group_001_31.Boolean
            _mn_topo_calc_helix.links.new(
                boolean_math_005_4.outputs[0], group_001_31.inputs[0]
            )
            # index_20.Index -> group_004_10.Value
            _mn_topo_calc_helix.links.new(index_20.outputs[0], group_004_10.inputs[1])
            # group_004_10.Value -> switch_44.True
            _mn_topo_calc_helix.links.new(group_004_10.outputs[0], switch_44.inputs[2])
            # group_47.Boolean -> switch_44.Switch
            _mn_topo_calc_helix.links.new(group_47.outputs[0], switch_44.inputs[0])
            # switch_44.Output -> switch_001_24.False
            _mn_topo_calc_helix.links.new(switch_44.outputs[0], switch_001_24.inputs[1])
            # group_002_19.Boolean -> switch_001_24.Switch
            _mn_topo_calc_helix.links.new(
                group_002_19.outputs[0], switch_001_24.inputs[0]
            )
            # group_005_11.Value -> switch_001_24.True
            _mn_topo_calc_helix.links.new(
                group_005_11.outputs[0], switch_001_24.inputs[2]
            )
            # switch_001_24.Output -> switch_002_18.False
            _mn_topo_calc_helix.links.new(
                switch_001_24.outputs[0], switch_002_18.inputs[1]
            )
            # group_003_14.Boolean -> switch_002_18.Switch
            _mn_topo_calc_helix.links.new(
                group_003_14.outputs[0], switch_002_18.inputs[0]
            )
            # index_20.Index -> group_005_11.Value
            _mn_topo_calc_helix.links.new(index_20.outputs[0], group_005_11.inputs[1])
            # index_20.Index -> group_006_8.Value
            _mn_topo_calc_helix.links.new(index_20.outputs[0], group_006_8.inputs[1])
            # group_006_8.Value -> switch_002_18.True
            _mn_topo_calc_helix.links.new(
                group_006_8.outputs[0], switch_002_18.inputs[2]
            )
            # switch_002_18.Output -> group_output_171.Bonded Index
            _mn_topo_calc_helix.links.new(
                switch_002_18.outputs[0], group_output_171.inputs[1]
            )
            return _mn_topo_calc_helix

        _mn_topo_calc_helix = _mn_topo_calc_helix_node_group()

        # initialize self_sample_proximity node group
        def self_sample_proximity_node_group():
            self_sample_proximity = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Self Sample Proximity"
            )

            self_sample_proximity.color_tag = "NONE"
            self_sample_proximity.description = ""

            # self_sample_proximity interface
            # Socket Closest Index
            closest_index_socket = self_sample_proximity.interface.new_socket(
                name="Closest Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            closest_index_socket.subtype = "NONE"
            closest_index_socket.default_value = 0
            closest_index_socket.min_value = -2147483648
            closest_index_socket.max_value = 2147483647
            closest_index_socket.attribute_domain = "POINT"

            # Socket Input
            input_socket_7 = self_sample_proximity.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            input_socket_7.attribute_domain = "POINT"

            # Socket Target Position
            target_position_socket = self_sample_proximity.interface.new_socket(
                name="Target Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            target_position_socket.subtype = "NONE"
            target_position_socket.default_value = (0.0, 0.0, 0.0)
            target_position_socket.min_value = -3.4028234663852886e38
            target_position_socket.max_value = 3.4028234663852886e38
            target_position_socket.attribute_domain = "POINT"

            # Socket Self Position
            self_position_socket = self_sample_proximity.interface.new_socket(
                name="Self Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            self_position_socket.subtype = "NONE"
            self_position_socket.default_value = (0.0, 0.0, 0.0)
            self_position_socket.min_value = -3.4028234663852886e38
            self_position_socket.max_value = 3.4028234663852886e38
            self_position_socket.attribute_domain = "POINT"

            # initialize self_sample_proximity nodes
            # node Group Output
            group_output_172 = self_sample_proximity.nodes.new("NodeGroupOutput")
            group_output_172.name = "Group Output"
            group_output_172.is_active_output = True

            # node Group Input
            group_input_169 = self_sample_proximity.nodes.new("NodeGroupInput")
            group_input_169.name = "Group Input"

            # node Set Position.002
            set_position_002_3 = self_sample_proximity.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_002_3.name = "Set Position.002"
            # Selection
            set_position_002_3.inputs[1].default_value = True
            # Offset
            set_position_002_3.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Sample Nearest.001
            sample_nearest_001_3 = self_sample_proximity.nodes.new(
                "GeometryNodeSampleNearest"
            )
            sample_nearest_001_3.name = "Sample Nearest.001"
            sample_nearest_001_3.domain = "POINT"

            # Set locations
            group_output_172.location = (4.068901062011719, 95.01506042480469)
            group_input_169.location = (-640.0, 20.0)
            set_position_002_3.location = (-380.0, -20.0)
            sample_nearest_001_3.location = (-220.0, -20.0)

            # Set dimensions
            group_output_172.width, group_output_172.height = 140.0, 100.0
            group_input_169.width, group_input_169.height = 140.0, 100.0
            set_position_002_3.width, set_position_002_3.height = 140.0, 100.0
            sample_nearest_001_3.width, sample_nearest_001_3.height = 140.0, 100.0

            # initialize self_sample_proximity links
            # group_input_169.Input -> set_position_002_3.Geometry
            self_sample_proximity.links.new(
                group_input_169.outputs[0], set_position_002_3.inputs[0]
            )
            # set_position_002_3.Geometry -> sample_nearest_001_3.Geometry
            self_sample_proximity.links.new(
                set_position_002_3.outputs[0], sample_nearest_001_3.inputs[0]
            )
            # group_input_169.Target Position -> set_position_002_3.Position
            self_sample_proximity.links.new(
                group_input_169.outputs[1], set_position_002_3.inputs[2]
            )
            # group_input_169.Self Position -> sample_nearest_001_3.Sample Position
            self_sample_proximity.links.new(
                group_input_169.outputs[2], sample_nearest_001_3.inputs[1]
            )
            # sample_nearest_001_3.Index -> group_output_172.Closest Index
            self_sample_proximity.links.new(
                sample_nearest_001_3.outputs[0], group_output_172.inputs[0]
            )
            return self_sample_proximity

        self_sample_proximity = self_sample_proximity_node_group()

        # initialize hbond_backbone_check_backup node group
        def hbond_backbone_check_backup_node_group():
            hbond_backbone_check_backup = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="HBond Backbone Check_backup"
            )

            hbond_backbone_check_backup.color_tag = "NONE"
            hbond_backbone_check_backup.description = ""

            # hbond_backbone_check_backup interface
            # Socket Is Bonded
            is_bonded_socket_2 = hbond_backbone_check_backup.interface.new_socket(
                name="Is Bonded", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_bonded_socket_2.attribute_domain = "POINT"

            # Socket Bond Energy
            bond_energy_socket_2 = hbond_backbone_check_backup.interface.new_socket(
                name="Bond Energy", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            bond_energy_socket_2.subtype = "NONE"
            bond_energy_socket_2.default_value = 0.0
            bond_energy_socket_2.min_value = -3.4028234663852886e38
            bond_energy_socket_2.max_value = 3.4028234663852886e38
            bond_energy_socket_2.attribute_domain = "POINT"

            # Socket H->O
            h__o_socket_1 = hbond_backbone_check_backup.interface.new_socket(
                name="H->O", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            h__o_socket_1.subtype = "NONE"
            h__o_socket_1.default_value = (0.0, 0.0, 0.0)
            h__o_socket_1.min_value = -3.4028234663852886e38
            h__o_socket_1.max_value = 3.4028234663852886e38
            h__o_socket_1.attribute_domain = "POINT"

            # Panel CO
            co_panel_1 = hbond_backbone_check_backup.interface.new_panel("CO")
            # Socket CO Index
            co_index_socket_1 = hbond_backbone_check_backup.interface.new_socket(
                name="CO Index",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=co_panel_1,
            )
            co_index_socket_1.subtype = "NONE"
            co_index_socket_1.default_value = 0
            co_index_socket_1.min_value = 0
            co_index_socket_1.max_value = 2147483647
            co_index_socket_1.attribute_domain = "POINT"

            # Socket CO Offset
            co_offset_socket_1 = hbond_backbone_check_backup.interface.new_socket(
                name="CO Offset",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=co_panel_1,
            )
            co_offset_socket_1.subtype = "NONE"
            co_offset_socket_1.default_value = 0
            co_offset_socket_1.min_value = -2147483648
            co_offset_socket_1.max_value = 2147483647
            co_offset_socket_1.attribute_domain = "POINT"

            # Panel NH
            nh_panel_1 = hbond_backbone_check_backup.interface.new_panel("NH")
            # Socket NH Index
            nh_index_socket_1 = hbond_backbone_check_backup.interface.new_socket(
                name="NH Index",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=nh_panel_1,
            )
            nh_index_socket_1.subtype = "NONE"
            nh_index_socket_1.default_value = 0
            nh_index_socket_1.min_value = 0
            nh_index_socket_1.max_value = 2147483647
            nh_index_socket_1.attribute_domain = "POINT"

            # Socket NH Offset
            nh_offset_socket_1 = hbond_backbone_check_backup.interface.new_socket(
                name="NH Offset",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=nh_panel_1,
            )
            nh_offset_socket_1.subtype = "NONE"
            nh_offset_socket_1.default_value = 0
            nh_offset_socket_1.min_value = -2147483648
            nh_offset_socket_1.max_value = 2147483647
            nh_offset_socket_1.attribute_domain = "POINT"

            # initialize hbond_backbone_check_backup nodes
            # node Group Output
            group_output_173 = hbond_backbone_check_backup.nodes.new("NodeGroupOutput")
            group_output_173.name = "Group Output"
            group_output_173.is_active_output = True

            # node Group Input
            group_input_170 = hbond_backbone_check_backup.nodes.new("NodeGroupInput")
            group_input_170.name = "Group Input"

            # node Group.008
            group_008_7 = hbond_backbone_check_backup.nodes.new("GeometryNodeGroup")
            group_008_7.name = "Group.008"
            group_008_7.node_tree = hbond_energy

            # node Group.009
            group_009_7 = hbond_backbone_check_backup.nodes.new("GeometryNodeGroup")
            group_009_7.name = "Group.009"
            group_009_7.node_tree = mn_topo_backbone
            # Socket_3
            group_009_7.inputs[0].default_value = 0

            # node Evaluate at Index
            evaluate_at_index_17 = hbond_backbone_check_backup.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_17.name = "Evaluate at Index"
            evaluate_at_index_17.data_type = "FLOAT_VECTOR"
            evaluate_at_index_17.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_12 = hbond_backbone_check_backup.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_12.name = "Evaluate at Index.001"
            evaluate_at_index_001_12.data_type = "FLOAT_VECTOR"
            evaluate_at_index_001_12.domain = "POINT"

            # node Evaluate at Index.002
            evaluate_at_index_002_6 = hbond_backbone_check_backup.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_002_6.name = "Evaluate at Index.002"
            evaluate_at_index_002_6.data_type = "FLOAT_VECTOR"
            evaluate_at_index_002_6.domain = "POINT"

            # node Evaluate at Index.003
            evaluate_at_index_003_4 = hbond_backbone_check_backup.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_003_4.name = "Evaluate at Index.003"
            evaluate_at_index_003_4.data_type = "FLOAT_VECTOR"
            evaluate_at_index_003_4.domain = "POINT"

            # node Math
            math_46 = hbond_backbone_check_backup.nodes.new("ShaderNodeMath")
            math_46.name = "Math"
            math_46.operation = "ADD"
            math_46.use_clamp = False

            # node Math.001
            math_001_30 = hbond_backbone_check_backup.nodes.new("ShaderNodeMath")
            math_001_30.name = "Math.001"
            math_001_30.operation = "ADD"
            math_001_30.use_clamp = False

            # node Math.002
            math_002_23 = hbond_backbone_check_backup.nodes.new("ShaderNodeMath")
            math_002_23.name = "Math.002"
            math_002_23.operation = "SUBTRACT"
            math_002_23.use_clamp = False

            # node Math.003
            math_003_19 = hbond_backbone_check_backup.nodes.new("ShaderNodeMath")
            math_003_19.name = "Math.003"
            math_003_19.operation = "ABSOLUTE"
            math_003_19.use_clamp = False

            # node Compare
            compare_51 = hbond_backbone_check_backup.nodes.new("FunctionNodeCompare")
            compare_51.name = "Compare"
            compare_51.data_type = "FLOAT"
            compare_51.mode = "ELEMENT"
            compare_51.operation = "GREATER_THAN"

            # node Integer
            integer_8 = hbond_backbone_check_backup.nodes.new("FunctionNodeInputInt")
            integer_8.name = "Integer"
            integer_8.integer = 1

            # node Frame
            frame_21 = hbond_backbone_check_backup.nodes.new("NodeFrame")
            frame_21.label = "Check not bonded to +/- residues"
            frame_21.name = "Frame"
            frame_21.label_size = 20
            frame_21.shrink = True

            # node Switch
            switch_45 = hbond_backbone_check_backup.nodes.new("GeometryNodeSwitch")
            switch_45.name = "Switch"
            switch_45.input_type = "BOOLEAN"
            # False
            switch_45.inputs[1].default_value = False

            # node Compare.001
            compare_001_31 = hbond_backbone_check_backup.nodes.new(
                "FunctionNodeCompare"
            )
            compare_001_31.name = "Compare.001"
            compare_001_31.data_type = "FLOAT"
            compare_001_31.mode = "ELEMENT"
            compare_001_31.operation = "LESS_THAN"

            # node Vector Math
            vector_math_40 = hbond_backbone_check_backup.nodes.new(
                "ShaderNodeVectorMath"
            )
            vector_math_40.name = "Vector Math"
            vector_math_40.operation = "LENGTH"

            # node Group
            group_48 = hbond_backbone_check_backup.nodes.new("GeometryNodeGroup")
            group_48.name = "Group"
            group_48.node_tree = mn_units
            # Input_1
            group_48.inputs[0].default_value = 3.0

            # Set parents
            math_002_23.parent = frame_21
            math_003_19.parent = frame_21
            compare_51.parent = frame_21
            integer_8.parent = frame_21

            # Set locations
            group_output_173.location = (820.0, 240.0)
            group_input_170.location = (-680.0, 140.0)
            group_008_7.location = (224.2731170654297, 240.0)
            group_009_7.location = (-480.0, 460.0)
            evaluate_at_index_17.location = (-20.0, 40.0)
            evaluate_at_index_001_12.location = (-20.0, -120.0)
            evaluate_at_index_002_6.location = (-20.0, 400.0)
            evaluate_at_index_003_4.location = (-20.0, 240.0)
            math_46.location = (-480.0, 240.0)
            math_001_30.location = (-480.0, 80.0)
            math_002_23.location = (70.0, 640.0)
            math_003_19.location = (240.0, 640.0)
            compare_51.location = (420.0, 640.0)
            integer_8.location = (240.0, 500.0)
            frame_21.location = (-70.0, 40.0)
            switch_45.location = (620.0, 340.0)
            compare_001_31.location = (520.0, 140.0)
            vector_math_40.location = (260.0, 20.0)
            group_48.location = (520.0, -20.0)

            # Set dimensions
            group_output_173.width, group_output_173.height = 140.0, 100.0
            group_input_170.width, group_input_170.height = 140.0, 100.0
            group_008_7.width, group_008_7.height = 184.92144775390625, 100.0
            group_009_7.width, group_009_7.height = 140.0, 100.0
            evaluate_at_index_17.width, evaluate_at_index_17.height = 140.0, 100.0
            evaluate_at_index_001_12.width, evaluate_at_index_001_12.height = (
                140.0,
                100.0,
            )
            evaluate_at_index_002_6.width, evaluate_at_index_002_6.height = 140.0, 100.0
            evaluate_at_index_003_4.width, evaluate_at_index_003_4.height = 140.0, 100.0
            math_46.width, math_46.height = 140.0, 100.0
            math_001_30.width, math_001_30.height = 140.0, 100.0
            math_002_23.width, math_002_23.height = 140.0, 100.0
            math_003_19.width, math_003_19.height = 140.0, 100.0
            compare_51.width, compare_51.height = 140.0, 100.0
            integer_8.width, integer_8.height = 140.0, 100.0
            frame_21.width, frame_21.height = 550.0, 285.0
            switch_45.width, switch_45.height = 140.0, 100.0
            compare_001_31.width, compare_001_31.height = 140.0, 100.0
            vector_math_40.width, vector_math_40.height = 140.0, 100.0
            group_48.width, group_48.height = 140.0, 100.0

            # initialize hbond_backbone_check_backup links
            # evaluate_at_index_001_12.Value -> group_008_7.H
            hbond_backbone_check_backup.links.new(
                evaluate_at_index_001_12.outputs[0], group_008_7.inputs[3]
            )
            # evaluate_at_index_17.Value -> group_008_7.N
            hbond_backbone_check_backup.links.new(
                evaluate_at_index_17.outputs[0], group_008_7.inputs[2]
            )
            # evaluate_at_index_002_6.Value -> group_008_7.O
            hbond_backbone_check_backup.links.new(
                evaluate_at_index_002_6.outputs[0], group_008_7.inputs[0]
            )
            # math_001_30.Value -> evaluate_at_index_001_12.Index
            hbond_backbone_check_backup.links.new(
                math_001_30.outputs[0], evaluate_at_index_001_12.inputs[0]
            )
            # math_001_30.Value -> evaluate_at_index_17.Index
            hbond_backbone_check_backup.links.new(
                math_001_30.outputs[0], evaluate_at_index_17.inputs[0]
            )
            # evaluate_at_index_003_4.Value -> group_008_7.C
            hbond_backbone_check_backup.links.new(
                evaluate_at_index_003_4.outputs[0], group_008_7.inputs[1]
            )
            # group_009_7.NH -> evaluate_at_index_001_12.Value
            hbond_backbone_check_backup.links.new(
                group_009_7.outputs[4], evaluate_at_index_001_12.inputs[1]
            )
            # group_009_7.N -> evaluate_at_index_17.Value
            hbond_backbone_check_backup.links.new(
                group_009_7.outputs[3], evaluate_at_index_17.inputs[1]
            )
            # group_008_7.Bond Energy -> group_output_173.Bond Energy
            hbond_backbone_check_backup.links.new(
                group_008_7.outputs[1], group_output_173.inputs[1]
            )
            # group_008_7.Bond Vector -> group_output_173.H->O
            hbond_backbone_check_backup.links.new(
                group_008_7.outputs[2], group_output_173.inputs[2]
            )
            # group_009_7.O -> evaluate_at_index_002_6.Value
            hbond_backbone_check_backup.links.new(
                group_009_7.outputs[0], evaluate_at_index_002_6.inputs[1]
            )
            # group_009_7.C -> evaluate_at_index_003_4.Value
            hbond_backbone_check_backup.links.new(
                group_009_7.outputs[1], evaluate_at_index_003_4.inputs[1]
            )
            # math_46.Value -> evaluate_at_index_002_6.Index
            hbond_backbone_check_backup.links.new(
                math_46.outputs[0], evaluate_at_index_002_6.inputs[0]
            )
            # math_46.Value -> evaluate_at_index_003_4.Index
            hbond_backbone_check_backup.links.new(
                math_46.outputs[0], evaluate_at_index_003_4.inputs[0]
            )
            # group_input_170.CO Index -> math_46.Value
            hbond_backbone_check_backup.links.new(
                group_input_170.outputs[0], math_46.inputs[0]
            )
            # group_input_170.CO Offset -> math_46.Value
            hbond_backbone_check_backup.links.new(
                group_input_170.outputs[1], math_46.inputs[1]
            )
            # group_input_170.NH Index -> math_001_30.Value
            hbond_backbone_check_backup.links.new(
                group_input_170.outputs[2], math_001_30.inputs[0]
            )
            # group_input_170.NH Offset -> math_001_30.Value
            hbond_backbone_check_backup.links.new(
                group_input_170.outputs[3], math_001_30.inputs[1]
            )
            # math_46.Value -> math_002_23.Value
            hbond_backbone_check_backup.links.new(
                math_46.outputs[0], math_002_23.inputs[0]
            )
            # math_001_30.Value -> math_002_23.Value
            hbond_backbone_check_backup.links.new(
                math_001_30.outputs[0], math_002_23.inputs[1]
            )
            # math_002_23.Value -> math_003_19.Value
            hbond_backbone_check_backup.links.new(
                math_002_23.outputs[0], math_003_19.inputs[0]
            )
            # math_003_19.Value -> compare_51.A
            hbond_backbone_check_backup.links.new(
                math_003_19.outputs[0], compare_51.inputs[0]
            )
            # integer_8.Integer -> compare_51.B
            hbond_backbone_check_backup.links.new(
                integer_8.outputs[0], compare_51.inputs[1]
            )
            # compare_51.Result -> switch_45.Switch
            hbond_backbone_check_backup.links.new(
                compare_51.outputs[0], switch_45.inputs[0]
            )
            # group_008_7.Bond Vector -> vector_math_40.Vector
            hbond_backbone_check_backup.links.new(
                group_008_7.outputs[2], vector_math_40.inputs[0]
            )
            # vector_math_40.Value -> compare_001_31.A
            hbond_backbone_check_backup.links.new(
                vector_math_40.outputs[1], compare_001_31.inputs[0]
            )
            # group_48.Angstrom -> compare_001_31.B
            hbond_backbone_check_backup.links.new(
                group_48.outputs[0], compare_001_31.inputs[1]
            )
            # switch_45.Output -> group_output_173.Is Bonded
            hbond_backbone_check_backup.links.new(
                switch_45.outputs[0], group_output_173.inputs[0]
            )
            # group_008_7.Is Bonded -> switch_45.True
            hbond_backbone_check_backup.links.new(
                group_008_7.outputs[0], switch_45.inputs[2]
            )
            return hbond_backbone_check_backup

        hbond_backbone_check_backup = hbond_backbone_check_backup_node_group()

        # initialize _hbond_i__j__and_hbond_j__i_ node group
        def _hbond_i__j__and_hbond_j__i__node_group():
            _hbond_i__j__and_hbond_j__i_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".HBond(i, j) and HBond(j, i)"
            )

            _hbond_i__j__and_hbond_j__i_.color_tag = "NONE"
            _hbond_i__j__and_hbond_j__i_.description = ""

            # _hbond_i__j__and_hbond_j__i_ interface
            # Socket Boolean
            boolean_socket_14 = _hbond_i__j__and_hbond_j__i_.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_14.attribute_domain = "POINT"

            # Socket i
            i_socket = _hbond_i__j__and_hbond_j__i_.interface.new_socket(
                name="i", in_out="INPUT", socket_type="NodeSocketInt"
            )
            i_socket.subtype = "NONE"
            i_socket.default_value = 0
            i_socket.min_value = 0
            i_socket.max_value = 2147483647
            i_socket.attribute_domain = "POINT"
            i_socket.hide_value = True

            # Socket j
            j_socket = _hbond_i__j__and_hbond_j__i_.interface.new_socket(
                name="j", in_out="INPUT", socket_type="NodeSocketInt"
            )
            j_socket.subtype = "NONE"
            j_socket.default_value = 0
            j_socket.min_value = 0
            j_socket.max_value = 2147483647
            j_socket.attribute_domain = "POINT"
            j_socket.hide_value = True

            # initialize _hbond_i__j__and_hbond_j__i_ nodes
            # node Group Output
            group_output_174 = _hbond_i__j__and_hbond_j__i_.nodes.new("NodeGroupOutput")
            group_output_174.name = "Group Output"
            group_output_174.is_active_output = True

            # node Group Input
            group_input_171 = _hbond_i__j__and_hbond_j__i_.nodes.new("NodeGroupInput")
            group_input_171.name = "Group Input"

            # node Group.010
            group_010_6 = _hbond_i__j__and_hbond_j__i_.nodes.new("GeometryNodeGroup")
            group_010_6.name = "Group.010"
            group_010_6.node_tree = hbond_backbone_check
            # Socket_5
            group_010_6.inputs[1].default_value = 0
            # Socket_6
            group_010_6.inputs[3].default_value = 0

            # node Group.011
            group_011_6 = _hbond_i__j__and_hbond_j__i_.nodes.new("GeometryNodeGroup")
            group_011_6.name = "Group.011"
            group_011_6.node_tree = hbond_backbone_check
            # Socket_5
            group_011_6.inputs[1].default_value = 0
            # Socket_6
            group_011_6.inputs[3].default_value = 0

            # node Frame
            frame_22 = _hbond_i__j__and_hbond_j__i_.nodes.new("NodeFrame")
            frame_22.label = "Check Backbone O is bonded to an NH"
            frame_22.name = "Frame"
            frame_22.label_size = 20
            frame_22.shrink = True

            # node Frame.001
            frame_001_8 = _hbond_i__j__and_hbond_j__i_.nodes.new("NodeFrame")
            frame_001_8.label = "Check Backbone NH is bonded to an O"
            frame_001_8.name = "Frame.001"
            frame_001_8.label_size = 20
            frame_001_8.shrink = True

            # node Boolean Math.003
            boolean_math_003_12 = _hbond_i__j__and_hbond_j__i_.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_12.name = "Boolean Math.003"
            boolean_math_003_12.operation = "AND"

            # node Group.012
            group_012_5 = _hbond_i__j__and_hbond_j__i_.nodes.new("GeometryNodeGroup")
            group_012_5.name = "Group.012"
            group_012_5.node_tree = hbond_backbone_check_backup
            # Socket_3
            group_012_5.inputs[0].default_value = 0
            # Socket_5
            group_012_5.inputs[1].default_value = 0
            # Socket_0
            group_012_5.inputs[2].default_value = 0
            # Socket_6
            group_012_5.inputs[3].default_value = 0

            # Set parents
            group_010_6.parent = frame_001_8
            group_011_6.parent = frame_22

            # Set locations
            group_output_174.location = (640.0, 180.0)
            group_input_171.location = (-235.75640869140625, 47.462432861328125)
            group_010_6.location = (-640.0, 40.0)
            group_011_6.location = (-640.0, -220.0)
            frame_22.location = (635.0, 20.0)
            frame_001_8.location = (630.0, 140.0)
            boolean_math_003_12.location = (435.0, 180.0)
            group_012_5.location = (-20.0, 520.0)

            # Set dimensions
            group_output_174.width, group_output_174.height = 140.0, 100.0
            group_input_171.width, group_input_171.height = 140.0, 100.0
            group_010_6.width, group_010_6.height = 267.0645751953125, 100.0
            group_011_6.width, group_011_6.height = 267.0645751953125, 100.0
            frame_22.width, frame_22.height = 327.0645751953125, 309.0
            frame_001_8.width, frame_001_8.height = 327.0645751953125, 309.0
            boolean_math_003_12.width, boolean_math_003_12.height = 140.0, 100.0
            group_012_5.width, group_012_5.height = 267.0645751953125, 100.0

            # initialize _hbond_i__j__and_hbond_j__i_ links
            # group_010_6.Is Bonded -> boolean_math_003_12.Boolean
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_010_6.outputs[0], boolean_math_003_12.inputs[0]
            )
            # group_011_6.Is Bonded -> boolean_math_003_12.Boolean
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_011_6.outputs[0], boolean_math_003_12.inputs[1]
            )
            # boolean_math_003_12.Boolean -> group_output_174.Boolean
            _hbond_i__j__and_hbond_j__i_.links.new(
                boolean_math_003_12.outputs[0], group_output_174.inputs[0]
            )
            # group_input_171.j -> group_010_6.NH Index
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_input_171.outputs[1], group_010_6.inputs[2]
            )
            # group_input_171.j -> group_011_6.CO Index
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_input_171.outputs[1], group_011_6.inputs[0]
            )
            # group_input_171.i -> group_010_6.CO Index
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_input_171.outputs[0], group_010_6.inputs[0]
            )
            # group_input_171.i -> group_011_6.NH Index
            _hbond_i__j__and_hbond_j__i_.links.new(
                group_input_171.outputs[0], group_011_6.inputs[2]
            )
            return _hbond_i__j__and_hbond_j__i_

        _hbond_i__j__and_hbond_j__i_ = _hbond_i__j__and_hbond_j__i__node_group()

        # initialize _hbond_i___1__j___1__and_hbond_j___1__i___1_ node group
        def _hbond_i___1__j___1__and_hbond_j___1__i___1__node_group():
            _hbond_i___1__j___1__and_hbond_j___1__i___1_ = bpy.data.node_groups.new(
                type="GeometryNodeTree",
                name=".HBond(i - 1, j + 1) and HBond(j - 1, i + 1)",
            )

            _hbond_i___1__j___1__and_hbond_j___1__i___1_.color_tag = "NONE"
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.description = ""

            # _hbond_i___1__j___1__and_hbond_j___1__i___1_ interface
            # Socket Boolean
            boolean_socket_15 = (
                _hbond_i___1__j___1__and_hbond_j___1__i___1_.interface.new_socket(
                    name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
                )
            )
            boolean_socket_15.attribute_domain = "POINT"

            # Socket i
            i_socket_1 = (
                _hbond_i___1__j___1__and_hbond_j___1__i___1_.interface.new_socket(
                    name="i", in_out="INPUT", socket_type="NodeSocketInt"
                )
            )
            i_socket_1.subtype = "NONE"
            i_socket_1.default_value = 0
            i_socket_1.min_value = 0
            i_socket_1.max_value = 2147483647
            i_socket_1.attribute_domain = "POINT"
            i_socket_1.hide_value = True

            # Socket j
            j_socket_1 = (
                _hbond_i___1__j___1__and_hbond_j___1__i___1_.interface.new_socket(
                    name="j", in_out="INPUT", socket_type="NodeSocketInt"
                )
            )
            j_socket_1.subtype = "NONE"
            j_socket_1.default_value = 0
            j_socket_1.min_value = 0
            j_socket_1.max_value = 2147483647
            j_socket_1.attribute_domain = "POINT"
            j_socket_1.hide_value = True

            # initialize _hbond_i___1__j___1__and_hbond_j___1__i___1_ nodes
            # node Group Output
            group_output_175 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "NodeGroupOutput"
            )
            group_output_175.name = "Group Output"
            group_output_175.is_active_output = True

            # node Group Input
            group_input_172 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "NodeGroupInput"
            )
            group_input_172.name = "Group Input"

            # node Group.010
            group_010_7 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_010_7.name = "Group.010"
            group_010_7.node_tree = hbond_backbone_check
            # Socket_5
            group_010_7.inputs[1].default_value = -1
            # Socket_6
            group_010_7.inputs[3].default_value = 1

            # node Group.011
            group_011_7 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_011_7.name = "Group.011"
            group_011_7.node_tree = hbond_backbone_check
            # Socket_5
            group_011_7.inputs[1].default_value = -1
            # Socket_6
            group_011_7.inputs[3].default_value = 1

            # node Frame
            frame_23 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "NodeFrame"
            )
            frame_23.label = "Check Backbone O is bonded to an NH"
            frame_23.name = "Frame"
            frame_23.label_size = 20
            frame_23.shrink = True

            # node Frame.001
            frame_001_9 = _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                "NodeFrame"
            )
            frame_001_9.label = "Check Backbone NH is bonded to an O"
            frame_001_9.name = "Frame.001"
            frame_001_9.label_size = 20
            frame_001_9.shrink = True

            # node Boolean Math.003
            boolean_math_003_13 = (
                _hbond_i___1__j___1__and_hbond_j___1__i___1_.nodes.new(
                    "FunctionNodeBooleanMath"
                )
            )
            boolean_math_003_13.name = "Boolean Math.003"
            boolean_math_003_13.operation = "AND"

            # Set parents
            group_010_7.parent = frame_001_9
            group_011_7.parent = frame_23

            # Set locations
            group_output_175.location = (625.0, 0.0)
            group_input_172.location = (-394.84100341796875, -236.38262939453125)
            group_010_7.location = (-655.0, 40.0)
            group_011_7.location = (-640.0, -220.0)
            frame_23.location = (635.0, 20.0)
            frame_001_9.location = (655.0, 120.0)
            boolean_math_003_13.location = (435.0, 180.0)

            # Set dimensions
            group_output_175.width, group_output_175.height = 140.0, 100.0
            group_input_172.width, group_input_172.height = 140.0, 100.0
            group_010_7.width, group_010_7.height = 267.0645751953125, 100.0
            group_011_7.width, group_011_7.height = 267.0645751953125, 100.0
            frame_23.width, frame_23.height = 327.0645751953125, 309.0
            frame_001_9.width, frame_001_9.height = 327.0645751953125, 309.0
            boolean_math_003_13.width, boolean_math_003_13.height = 140.0, 100.0

            # initialize _hbond_i___1__j___1__and_hbond_j___1__i___1_ links
            # group_010_7.Is Bonded -> boolean_math_003_13.Boolean
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_010_7.outputs[0], boolean_math_003_13.inputs[0]
            )
            # group_011_7.Is Bonded -> boolean_math_003_13.Boolean
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_011_7.outputs[0], boolean_math_003_13.inputs[1]
            )
            # boolean_math_003_13.Boolean -> group_output_175.Boolean
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                boolean_math_003_13.outputs[0], group_output_175.inputs[0]
            )
            # group_input_172.j -> group_010_7.NH Index
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_input_172.outputs[1], group_010_7.inputs[2]
            )
            # group_input_172.j -> group_011_7.CO Index
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_input_172.outputs[1], group_011_7.inputs[0]
            )
            # group_input_172.i -> group_010_7.CO Index
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_input_172.outputs[0], group_010_7.inputs[0]
            )
            # group_input_172.i -> group_011_7.NH Index
            _hbond_i___1__j___1__and_hbond_j___1__i___1_.links.new(
                group_input_172.outputs[0], group_011_7.inputs[2]
            )
            return _hbond_i___1__j___1__and_hbond_j___1__i___1_

        _hbond_i___1__j___1__and_hbond_j___1__i___1_ = (
            _hbond_i___1__j___1__and_hbond_j___1__i___1__node_group()
        )

        # initialize _hbond_i___1_j__and_hbond_j_i___1_ node group
        def _hbond_i___1_j__and_hbond_j_i___1__node_group():
            _hbond_i___1_j__and_hbond_j_i___1_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".Hbond(i - 1,j) and Hbond(j,i + 1)"
            )

            _hbond_i___1_j__and_hbond_j_i___1_.color_tag = "NONE"
            _hbond_i___1_j__and_hbond_j_i___1_.description = ""

            # _hbond_i___1_j__and_hbond_j_i___1_ interface
            # Socket Boolean
            boolean_socket_16 = _hbond_i___1_j__and_hbond_j_i___1_.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_16.attribute_domain = "POINT"

            # Socket i
            i_socket_2 = _hbond_i___1_j__and_hbond_j_i___1_.interface.new_socket(
                name="i", in_out="INPUT", socket_type="NodeSocketInt"
            )
            i_socket_2.subtype = "NONE"
            i_socket_2.default_value = 0
            i_socket_2.min_value = 0
            i_socket_2.max_value = 2147483647
            i_socket_2.attribute_domain = "POINT"
            i_socket_2.hide_value = True

            # Socket j
            j_socket_2 = _hbond_i___1_j__and_hbond_j_i___1_.interface.new_socket(
                name="j", in_out="INPUT", socket_type="NodeSocketInt"
            )
            j_socket_2.subtype = "NONE"
            j_socket_2.default_value = 0
            j_socket_2.min_value = 0
            j_socket_2.max_value = 2147483647
            j_socket_2.attribute_domain = "POINT"
            j_socket_2.hide_value = True

            # initialize _hbond_i___1_j__and_hbond_j_i___1_ nodes
            # node Group Output
            group_output_176 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new(
                "NodeGroupOutput"
            )
            group_output_176.name = "Group Output"
            group_output_176.is_active_output = True

            # node Group Input
            group_input_173 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new(
                "NodeGroupInput"
            )
            group_input_173.name = "Group Input"

            # node Group.010
            group_010_8 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_010_8.name = "Group.010"
            group_010_8.node_tree = hbond_backbone_check
            # Socket_5
            group_010_8.inputs[1].default_value = -1
            # Socket_6
            group_010_8.inputs[3].default_value = 0

            # node Group.011
            group_011_8 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_011_8.name = "Group.011"
            group_011_8.node_tree = hbond_backbone_check
            # Socket_5
            group_011_8.inputs[1].default_value = 0
            # Socket_6
            group_011_8.inputs[3].default_value = 1

            # node Frame
            frame_24 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new("NodeFrame")
            frame_24.label = "Check Backbone O is bonded to an NH"
            frame_24.name = "Frame"
            frame_24.label_size = 20
            frame_24.shrink = True

            # node Frame.001
            frame_001_10 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new("NodeFrame")
            frame_001_10.label = "Check Backbone NH is bonded to an O"
            frame_001_10.name = "Frame.001"
            frame_001_10.label_size = 20
            frame_001_10.shrink = True

            # node Boolean Math.003
            boolean_math_003_14 = _hbond_i___1_j__and_hbond_j_i___1_.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_14.name = "Boolean Math.003"
            boolean_math_003_14.operation = "AND"

            # Set parents
            group_010_8.parent = frame_001_10
            group_011_8.parent = frame_24

            # Set locations
            group_output_176.location = (625.0, 0.0)
            group_input_173.location = (-373.2626953125, 13.94732666015625)
            group_010_8.location = (-640.0, 40.0)
            group_011_8.location = (-640.0, -220.0)
            frame_24.location = (635.0, 20.0)
            frame_001_10.location = (655.0, 120.0)
            boolean_math_003_14.location = (435.0, 180.0)

            # Set dimensions
            group_output_176.width, group_output_176.height = 140.0, 100.0
            group_input_173.width, group_input_173.height = 140.0, 100.0
            group_010_8.width, group_010_8.height = 267.0645751953125, 100.0
            group_011_8.width, group_011_8.height = 267.0645751953125, 100.0
            frame_24.width, frame_24.height = 327.0645751953125, 309.0
            frame_001_10.width, frame_001_10.height = 327.0645751953125, 309.0
            boolean_math_003_14.width, boolean_math_003_14.height = 140.0, 100.0

            # initialize _hbond_i___1_j__and_hbond_j_i___1_ links
            # group_010_8.Is Bonded -> boolean_math_003_14.Boolean
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_010_8.outputs[0], boolean_math_003_14.inputs[0]
            )
            # group_011_8.Is Bonded -> boolean_math_003_14.Boolean
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_011_8.outputs[0], boolean_math_003_14.inputs[1]
            )
            # boolean_math_003_14.Boolean -> group_output_176.Boolean
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                boolean_math_003_14.outputs[0], group_output_176.inputs[0]
            )
            # group_input_173.j -> group_010_8.NH Index
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_input_173.outputs[1], group_010_8.inputs[2]
            )
            # group_input_173.j -> group_011_8.CO Index
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_input_173.outputs[1], group_011_8.inputs[0]
            )
            # group_input_173.i -> group_010_8.CO Index
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_input_173.outputs[0], group_010_8.inputs[0]
            )
            # group_input_173.i -> group_011_8.NH Index
            _hbond_i___1_j__and_hbond_j_i___1_.links.new(
                group_input_173.outputs[0], group_011_8.inputs[2]
            )
            return _hbond_i___1_j__and_hbond_j_i___1_

        _hbond_i___1_j__and_hbond_j_i___1_ = (
            _hbond_i___1_j__and_hbond_j_i___1__node_group()
        )

        # initialize _hbond_j___1_i_and_hbond_i_j___1_ node group
        def _hbond_j___1_i_and_hbond_i_j___1__node_group():
            _hbond_j___1_i_and_hbond_i_j___1_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".Hbond(j - 1,i)and Hbond(i,j + 1)"
            )

            _hbond_j___1_i_and_hbond_i_j___1_.color_tag = "NONE"
            _hbond_j___1_i_and_hbond_i_j___1_.description = ""

            # _hbond_j___1_i_and_hbond_i_j___1_ interface
            # Socket Boolean
            boolean_socket_17 = _hbond_j___1_i_and_hbond_i_j___1_.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_17.attribute_domain = "POINT"

            # Socket i
            i_socket_3 = _hbond_j___1_i_and_hbond_i_j___1_.interface.new_socket(
                name="i", in_out="INPUT", socket_type="NodeSocketInt"
            )
            i_socket_3.subtype = "NONE"
            i_socket_3.default_value = 0
            i_socket_3.min_value = 0
            i_socket_3.max_value = 2147483647
            i_socket_3.attribute_domain = "POINT"
            i_socket_3.hide_value = True

            # Socket j
            j_socket_3 = _hbond_j___1_i_and_hbond_i_j___1_.interface.new_socket(
                name="j", in_out="INPUT", socket_type="NodeSocketInt"
            )
            j_socket_3.subtype = "NONE"
            j_socket_3.default_value = 0
            j_socket_3.min_value = 0
            j_socket_3.max_value = 2147483647
            j_socket_3.attribute_domain = "POINT"
            j_socket_3.hide_value = True

            # initialize _hbond_j___1_i_and_hbond_i_j___1_ nodes
            # node Group Output
            group_output_177 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new(
                "NodeGroupOutput"
            )
            group_output_177.name = "Group Output"
            group_output_177.is_active_output = True

            # node Group Input
            group_input_174 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new(
                "NodeGroupInput"
            )
            group_input_174.name = "Group Input"

            # node Group.010
            group_010_9 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_010_9.name = "Group.010"
            group_010_9.node_tree = hbond_backbone_check
            # Socket_5
            group_010_9.inputs[1].default_value = -1
            # Socket_6
            group_010_9.inputs[3].default_value = 0

            # node Group.011
            group_011_9 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new(
                "GeometryNodeGroup"
            )
            group_011_9.name = "Group.011"
            group_011_9.node_tree = hbond_backbone_check
            # Socket_5
            group_011_9.inputs[1].default_value = 0
            # Socket_6
            group_011_9.inputs[3].default_value = 1

            # node Frame
            frame_25 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new("NodeFrame")
            frame_25.label = "Check Backbone O is bonded to an NH"
            frame_25.name = "Frame"
            frame_25.label_size = 20
            frame_25.shrink = True

            # node Frame.001
            frame_001_11 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new("NodeFrame")
            frame_001_11.label = "Check Backbone NH is bonded to an O"
            frame_001_11.name = "Frame.001"
            frame_001_11.label_size = 20
            frame_001_11.shrink = True

            # node Boolean Math.003
            boolean_math_003_15 = _hbond_j___1_i_and_hbond_i_j___1_.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_15.name = "Boolean Math.003"
            boolean_math_003_15.operation = "AND"

            # Set parents
            group_010_9.parent = frame_001_11
            group_011_9.parent = frame_25

            # Set locations
            group_output_177.location = (625.0, 0.0)
            group_input_174.location = (-360.0, 120.0)
            group_010_9.location = (-640.0, 40.0)
            group_011_9.location = (-640.0, -220.0)
            frame_25.location = (635.0, 20.0)
            frame_001_11.location = (655.0, 120.0)
            boolean_math_003_15.location = (435.0, 180.0)

            # Set dimensions
            group_output_177.width, group_output_177.height = 140.0, 100.0
            group_input_174.width, group_input_174.height = 140.0, 100.0
            group_010_9.width, group_010_9.height = 267.0645751953125, 100.0
            group_011_9.width, group_011_9.height = 267.0645751953125, 100.0
            frame_25.width, frame_25.height = 327.0645751953125, 309.0
            frame_001_11.width, frame_001_11.height = 327.0645751953125, 309.0
            boolean_math_003_15.width, boolean_math_003_15.height = 140.0, 100.0

            # initialize _hbond_j___1_i_and_hbond_i_j___1_ links
            # group_010_9.Is Bonded -> boolean_math_003_15.Boolean
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_010_9.outputs[0], boolean_math_003_15.inputs[0]
            )
            # group_011_9.Is Bonded -> boolean_math_003_15.Boolean
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_011_9.outputs[0], boolean_math_003_15.inputs[1]
            )
            # boolean_math_003_15.Boolean -> group_output_177.Boolean
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                boolean_math_003_15.outputs[0], group_output_177.inputs[0]
            )
            # group_input_174.j -> group_011_9.NH Index
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_input_174.outputs[1], group_011_9.inputs[2]
            )
            # group_input_174.j -> group_010_9.CO Index
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_input_174.outputs[1], group_010_9.inputs[0]
            )
            # group_input_174.i -> group_010_9.NH Index
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_input_174.outputs[0], group_010_9.inputs[2]
            )
            # group_input_174.i -> group_011_9.CO Index
            _hbond_j___1_i_and_hbond_i_j___1_.links.new(
                group_input_174.outputs[0], group_011_9.inputs[0]
            )
            return _hbond_j___1_i_and_hbond_i_j___1_

        _hbond_j___1_i_and_hbond_i_j___1_ = (
            _hbond_j___1_i_and_hbond_i_j___1__node_group()
        )

        # initialize _dssp_sheet_checks node group
        def _dssp_sheet_checks_node_group():
            _dssp_sheet_checks = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".DSSP Sheet Checks"
            )

            _dssp_sheet_checks.color_tag = "NONE"
            _dssp_sheet_checks.description = ""

            # _dssp_sheet_checks interface
            # Socket Boolean
            boolean_socket_18 = _dssp_sheet_checks.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_18.attribute_domain = "POINT"

            # Socket j
            j_socket_4 = _dssp_sheet_checks.interface.new_socket(
                name="j", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            j_socket_4.subtype = "NONE"
            j_socket_4.default_value = 0
            j_socket_4.min_value = -2147483648
            j_socket_4.max_value = 2147483647
            j_socket_4.attribute_domain = "POINT"

            # Socket Index
            index_socket_13 = _dssp_sheet_checks.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_13.subtype = "NONE"
            index_socket_13.default_value = 0
            index_socket_13.min_value = 0
            index_socket_13.max_value = 2147483647
            index_socket_13.attribute_domain = "POINT"
            index_socket_13.hide_value = True

            # Socket j
            j_socket_5 = _dssp_sheet_checks.interface.new_socket(
                name="j", in_out="INPUT", socket_type="NodeSocketInt"
            )
            j_socket_5.subtype = "NONE"
            j_socket_5.default_value = 0
            j_socket_5.min_value = -2147483648
            j_socket_5.max_value = 2147483647
            j_socket_5.attribute_domain = "POINT"

            # initialize _dssp_sheet_checks nodes
            # node Group Output
            group_output_178 = _dssp_sheet_checks.nodes.new("NodeGroupOutput")
            group_output_178.name = "Group Output"
            group_output_178.is_active_output = True

            # node Group Input
            group_input_175 = _dssp_sheet_checks.nodes.new("NodeGroupInput")
            group_input_175.name = "Group Input"

            # node Group.001
            group_001_32 = _dssp_sheet_checks.nodes.new("GeometryNodeGroup")
            group_001_32.name = "Group.001"
            group_001_32.node_tree = _hbond_i__j__and_hbond_j__i_

            # node Group.002
            group_002_20 = _dssp_sheet_checks.nodes.new("GeometryNodeGroup")
            group_002_20.name = "Group.002"
            group_002_20.node_tree = _hbond_i___1__j___1__and_hbond_j___1__i___1_

            # node Boolean Math
            boolean_math_40 = _dssp_sheet_checks.nodes.new("FunctionNodeBooleanMath")
            boolean_math_40.name = "Boolean Math"
            boolean_math_40.operation = "OR"

            # node Group.004
            group_004_11 = _dssp_sheet_checks.nodes.new("GeometryNodeGroup")
            group_004_11.name = "Group.004"
            group_004_11.node_tree = _hbond_i___1_j__and_hbond_j_i___1_

            # node Frame
            frame_26 = _dssp_sheet_checks.nodes.new("NodeFrame")
            frame_26.label = "Anti-parallel Bridge"
            frame_26.name = "Frame"
            frame_26.label_size = 20
            frame_26.shrink = True

            # node Frame.001
            frame_001_12 = _dssp_sheet_checks.nodes.new("NodeFrame")
            frame_001_12.label = "Paralell Bridge"
            frame_001_12.name = "Frame.001"
            frame_001_12.label_size = 20
            frame_001_12.shrink = True

            # node Boolean Math.001
            boolean_math_001_32 = _dssp_sheet_checks.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_32.name = "Boolean Math.001"
            boolean_math_001_32.operation = "OR"

            # node Boolean Math.002
            boolean_math_002_21 = _dssp_sheet_checks.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_21.name = "Boolean Math.002"
            boolean_math_002_21.operation = "OR"

            # node Group.005
            group_005_12 = _dssp_sheet_checks.nodes.new("GeometryNodeGroup")
            group_005_12.name = "Group.005"
            group_005_12.node_tree = _hbond_j___1_i_and_hbond_i_j___1_

            # Set parents
            group_001_32.parent = frame_26
            group_002_20.parent = frame_26
            boolean_math_40.parent = frame_26
            group_004_11.parent = frame_001_12
            boolean_math_001_32.parent = frame_001_12
            group_005_12.parent = frame_001_12

            # Set locations
            group_output_178.location = (570.0, 0.0)
            group_input_175.location = (-657.7005004882812, 1.8694610595703125)
            group_001_32.location = (-800.0, 160.0)
            group_002_20.location = (-800.0, 0.0)
            boolean_math_40.location = (-440.0, 160.0)
            group_004_11.location = (-800.0, -300.0)
            frame_26.location = (580.0, 180.0)
            frame_001_12.location = (580.0, 180.0)
            boolean_math_001_32.location = (-440.0, -300.0)
            boolean_math_002_21.location = (380.0, 140.0)
            group_005_12.location = (-800.0, -460.0)

            # Set dimensions
            group_output_178.width, group_output_178.height = 140.0, 100.0
            group_input_175.width, group_input_175.height = 140.0, 100.0
            group_001_32.width, group_001_32.height = 333.0748291015625, 100.0
            group_002_20.width, group_002_20.height = 333.0748291015625, 100.0
            boolean_math_40.width, boolean_math_40.height = 140.0, 100.0
            group_004_11.width, group_004_11.height = 333.0748291015625, 100.0
            frame_26.width, frame_26.height = 560.0, 350.0
            frame_001_12.width, frame_001_12.height = 560.0, 350.0
            boolean_math_001_32.width, boolean_math_001_32.height = 140.0, 100.0
            boolean_math_002_21.width, boolean_math_002_21.height = 140.0, 100.0
            group_005_12.width, group_005_12.height = 333.0748291015625, 100.0

            # initialize _dssp_sheet_checks links
            # group_001_32.Boolean -> boolean_math_40.Boolean
            _dssp_sheet_checks.links.new(
                group_001_32.outputs[0], boolean_math_40.inputs[0]
            )
            # group_input_175.j -> group_002_20.j
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[1], group_002_20.inputs[1]
            )
            # boolean_math_001_32.Boolean -> boolean_math_002_21.Boolean
            _dssp_sheet_checks.links.new(
                boolean_math_001_32.outputs[0], boolean_math_002_21.inputs[1]
            )
            # group_004_11.Boolean -> boolean_math_001_32.Boolean
            _dssp_sheet_checks.links.new(
                group_004_11.outputs[0], boolean_math_001_32.inputs[0]
            )
            # group_input_175.j -> group_005_12.j
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[1], group_005_12.inputs[1]
            )
            # group_002_20.Boolean -> boolean_math_40.Boolean
            _dssp_sheet_checks.links.new(
                group_002_20.outputs[0], boolean_math_40.inputs[1]
            )
            # group_input_175.j -> group_001_32.j
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[1], group_001_32.inputs[1]
            )
            # boolean_math_40.Boolean -> boolean_math_002_21.Boolean
            _dssp_sheet_checks.links.new(
                boolean_math_40.outputs[0], boolean_math_002_21.inputs[0]
            )
            # group_005_12.Boolean -> boolean_math_001_32.Boolean
            _dssp_sheet_checks.links.new(
                group_005_12.outputs[0], boolean_math_001_32.inputs[1]
            )
            # group_input_175.j -> group_004_11.j
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[1], group_004_11.inputs[1]
            )
            # boolean_math_002_21.Boolean -> group_output_178.Boolean
            _dssp_sheet_checks.links.new(
                boolean_math_002_21.outputs[0], group_output_178.inputs[0]
            )
            # group_input_175.Index -> group_001_32.i
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[0], group_001_32.inputs[0]
            )
            # group_input_175.Index -> group_002_20.i
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[0], group_002_20.inputs[0]
            )
            # group_input_175.Index -> group_004_11.i
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[0], group_004_11.inputs[0]
            )
            # group_input_175.Index -> group_005_12.i
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[0], group_005_12.inputs[0]
            )
            # group_input_175.j -> group_output_178.j
            _dssp_sheet_checks.links.new(
                group_input_175.outputs[1], group_output_178.inputs[1]
            )
            return _dssp_sheet_checks

        _dssp_sheet_checks = _dssp_sheet_checks_node_group()

        # initialize _mn_topo_calc_sheet node group
        def _mn_topo_calc_sheet_node_group():
            _mn_topo_calc_sheet = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_topo_calc_sheet"
            )

            _mn_topo_calc_sheet.color_tag = "NONE"
            _mn_topo_calc_sheet.description = ""

            # _mn_topo_calc_sheet interface
            # Socket Geometry
            geometry_socket_35 = _mn_topo_calc_sheet.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_35.attribute_domain = "POINT"

            # Socket Attribute
            attribute_socket_1 = _mn_topo_calc_sheet.interface.new_socket(
                name="Attribute", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            attribute_socket_1.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_36 = _mn_topo_calc_sheet.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_36.attribute_domain = "POINT"

            # initialize _mn_topo_calc_sheet nodes
            # node Group Output
            group_output_179 = _mn_topo_calc_sheet.nodes.new("NodeGroupOutput")
            group_output_179.name = "Group Output"
            group_output_179.is_active_output = True

            # node Group Input
            group_input_176 = _mn_topo_calc_sheet.nodes.new("NodeGroupInput")
            group_input_176.name = "Group Input"

            # node Capture Attribute.002
            capture_attribute_002_2 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_002_2.name = "Capture Attribute.002"
            capture_attribute_002_2.active_index = 0
            capture_attribute_002_2.capture_items.clear()
            capture_attribute_002_2.capture_items.new("FLOAT", "Value")
            capture_attribute_002_2.capture_items["Value"].data_type = "BOOLEAN"
            capture_attribute_002_2.domain = "POINT"

            # node Group.003
            group_003_15 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_003_15.name = "Group.003"
            group_003_15.node_tree = boolean_run_mask
            # Socket_2
            group_003_15.inputs[1].default_value = 0
            # Socket_3
            group_003_15.inputs[2].default_value = 3
            # Socket_6
            group_003_15.inputs[3].default_value = 0

            # node Group
            group_49 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_49.name = "Group"
            group_49.mute = True
            group_49.node_tree = boolean_run_fill
            # Socket_2
            group_49.inputs[1].default_value = 1

            # node Group.006
            group_006_9 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_006_9.name = "Group.006"
            group_006_9.node_tree = self_sample_proximity

            # node Group.007
            group_007_8 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_007_8.name = "Group.007"
            group_007_8.node_tree = mn_topo_backbone
            # Socket_3
            group_007_8.inputs[0].default_value = 0

            # node Capture Attribute
            capture_attribute_13 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_13.name = "Capture Attribute"
            capture_attribute_13.active_index = 3
            capture_attribute_13.capture_items.clear()
            capture_attribute_13.capture_items.new("FLOAT", "Value")
            capture_attribute_13.capture_items["Value"].data_type = "INT"
            capture_attribute_13.capture_items.new("FLOAT", "Closest Index")
            capture_attribute_13.capture_items["Closest Index"].data_type = "INT"
            capture_attribute_13.capture_items.new("FLOAT", "Closest Index.001")
            capture_attribute_13.capture_items["Closest Index.001"].data_type = "INT"
            capture_attribute_13.capture_items.new("FLOAT", "Closest Index.002")
            capture_attribute_13.capture_items["Closest Index.002"].data_type = "INT"
            capture_attribute_13.domain = "POINT"

            # node Group.008
            group_008_8 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_008_8.name = "Group.008"
            group_008_8.node_tree = _dssp_sheet_checks
            # Socket_3
            group_008_8.inputs[0].default_value = 0

            # node Group.009
            group_009_8 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_009_8.name = "Group.009"
            group_009_8.node_tree = _dssp_sheet_checks
            # Socket_3
            group_009_8.inputs[0].default_value = 0

            # node Boolean Math
            boolean_math_41 = _mn_topo_calc_sheet.nodes.new("FunctionNodeBooleanMath")
            boolean_math_41.name = "Boolean Math"
            boolean_math_41.operation = "OR"

            # node Group.010
            group_010_10 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_010_10.name = "Group.010"
            group_010_10.node_tree = _dssp_sheet_checks
            # Socket_3
            group_010_10.inputs[0].default_value = 0

            # node Boolean Math.001
            boolean_math_001_33 = _mn_topo_calc_sheet.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_001_33.name = "Boolean Math.001"
            boolean_math_001_33.operation = "OR"

            # node Group.011
            group_011_10 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_011_10.name = "Group.011"
            group_011_10.node_tree = self_sample_proximity

            # node Group.012
            group_012_6 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_012_6.name = "Group.012"
            group_012_6.node_tree = mn_topo_backbone
            # Socket_3
            group_012_6.inputs[0].default_value = 0

            # node Vector Math
            vector_math_41 = _mn_topo_calc_sheet.nodes.new("ShaderNodeVectorMath")
            vector_math_41.name = "Vector Math"
            vector_math_41.operation = "SUBTRACT"

            # node Vector Math.001
            vector_math_001_24 = _mn_topo_calc_sheet.nodes.new("ShaderNodeVectorMath")
            vector_math_001_24.name = "Vector Math.001"
            vector_math_001_24.operation = "ADD"

            # node Vector Math.002
            vector_math_002_15 = _mn_topo_calc_sheet.nodes.new("ShaderNodeVectorMath")
            vector_math_002_15.name = "Vector Math.002"
            vector_math_002_15.operation = "SCALE"
            # Scale
            vector_math_002_15.inputs[3].default_value = 3.0

            # node Group.013
            group_013_3 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_013_3.name = "Group.013"
            group_013_3.node_tree = self_sample_proximity

            # node Group.014
            group_014_7 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_014_7.name = "Group.014"
            group_014_7.node_tree = self_sample_proximity

            # node Vector Math.003
            vector_math_003_12 = _mn_topo_calc_sheet.nodes.new("ShaderNodeVectorMath")
            vector_math_003_12.name = "Vector Math.003"
            vector_math_003_12.operation = "SUBTRACT"

            # node Group.015
            group_015_2 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_015_2.name = "Group.015"
            group_015_2.node_tree = _dssp_sheet_checks
            # Socket_3
            group_015_2.inputs[0].default_value = 0

            # node Boolean Math.002
            boolean_math_002_22 = _mn_topo_calc_sheet.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_002_22.name = "Boolean Math.002"
            boolean_math_002_22.operation = "OR"

            # node Group.016
            group_016_2 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_016_2.name = "Group.016"
            group_016_2.node_tree = _dssp_sheet_checks
            # Socket_3
            group_016_2.inputs[0].default_value = 0

            # node Boolean Math.003
            boolean_math_003_16 = _mn_topo_calc_sheet.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_003_16.name = "Boolean Math.003"
            boolean_math_003_16.operation = "OR"

            # node Group.017
            group_017_3 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_017_3.name = "Group.017"
            group_017_3.node_tree = _dssp_sheet_checks
            # Socket_3
            group_017_3.inputs[0].default_value = 0

            # node Reroute
            reroute_53 = _mn_topo_calc_sheet.nodes.new("NodeReroute")
            reroute_53.name = "Reroute"
            # node Boolean Math.004
            boolean_math_004_9 = _mn_topo_calc_sheet.nodes.new(
                "FunctionNodeBooleanMath"
            )
            boolean_math_004_9.name = "Boolean Math.004"
            boolean_math_004_9.operation = "OR"

            # node Store Named Attribute
            store_named_attribute_20 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_20.name = "Store Named Attribute"
            store_named_attribute_20.data_type = "INT"
            store_named_attribute_20.domain = "POINT"
            # Name
            store_named_attribute_20.inputs[2].default_value = "tmp_bonded_idx"

            # node Store Named Attribute.001
            store_named_attribute_001_8 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_8.name = "Store Named Attribute.001"
            store_named_attribute_001_8.data_type = "INT"
            store_named_attribute_001_8.domain = "POINT"
            # Name
            store_named_attribute_001_8.inputs[2].default_value = "tmp_bonded_idx"

            # node Store Named Attribute.002
            store_named_attribute_002_6 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_6.name = "Store Named Attribute.002"
            store_named_attribute_002_6.data_type = "INT"
            store_named_attribute_002_6.domain = "POINT"
            # Selection
            store_named_attribute_002_6.inputs[1].default_value = True
            # Name
            store_named_attribute_002_6.inputs[2].default_value = "tmp_bonded_idx"
            # Value
            store_named_attribute_002_6.inputs[3].default_value = -1

            # node Store Named Attribute.003
            store_named_attribute_003_4 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_4.name = "Store Named Attribute.003"
            store_named_attribute_003_4.data_type = "INT"
            store_named_attribute_003_4.domain = "POINT"
            # Name
            store_named_attribute_003_4.inputs[2].default_value = "tmp_bonded_idx"

            # node Store Named Attribute.004
            store_named_attribute_004_6 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_004_6.name = "Store Named Attribute.004"
            store_named_attribute_004_6.data_type = "INT"
            store_named_attribute_004_6.domain = "POINT"
            # Name
            store_named_attribute_004_6.inputs[2].default_value = "tmp_bonded_idx"

            # node Store Named Attribute.005
            store_named_attribute_005_5 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_005_5.name = "Store Named Attribute.005"
            store_named_attribute_005_5.data_type = "INT"
            store_named_attribute_005_5.domain = "POINT"
            # Name
            store_named_attribute_005_5.inputs[2].default_value = "tmp_bonded_idx"

            # node Store Named Attribute.006
            store_named_attribute_006_3 = _mn_topo_calc_sheet.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_006_3.name = "Store Named Attribute.006"
            store_named_attribute_006_3.data_type = "INT"
            store_named_attribute_006_3.domain = "POINT"
            # Name
            store_named_attribute_006_3.inputs[2].default_value = "tmp_bonded_idx"

            # node Group.001
            group_001_33 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_001_33.name = "Group.001"
            group_001_33.node_tree = offset_integer
            # Socket_1
            group_001_33.inputs[0].default_value = 0
            # Socket_2
            group_001_33.inputs[2].default_value = 1

            # node Math
            math_47 = _mn_topo_calc_sheet.nodes.new("ShaderNodeMath")
            math_47.name = "Math"
            math_47.operation = "ADD"
            math_47.use_clamp = False
            # Value_001
            math_47.inputs[1].default_value = -1.0

            # node Group.002
            group_002_21 = _mn_topo_calc_sheet.nodes.new("GeometryNodeGroup")
            group_002_21.name = "Group.002"
            group_002_21.node_tree = offset_integer
            # Socket_1
            group_002_21.inputs[0].default_value = 0
            # Socket_2
            group_002_21.inputs[2].default_value = 1

            # node Math.001
            math_001_31 = _mn_topo_calc_sheet.nodes.new("ShaderNodeMath")
            math_001_31.name = "Math.001"
            math_001_31.operation = "ADD"
            math_001_31.use_clamp = False
            # Value_001
            math_001_31.inputs[1].default_value = -1.0

            # Set locations
            group_output_179.location = (1360.0, 240.0)
            group_input_176.location = (-1780.0, 80.0)
            capture_attribute_002_2.location = (960.0, 240.0)
            group_003_15.location = (960.0, -80.0)
            group_49.location = (960.0, 60.0)
            group_006_9.location = (-1520.0, 20.0)
            group_007_8.location = (-2100.0, -60.0)
            capture_attribute_13.location = (-1240.0, 100.0)
            group_008_8.location = (-340.0, 20.0)
            group_009_8.location = (-340.0, -120.0)
            boolean_math_41.location = (40.0, 0.0)
            group_010_10.location = (-340.0, -260.0)
            boolean_math_001_33.location = (40.0, -140.0)
            group_011_10.location = (-1520.0, -320.0)
            group_012_6.location = (-2300.0, -280.0)
            vector_math_41.location = (-2060.0, -600.0)
            vector_math_001_24.location = (-1740.0, -600.0)
            vector_math_002_15.location = (-1900.0, -600.0)
            group_013_3.location = (-1520.0, -140.0)
            group_014_7.location = (-1520.0, -480.0)
            vector_math_003_12.location = (-1740.0, -740.0)
            group_015_2.location = (-340.0, -400.0)
            boolean_math_002_22.location = (40.0, -280.0)
            group_016_2.location = (-344.5273742675781, -540.385498046875)
            boolean_math_003_16.location = (40.0, -440.0)
            group_017_3.location = (-340.0, -680.0)
            reroute_53.location = (-740.0, -640.0)
            boolean_math_004_9.location = (40.0, -600.0)
            store_named_attribute_20.location = (-180.0, 240.0)
            store_named_attribute_001_8.location = (-20.0, 240.0)
            store_named_attribute_002_6.location = (-340.0, 240.0)
            store_named_attribute_003_4.location = (140.0, 240.0)
            store_named_attribute_004_6.location = (300.0, 240.0)
            store_named_attribute_005_5.location = (460.0, 240.0)
            store_named_attribute_006_3.location = (620.0, 240.0)
            group_001_33.location = (-680.0, -540.0)
            math_47.location = (-520.0, -540.0)
            group_002_21.location = (-680.0, -720.0)
            math_001_31.location = (-520.0, -720.0)

            # Set dimensions
            group_output_179.width, group_output_179.height = 140.0, 100.0
            group_input_176.width, group_input_176.height = 140.0, 100.0
            capture_attribute_002_2.width, capture_attribute_002_2.height = 140.0, 100.0
            group_003_15.width, group_003_15.height = 167.49020385742188, 100.0
            group_49.width, group_49.height = 140.0, 100.0
            group_006_9.width, group_006_9.height = 140.0, 100.0
            group_007_8.width, group_007_8.height = 140.0, 100.0
            capture_attribute_13.width, capture_attribute_13.height = 140.0, 100.0
            group_008_8.width, group_008_8.height = 140.0, 100.0
            group_009_8.width, group_009_8.height = 140.0, 100.0
            boolean_math_41.width, boolean_math_41.height = 140.0, 100.0
            group_010_10.width, group_010_10.height = 140.0, 100.0
            boolean_math_001_33.width, boolean_math_001_33.height = 140.0, 100.0
            group_011_10.width, group_011_10.height = 140.0, 100.0
            group_012_6.width, group_012_6.height = 140.0, 100.0
            vector_math_41.width, vector_math_41.height = 140.0, 100.0
            vector_math_001_24.width, vector_math_001_24.height = 140.0, 100.0
            vector_math_002_15.width, vector_math_002_15.height = 140.0, 100.0
            group_013_3.width, group_013_3.height = 140.0, 100.0
            group_014_7.width, group_014_7.height = 140.0, 100.0
            vector_math_003_12.width, vector_math_003_12.height = 140.0, 100.0
            group_015_2.width, group_015_2.height = 140.0, 100.0
            boolean_math_002_22.width, boolean_math_002_22.height = 140.0, 100.0
            group_016_2.width, group_016_2.height = 140.0, 100.0
            boolean_math_003_16.width, boolean_math_003_16.height = 140.0, 100.0
            group_017_3.width, group_017_3.height = 140.0, 100.0
            reroute_53.width, reroute_53.height = 16.0, 100.0
            boolean_math_004_9.width, boolean_math_004_9.height = 140.0, 100.0
            store_named_attribute_20.width, store_named_attribute_20.height = (
                140.0,
                100.0,
            )
            store_named_attribute_001_8.width, store_named_attribute_001_8.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002_6.width, store_named_attribute_002_6.height = (
                140.0,
                100.0,
            )
            store_named_attribute_003_4.width, store_named_attribute_003_4.height = (
                140.0,
                100.0,
            )
            store_named_attribute_004_6.width, store_named_attribute_004_6.height = (
                140.0,
                100.0,
            )
            store_named_attribute_005_5.width, store_named_attribute_005_5.height = (
                140.0,
                100.0,
            )
            store_named_attribute_006_3.width, store_named_attribute_006_3.height = (
                140.0,
                100.0,
            )
            group_001_33.width, group_001_33.height = 140.0, 100.0
            math_47.width, math_47.height = 140.0, 100.0
            group_002_21.width, group_002_21.height = 140.0, 100.0
            math_001_31.width, math_001_31.height = 140.0, 100.0

            # initialize _mn_topo_calc_sheet links
            # store_named_attribute_006_3.Geometry -> capture_attribute_002_2.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_006_3.outputs[0],
                capture_attribute_002_2.inputs[0],
            )
            # capture_attribute_002_2.Geometry -> group_output_179.Geometry
            _mn_topo_calc_sheet.links.new(
                capture_attribute_002_2.outputs[0], group_output_179.inputs[0]
            )
            # capture_attribute_002_2.Value -> group_output_179.Attribute
            _mn_topo_calc_sheet.links.new(
                capture_attribute_002_2.outputs[1], group_output_179.inputs[1]
            )
            # group_49.Boolean -> capture_attribute_002_2.Value
            _mn_topo_calc_sheet.links.new(
                group_49.outputs[0], capture_attribute_002_2.inputs[1]
            )
            # group_input_176.Geometry -> group_006_9.Input
            _mn_topo_calc_sheet.links.new(
                group_input_176.outputs[0], group_006_9.inputs[0]
            )
            # group_007_8.NH -> group_006_9.Target Position
            _mn_topo_calc_sheet.links.new(group_007_8.outputs[4], group_006_9.inputs[1])
            # group_007_8.O -> group_006_9.Self Position
            _mn_topo_calc_sheet.links.new(group_007_8.outputs[0], group_006_9.inputs[2])
            # group_input_176.Geometry -> capture_attribute_13.Geometry
            _mn_topo_calc_sheet.links.new(
                group_input_176.outputs[0], capture_attribute_13.inputs[0]
            )
            # group_006_9.Closest Index -> capture_attribute_13.Value
            _mn_topo_calc_sheet.links.new(
                group_006_9.outputs[0], capture_attribute_13.inputs[1]
            )
            # capture_attribute_13.Value -> group_008_8.j
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[1], group_008_8.inputs[1]
            )
            # group_008_8.Boolean -> boolean_math_41.Boolean
            _mn_topo_calc_sheet.links.new(
                group_008_8.outputs[0], boolean_math_41.inputs[0]
            )
            # group_003_15.Boolean -> group_49.Boolean
            _mn_topo_calc_sheet.links.new(group_003_15.outputs[0], group_49.inputs[0])
            # boolean_math_41.Boolean -> boolean_math_001_33.Boolean
            _mn_topo_calc_sheet.links.new(
                boolean_math_41.outputs[0], boolean_math_001_33.inputs[0]
            )
            # group_input_176.Geometry -> group_011_10.Input
            _mn_topo_calc_sheet.links.new(
                group_input_176.outputs[0], group_011_10.inputs[0]
            )
            # capture_attribute_13.Closest Index -> group_009_8.j
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[2], group_009_8.inputs[1]
            )
            # group_012_6.O -> vector_math_41.Vector
            _mn_topo_calc_sheet.links.new(
                group_012_6.outputs[0], vector_math_41.inputs[1]
            )
            # group_012_6.CA -> vector_math_001_24.Vector
            _mn_topo_calc_sheet.links.new(
                group_012_6.outputs[2], vector_math_001_24.inputs[0]
            )
            # vector_math_41.Vector -> vector_math_002_15.Vector
            _mn_topo_calc_sheet.links.new(
                vector_math_41.outputs[0], vector_math_002_15.inputs[0]
            )
            # vector_math_002_15.Vector -> vector_math_001_24.Vector
            _mn_topo_calc_sheet.links.new(
                vector_math_002_15.outputs[0], vector_math_001_24.inputs[1]
            )
            # group_012_6.CA -> group_011_10.Target Position
            _mn_topo_calc_sheet.links.new(
                group_012_6.outputs[2], group_011_10.inputs[1]
            )
            # vector_math_001_24.Vector -> group_011_10.Self Position
            _mn_topo_calc_sheet.links.new(
                vector_math_001_24.outputs[0], group_011_10.inputs[2]
            )
            # group_012_6.C -> vector_math_41.Vector
            _mn_topo_calc_sheet.links.new(
                group_012_6.outputs[1], vector_math_41.inputs[0]
            )
            # group_input_176.Geometry -> group_013_3.Input
            _mn_topo_calc_sheet.links.new(
                group_input_176.outputs[0], group_013_3.inputs[0]
            )
            # capture_attribute_13.Closest Index.001 -> group_010_10.j
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[3], group_010_10.inputs[1]
            )
            # group_012_6.NH -> group_013_3.Self Position
            _mn_topo_calc_sheet.links.new(group_012_6.outputs[4], group_013_3.inputs[2])
            # group_012_6.O -> group_013_3.Target Position
            _mn_topo_calc_sheet.links.new(group_012_6.outputs[0], group_013_3.inputs[1])
            # group_010_10.Boolean -> boolean_math_001_33.Boolean
            _mn_topo_calc_sheet.links.new(
                group_010_10.outputs[0], boolean_math_001_33.inputs[1]
            )
            # group_009_8.Boolean -> boolean_math_41.Boolean
            _mn_topo_calc_sheet.links.new(
                group_009_8.outputs[0], boolean_math_41.inputs[1]
            )
            # group_input_176.Geometry -> group_014_7.Input
            _mn_topo_calc_sheet.links.new(
                group_input_176.outputs[0], group_014_7.inputs[0]
            )
            # group_012_6.CA -> group_014_7.Target Position
            _mn_topo_calc_sheet.links.new(group_012_6.outputs[2], group_014_7.inputs[1])
            # group_012_6.CA -> vector_math_003_12.Vector
            _mn_topo_calc_sheet.links.new(
                group_012_6.outputs[2], vector_math_003_12.inputs[0]
            )
            # vector_math_002_15.Vector -> vector_math_003_12.Vector
            _mn_topo_calc_sheet.links.new(
                vector_math_002_15.outputs[0], vector_math_003_12.inputs[1]
            )
            # vector_math_003_12.Vector -> group_014_7.Self Position
            _mn_topo_calc_sheet.links.new(
                vector_math_003_12.outputs[0], group_014_7.inputs[2]
            )
            # capture_attribute_13.Closest Index.002 -> group_015_2.j
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[4], group_015_2.inputs[1]
            )
            # boolean_math_001_33.Boolean -> boolean_math_002_22.Boolean
            _mn_topo_calc_sheet.links.new(
                boolean_math_001_33.outputs[0], boolean_math_002_22.inputs[0]
            )
            # group_015_2.Boolean -> boolean_math_002_22.Boolean
            _mn_topo_calc_sheet.links.new(
                group_015_2.outputs[0], boolean_math_002_22.inputs[1]
            )
            # boolean_math_002_22.Boolean -> boolean_math_003_16.Boolean
            _mn_topo_calc_sheet.links.new(
                boolean_math_002_22.outputs[0], boolean_math_003_16.inputs[0]
            )
            # group_016_2.Boolean -> boolean_math_003_16.Boolean
            _mn_topo_calc_sheet.links.new(
                group_016_2.outputs[0], boolean_math_003_16.inputs[1]
            )
            # capture_attribute_13.Value -> reroute_53.Input
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[1], reroute_53.inputs[0]
            )
            # boolean_math_003_16.Boolean -> boolean_math_004_9.Boolean
            _mn_topo_calc_sheet.links.new(
                boolean_math_003_16.outputs[0], boolean_math_004_9.inputs[0]
            )
            # group_017_3.Boolean -> boolean_math_004_9.Boolean
            _mn_topo_calc_sheet.links.new(
                group_017_3.outputs[0], boolean_math_004_9.inputs[1]
            )
            # boolean_math_004_9.Boolean -> group_003_15.Boolean
            _mn_topo_calc_sheet.links.new(
                boolean_math_004_9.outputs[0], group_003_15.inputs[0]
            )
            # store_named_attribute_002_6.Geometry -> store_named_attribute_20.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_002_6.outputs[0],
                store_named_attribute_20.inputs[0],
            )
            # group_008_8.j -> store_named_attribute_20.Value
            _mn_topo_calc_sheet.links.new(
                group_008_8.outputs[1], store_named_attribute_20.inputs[3]
            )
            # group_008_8.Boolean -> store_named_attribute_20.Selection
            _mn_topo_calc_sheet.links.new(
                group_008_8.outputs[0], store_named_attribute_20.inputs[1]
            )
            # store_named_attribute_20.Geometry -> store_named_attribute_001_8.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_20.outputs[0],
                store_named_attribute_001_8.inputs[0],
            )
            # group_009_8.Boolean -> store_named_attribute_001_8.Selection
            _mn_topo_calc_sheet.links.new(
                group_009_8.outputs[0], store_named_attribute_001_8.inputs[1]
            )
            # group_009_8.j -> store_named_attribute_001_8.Value
            _mn_topo_calc_sheet.links.new(
                group_009_8.outputs[1], store_named_attribute_001_8.inputs[3]
            )
            # capture_attribute_13.Geometry -> store_named_attribute_002_6.Geometry
            _mn_topo_calc_sheet.links.new(
                capture_attribute_13.outputs[0], store_named_attribute_002_6.inputs[0]
            )
            # store_named_attribute_001_8.Geometry -> store_named_attribute_003_4.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_001_8.outputs[0],
                store_named_attribute_003_4.inputs[0],
            )
            # group_010_10.Boolean -> store_named_attribute_003_4.Selection
            _mn_topo_calc_sheet.links.new(
                group_010_10.outputs[0], store_named_attribute_003_4.inputs[1]
            )
            # group_010_10.j -> store_named_attribute_003_4.Value
            _mn_topo_calc_sheet.links.new(
                group_010_10.outputs[1], store_named_attribute_003_4.inputs[3]
            )
            # store_named_attribute_003_4.Geometry -> store_named_attribute_004_6.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_003_4.outputs[0],
                store_named_attribute_004_6.inputs[0],
            )
            # group_015_2.Boolean -> store_named_attribute_004_6.Selection
            _mn_topo_calc_sheet.links.new(
                group_015_2.outputs[0], store_named_attribute_004_6.inputs[1]
            )
            # group_015_2.j -> store_named_attribute_004_6.Value
            _mn_topo_calc_sheet.links.new(
                group_015_2.outputs[1], store_named_attribute_004_6.inputs[3]
            )
            # store_named_attribute_004_6.Geometry -> store_named_attribute_005_5.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_004_6.outputs[0],
                store_named_attribute_005_5.inputs[0],
            )
            # group_016_2.Boolean -> store_named_attribute_005_5.Selection
            _mn_topo_calc_sheet.links.new(
                group_016_2.outputs[0], store_named_attribute_005_5.inputs[1]
            )
            # group_016_2.j -> store_named_attribute_005_5.Value
            _mn_topo_calc_sheet.links.new(
                group_016_2.outputs[1], store_named_attribute_005_5.inputs[3]
            )
            # store_named_attribute_005_5.Geometry -> store_named_attribute_006_3.Geometry
            _mn_topo_calc_sheet.links.new(
                store_named_attribute_005_5.outputs[0],
                store_named_attribute_006_3.inputs[0],
            )
            # group_017_3.Boolean -> store_named_attribute_006_3.Selection
            _mn_topo_calc_sheet.links.new(
                group_017_3.outputs[0], store_named_attribute_006_3.inputs[1]
            )
            # group_017_3.j -> store_named_attribute_006_3.Value
            _mn_topo_calc_sheet.links.new(
                group_017_3.outputs[1], store_named_attribute_006_3.inputs[3]
            )
            # group_001_33.Value -> math_47.Value
            _mn_topo_calc_sheet.links.new(group_001_33.outputs[0], math_47.inputs[0])
            # reroute_53.Output -> group_001_33.Value
            _mn_topo_calc_sheet.links.new(reroute_53.outputs[0], group_001_33.inputs[1])
            # math_47.Value -> group_016_2.j
            _mn_topo_calc_sheet.links.new(math_47.outputs[0], group_016_2.inputs[1])
            # group_002_21.Value -> math_001_31.Value
            _mn_topo_calc_sheet.links.new(
                group_002_21.outputs[0], math_001_31.inputs[0]
            )
            # reroute_53.Output -> group_002_21.Value
            _mn_topo_calc_sheet.links.new(reroute_53.outputs[0], group_002_21.inputs[1])
            # math_001_31.Value -> group_017_3.j
            _mn_topo_calc_sheet.links.new(math_001_31.outputs[0], group_017_3.inputs[1])
            # group_013_3.Closest Index -> capture_attribute_13.Closest Index
            _mn_topo_calc_sheet.links.new(
                group_013_3.outputs[0], capture_attribute_13.inputs[2]
            )
            # group_011_10.Closest Index -> capture_attribute_13.Closest Index.001
            _mn_topo_calc_sheet.links.new(
                group_011_10.outputs[0], capture_attribute_13.inputs[3]
            )
            # group_014_7.Closest Index -> capture_attribute_13.Closest Index.002
            _mn_topo_calc_sheet.links.new(
                group_014_7.outputs[0], capture_attribute_13.inputs[4]
            )
            return _mn_topo_calc_sheet

        _mn_topo_calc_sheet = _mn_topo_calc_sheet_node_group()

        # initialize topology_dssp node group
        def topology_dssp_node_group():
            topology_dssp = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Topology DSSP"
            )

            topology_dssp.color_tag = "GEOMETRY"
            topology_dssp.description = "Calculate the secondary structure attributes for the protein chains, based on the 1983 Kabsch algorithm"

            # topology_dssp interface
            # Socket Atoms
            atoms_socket_35 = topology_dssp.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_35.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_36 = topology_dssp.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_36.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_59 = topology_dssp.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_59.attribute_domain = "POINT"
            selection_socket_59.hide_value = True

            # initialize topology_dssp nodes
            # node Group Output
            group_output_180 = topology_dssp.nodes.new("NodeGroupOutput")
            group_output_180.name = "Group Output"
            group_output_180.is_active_output = True

            # node Group Input
            group_input_177 = topology_dssp.nodes.new("NodeGroupInput")
            group_input_177.name = "Group Input"

            # node Group.002
            group_002_22 = topology_dssp.nodes.new("GeometryNodeGroup")
            group_002_22.name = "Group.002"
            group_002_22.node_tree = _mn_topo_calc_helix

            # node Store Named Attribute.003
            store_named_attribute_003_5 = topology_dssp.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_5.label = "store helix"
            store_named_attribute_003_5.name = "Store Named Attribute.003"
            store_named_attribute_003_5.data_type = "INT"
            store_named_attribute_003_5.domain = "POINT"
            # Name
            store_named_attribute_003_5.inputs[2].default_value = "sec_struct"

            # node Sample Index
            sample_index_11 = topology_dssp.nodes.new("GeometryNodeSampleIndex")
            sample_index_11.name = "Sample Index"
            sample_index_11.clamp = False
            sample_index_11.data_type = "BOOLEAN"
            sample_index_11.domain = "POINT"

            # node Group.005
            group_005_13 = topology_dssp.nodes.new("GeometryNodeGroup")
            group_005_13.name = "Group.005"
            group_005_13.node_tree = _mn_topo_calc_sheet

            # node Sample Index.001
            sample_index_001_10 = topology_dssp.nodes.new("GeometryNodeSampleIndex")
            sample_index_001_10.name = "Sample Index.001"
            sample_index_001_10.clamp = False
            sample_index_001_10.data_type = "BOOLEAN"
            sample_index_001_10.domain = "POINT"

            # node Sample Index.002
            sample_index_002_9 = topology_dssp.nodes.new("GeometryNodeSampleIndex")
            sample_index_002_9.name = "Sample Index.002"
            sample_index_002_9.hide = True
            sample_index_002_9.clamp = False
            sample_index_002_9.data_type = "INT"
            sample_index_002_9.domain = "POINT"

            # node Index
            index_21 = topology_dssp.nodes.new("GeometryNodeInputIndex")
            index_21.name = "Index"

            # node Switch
            switch_46 = topology_dssp.nodes.new("GeometryNodeSwitch")
            switch_46.name = "Switch"
            switch_46.input_type = "INT"
            # False
            switch_46.inputs[1].default_value = 3
            # True
            switch_46.inputs[2].default_value = 2

            # node Switch.001
            switch_001_25 = topology_dssp.nodes.new("GeometryNodeSwitch")
            switch_001_25.name = "Switch.001"
            switch_001_25.input_type = "INT"
            # True
            switch_001_25.inputs[2].default_value = 1

            # node Reroute.003
            reroute_003_19 = topology_dssp.nodes.new("NodeReroute")
            reroute_003_19.name = "Reroute.003"
            # node Sample Index.003
            sample_index_003_8 = topology_dssp.nodes.new("GeometryNodeSampleIndex")
            sample_index_003_8.name = "Sample Index.003"
            sample_index_003_8.clamp = False
            sample_index_003_8.data_type = "INT"
            sample_index_003_8.domain = "POINT"

            # node Index.002
            index_002_4 = topology_dssp.nodes.new("GeometryNodeInputIndex")
            index_002_4.name = "Index.002"

            # node MN_topo_compute_backbone.001
            mn_topo_compute_backbone_001 = topology_dssp.nodes.new("GeometryNodeGroup")
            mn_topo_compute_backbone_001.label = "Topology Compute Backbone"
            mn_topo_compute_backbone_001.name = "MN_topo_compute_backbone.001"
            mn_topo_compute_backbone_001.node_tree = _mn_topo_assign_backbone

            # node Frame
            frame_27 = topology_dssp.nodes.new("NodeFrame")
            frame_27.label = "Compute Helix"
            frame_27.name = "Frame"
            frame_27.label_size = 20
            frame_27.shrink = True

            # node Frame.001
            frame_001_13 = topology_dssp.nodes.new("NodeFrame")
            frame_001_13.label = "Compute Sheet"
            frame_001_13.name = "Frame.001"
            frame_001_13.label_size = 20
            frame_001_13.shrink = True

            # Set parents
            group_002_22.parent = frame_27
            sample_index_11.parent = frame_27
            group_005_13.parent = frame_001_13
            sample_index_001_10.parent = frame_001_13

            # Set locations
            group_output_180.location = (676.5311889648438, 311.6835632324219)
            group_input_177.location = (-1820.0, 380.0)
            group_002_22.location = (-1140.0, -80.0)
            store_named_attribute_003_5.location = (-520.0, 480.0)
            sample_index_11.location = (-740.0, -60.0)
            group_005_13.location = (-1140.0, -380.0)
            sample_index_001_10.location = (-740.0, -380.0)
            sample_index_002_9.location = (-720.0, 120.0)
            index_21.location = (-920.0, 120.0)
            switch_46.location = (-520.0, -120.0)
            switch_001_25.location = (-520.0, 40.0)
            reroute_003_19.location = (-1300.0, -120.0)
            sample_index_003_8.location = (-520.0, 280.0)
            index_002_4.location = (-940.0, -200.0)
            mn_topo_compute_backbone_001.location = (-1560.0, 300.0)
            frame_27.location = (-10.0, 80.0)
            frame_001_13.location = (-10.0, 80.0)

            # Set dimensions
            group_output_180.width, group_output_180.height = 140.0, 100.0
            group_input_177.width, group_input_177.height = 140.0, 100.0
            group_002_22.width, group_002_22.height = 238.041015625, 100.0
            store_named_attribute_003_5.width, store_named_attribute_003_5.height = (
                140.0,
                100.0,
            )
            sample_index_11.width, sample_index_11.height = 140.0, 100.0
            group_005_13.width, group_005_13.height = 210.28070068359375, 100.0
            sample_index_001_10.width, sample_index_001_10.height = 140.0, 100.0
            sample_index_002_9.width, sample_index_002_9.height = 140.0, 100.0
            index_21.width, index_21.height = 140.0, 100.0
            switch_46.width, switch_46.height = 140.0, 100.0
            switch_001_25.width, switch_001_25.height = 140.0, 100.0
            reroute_003_19.width, reroute_003_19.height = 16.0, 100.0
            sample_index_003_8.width, sample_index_003_8.height = 140.0, 100.0
            index_002_4.width, index_002_4.height = 140.0, 100.0
            mn_topo_compute_backbone_001.width, mn_topo_compute_backbone_001.height = (
                207.010986328125,
                100.0,
            )
            frame_27.width, frame_27.height = 600.0, 264.0
            frame_001_13.width, frame_001_13.height = 600.0, 264.0

            # initialize topology_dssp links
            # group_input_177.Atoms -> store_named_attribute_003_5.Geometry
            topology_dssp.links.new(
                group_input_177.outputs[0], store_named_attribute_003_5.inputs[0]
            )
            # reroute_003_19.Output -> sample_index_11.Geometry
            topology_dssp.links.new(
                reroute_003_19.outputs[0], sample_index_11.inputs[0]
            )
            # store_named_attribute_003_5.Geometry -> group_output_180.Atoms
            topology_dssp.links.new(
                store_named_attribute_003_5.outputs[0], group_output_180.inputs[0]
            )
            # reroute_003_19.Output -> group_005_13.Geometry
            topology_dssp.links.new(reroute_003_19.outputs[0], group_005_13.inputs[0])
            # mn_topo_compute_backbone_001.Atoms -> sample_index_002_9.Geometry
            topology_dssp.links.new(
                mn_topo_compute_backbone_001.outputs[0], sample_index_002_9.inputs[0]
            )
            # index_21.Index -> sample_index_002_9.Index
            topology_dssp.links.new(index_21.outputs[0], sample_index_002_9.inputs[2])
            # group_005_13.Geometry -> sample_index_001_10.Geometry
            topology_dssp.links.new(
                group_005_13.outputs[0], sample_index_001_10.inputs[0]
            )
            # sample_index_001_10.Value -> switch_46.Switch
            topology_dssp.links.new(sample_index_001_10.outputs[0], switch_46.inputs[0])
            # switch_46.Output -> switch_001_25.False
            topology_dssp.links.new(switch_46.outputs[0], switch_001_25.inputs[1])
            # sample_index_11.Value -> switch_001_25.Switch
            topology_dssp.links.new(sample_index_11.outputs[0], switch_001_25.inputs[0])
            # mn_topo_compute_backbone_001.CA Atoms -> reroute_003_19.Input
            topology_dssp.links.new(
                mn_topo_compute_backbone_001.outputs[2], reroute_003_19.inputs[0]
            )
            # group_002_22.Is Helix -> sample_index_11.Value
            topology_dssp.links.new(group_002_22.outputs[0], sample_index_11.inputs[1])
            # group_005_13.Attribute -> sample_index_001_10.Value
            topology_dssp.links.new(
                group_005_13.outputs[1], sample_index_001_10.inputs[1]
            )
            # mn_topo_compute_backbone_001.Unique Group ID -> sample_index_002_9.Value
            topology_dssp.links.new(
                mn_topo_compute_backbone_001.outputs[1], sample_index_002_9.inputs[1]
            )
            # sample_index_002_9.Value -> sample_index_003_8.Index
            topology_dssp.links.new(
                sample_index_002_9.outputs[0], sample_index_003_8.inputs[2]
            )
            # mn_topo_compute_backbone_001.CA Atoms -> sample_index_003_8.Geometry
            topology_dssp.links.new(
                mn_topo_compute_backbone_001.outputs[2], sample_index_003_8.inputs[0]
            )
            # switch_001_25.Output -> sample_index_003_8.Value
            topology_dssp.links.new(
                switch_001_25.outputs[0], sample_index_003_8.inputs[1]
            )
            # sample_index_003_8.Value -> store_named_attribute_003_5.Value
            topology_dssp.links.new(
                sample_index_003_8.outputs[0], store_named_attribute_003_5.inputs[3]
            )
            # index_002_4.Index -> sample_index_11.Index
            topology_dssp.links.new(index_002_4.outputs[0], sample_index_11.inputs[2])
            # group_input_177.Selection -> store_named_attribute_003_5.Selection
            topology_dssp.links.new(
                group_input_177.outputs[1], store_named_attribute_003_5.inputs[1]
            )
            # group_input_177.Atoms -> mn_topo_compute_backbone_001.Atoms
            topology_dssp.links.new(
                group_input_177.outputs[0], mn_topo_compute_backbone_001.inputs[0]
            )
            # index_002_4.Index -> sample_index_001_10.Index
            topology_dssp.links.new(
                index_002_4.outputs[0], sample_index_001_10.inputs[2]
            )
            return topology_dssp

        topology_dssp = topology_dssp_node_group()

        # initialize style_cartoon node group
        def style_cartoon_node_group():
            style_cartoon = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Cartoon"
            )

            style_cartoon.color_tag = "GEOMETRY"
            style_cartoon.description = ""

            style_cartoon.is_modifier = True

            # style_cartoon interface
            # Socket Geometry
            geometry_socket_37 = style_cartoon.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_37.attribute_domain = "POINT"
            geometry_socket_37.description = "The resulting cartoon geometry, calculated from the given atoms, selection and parameters"

            # Socket Atoms
            atoms_socket_37 = style_cartoon.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_37.attribute_domain = "POINT"
            atoms_socket_37.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_60 = style_cartoon.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_60.attribute_domain = "POINT"
            selection_socket_60.hide_value = True
            selection_socket_60.description = (
                "Selection of atoms to apply this style to"
            )

            # Socket Quality
            quality_socket_6 = style_cartoon.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_6.subtype = "NONE"
            quality_socket_6.default_value = 2
            quality_socket_6.min_value = 0
            quality_socket_6.max_value = 6
            quality_socket_6.attribute_domain = "POINT"
            quality_socket_6.description = (
                "Number of subdivisions,  ‘quality’ of the cartoon."
            )

            # Panel Cartoon
            cartoon_panel = style_cartoon.interface.new_panel(
                "Cartoon", default_closed=True
            )
            # Socket DSSP
            dssp_socket = style_cartoon.interface.new_socket(
                name="DSSP",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cartoon_panel,
            )
            dssp_socket.attribute_domain = "POINT"
            dssp_socket.description = (
                "Use the DSSP algorithm to compute the `sec_struct` attribute"
            )

            # Socket Cylinders
            cylinders_socket = style_cartoon.interface.new_socket(
                name="Cylinders",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cartoon_panel,
            )
            cylinders_socket.attribute_domain = "POINT"
            cylinders_socket.description = (
                "Use cylinders for helices instead of ribbons"
            )

            # Socket Arrows
            arrows_socket = style_cartoon.interface.new_socket(
                name="Arrows",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cartoon_panel,
            )
            arrows_socket.attribute_domain = "POINT"
            arrows_socket.description = "User arrows for sheets"

            # Socket Rounded
            rounded_socket = style_cartoon.interface.new_socket(
                name="Rounded",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=cartoon_panel,
            )
            rounded_socket.attribute_domain = "POINT"
            rounded_socket.description = "Create rounded sheets and helices"

            # Socket Thickness
            thickness_socket = style_cartoon.interface.new_socket(
                name="Thickness",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=cartoon_panel,
            )
            thickness_socket.subtype = "NONE"
            thickness_socket.default_value = 0.6000000238418579
            thickness_socket.min_value = 0.0
            thickness_socket.max_value = 3.4028234663852886e38
            thickness_socket.attribute_domain = "POINT"
            thickness_socket.description = "Thickness for the sheets and helices"

            # Socket Width
            width_socket = style_cartoon.interface.new_socket(
                name="Width",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=cartoon_panel,
            )
            width_socket.subtype = "NONE"
            width_socket.default_value = 2.200000047683716
            width_socket.min_value = 0.0
            width_socket.max_value = 3.4028234663852886e38
            width_socket.attribute_domain = "POINT"
            width_socket.description = "Width for the sheets and helices"

            # Socket Loop Radius
            loop_radius_socket_1 = style_cartoon.interface.new_socket(
                name="Loop Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=cartoon_panel,
            )
            loop_radius_socket_1.subtype = "NONE"
            loop_radius_socket_1.default_value = 0.4000000059604645
            loop_radius_socket_1.min_value = 0.0
            loop_radius_socket_1.max_value = 3.0
            loop_radius_socket_1.attribute_domain = "POINT"
            loop_radius_socket_1.description = (
                "Radius of the loops for unstructure regions"
            )

            # Socket Smoothing
            smoothing_socket_1 = style_cartoon.interface.new_socket(
                name="Smoothing",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=cartoon_panel,
            )
            smoothing_socket_1.subtype = "FACTOR"
            smoothing_socket_1.default_value = 0.5
            smoothing_socket_1.min_value = 0.0
            smoothing_socket_1.max_value = 1.0
            smoothing_socket_1.attribute_domain = "POINT"
            smoothing_socket_1.description = "Smoothing to apply to sheets"

            # Panel Material
            material_panel_7 = style_cartoon.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Color Blur
            color_blur_socket_4 = style_cartoon.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_7,
            )
            color_blur_socket_4.attribute_domain = "POINT"
            color_blur_socket_4.description = "Smoothly interpolate between the different color values, or have each bit of geometry be cleanly one color or another"

            # Socket Shade Smooth
            shade_smooth_socket_15 = style_cartoon.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_7,
            )
            shade_smooth_socket_15.attribute_domain = "POINT"
            shade_smooth_socket_15.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_20 = style_cartoon.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_7,
            )
            material_socket_20.attribute_domain = "POINT"
            material_socket_20.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_cartoon nodes
            # node Group Output
            group_output_181 = style_cartoon.nodes.new("NodeGroupOutput")
            group_output_181.name = "Group Output"
            group_output_181.is_active_output = True

            # node Group Input
            group_input_178 = style_cartoon.nodes.new("NodeGroupInput")
            group_input_178.name = "Group Input"
            group_input_178.outputs[3].hide = True

            # node Group.067
            group_067 = style_cartoon.nodes.new("GeometryNodeGroup")
            group_067.name = "Group.067"
            group_067.node_tree = _mn_utils_style_cartoon
            # Input_122
            group_067.inputs[7].default_value = False
            # Input_80
            group_067.inputs[8].default_value = 1.309999942779541
            # Input_81
            group_067.inputs[9].default_value = 1.0299999713897705
            # Input_87
            group_067.inputs[12].default_value = 0.0
            # Input_69
            group_067.inputs[18].default_value = True
            # Input_4
            group_067.inputs[22].default_value = 0.0
            # Input_86
            group_067.inputs[26].default_value = True

            # node Math
            math_48 = style_cartoon.nodes.new("ShaderNodeMath")
            math_48.name = "Math"
            math_48.operation = "MULTIPLY"
            math_48.use_clamp = False
            # Value_001
            math_48.inputs[1].default_value = 3.0

            # node Math.002
            math_002_24 = style_cartoon.nodes.new("ShaderNodeMath")
            math_002_24.name = "Math.002"
            math_002_24.operation = "MULTIPLY"
            math_002_24.use_clamp = False
            # Value_001
            math_002_24.inputs[1].default_value = 3.0

            # node Switch
            switch_47 = style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_47.name = "Switch"
            switch_47.input_type = "INT"
            # False
            switch_47.inputs[1].default_value = 4

            # node Math.001
            math_001_32 = style_cartoon.nodes.new("ShaderNodeMath")
            math_001_32.name = "Math.001"
            math_001_32.operation = "MULTIPLY"
            math_001_32.use_clamp = False
            # Value_001
            math_001_32.inputs[1].default_value = 5.0

            # node Reroute
            reroute_54 = style_cartoon.nodes.new("NodeReroute")
            reroute_54.name = "Reroute"
            # node Store Named Attribute
            store_named_attribute_21 = style_cartoon.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_21.name = "Store Named Attribute"
            store_named_attribute_21.data_type = "INT"
            store_named_attribute_21.domain = "POINT"

            # node Named Attribute
            named_attribute_44 = style_cartoon.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_44.name = "Named Attribute"
            named_attribute_44.data_type = "INT"

            # node String
            string_1 = style_cartoon.nodes.new("FunctionNodeInputString")
            string_1.name = "String"
            string_1.string = "sec_struct"

            # node Boolean Math
            boolean_math_42 = style_cartoon.nodes.new("FunctionNodeBooleanMath")
            boolean_math_42.name = "Boolean Math"
            boolean_math_42.operation = "NOT"

            # node Select Peptide
            select_peptide = style_cartoon.nodes.new("GeometryNodeGroup")
            select_peptide.label = "Select Peptide"
            select_peptide.name = "Select Peptide"
            select_peptide.node_tree = is_peptide
            # Socket_1
            select_peptide.inputs[0].default_value = True
            # Socket_3
            select_peptide.inputs[1].default_value = False

            # node Switch.002
            switch_002_19 = style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_002_19.name = "Switch.002"
            switch_002_19.input_type = "INT"
            # False
            switch_002_19.inputs[1].default_value = 0
            # True
            switch_002_19.inputs[2].default_value = 3

            # node Group
            group_50 = style_cartoon.nodes.new("GeometryNodeGroup")
            group_50.name = "Group"
            group_50.node_tree = topology_dssp
            # Socket_6
            group_50.inputs[1].default_value = True

            # node Switch.001
            switch_001_26 = style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_001_26.name = "Switch.001"
            switch_001_26.input_type = "GEOMETRY"

            # node Group Input.001
            group_input_001_30 = style_cartoon.nodes.new("NodeGroupInput")
            group_input_001_30.name = "Group Input.001"
            group_input_001_30.outputs[0].hide = True
            group_input_001_30.outputs[1].hide = True
            group_input_001_30.outputs[2].hide = True
            group_input_001_30.outputs[4].hide = True
            group_input_001_30.outputs[5].hide = True
            group_input_001_30.outputs[6].hide = True
            group_input_001_30.outputs[7].hide = True
            group_input_001_30.outputs[8].hide = True
            group_input_001_30.outputs[9].hide = True
            group_input_001_30.outputs[10].hide = True
            group_input_001_30.outputs[11].hide = True
            group_input_001_30.outputs[12].hide = True
            group_input_001_30.outputs[13].hide = True
            group_input_001_30.outputs[14].hide = True

            # node Frame
            frame_28 = style_cartoon.nodes.new("NodeFrame")
            frame_28.label = "If no sec_struct, assign ribbon to peptide"
            frame_28.name = "Frame"
            frame_28.label_size = 20
            frame_28.shrink = True

            # node Frame.001
            frame_001_14 = style_cartoon.nodes.new("NodeFrame")
            frame_001_14.label = "Manually compute sec_struct"
            frame_001_14.name = "Frame.001"
            frame_001_14.label_size = 20
            frame_001_14.shrink = True

            # node Reroute.001
            reroute_001_37 = style_cartoon.nodes.new("NodeReroute")
            reroute_001_37.name = "Reroute.001"
            # node Reroute.002
            reroute_002_27 = style_cartoon.nodes.new("NodeReroute")
            reroute_002_27.name = "Reroute.002"
            # node Group.001
            group_001_34 = style_cartoon.nodes.new("GeometryNodeGroup")
            group_001_34.name = "Group.001"
            group_001_34.node_tree = separate_polymers

            # node Group.068
            group_068_1 = style_cartoon.nodes.new("GeometryNodeGroup")
            group_068_1.name = "Group.068"
            group_068_1.node_tree = _mn_utils_style_ribbon_nucleic
            # Input_28
            group_068_1.inputs[8].default_value = 0.1599999964237213
            # Input_29
            group_068_1.inputs[9].default_value = 4

            # node Group Input.002
            group_input_002_16 = style_cartoon.nodes.new("NodeGroupInput")
            group_input_002_16.name = "Group Input.002"
            group_input_002_16.outputs[3].hide = True

            # node Join Geometry
            join_geometry_8 = style_cartoon.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_8.name = "Join Geometry"

            # node Math.003
            math_003_20 = style_cartoon.nodes.new("ShaderNodeMath")
            math_003_20.name = "Math.003"
            math_003_20.operation = "MULTIPLY"
            math_003_20.use_clamp = False
            # Value_001
            math_003_20.inputs[1].default_value = 2.0

            # node Math.004
            math_004_7 = style_cartoon.nodes.new("ShaderNodeMath")
            math_004_7.name = "Math.004"
            math_004_7.operation = "MULTIPLY"
            math_004_7.use_clamp = False
            # Value_001
            math_004_7.inputs[1].default_value = 4.0

            # node Math.005
            math_005_6 = style_cartoon.nodes.new("ShaderNodeMath")
            math_005_6.name = "Math.005"
            math_005_6.operation = "MULTIPLY"
            math_005_6.use_clamp = False
            # Value_001
            math_005_6.inputs[1].default_value = 3.0

            # node Reroute.003
            reroute_003_20 = style_cartoon.nodes.new("NodeReroute")
            reroute_003_20.name = "Reroute.003"
            # node Domain Size
            domain_size_11 = style_cartoon.nodes.new("GeometryNodeAttributeDomainSize")
            domain_size_11.name = "Domain Size"
            domain_size_11.component = "MESH"
            domain_size_11.outputs[1].hide = True
            domain_size_11.outputs[2].hide = True
            domain_size_11.outputs[3].hide = True
            domain_size_11.outputs[4].hide = True
            domain_size_11.outputs[5].hide = True
            domain_size_11.outputs[6].hide = True

            # node Compare
            compare_52 = style_cartoon.nodes.new("FunctionNodeCompare")
            compare_52.name = "Compare"
            compare_52.data_type = "INT"
            compare_52.mode = "ELEMENT"
            compare_52.operation = "EQUAL"
            # B_INT
            compare_52.inputs[3].default_value = 0

            # node Switch.003
            switch_003_8 = style_cartoon.nodes.new("GeometryNodeSwitch")
            switch_003_8.name = "Switch.003"
            switch_003_8.input_type = "GEOMETRY"

            # node Realize Instances
            realize_instances_12 = style_cartoon.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_12.name = "Realize Instances"
            # Selection
            realize_instances_12.inputs[1].default_value = True
            # Realize All
            realize_instances_12.inputs[2].default_value = True
            # Depth
            realize_instances_12.inputs[3].default_value = 0

            # Set parents
            store_named_attribute_21.parent = frame_28
            named_attribute_44.parent = frame_28
            string_1.parent = frame_28
            boolean_math_42.parent = frame_28
            select_peptide.parent = frame_28
            switch_002_19.parent = frame_28
            group_50.parent = frame_001_14
            switch_001_26.parent = frame_001_14
            group_input_001_30.parent = frame_001_14

            # Set locations
            group_output_181.location = (1060.0, 0.0)
            group_input_178.location = (-875.976806640625, 240.0)
            group_067.location = (500.0, 420.0)
            math_48.location = (20.0, -360.0)
            math_002_24.location = (20.0, -20.0)
            switch_47.location = (300.0, 140.0)
            math_001_32.location = (20.0, -200.0)
            reroute_54.location = (-76.95475006103516, -391.92510986328125)
            store_named_attribute_21.location = (-60.0, 640.0)
            named_attribute_44.location = (-380.0, 640.0)
            string_1.location = (-580.0, 540.0)
            boolean_math_42.location = (-220.0, 640.0)
            select_peptide.location = (-380.0, 480.0)
            switch_002_19.location = (-220.0, 480.0)
            group_50.location = (240.0, 480.0)
            switch_001_26.location = (240.0, 640.0)
            group_input_001_30.location = (240.0, 720.0)
            frame_28.location = (30.0, 140.0)
            frame_001_14.location = (10.0, 60.0)
            reroute_001_37.location = (-320.0, 380.0)
            reroute_002_27.location = (140.0, 380.0)
            group_001_34.location = (-595.976806640625, 380.0)
            group_068_1.location = (404.02313232421875, -620.0)
            group_input_002_16.location = (-201.03932189941406, -671.3316650390625)
            join_geometry_8.location = (841.2210693359375, -40.0)
            math_003_20.location = (184.02313232421875, -700.0)
            math_004_7.location = (184.02313232421875, -1020.0)
            math_005_6.location = (184.02313232421875, -860.0)
            reroute_003_20.location = (124.02312469482422, -800.0)
            domain_size_11.location = (580.0, 560.0)
            compare_52.location = (740.0, 560.0)
            switch_003_8.location = (819.6062622070312, 366.8473815917969)
            realize_instances_12.location = (660.0, -620.0)

            # Set dimensions
            group_output_181.width, group_output_181.height = 140.0, 100.0
            group_input_178.width, group_input_178.height = 131.2183837890625, 100.0
            group_067.width, group_067.height = 216.97686767578125, 100.0
            math_48.width, math_48.height = 140.0, 100.0
            math_002_24.width, math_002_24.height = 140.0, 100.0
            switch_47.width, switch_47.height = 140.0, 100.0
            math_001_32.width, math_001_32.height = 140.0, 100.0
            reroute_54.width, reroute_54.height = 16.0, 100.0
            store_named_attribute_21.width, store_named_attribute_21.height = (
                140.0,
                100.0,
            )
            named_attribute_44.width, named_attribute_44.height = 140.0, 100.0
            string_1.width, string_1.height = 140.0, 100.0
            boolean_math_42.width, boolean_math_42.height = 140.0, 100.0
            select_peptide.width, select_peptide.height = 130.07904052734375, 100.0
            switch_002_19.width, switch_002_19.height = 140.0, 100.0
            group_50.width, group_50.height = 140.0, 100.0
            switch_001_26.width, switch_001_26.height = 140.0, 100.0
            group_input_001_30.width, group_input_001_30.height = 140.0, 100.0
            frame_28.width, frame_28.height = 720.0, 374.0
            frame_001_14.width, frame_001_14.height = 200.0, 430.0
            reroute_001_37.width, reroute_001_37.height = 16.0, 100.0
            reroute_002_27.width, reroute_002_27.height = 16.0, 100.0
            group_001_34.width, group_001_34.height = 140.0, 100.0
            group_068_1.width, group_068_1.height = 216.97686767578125, 100.0
            group_input_002_16.width, group_input_002_16.height = (
                131.2183837890625,
                100.0,
            )
            join_geometry_8.width, join_geometry_8.height = 140.0, 100.0
            math_003_20.width, math_003_20.height = 140.0, 100.0
            math_004_7.width, math_004_7.height = 140.0, 100.0
            math_005_6.width, math_005_6.height = 140.0, 100.0
            reroute_003_20.width, reroute_003_20.height = 16.0, 100.0
            domain_size_11.width, domain_size_11.height = 140.0, 100.0
            compare_52.width, compare_52.height = 140.0, 100.0
            switch_003_8.width, switch_003_8.height = 140.0, 100.0
            realize_instances_12.width, realize_instances_12.height = 140.0, 100.0

            # initialize style_cartoon links
            # group_input_178.Selection -> group_067.Selection
            style_cartoon.links.new(group_input_178.outputs[1], group_067.inputs[1])
            # group_input_178.Shade Smooth -> group_067.Shade Smooth
            style_cartoon.links.new(group_input_178.outputs[12], group_067.inputs[2])
            # group_input_178.Color Blur -> group_067.Interpolate Color
            style_cartoon.links.new(group_input_178.outputs[11], group_067.inputs[3])
            # group_input_178.Material -> group_067.Material
            style_cartoon.links.new(group_input_178.outputs[13], group_067.inputs[4])
            # group_input_178.Thickness -> group_067.Sheet Thickness
            style_cartoon.links.new(group_input_178.outputs[7], group_067.inputs[13])
            # group_input_178.Width -> group_067.Sheet Width
            style_cartoon.links.new(group_input_178.outputs[8], group_067.inputs[14])
            # group_input_178.Smoothing -> group_067.Sheet Smoothing
            style_cartoon.links.new(group_input_178.outputs[10], group_067.inputs[15])
            # group_input_178.Loop Radius -> group_067.Loop Radius
            style_cartoon.links.new(group_input_178.outputs[9], group_067.inputs[28])
            # group_input_178.Rounded -> group_067.Arrows Sharp
            style_cartoon.links.new(group_input_178.outputs[6], group_067.inputs[6])
            # group_input_178.Cylinders -> group_067.As Cylinders
            style_cartoon.links.new(group_input_178.outputs[4], group_067.inputs[17])
            # reroute_54.Output -> math_48.Value
            style_cartoon.links.new(reroute_54.outputs[0], math_48.inputs[0])
            # math_48.Value -> group_067.Cylinder Subdivisions
            style_cartoon.links.new(math_48.outputs[0], group_067.inputs[21])
            # math_48.Value -> group_067.Loop Subdivisions
            style_cartoon.links.new(math_48.outputs[0], group_067.inputs[27])
            # math_48.Value -> group_067.Sheet Subdivision
            style_cartoon.links.new(math_48.outputs[0], group_067.inputs[16])
            # math_48.Value -> group_067.Helix Subdivisions
            style_cartoon.links.new(math_48.outputs[0], group_067.inputs[25])
            # group_input_178.Arrows -> group_067.As Arrows
            style_cartoon.links.new(group_input_178.outputs[5], group_067.inputs[5])
            # group_input_178.Quality -> math_002_24.Value
            style_cartoon.links.new(group_input_178.outputs[2], math_002_24.inputs[0])
            # group_input_178.Rounded -> switch_47.Switch
            style_cartoon.links.new(group_input_178.outputs[6], switch_47.inputs[0])
            # math_002_24.Value -> switch_47.True
            style_cartoon.links.new(math_002_24.outputs[0], switch_47.inputs[2])
            # switch_47.Output -> group_067.Profile Resolution
            style_cartoon.links.new(switch_47.outputs[0], group_067.inputs[11])
            # group_input_178.Width -> group_067.Helix Width
            style_cartoon.links.new(group_input_178.outputs[8], group_067.inputs[24])
            # group_input_178.Thickness -> group_067.Helix Thickness
            style_cartoon.links.new(group_input_178.outputs[7], group_067.inputs[23])
            # math_002_24.Value -> group_067.Loop Resolution
            style_cartoon.links.new(math_002_24.outputs[0], group_067.inputs[29])
            # group_input_178.Width -> group_067.Cylinder Radius
            style_cartoon.links.new(group_input_178.outputs[8], group_067.inputs[19])
            # reroute_54.Output -> math_001_32.Value
            style_cartoon.links.new(reroute_54.outputs[0], math_001_32.inputs[0])
            # group_input_178.Quality -> reroute_54.Input
            style_cartoon.links.new(group_input_178.outputs[2], reroute_54.inputs[0])
            # math_001_32.Value -> group_067.Cylinder Resolution
            style_cartoon.links.new(math_001_32.outputs[0], group_067.inputs[20])
            # reroute_001_37.Output -> store_named_attribute_21.Geometry
            style_cartoon.links.new(
                reroute_001_37.outputs[0], store_named_attribute_21.inputs[0]
            )
            # string_1.String -> named_attribute_44.Name
            style_cartoon.links.new(string_1.outputs[0], named_attribute_44.inputs[0])
            # string_1.String -> store_named_attribute_21.Name
            style_cartoon.links.new(
                string_1.outputs[0], store_named_attribute_21.inputs[2]
            )
            # named_attribute_44.Exists -> boolean_math_42.Boolean
            style_cartoon.links.new(
                named_attribute_44.outputs[1], boolean_math_42.inputs[0]
            )
            # boolean_math_42.Boolean -> store_named_attribute_21.Selection
            style_cartoon.links.new(
                boolean_math_42.outputs[0], store_named_attribute_21.inputs[1]
            )
            # select_peptide.Selection -> switch_002_19.Switch
            style_cartoon.links.new(select_peptide.outputs[0], switch_002_19.inputs[0])
            # switch_002_19.Output -> store_named_attribute_21.Value
            style_cartoon.links.new(
                switch_002_19.outputs[0], store_named_attribute_21.inputs[3]
            )
            # reroute_002_27.Output -> group_50.Atoms
            style_cartoon.links.new(reroute_002_27.outputs[0], group_50.inputs[0])
            # group_50.Atoms -> switch_001_26.True
            style_cartoon.links.new(group_50.outputs[0], switch_001_26.inputs[2])
            # store_named_attribute_21.Geometry -> switch_001_26.False
            style_cartoon.links.new(
                store_named_attribute_21.outputs[0], switch_001_26.inputs[1]
            )
            # switch_001_26.Output -> group_067.Atoms
            style_cartoon.links.new(switch_001_26.outputs[0], group_067.inputs[0])
            # group_input_001_30.DSSP -> switch_001_26.Switch
            style_cartoon.links.new(
                group_input_001_30.outputs[3], switch_001_26.inputs[0]
            )
            # group_001_34.Peptide -> reroute_001_37.Input
            style_cartoon.links.new(group_001_34.outputs[0], reroute_001_37.inputs[0])
            # reroute_001_37.Output -> reroute_002_27.Input
            style_cartoon.links.new(reroute_001_37.outputs[0], reroute_002_27.inputs[0])
            # group_input_178.Atoms -> group_001_34.Atoms
            style_cartoon.links.new(group_input_178.outputs[0], group_001_34.inputs[0])
            # realize_instances_12.Geometry -> join_geometry_8.Geometry
            style_cartoon.links.new(
                realize_instances_12.outputs[0], join_geometry_8.inputs[0]
            )
            # join_geometry_8.Geometry -> group_output_181.Geometry
            style_cartoon.links.new(
                join_geometry_8.outputs[0], group_output_181.inputs[0]
            )
            # group_001_34.Nucleic -> group_068_1.Atoms
            style_cartoon.links.new(group_001_34.outputs[1], group_068_1.inputs[0])
            # group_input_002_16.Material -> group_068_1.Material
            style_cartoon.links.new(
                group_input_002_16.outputs[13], group_068_1.inputs[2]
            )
            # group_input_002_16.Color Blur -> group_068_1.Intepolate Color
            style_cartoon.links.new(
                group_input_002_16.outputs[11], group_068_1.inputs[3]
            )
            # reroute_003_20.Output -> math_003_20.Value
            style_cartoon.links.new(reroute_003_20.outputs[0], math_003_20.inputs[0])
            # math_003_20.Value -> group_068_1.Backbone Subdivisions
            style_cartoon.links.new(math_003_20.outputs[0], group_068_1.inputs[4])
            # reroute_003_20.Output -> math_004_7.Value
            style_cartoon.links.new(reroute_003_20.outputs[0], math_004_7.inputs[0])
            # math_004_7.Value -> group_068_1.Backbone Resolution
            style_cartoon.links.new(math_004_7.outputs[0], group_068_1.inputs[5])
            # group_input_002_16.Shade Smooth -> group_068_1.Backbone Shade Smooth
            style_cartoon.links.new(
                group_input_002_16.outputs[12], group_068_1.inputs[7]
            )
            # group_input_002_16.Selection -> group_068_1.Selection
            style_cartoon.links.new(
                group_input_002_16.outputs[1], group_068_1.inputs[1]
            )
            # group_input_002_16.Loop Radius -> math_005_6.Value
            style_cartoon.links.new(group_input_002_16.outputs[9], math_005_6.inputs[0])
            # math_005_6.Value -> group_068_1.Backbone Radius
            style_cartoon.links.new(math_005_6.outputs[0], group_068_1.inputs[6])
            # group_input_002_16.Quality -> reroute_003_20.Input
            style_cartoon.links.new(
                group_input_002_16.outputs[2], reroute_003_20.inputs[0]
            )
            # domain_size_11.Point Count -> compare_52.A
            style_cartoon.links.new(domain_size_11.outputs[0], compare_52.inputs[2])
            # group_067.Cartoon Mesh -> switch_003_8.False
            style_cartoon.links.new(group_067.outputs[0], switch_003_8.inputs[1])
            # compare_52.Result -> switch_003_8.Switch
            style_cartoon.links.new(compare_52.outputs[0], switch_003_8.inputs[0])
            # switch_001_26.Output -> domain_size_11.Geometry
            style_cartoon.links.new(switch_001_26.outputs[0], domain_size_11.inputs[0])
            # group_068_1.Ribbon + Bases -> realize_instances_12.Geometry
            style_cartoon.links.new(
                group_068_1.outputs[0], realize_instances_12.inputs[0]
            )
            # switch_003_8.Output -> join_geometry_8.Geometry
            style_cartoon.links.new(switch_003_8.outputs[0], join_geometry_8.inputs[0])
            return style_cartoon

        style_cartoon = style_cartoon_node_group()

        # initialize style_surface node group
        def style_surface_node_group():
            style_surface = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Surface"
            )

            style_surface.color_tag = "GEOMETRY"
            style_surface.description = ""

            # style_surface interface
            # Socket Geometry
            geometry_socket_38 = style_surface.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_38.attribute_domain = "POINT"
            geometry_socket_38.description = (
                "The resulting geometry of the style. All chains are a single mesh."
            )

            # Socket Instances
            instances_socket_8 = style_surface.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_8.attribute_domain = "POINT"
            instances_socket_8.description = "The resulting geometry of the style. Each chain is a separate instance."

            # Socket Atoms
            atoms_socket_38 = style_surface.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_38.attribute_domain = "POINT"
            atoms_socket_38.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Selection
            selection_socket_61 = style_surface.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_61.attribute_domain = "POINT"
            selection_socket_61.hide_value = True
            selection_socket_61.description = (
                "Selection of atoms to apply this style to"
            )

            # Socket Quality
            quality_socket_7 = style_surface.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_7.subtype = "NONE"
            quality_socket_7.default_value = 3
            quality_socket_7.min_value = 0
            quality_socket_7.max_value = 8
            quality_socket_7.attribute_domain = "POINT"
            quality_socket_7.description = "Quailty of the surface to generate"

            # Panel Surface
            surface_panel_1 = style_surface.interface.new_panel(
                "Surface", default_closed=True
            )
            # Socket Separate
            separate_socket_1 = style_surface.interface.new_socket(
                name="Separate",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=surface_panel_1,
            )
            separate_socket_1.attribute_domain = "POINT"
            separate_socket_1.description = (
                "Whether to create separate surfaces, based on the 'Attribute' name"
            )

            # Socket Attribute
            attribute_socket_2 = style_surface.interface.new_socket(
                name="Attribute",
                in_out="INPUT",
                socket_type="NodeSocketString",
                parent=surface_panel_1,
            )
            attribute_socket_2.attribute_domain = "POINT"
            attribute_socket_2.description = "Attribute to separate the surface by"

            # Socket Scale Radii
            scale_radii_socket_5 = style_surface.interface.new_socket(
                name="Scale Radii",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=surface_panel_1,
            )
            scale_radii_socket_5.subtype = "NONE"
            scale_radii_socket_5.default_value = 1.5
            scale_radii_socket_5.min_value = 0.0
            scale_radii_socket_5.max_value = 10.0
            scale_radii_socket_5.attribute_domain = "POINT"
            scale_radii_socket_5.description = (
                "Scale the VDW radii of the atoms when creating the surface"
            )

            # Socket Probe Size
            probe_size_socket_5 = style_surface.interface.new_socket(
                name="Probe Size",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=surface_panel_1,
            )
            probe_size_socket_5.subtype = "NONE"
            probe_size_socket_5.default_value = 1.0
            probe_size_socket_5.min_value = 0.0
            probe_size_socket_5.max_value = 5.0
            probe_size_socket_5.attribute_domain = "POINT"
            probe_size_socket_5.description = "Size of the probe that is used to check for solvent accessibility (Angstroms)"

            # Socket Triangulate
            triangulate_socket_1 = style_surface.interface.new_socket(
                name="Triangulate",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=surface_panel_1,
            )
            triangulate_socket_1.attribute_domain = "POINT"
            triangulate_socket_1.description = "Whether to triangulate the resulting mesh. Can help reduce shading problems"

            # Socket Relaxation Steps
            relaxation_steps_socket_1 = style_surface.interface.new_socket(
                name="Relaxation Steps",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=surface_panel_1,
            )
            relaxation_steps_socket_1.subtype = "NONE"
            relaxation_steps_socket_1.default_value = 10
            relaxation_steps_socket_1.min_value = 0
            relaxation_steps_socket_1.max_value = 2147483647
            relaxation_steps_socket_1.default_attribute_name = "Number of steps in the process of smoothening out the surface that stretches between atoms"
            relaxation_steps_socket_1.attribute_domain = "POINT"

            # Panel Color
            color_panel_3 = style_surface.interface.new_panel(
                "Color", default_closed=True
            )
            # Socket Color by CA
            color_by_ca_socket_4 = style_surface.interface.new_socket(
                name="Color by CA",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=color_panel_3,
            )
            color_by_ca_socket_4.attribute_domain = "POINT"
            color_by_ca_socket_4.description = (
                "Only take colors from CA atoms (or similar in nucleic acids)"
            )

            # Socket Color Blur
            color_blur_socket_5 = style_surface.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=color_panel_3,
            )
            color_blur_socket_5.subtype = "NONE"
            color_blur_socket_5.default_value = 2
            color_blur_socket_5.min_value = 0
            color_blur_socket_5.max_value = 20
            color_blur_socket_5.attribute_domain = "POINT"
            color_blur_socket_5.description = (
                "When coloring the surface, blur colors from nearby atoms"
            )

            # Panel Material
            material_panel_8 = style_surface.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Shade Smooth
            shade_smooth_socket_16 = style_surface.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_8,
            )
            shade_smooth_socket_16.attribute_domain = "POINT"
            shade_smooth_socket_16.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_21 = style_surface.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_8,
            )
            material_socket_21.attribute_domain = "POINT"
            material_socket_21.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_surface nodes
            # node Attribute Statistic
            attribute_statistic_2 = style_surface.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_2.name = "Attribute Statistic"
            attribute_statistic_2.data_type = "FLOAT"
            attribute_statistic_2.domain = "POINT"
            attribute_statistic_2.inputs[1].hide = True
            attribute_statistic_2.outputs[0].hide = True
            attribute_statistic_2.outputs[1].hide = True
            attribute_statistic_2.outputs[2].hide = True
            attribute_statistic_2.outputs[3].hide = True
            attribute_statistic_2.outputs[5].hide = True
            attribute_statistic_2.outputs[6].hide = True
            attribute_statistic_2.outputs[7].hide = True
            # Selection
            attribute_statistic_2.inputs[1].default_value = True

            # node Math.001
            math_001_33 = style_surface.nodes.new("ShaderNodeMath")
            math_001_33.label = "x + 1"
            math_001_33.name = "Math.001"
            math_001_33.hide = True
            math_001_33.operation = "ADD"
            math_001_33.use_clamp = False
            # Value_001
            math_001_33.inputs[1].default_value = 1.0

            # node Separate Geometry.002
            separate_geometry_002_6 = style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_6.name = "Separate Geometry.002"
            separate_geometry_002_6.domain = "POINT"

            # node Separate Geometry.001
            separate_geometry_001_14 = style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_14.name = "Separate Geometry.001"
            separate_geometry_001_14.domain = "POINT"

            # node Group Output
            group_output_182 = style_surface.nodes.new("NodeGroupOutput")
            group_output_182.name = "Group Output"
            group_output_182.is_active_output = True

            # node Group Input
            group_input_179 = style_surface.nodes.new("NodeGroupInput")
            group_input_179.name = "Group Input"
            group_input_179.outputs[2].hide = True
            group_input_179.outputs[4].hide = True
            group_input_179.outputs[5].hide = True
            group_input_179.outputs[6].hide = True
            group_input_179.outputs[9].hide = True
            group_input_179.outputs[10].hide = True
            group_input_179.outputs[11].hide = True
            group_input_179.outputs[12].hide = True
            group_input_179.outputs[13].hide = True

            # node Reroute.002
            reroute_002_28 = style_surface.nodes.new("NodeReroute")
            reroute_002_28.name = "Reroute.002"
            # node Separate Geometry
            separate_geometry_22 = style_surface.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_22.name = "Separate Geometry"
            separate_geometry_22.domain = "POINT"

            # node Compare
            compare_53 = style_surface.nodes.new("FunctionNodeCompare")
            compare_53.name = "Compare"
            compare_53.hide = True
            compare_53.data_type = "INT"
            compare_53.mode = "ELEMENT"
            compare_53.operation = "EQUAL"

            # node Named Attribute
            named_attribute_45 = style_surface.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_45.name = "Named Attribute"
            named_attribute_45.data_type = "INT"

            # node Group Input.002
            group_input_002_17 = style_surface.nodes.new("NodeGroupInput")
            group_input_002_17.name = "Group Input.002"
            group_input_002_17.outputs[0].hide = True
            group_input_002_17.outputs[1].hide = True
            group_input_002_17.outputs[2].hide = True
            group_input_002_17.outputs[3].hide = True
            group_input_002_17.outputs[5].hide = True
            group_input_002_17.outputs[6].hide = True
            group_input_002_17.outputs[9].hide = True
            group_input_002_17.outputs[10].hide = True
            group_input_002_17.outputs[11].hide = True
            group_input_002_17.outputs[12].hide = True
            group_input_002_17.outputs[13].hide = True

            # node Repeat Output
            repeat_output_2 = style_surface.nodes.new("GeometryNodeRepeatOutput")
            repeat_output_2.name = "Repeat Output"
            repeat_output_2.active_index = 1
            repeat_output_2.inspection_index = 0
            repeat_output_2.repeat_items.clear()
            # Create item "Instances"
            repeat_output_2.repeat_items.new("GEOMETRY", "Instances")
            # Create item "Surfaces"
            repeat_output_2.repeat_items.new("GEOMETRY", "Surfaces")
            # Create item "Atoms"
            repeat_output_2.repeat_items.new("GEOMETRY", "Atoms")
            # Create item "i"
            repeat_output_2.repeat_items.new("INT", "i")

            # node Math
            math_49 = style_surface.nodes.new("ShaderNodeMath")
            math_49.label = "x + 1"
            math_49.name = "Math"
            math_49.hide = True
            math_49.operation = "ADD"
            math_49.use_clamp = False
            # Value_001
            math_49.inputs[1].default_value = 1.0

            # node Group
            group_51 = style_surface.nodes.new("GeometryNodeGroup")
            group_51.name = "Group"
            group_51.node_tree = _mn_utils_to_instance_centred

            # node Join Geometry
            join_geometry_9 = style_surface.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_9.name = "Join Geometry"

            # node Join Geometry.001
            join_geometry_001_7 = style_surface.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_001_7.name = "Join Geometry.001"

            # node Reroute.001
            reroute_001_38 = style_surface.nodes.new("NodeReroute")
            reroute_001_38.name = "Reroute.001"
            # node Repeat Input
            repeat_input_2 = style_surface.nodes.new("GeometryNodeRepeatInput")
            repeat_input_2.name = "Repeat Input"
            # node Join Geometry.002
            join_geometry_002_2 = style_surface.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_002_2.name = "Join Geometry.002"

            # node Group Input.001
            group_input_001_31 = style_surface.nodes.new("NodeGroupInput")
            group_input_001_31.name = "Group Input.001"
            group_input_001_31.outputs[4].hide = True

            # node Group.070
            group_070_1 = style_surface.nodes.new("GeometryNodeGroup")
            group_070_1.name = "Group.070"
            group_070_1.node_tree = _mn_utils_style_surface_new
            # Input_4
            group_070_1.inputs[1].default_value = True

            # node Group.071
            group_071_1 = style_surface.nodes.new("GeometryNodeGroup")
            group_071_1.name = "Group.071"
            group_071_1.node_tree = _mn_utils_style_surface_new
            # Input_4
            group_071_1.inputs[1].default_value = True

            # node Store Named Attribute
            store_named_attribute_22 = style_surface.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_22.name = "Store Named Attribute"
            store_named_attribute_22.data_type = "INT"
            store_named_attribute_22.domain = "POINT"
            # Selection
            store_named_attribute_22.inputs[1].default_value = True
            # Name
            store_named_attribute_22.inputs[2].default_value = "chain_id"

            # node Reroute.003
            reroute_003_21 = style_surface.nodes.new("NodeReroute")
            reroute_003_21.name = "Reroute.003"
            # node Store Named Attribute.001
            store_named_attribute_001_9 = style_surface.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_9.name = "Store Named Attribute.001"
            store_named_attribute_001_9.data_type = "INT"
            store_named_attribute_001_9.domain = "INSTANCE"
            # Selection
            store_named_attribute_001_9.inputs[1].default_value = True
            # Name
            store_named_attribute_001_9.inputs[2].default_value = "chain_id"

            # node Reroute
            reroute_55 = style_surface.nodes.new("NodeReroute")
            reroute_55.name = "Reroute"

            # Process zone input Repeat Input
            repeat_input_2.pair_with_output(repeat_output_2)
            # Item_1
            repeat_input_2.inputs[4].default_value = 0

            # Set locations
            attribute_statistic_2.location = (-453.89703369140625, 100.0)
            math_001_33.location = (-440.0, 160.0)
            separate_geometry_002_6.location = (-780.0, -360.0)
            separate_geometry_001_14.location = (-1020.0, -400.0)
            group_output_182.location = (2260.0, 140.0)
            group_input_179.location = (-1240.0, -480.0)
            reroute_002_28.location = (6.102944374084473, -360.0)
            separate_geometry_22.location = (80.0, 120.0)
            compare_53.location = (80.0, -40.0)
            named_attribute_45.location = (-460.0, -60.0)
            group_input_002_17.location = (-460.0, -200.0)
            repeat_output_2.location = (1280.0, 140.0)
            math_49.location = (1100.0, 20.0)
            group_51.location = (660.0, 260.0)
            join_geometry_9.location = (1100.0, 140.0)
            join_geometry_001_7.location = (1100.0, 360.0)
            reroute_001_38.location = (1760.0, -200.0)
            repeat_input_2.location = (-253.8970489501953, 220.0)
            join_geometry_002_2.location = (1900.0, 100.0)
            group_input_001_31.location = (-633.89697265625, -740.0)
            group_070_1.location = (340.0, -20.0)
            group_071_1.location = (300.0, -560.0)
            store_named_attribute_22.location = (860.0, 40.0)
            reroute_003_21.location = (700.0, 0.0)
            store_named_attribute_001_9.location = (920.0, 300.0)
            reroute_55.location = (-520.0, 120.0)

            # Set dimensions
            attribute_statistic_2.width, attribute_statistic_2.height = 140.0, 100.0
            math_001_33.width, math_001_33.height = 140.0, 100.0
            separate_geometry_002_6.width, separate_geometry_002_6.height = 140.0, 100.0
            separate_geometry_001_14.width, separate_geometry_001_14.height = (
                140.0,
                100.0,
            )
            group_output_182.width, group_output_182.height = 140.0, 100.0
            group_input_179.width, group_input_179.height = 140.0, 100.0
            reroute_002_28.width, reroute_002_28.height = 16.0, 100.0
            separate_geometry_22.width, separate_geometry_22.height = 140.0, 100.0
            compare_53.width, compare_53.height = 140.0, 100.0
            named_attribute_45.width, named_attribute_45.height = 140.0, 100.0
            group_input_002_17.width, group_input_002_17.height = 140.0, 100.0
            repeat_output_2.width, repeat_output_2.height = 140.0, 100.0
            math_49.width, math_49.height = 140.0, 100.0
            group_51.width, group_51.height = 235.00048828125, 100.0
            join_geometry_9.width, join_geometry_9.height = 140.0, 100.0
            join_geometry_001_7.width, join_geometry_001_7.height = 140.0, 100.0
            reroute_001_38.width, reroute_001_38.height = 16.0, 100.0
            repeat_input_2.width, repeat_input_2.height = 140.0, 100.0
            join_geometry_002_2.width, join_geometry_002_2.height = 140.0, 100.0
            group_input_001_31.width, group_input_001_31.height = 140.0, 100.0
            group_070_1.width, group_070_1.height = 240.75701904296875, 100.0
            group_071_1.width, group_071_1.height = 240.75701904296875, 100.0
            store_named_attribute_22.width, store_named_attribute_22.height = (
                140.0,
                100.0,
            )
            reroute_003_21.width, reroute_003_21.height = 16.0, 100.0
            store_named_attribute_001_9.width, store_named_attribute_001_9.height = (
                140.0,
                100.0,
            )
            reroute_55.width, reroute_55.height = 16.0, 100.0

            # initialize style_surface links
            # reroute_003_21.Output -> math_49.Value
            style_surface.links.new(reroute_003_21.outputs[0], math_49.inputs[0])
            # math_49.Value -> repeat_output_2.i
            style_surface.links.new(math_49.outputs[0], repeat_output_2.inputs[3])
            # repeat_input_2.Atoms -> separate_geometry_22.Geometry
            style_surface.links.new(
                repeat_input_2.outputs[2], separate_geometry_22.inputs[0]
            )
            # repeat_input_2.i -> compare_53.A
            style_surface.links.new(repeat_input_2.outputs[3], compare_53.inputs[2])
            # named_attribute_45.Attribute -> attribute_statistic_2.Attribute
            style_surface.links.new(
                named_attribute_45.outputs[0], attribute_statistic_2.inputs[2]
            )
            # named_attribute_45.Attribute -> compare_53.B
            style_surface.links.new(named_attribute_45.outputs[0], compare_53.inputs[3])
            # compare_53.Result -> separate_geometry_22.Selection
            style_surface.links.new(
                compare_53.outputs[0], separate_geometry_22.inputs[1]
            )
            # separate_geometry_22.Inverted -> repeat_output_2.Atoms
            style_surface.links.new(
                separate_geometry_22.outputs[1], repeat_output_2.inputs[2]
            )
            # separate_geometry_22.Selection -> group_070_1.Atoms
            style_surface.links.new(
                separate_geometry_22.outputs[0], group_070_1.inputs[0]
            )
            # store_named_attribute_22.Geometry -> join_geometry_9.Geometry
            style_surface.links.new(
                store_named_attribute_22.outputs[0], join_geometry_9.inputs[0]
            )
            # join_geometry_9.Geometry -> repeat_output_2.Surfaces
            style_surface.links.new(
                join_geometry_9.outputs[0], repeat_output_2.inputs[1]
            )
            # group_input_001_31.Material -> group_070_1.Material
            style_surface.links.new(
                group_input_001_31.outputs[12], group_070_1.inputs[9]
            )
            # group_input_179.Atoms -> separate_geometry_001_14.Geometry
            style_surface.links.new(
                group_input_179.outputs[0], separate_geometry_001_14.inputs[0]
            )
            # group_input_179.Selection -> separate_geometry_001_14.Selection
            style_surface.links.new(
                group_input_179.outputs[1], separate_geometry_001_14.inputs[1]
            )
            # reroute_55.Output -> attribute_statistic_2.Geometry
            style_surface.links.new(
                reroute_55.outputs[0], attribute_statistic_2.inputs[0]
            )
            # reroute_55.Output -> repeat_input_2.Atoms
            style_surface.links.new(reroute_55.outputs[0], repeat_input_2.inputs[3])
            # reroute_002_28.Output -> group_070_1.Quality
            style_surface.links.new(reroute_002_28.outputs[0], group_070_1.inputs[2])
            # group_input_001_31.Scale Radii -> group_070_1.Scale Radii
            style_surface.links.new(
                group_input_001_31.outputs[5], group_070_1.inputs[3]
            )
            # group_input_001_31.Probe Size -> group_070_1.Probe Size
            style_surface.links.new(
                group_input_001_31.outputs[6], group_070_1.inputs[4]
            )
            # group_input_001_31.Color by CA -> group_070_1.Color by CA
            style_surface.links.new(
                group_input_001_31.outputs[9], group_070_1.inputs[5]
            )
            # group_input_001_31.Color Blur -> group_070_1.Color Blur
            style_surface.links.new(
                group_input_001_31.outputs[10], group_070_1.inputs[6]
            )
            # group_input_001_31.Shade Smooth -> group_070_1.Shade Smooth
            style_surface.links.new(
                group_input_001_31.outputs[11], group_070_1.inputs[7]
            )
            # store_named_attribute_001_9.Geometry -> join_geometry_001_7.Geometry
            style_surface.links.new(
                store_named_attribute_001_9.outputs[0], join_geometry_001_7.inputs[0]
            )
            # join_geometry_001_7.Geometry -> repeat_output_2.Instances
            style_surface.links.new(
                join_geometry_001_7.outputs[0], repeat_output_2.inputs[0]
            )
            # repeat_output_2.Instances -> group_output_182.Instances
            style_surface.links.new(
                repeat_output_2.outputs[0], group_output_182.inputs[1]
            )
            # math_001_33.Value -> repeat_input_2.Iterations
            style_surface.links.new(math_001_33.outputs[0], repeat_input_2.inputs[0])
            # attribute_statistic_2.Max -> math_001_33.Value
            style_surface.links.new(
                attribute_statistic_2.outputs[4], math_001_33.inputs[0]
            )
            # group_input_001_31.Material -> group_071_1.Material
            style_surface.links.new(
                group_input_001_31.outputs[12], group_071_1.inputs[9]
            )
            # reroute_002_28.Output -> group_071_1.Quality
            style_surface.links.new(reroute_002_28.outputs[0], group_071_1.inputs[2])
            # group_input_001_31.Scale Radii -> group_071_1.Scale Radii
            style_surface.links.new(
                group_input_001_31.outputs[5], group_071_1.inputs[3]
            )
            # group_input_001_31.Probe Size -> group_071_1.Probe Size
            style_surface.links.new(
                group_input_001_31.outputs[6], group_071_1.inputs[4]
            )
            # group_input_001_31.Color by CA -> group_071_1.Color by CA
            style_surface.links.new(
                group_input_001_31.outputs[9], group_071_1.inputs[5]
            )
            # group_input_001_31.Color Blur -> group_071_1.Color Blur
            style_surface.links.new(
                group_input_001_31.outputs[10], group_071_1.inputs[6]
            )
            # group_input_001_31.Shade Smooth -> group_071_1.Shade Smooth
            style_surface.links.new(
                group_input_001_31.outputs[11], group_071_1.inputs[7]
            )
            # separate_geometry_001_14.Selection -> separate_geometry_002_6.Geometry
            style_surface.links.new(
                separate_geometry_001_14.outputs[0], separate_geometry_002_6.inputs[0]
            )
            # group_input_179.Separate -> separate_geometry_002_6.Selection
            style_surface.links.new(
                group_input_179.outputs[3], separate_geometry_002_6.inputs[1]
            )
            # separate_geometry_002_6.Inverted -> group_071_1.Atoms
            style_surface.links.new(
                separate_geometry_002_6.outputs[1], group_071_1.inputs[0]
            )
            # reroute_001_38.Output -> join_geometry_002_2.Geometry
            style_surface.links.new(
                reroute_001_38.outputs[0], join_geometry_002_2.inputs[0]
            )
            # join_geometry_002_2.Geometry -> group_output_182.Geometry
            style_surface.links.new(
                join_geometry_002_2.outputs[0], group_output_182.inputs[0]
            )
            # group_070_1.Surface Geometry -> group_51.Input
            style_surface.links.new(group_070_1.outputs[0], group_51.inputs[0])
            # group_071_1.Surface Geometry -> reroute_001_38.Input
            style_surface.links.new(group_071_1.outputs[0], reroute_001_38.inputs[0])
            # group_input_001_31.Quality -> reroute_002_28.Input
            style_surface.links.new(
                group_input_001_31.outputs[2], reroute_002_28.inputs[0]
            )
            # group_input_002_17.Attribute -> named_attribute_45.Name
            style_surface.links.new(
                group_input_002_17.outputs[4], named_attribute_45.inputs[0]
            )
            # group_input_001_31.Relaxation Steps -> group_070_1.Relaxation Steps
            style_surface.links.new(
                group_input_001_31.outputs[8], group_070_1.inputs[10]
            )
            # group_input_001_31.Relaxation Steps -> group_071_1.Relaxation Steps
            style_surface.links.new(
                group_input_001_31.outputs[8], group_071_1.inputs[10]
            )
            # group_input_001_31.Triangulate -> group_071_1.Triangulate
            style_surface.links.new(
                group_input_001_31.outputs[7], group_071_1.inputs[8]
            )
            # group_input_001_31.Triangulate -> group_070_1.Triangulate
            style_surface.links.new(
                group_input_001_31.outputs[7], group_070_1.inputs[8]
            )
            # group_070_1.Surface Geometry -> store_named_attribute_22.Geometry
            style_surface.links.new(
                group_070_1.outputs[0], store_named_attribute_22.inputs[0]
            )
            # reroute_003_21.Output -> store_named_attribute_22.Value
            style_surface.links.new(
                reroute_003_21.outputs[0], store_named_attribute_22.inputs[3]
            )
            # repeat_input_2.i -> reroute_003_21.Input
            style_surface.links.new(repeat_input_2.outputs[3], reroute_003_21.inputs[0])
            # group_51.Geometry -> store_named_attribute_001_9.Geometry
            style_surface.links.new(
                group_51.outputs[0], store_named_attribute_001_9.inputs[0]
            )
            # reroute_003_21.Output -> store_named_attribute_001_9.Value
            style_surface.links.new(
                reroute_003_21.outputs[0], store_named_attribute_001_9.inputs[3]
            )
            # separate_geometry_002_6.Selection -> reroute_55.Input
            style_surface.links.new(
                separate_geometry_002_6.outputs[0], reroute_55.inputs[0]
            )
            # repeat_input_2.Instances -> join_geometry_001_7.Geometry
            style_surface.links.new(
                repeat_input_2.outputs[0], join_geometry_001_7.inputs[0]
            )
            # repeat_input_2.Surfaces -> join_geometry_9.Geometry
            style_surface.links.new(
                repeat_input_2.outputs[1], join_geometry_9.inputs[0]
            )
            # repeat_output_2.Surfaces -> join_geometry_002_2.Geometry
            style_surface.links.new(
                repeat_output_2.outputs[1], join_geometry_002_2.inputs[0]
            )
            return style_surface

        style_surface = style_surface_node_group()

        # initialize style_ball_and_stick node group
        def style_ball_and_stick_node_group():
            style_ball_and_stick = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Ball and Stick"
            )

            style_ball_and_stick.color_tag = "GEOMETRY"
            style_ball_and_stick.description = ""

            style_ball_and_stick.is_modifier = True

            # style_ball_and_stick interface
            # Socket Geometry
            geometry_socket_39 = style_ball_and_stick.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_39.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_39 = style_ball_and_stick.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_39.attribute_domain = "POINT"
            atoms_socket_39.description = (
                "Atomic geometry that contains vertices and edges"
            )

            # Socket Quality
            quality_socket_8 = style_ball_and_stick.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_8.subtype = "NONE"
            quality_socket_8.default_value = 2
            quality_socket_8.min_value = 0
            quality_socket_8.max_value = 2147483647
            quality_socket_8.attribute_domain = "POINT"
            quality_socket_8.force_non_field = True

            # Socket Selection
            selection_socket_62 = style_ball_and_stick.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_62.attribute_domain = "POINT"
            selection_socket_62.hide_value = True
            selection_socket_62.description = (
                "Selection of atoms to apply this style to"
            )

            # Panel Sphere
            sphere_panel_1 = style_ball_and_stick.interface.new_panel(
                "Sphere", default_closed=True
            )
            # Socket Sphere As Mesh
            sphere_as_mesh_socket_1 = style_ball_and_stick.interface.new_socket(
                name="Sphere As Mesh",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=sphere_panel_1,
            )
            sphere_as_mesh_socket_1.attribute_domain = "POINT"
            sphere_as_mesh_socket_1.description = "Render spheres as point clouds"

            # Socket Sphere Radii
            sphere_radii_socket_1 = style_ball_and_stick.interface.new_socket(
                name="Sphere Radii",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=sphere_panel_1,
            )
            sphere_radii_socket_1.subtype = "NONE"
            sphere_radii_socket_1.default_value = 0.30000001192092896
            sphere_radii_socket_1.min_value = 0.0
            sphere_radii_socket_1.max_value = 10000.0
            sphere_radii_socket_1.attribute_domain = "POINT"
            sphere_radii_socket_1.description = "Scale the sphere radii"

            # Panel Bond
            bond_panel = style_ball_and_stick.interface.new_panel(
                "Bond", default_closed=True
            )
            # Socket Bond Find
            bond_find_socket = style_ball_and_stick.interface.new_socket(
                name="Bond Find",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=bond_panel,
            )
            bond_find_socket.attribute_domain = "POINT"
            bond_find_socket.description = "Find possible bonds for the selected atoms based on a distance search. Unselected atoms maintain any bonds they already have"

            # Socket Bond Radius
            bond_radius_socket_2 = style_ball_and_stick.interface.new_socket(
                name="Bond Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=bond_panel,
            )
            bond_radius_socket_2.subtype = "NONE"
            bond_radius_socket_2.default_value = 0.30000001192092896
            bond_radius_socket_2.min_value = 0.0
            bond_radius_socket_2.max_value = 1.0
            bond_radius_socket_2.attribute_domain = "POINT"

            # Panel Material
            material_panel_9 = style_ball_and_stick.interface.new_panel(
                "Material", default_closed=True
            )
            # Socket Color Blur
            color_blur_socket_6 = style_ball_and_stick.interface.new_socket(
                name="Color Blur",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_9,
            )
            color_blur_socket_6.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_17 = style_ball_and_stick.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_9,
            )
            shade_smooth_socket_17.attribute_domain = "POINT"
            shade_smooth_socket_17.description = (
                "Apply smooth shading to the created geometry"
            )

            # Socket Material
            material_socket_22 = style_ball_and_stick.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_9,
            )
            material_socket_22.attribute_domain = "POINT"
            material_socket_22.description = (
                "Material to apply to the resulting geometry"
            )

            # initialize style_ball_and_stick nodes
            # node Group Output
            group_output_183 = style_ball_and_stick.nodes.new("NodeGroupOutput")
            group_output_183.name = "Group Output"
            group_output_183.is_active_output = True

            # node Join Geometry.001
            join_geometry_001_8 = style_ball_and_stick.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_8.name = "Join Geometry.001"

            # node Group Input.002
            group_input_002_18 = style_ball_and_stick.nodes.new("NodeGroupInput")
            group_input_002_18.name = "Group Input.002"

            # node Separate Geometry
            separate_geometry_23 = style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_23.name = "Separate Geometry"
            separate_geometry_23.domain = "POINT"

            # node Group Input
            group_input_180 = style_ball_and_stick.nodes.new("NodeGroupInput")
            group_input_180.name = "Group Input"
            group_input_180.outputs[1].hide = True
            group_input_180.outputs[3].hide = True
            group_input_180.outputs[4].hide = True
            group_input_180.outputs[5].hide = True
            group_input_180.outputs[6].hide = True
            group_input_180.outputs[7].hide = True
            group_input_180.outputs[8].hide = True
            group_input_180.outputs[9].hide = True
            group_input_180.outputs[10].hide = True

            # node Group.009
            group_009_9 = style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_009_9.name = "Group.009"
            group_009_9.node_tree = _mn_utils_style_sticks
            # Socket_0
            group_009_9.inputs[1].default_value = True
            # Input_15
            group_009_9.inputs[4].default_value = False

            # node Topology Find Bonds
            topology_find_bonds_1 = style_ball_and_stick.nodes.new("GeometryNodeGroup")
            topology_find_bonds_1.label = "Topology Find Bonds"
            topology_find_bonds_1.name = "Topology Find Bonds"
            topology_find_bonds_1.node_tree = topology_find_bonds
            # Input_35
            topology_find_bonds_1.inputs[1].default_value = True
            # Input_2
            topology_find_bonds_1.inputs[2].default_value = 1.0

            # node Separate Geometry.002
            separate_geometry_002_7 = style_ball_and_stick.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_7.name = "Separate Geometry.002"
            separate_geometry_002_7.domain = "POINT"

            # node Join Geometry.002
            join_geometry_002_3 = style_ball_and_stick.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_002_3.name = "Join Geometry.002"

            # node Math
            math_50 = style_ball_and_stick.nodes.new("ShaderNodeMath")
            math_50.name = "Math"
            math_50.operation = "MULTIPLY"
            math_50.use_clamp = False
            # Value_001
            math_50.inputs[1].default_value = 6.0

            # node Group
            group_52 = style_ball_and_stick.nodes.new("GeometryNodeGroup")
            group_52.name = "Group"
            group_52.node_tree = style_spheres
            # Input_1
            group_52.inputs[1].default_value = True

            # node Group Input.001
            group_input_001_32 = style_ball_and_stick.nodes.new("NodeGroupInput")
            group_input_001_32.name = "Group Input.001"
            group_input_001_32.outputs[0].hide = True
            group_input_001_32.outputs[2].hide = True
            group_input_001_32.outputs[5].hide = True
            group_input_001_32.outputs[6].hide = True
            group_input_001_32.outputs[7].hide = True
            group_input_001_32.outputs[10].hide = True

            # Set locations
            group_output_183.location = (560.0, -140.0)
            join_geometry_001_8.location = (360.0, -140.0)
            group_input_002_18.location = (-800.0, -520.0)
            separate_geometry_23.location = (-760.0, -20.0)
            group_input_180.location = (-960.0, -20.0)
            group_009_9.location = (-40.0, -380.0)
            topology_find_bonds_1.location = (-400.0, -300.0)
            separate_geometry_002_7.location = (-560.0, -380.0)
            join_geometry_002_3.location = (-200.0, -380.0)
            math_50.location = (-200.0, -500.0)
            group_52.location = (-20.0, 20.0)
            group_input_001_32.location = (-220.0, -100.0)

            # Set dimensions
            group_output_183.width, group_output_183.height = 140.0, 100.0
            join_geometry_001_8.width, join_geometry_001_8.height = 140.0, 100.0
            group_input_002_18.width, group_input_002_18.height = 140.0, 100.0
            separate_geometry_23.width, separate_geometry_23.height = 140.0, 100.0
            group_input_180.width, group_input_180.height = 140.0, 100.0
            group_009_9.width, group_009_9.height = 244.53131103515625, 100.0
            topology_find_bonds_1.width, topology_find_bonds_1.height = 180.0, 100.0
            separate_geometry_002_7.width, separate_geometry_002_7.height = 140.0, 100.0
            join_geometry_002_3.width, join_geometry_002_3.height = 140.0, 100.0
            math_50.width, math_50.height = 140.0, 100.0
            group_52.width, group_52.height = 201.75234985351562, 100.0
            group_input_001_32.width, group_input_001_32.height = 140.0, 100.0

            # initialize style_ball_and_stick links
            # join_geometry_002_3.Geometry -> group_009_9.Atoms
            style_ball_and_stick.links.new(
                join_geometry_002_3.outputs[0], group_009_9.inputs[0]
            )
            # group_input_180.Atoms -> separate_geometry_23.Geometry
            style_ball_and_stick.links.new(
                group_input_180.outputs[0], separate_geometry_23.inputs[0]
            )
            # group_input_180.Selection -> separate_geometry_23.Selection
            style_ball_and_stick.links.new(
                group_input_180.outputs[2], separate_geometry_23.inputs[1]
            )
            # group_009_9.Geometry -> join_geometry_001_8.Geometry
            style_ball_and_stick.links.new(
                group_009_9.outputs[0], join_geometry_001_8.inputs[0]
            )
            # join_geometry_001_8.Geometry -> group_output_183.Geometry
            style_ball_and_stick.links.new(
                join_geometry_001_8.outputs[0], group_output_183.inputs[0]
            )
            # group_input_002_18.Material -> group_009_9.Material
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[9], group_009_9.inputs[7]
            )
            # group_input_002_18.Shade Smooth -> group_009_9.Shade Smooth
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[8], group_009_9.inputs[6]
            )
            # group_input_002_18.Bond Radius -> group_009_9.Radius
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[6], group_009_9.inputs[2]
            )
            # separate_geometry_23.Selection -> separate_geometry_002_7.Geometry
            style_ball_and_stick.links.new(
                separate_geometry_23.outputs[0], separate_geometry_002_7.inputs[0]
            )
            # separate_geometry_002_7.Selection -> topology_find_bonds_1.Atoms
            style_ball_and_stick.links.new(
                separate_geometry_002_7.outputs[0], topology_find_bonds_1.inputs[0]
            )
            # group_input_002_18.Bond Find -> separate_geometry_002_7.Selection
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[5], separate_geometry_002_7.inputs[1]
            )
            # separate_geometry_002_7.Inverted -> join_geometry_002_3.Geometry
            style_ball_and_stick.links.new(
                separate_geometry_002_7.outputs[1], join_geometry_002_3.inputs[0]
            )
            # group_input_002_18.Quality -> math_50.Value
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[1], math_50.inputs[0]
            )
            # math_50.Value -> group_009_9.Resolution
            style_ball_and_stick.links.new(math_50.outputs[0], group_009_9.inputs[3])
            # separate_geometry_23.Selection -> group_52.Atoms
            style_ball_and_stick.links.new(
                separate_geometry_23.outputs[0], group_52.inputs[0]
            )
            # group_input_001_32.Quality -> group_52.Sphere Subdivisions
            style_ball_and_stick.links.new(
                group_input_001_32.outputs[1], group_52.inputs[4]
            )
            # group_input_001_32.Sphere As Mesh -> group_52.Sphere As Mesh
            style_ball_and_stick.links.new(
                group_input_001_32.outputs[3], group_52.inputs[2]
            )
            # group_input_001_32.Sphere Radii -> group_52.Sphere Radii
            style_ball_and_stick.links.new(
                group_input_001_32.outputs[4], group_52.inputs[3]
            )
            # group_input_001_32.Shade Smooth -> group_52.Shade Smooth
            style_ball_and_stick.links.new(
                group_input_001_32.outputs[8], group_52.inputs[5]
            )
            # group_input_001_32.Material -> group_52.Material
            style_ball_and_stick.links.new(
                group_input_001_32.outputs[9], group_52.inputs[6]
            )
            # group_input_002_18.Color Blur -> group_009_9.Interpolate Color
            style_ball_and_stick.links.new(
                group_input_002_18.outputs[7], group_009_9.inputs[5]
            )
            # group_52.Geometry -> join_geometry_001_8.Geometry
            style_ball_and_stick.links.new(
                group_52.outputs[0], join_geometry_001_8.inputs[0]
            )
            # topology_find_bonds_1.Atoms -> join_geometry_002_3.Geometry
            style_ball_and_stick.links.new(
                topology_find_bonds_1.outputs[0], join_geometry_002_3.inputs[0]
            )
            return style_ball_and_stick

        style_ball_and_stick = style_ball_and_stick_node_group()

        # initialize between_integer node group
        def between_integer_node_group():
            between_integer = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Between Integer"
            )

            between_integer.color_tag = "CONVERTER"
            between_integer.description = ""

            # between_integer interface
            # Socket Boolean
            boolean_socket_19 = between_integer.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_19.attribute_domain = "POINT"

            # Socket Value
            value_socket_22 = between_integer.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketInt"
            )
            value_socket_22.subtype = "NONE"
            value_socket_22.default_value = 0
            value_socket_22.min_value = -2147483648
            value_socket_22.max_value = 2147483647
            value_socket_22.attribute_domain = "POINT"

            # Socket Lower
            lower_socket_1 = between_integer.interface.new_socket(
                name="Lower", in_out="INPUT", socket_type="NodeSocketInt"
            )
            lower_socket_1.subtype = "NONE"
            lower_socket_1.default_value = 0
            lower_socket_1.min_value = -2147483648
            lower_socket_1.max_value = 2147483647
            lower_socket_1.attribute_domain = "POINT"

            # Socket Upper
            upper_socket_1 = between_integer.interface.new_socket(
                name="Upper", in_out="INPUT", socket_type="NodeSocketInt"
            )
            upper_socket_1.subtype = "NONE"
            upper_socket_1.default_value = 19
            upper_socket_1.min_value = -2147483648
            upper_socket_1.max_value = 2147483647
            upper_socket_1.attribute_domain = "POINT"

            # initialize between_integer nodes
            # node Group Output
            group_output_184 = between_integer.nodes.new("NodeGroupOutput")
            group_output_184.name = "Group Output"
            group_output_184.is_active_output = True

            # node Group Input
            group_input_181 = between_integer.nodes.new("NodeGroupInput")
            group_input_181.name = "Group Input"

            # node Compare
            compare_54 = between_integer.nodes.new("FunctionNodeCompare")
            compare_54.name = "Compare"
            compare_54.data_type = "INT"
            compare_54.mode = "ELEMENT"
            compare_54.operation = "LESS_EQUAL"

            # node Compare.001
            compare_001_32 = between_integer.nodes.new("FunctionNodeCompare")
            compare_001_32.name = "Compare.001"
            compare_001_32.data_type = "INT"
            compare_001_32.mode = "ELEMENT"
            compare_001_32.operation = "GREATER_EQUAL"

            # node Boolean Math
            boolean_math_43 = between_integer.nodes.new("FunctionNodeBooleanMath")
            boolean_math_43.name = "Boolean Math"
            boolean_math_43.operation = "AND"

            # Set locations
            group_output_184.location = (270.0, 0.0)
            group_input_181.location = (-280.0, 0.0)
            compare_54.location = (-80.0, -80.0)
            compare_001_32.location = (-80.0, 80.0)
            boolean_math_43.location = (80.0, 80.0)

            # Set dimensions
            group_output_184.width, group_output_184.height = 140.0, 100.0
            group_input_181.width, group_input_181.height = 140.0, 100.0
            compare_54.width, compare_54.height = 140.0, 100.0
            compare_001_32.width, compare_001_32.height = 140.0, 100.0
            boolean_math_43.width, boolean_math_43.height = 140.0, 100.0

            # initialize between_integer links
            # compare_54.Result -> boolean_math_43.Boolean
            between_integer.links.new(compare_54.outputs[0], boolean_math_43.inputs[1])
            # compare_001_32.Result -> boolean_math_43.Boolean
            between_integer.links.new(
                compare_001_32.outputs[0], boolean_math_43.inputs[0]
            )
            # group_input_181.Value -> compare_54.A
            between_integer.links.new(group_input_181.outputs[0], compare_54.inputs[2])
            # group_input_181.Value -> compare_001_32.A
            between_integer.links.new(
                group_input_181.outputs[0], compare_001_32.inputs[2]
            )
            # boolean_math_43.Boolean -> group_output_184.Boolean
            between_integer.links.new(
                boolean_math_43.outputs[0], group_output_184.inputs[0]
            )
            # group_input_181.Lower -> compare_001_32.B
            between_integer.links.new(
                group_input_181.outputs[1], compare_001_32.inputs[3]
            )
            # group_input_181.Upper -> compare_54.B
            between_integer.links.new(group_input_181.outputs[2], compare_54.inputs[3])
            return between_integer

        between_integer = between_integer_node_group()

        # initialize color_res_name node group
        def color_res_name_node_group():
            color_res_name = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Res Name"
            )

            color_res_name.color_tag = "COLOR"
            color_res_name.description = ""

            # color_res_name interface
            # Socket Color
            color_socket_24 = color_res_name.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_24.attribute_domain = "POINT"

            # Panel Peptide
            peptide_panel = color_res_name.interface.new_panel(
                "Peptide", default_closed=True
            )
            # Socket ALA
            ala_socket_2 = color_res_name.interface.new_socket(
                name="ALA",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            ala_socket_2.attribute_domain = "POINT"

            # Socket ARG
            arg_socket_2 = color_res_name.interface.new_socket(
                name="ARG",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            arg_socket_2.attribute_domain = "POINT"

            # Socket ASN
            asn_socket_2 = color_res_name.interface.new_socket(
                name="ASN",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            asn_socket_2.attribute_domain = "POINT"

            # Socket ASP
            asp_socket_2 = color_res_name.interface.new_socket(
                name="ASP",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            asp_socket_2.attribute_domain = "POINT"

            # Socket CYS
            cys_socket_2 = color_res_name.interface.new_socket(
                name="CYS",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            cys_socket_2.attribute_domain = "POINT"

            # Socket GLU
            glu_socket_2 = color_res_name.interface.new_socket(
                name="GLU",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            glu_socket_2.attribute_domain = "POINT"

            # Socket GLN
            gln_socket_2 = color_res_name.interface.new_socket(
                name="GLN",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            gln_socket_2.attribute_domain = "POINT"

            # Socket GLY
            gly_socket_2 = color_res_name.interface.new_socket(
                name="GLY",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            gly_socket_2.attribute_domain = "POINT"

            # Socket HIS
            his_socket_2 = color_res_name.interface.new_socket(
                name="HIS",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            his_socket_2.attribute_domain = "POINT"

            # Socket ILE
            ile_socket_2 = color_res_name.interface.new_socket(
                name="ILE",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            ile_socket_2.attribute_domain = "POINT"

            # Socket LEU
            leu_socket_2 = color_res_name.interface.new_socket(
                name="LEU",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            leu_socket_2.attribute_domain = "POINT"

            # Socket LYS
            lys_socket_2 = color_res_name.interface.new_socket(
                name="LYS",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            lys_socket_2.attribute_domain = "POINT"

            # Socket MET
            met_socket_2 = color_res_name.interface.new_socket(
                name="MET",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            met_socket_2.attribute_domain = "POINT"

            # Socket PHE
            phe_socket_2 = color_res_name.interface.new_socket(
                name="PHE",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            phe_socket_2.attribute_domain = "POINT"

            # Socket PRO
            pro_socket_2 = color_res_name.interface.new_socket(
                name="PRO",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            pro_socket_2.attribute_domain = "POINT"

            # Socket SER
            ser_socket_2 = color_res_name.interface.new_socket(
                name="SER",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            ser_socket_2.attribute_domain = "POINT"

            # Socket THR
            thr_socket_2 = color_res_name.interface.new_socket(
                name="THR",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            thr_socket_2.attribute_domain = "POINT"

            # Socket TRP
            trp_socket_2 = color_res_name.interface.new_socket(
                name="TRP",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            trp_socket_2.attribute_domain = "POINT"

            # Socket TYR
            tyr_socket_2 = color_res_name.interface.new_socket(
                name="TYR",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            tyr_socket_2.attribute_domain = "POINT"

            # Socket VAL
            val_socket_2 = color_res_name.interface.new_socket(
                name="VAL",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=peptide_panel,
            )
            val_socket_2.attribute_domain = "POINT"

            # Panel Nucleic
            nucleic_panel = color_res_name.interface.new_panel(
                "Nucleic", default_closed=True
            )
            # Socket A
            a_socket_10 = color_res_name.interface.new_socket(
                name="A",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            a_socket_10.attribute_domain = "POINT"

            # Socket C
            c_socket_9 = color_res_name.interface.new_socket(
                name="C",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            c_socket_9.attribute_domain = "POINT"

            # Socket G
            g_socket_3 = color_res_name.interface.new_socket(
                name="G",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            g_socket_3.attribute_domain = "POINT"

            # Socket T
            t_socket_1 = color_res_name.interface.new_socket(
                name="T",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            t_socket_1.attribute_domain = "POINT"

            # Socket rA
            ra_socket_1 = color_res_name.interface.new_socket(
                name="rA",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            ra_socket_1.attribute_domain = "POINT"

            # Socket rC
            rc_socket_1 = color_res_name.interface.new_socket(
                name="rC",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            rc_socket_1.attribute_domain = "POINT"

            # Socket rG
            rg_socket_1 = color_res_name.interface.new_socket(
                name="rG",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            rg_socket_1.attribute_domain = "POINT"

            # Socket rU
            ru_socket_1 = color_res_name.interface.new_socket(
                name="rU",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=nucleic_panel,
            )
            ru_socket_1.attribute_domain = "POINT"

            # initialize color_res_name nodes
            # node Group Output
            group_output_185 = color_res_name.nodes.new("NodeGroupOutput")
            group_output_185.name = "Group Output"
            group_output_185.is_active_output = True

            # node Group Input
            group_input_182 = color_res_name.nodes.new("NodeGroupInput")
            group_input_182.name = "Group Input"
            group_input_182.outputs[20].hide = True
            group_input_182.outputs[21].hide = True
            group_input_182.outputs[22].hide = True
            group_input_182.outputs[23].hide = True
            group_input_182.outputs[24].hide = True
            group_input_182.outputs[25].hide = True
            group_input_182.outputs[26].hide = True
            group_input_182.outputs[27].hide = True
            group_input_182.outputs[28].hide = True

            # node Named Attribute.001
            named_attribute_001_27 = color_res_name.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_27.name = "Named Attribute.001"
            named_attribute_001_27.data_type = "FLOAT_COLOR"
            # Name
            named_attribute_001_27.inputs[0].default_value = "Color"

            # node Named Attribute
            named_attribute_46 = color_res_name.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_46.name = "Named Attribute"
            named_attribute_46.data_type = "INT"
            # Name
            named_attribute_46.inputs[0].default_value = "res_name"

            # node Index Switch
            index_switch_8 = color_res_name.nodes.new("GeometryNodeIndexSwitch")
            index_switch_8.name = "Index Switch"
            index_switch_8.data_type = "RGBA"
            index_switch_8.index_switch_items.clear()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            index_switch_8.index_switch_items.new()
            # Item_20
            index_switch_8.inputs[21].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_21
            index_switch_8.inputs[22].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_22
            index_switch_8.inputs[23].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_23
            index_switch_8.inputs[24].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_24
            index_switch_8.inputs[25].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_25
            index_switch_8.inputs[26].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_26
            index_switch_8.inputs[27].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_27
            index_switch_8.inputs[28].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_28
            index_switch_8.inputs[29].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_29
            index_switch_8.inputs[30].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_34
            index_switch_8.inputs[35].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_35
            index_switch_8.inputs[36].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_36
            index_switch_8.inputs[37].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_37
            index_switch_8.inputs[38].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_38
            index_switch_8.inputs[39].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )
            # Item_39
            index_switch_8.inputs[40].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Switch
            switch_48 = color_res_name.nodes.new("GeometryNodeSwitch")
            switch_48.name = "Switch"
            switch_48.input_type = "RGBA"

            # node Group
            group_53 = color_res_name.nodes.new("GeometryNodeGroup")
            group_53.name = "Group"
            group_53.node_tree = between_integer
            # Socket_2
            group_53.inputs[1].default_value = 0
            # Socket_3
            group_53.inputs[2].default_value = 43

            # node Group Input.001
            group_input_001_33 = color_res_name.nodes.new("NodeGroupInput")
            group_input_001_33.name = "Group Input.001"
            group_input_001_33.outputs[0].hide = True
            group_input_001_33.outputs[1].hide = True
            group_input_001_33.outputs[2].hide = True
            group_input_001_33.outputs[3].hide = True
            group_input_001_33.outputs[4].hide = True
            group_input_001_33.outputs[5].hide = True
            group_input_001_33.outputs[6].hide = True
            group_input_001_33.outputs[7].hide = True
            group_input_001_33.outputs[8].hide = True
            group_input_001_33.outputs[9].hide = True
            group_input_001_33.outputs[10].hide = True
            group_input_001_33.outputs[11].hide = True
            group_input_001_33.outputs[12].hide = True
            group_input_001_33.outputs[13].hide = True
            group_input_001_33.outputs[14].hide = True
            group_input_001_33.outputs[15].hide = True
            group_input_001_33.outputs[16].hide = True
            group_input_001_33.outputs[17].hide = True
            group_input_001_33.outputs[18].hide = True
            group_input_001_33.outputs[19].hide = True
            group_input_001_33.outputs[28].hide = True

            # Set locations
            group_output_185.location = (-60.0, 440.0)
            group_input_182.location = (-800.0, 300.0)
            named_attribute_001_27.location = (-540.0, 460.0)
            named_attribute_46.location = (-800.0, 440.0)
            index_switch_8.location = (-540.0, 320.0)
            switch_48.location = (-360.0, 600.0)
            group_53.location = (-540.0, 600.0)
            group_input_001_33.location = (-800.0, -440.0)

            # Set dimensions
            group_output_185.width, group_output_185.height = 140.0, 100.0
            group_input_182.width, group_input_182.height = 140.0, 100.0
            named_attribute_001_27.width, named_attribute_001_27.height = 140.0, 100.0
            named_attribute_46.width, named_attribute_46.height = 142.794921875, 100.0
            index_switch_8.width, index_switch_8.height = 140.0, 100.0
            switch_48.width, switch_48.height = 140.0, 100.0
            group_53.width, group_53.height = 140.0, 100.0
            group_input_001_33.width, group_input_001_33.height = 140.0, 100.0

            # initialize color_res_name links
            # named_attribute_46.Attribute -> index_switch_8.Index
            color_res_name.links.new(
                named_attribute_46.outputs[0], index_switch_8.inputs[0]
            )
            # named_attribute_001_27.Attribute -> switch_48.False
            color_res_name.links.new(
                named_attribute_001_27.outputs[0], switch_48.inputs[1]
            )
            # group_53.Boolean -> switch_48.Switch
            color_res_name.links.new(group_53.outputs[0], switch_48.inputs[0])
            # group_input_182.ALA -> index_switch_8.0
            color_res_name.links.new(
                group_input_182.outputs[0], index_switch_8.inputs[1]
            )
            # group_input_182.ARG -> index_switch_8.1
            color_res_name.links.new(
                group_input_182.outputs[1], index_switch_8.inputs[2]
            )
            # group_input_182.ASN -> index_switch_8.2
            color_res_name.links.new(
                group_input_182.outputs[2], index_switch_8.inputs[3]
            )
            # group_input_182.ASP -> index_switch_8.3
            color_res_name.links.new(
                group_input_182.outputs[3], index_switch_8.inputs[4]
            )
            # group_input_182.CYS -> index_switch_8.4
            color_res_name.links.new(
                group_input_182.outputs[4], index_switch_8.inputs[5]
            )
            # group_input_182.GLU -> index_switch_8.5
            color_res_name.links.new(
                group_input_182.outputs[5], index_switch_8.inputs[6]
            )
            # group_input_182.GLN -> index_switch_8.6
            color_res_name.links.new(
                group_input_182.outputs[6], index_switch_8.inputs[7]
            )
            # group_input_182.GLY -> index_switch_8.7
            color_res_name.links.new(
                group_input_182.outputs[7], index_switch_8.inputs[8]
            )
            # group_input_182.HIS -> index_switch_8.8
            color_res_name.links.new(
                group_input_182.outputs[8], index_switch_8.inputs[9]
            )
            # group_input_182.ILE -> index_switch_8.9
            color_res_name.links.new(
                group_input_182.outputs[9], index_switch_8.inputs[10]
            )
            # group_input_182.LEU -> index_switch_8.10
            color_res_name.links.new(
                group_input_182.outputs[10], index_switch_8.inputs[11]
            )
            # group_input_182.LYS -> index_switch_8.11
            color_res_name.links.new(
                group_input_182.outputs[11], index_switch_8.inputs[12]
            )
            # group_input_182.MET -> index_switch_8.12
            color_res_name.links.new(
                group_input_182.outputs[12], index_switch_8.inputs[13]
            )
            # group_input_182.PHE -> index_switch_8.13
            color_res_name.links.new(
                group_input_182.outputs[13], index_switch_8.inputs[14]
            )
            # group_input_182.PRO -> index_switch_8.14
            color_res_name.links.new(
                group_input_182.outputs[14], index_switch_8.inputs[15]
            )
            # group_input_182.SER -> index_switch_8.15
            color_res_name.links.new(
                group_input_182.outputs[15], index_switch_8.inputs[16]
            )
            # group_input_182.THR -> index_switch_8.16
            color_res_name.links.new(
                group_input_182.outputs[16], index_switch_8.inputs[17]
            )
            # group_input_182.TRP -> index_switch_8.17
            color_res_name.links.new(
                group_input_182.outputs[17], index_switch_8.inputs[18]
            )
            # group_input_182.TYR -> index_switch_8.18
            color_res_name.links.new(
                group_input_182.outputs[18], index_switch_8.inputs[19]
            )
            # group_input_182.VAL -> index_switch_8.19
            color_res_name.links.new(
                group_input_182.outputs[19], index_switch_8.inputs[20]
            )
            # named_attribute_46.Attribute -> group_53.Value
            color_res_name.links.new(named_attribute_46.outputs[0], group_53.inputs[0])
            # switch_48.Output -> group_output_185.Color
            color_res_name.links.new(switch_48.outputs[0], group_output_185.inputs[0])
            # group_input_001_33.A -> index_switch_8.30
            color_res_name.links.new(
                group_input_001_33.outputs[20], index_switch_8.inputs[31]
            )
            # group_input_001_33.C -> index_switch_8.31
            color_res_name.links.new(
                group_input_001_33.outputs[21], index_switch_8.inputs[32]
            )
            # group_input_001_33.G -> index_switch_8.32
            color_res_name.links.new(
                group_input_001_33.outputs[22], index_switch_8.inputs[33]
            )
            # group_input_001_33.T -> index_switch_8.33
            color_res_name.links.new(
                group_input_001_33.outputs[23], index_switch_8.inputs[34]
            )
            # group_input_001_33.rA -> index_switch_8.40
            color_res_name.links.new(
                group_input_001_33.outputs[24], index_switch_8.inputs[41]
            )
            # group_input_001_33.rC -> index_switch_8.41
            color_res_name.links.new(
                group_input_001_33.outputs[25], index_switch_8.inputs[42]
            )
            # group_input_001_33.rG -> index_switch_8.42
            color_res_name.links.new(
                group_input_001_33.outputs[26], index_switch_8.inputs[43]
            )
            # group_input_001_33.rU -> index_switch_8.43
            color_res_name.links.new(
                group_input_001_33.outputs[27], index_switch_8.inputs[44]
            )
            # index_switch_8.Output -> switch_48.True
            color_res_name.links.new(index_switch_8.outputs[0], switch_48.inputs[2])
            return color_res_name

        color_res_name = color_res_name_node_group()

        # initialize select_element node group
        def select_element_node_group():
            select_element = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Element"
            )

            select_element.color_tag = "INPUT"
            select_element.description = ""

            # select_element interface
            # Socket Selection
            selection_socket_63 = select_element.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_63.attribute_domain = "POINT"

            # Socket Inverted
            inverted_socket_26 = select_element.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_26.attribute_domain = "POINT"

            # Socket And
            and_socket_20 = select_element.interface.new_socket(
                name="And", in_out="INPUT", socket_type="NodeSocketBool"
            )
            and_socket_20.attribute_domain = "POINT"
            and_socket_20.hide_value = True

            # Socket Or
            or_socket_19 = select_element.interface.new_socket(
                name="Or", in_out="INPUT", socket_type="NodeSocketBool"
            )
            or_socket_19.attribute_domain = "POINT"
            or_socket_19.hide_value = True

            # Panel 1-20
            _1_20_panel = select_element.interface.new_panel(
                "1-20", default_closed=True
            )
            # Socket H
            h_socket_2 = select_element.interface.new_socket(
                name="H",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            h_socket_2.attribute_domain = "POINT"

            # Socket He
            he_socket = select_element.interface.new_socket(
                name="He",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            he_socket.attribute_domain = "POINT"

            # Socket Li
            li_socket = select_element.interface.new_socket(
                name="Li",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            li_socket.attribute_domain = "POINT"

            # Socket Be
            be_socket = select_element.interface.new_socket(
                name="Be",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            be_socket.attribute_domain = "POINT"

            # Socket B
            b_socket_6 = select_element.interface.new_socket(
                name="B",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            b_socket_6.attribute_domain = "POINT"

            # Socket C
            c_socket_10 = select_element.interface.new_socket(
                name="C",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            c_socket_10.attribute_domain = "POINT"

            # Socket N
            n_socket_4 = select_element.interface.new_socket(
                name="N",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            n_socket_4.attribute_domain = "POINT"

            # Socket O
            o_socket_4 = select_element.interface.new_socket(
                name="O",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            o_socket_4.attribute_domain = "POINT"

            # Socket F
            f_socket = select_element.interface.new_socket(
                name="F",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            f_socket.attribute_domain = "POINT"

            # Socket Ne
            ne_socket = select_element.interface.new_socket(
                name="Ne",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            ne_socket.attribute_domain = "POINT"

            # Socket Na
            na_socket = select_element.interface.new_socket(
                name="Na",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            na_socket.attribute_domain = "POINT"

            # Socket Mg
            mg_socket = select_element.interface.new_socket(
                name="Mg",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            mg_socket.attribute_domain = "POINT"

            # Socket Al
            al_socket = select_element.interface.new_socket(
                name="Al",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            al_socket.attribute_domain = "POINT"

            # Socket Si
            si_socket = select_element.interface.new_socket(
                name="Si",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            si_socket.attribute_domain = "POINT"

            # Socket P
            p_socket = select_element.interface.new_socket(
                name="P",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            p_socket.attribute_domain = "POINT"

            # Socket S
            s_socket = select_element.interface.new_socket(
                name="S",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            s_socket.attribute_domain = "POINT"

            # Socket Cl
            cl_socket = select_element.interface.new_socket(
                name="Cl",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            cl_socket.attribute_domain = "POINT"

            # Socket Ar
            ar_socket = select_element.interface.new_socket(
                name="Ar",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            ar_socket.attribute_domain = "POINT"

            # Socket K
            k_socket = select_element.interface.new_socket(
                name="K",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            k_socket.attribute_domain = "POINT"

            # Socket Ca
            ca_socket_2 = select_element.interface.new_socket(
                name="Ca",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_1_20_panel,
            )
            ca_socket_2.attribute_domain = "POINT"

            # Panel 21-40
            _21_40_panel = select_element.interface.new_panel(
                "21-40", default_closed=True
            )
            # Socket Sc
            sc_socket = select_element.interface.new_socket(
                name="Sc",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            sc_socket.attribute_domain = "POINT"

            # Socket Ti
            ti_socket = select_element.interface.new_socket(
                name="Ti",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            ti_socket.attribute_domain = "POINT"

            # Socket V
            v_socket = select_element.interface.new_socket(
                name="V",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            v_socket.attribute_domain = "POINT"

            # Socket Cr
            cr_socket = select_element.interface.new_socket(
                name="Cr",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            cr_socket.attribute_domain = "POINT"

            # Socket Mn
            mn_socket = select_element.interface.new_socket(
                name="Mn",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            mn_socket.attribute_domain = "POINT"

            # Socket Fe
            fe_socket = select_element.interface.new_socket(
                name="Fe",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            fe_socket.attribute_domain = "POINT"

            # Socket Co
            co_socket = select_element.interface.new_socket(
                name="Co",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            co_socket.attribute_domain = "POINT"

            # Socket Ni
            ni_socket = select_element.interface.new_socket(
                name="Ni",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            ni_socket.attribute_domain = "POINT"

            # Socket Cu
            cu_socket = select_element.interface.new_socket(
                name="Cu",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            cu_socket.attribute_domain = "POINT"

            # Socket Zn
            zn_socket = select_element.interface.new_socket(
                name="Zn",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            zn_socket.attribute_domain = "POINT"

            # Socket Ga
            ga_socket = select_element.interface.new_socket(
                name="Ga",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            ga_socket.attribute_domain = "POINT"

            # Socket Ge
            ge_socket = select_element.interface.new_socket(
                name="Ge",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            ge_socket.attribute_domain = "POINT"

            # Socket As
            as_socket = select_element.interface.new_socket(
                name="As",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            as_socket.attribute_domain = "POINT"

            # Socket Se
            se_socket = select_element.interface.new_socket(
                name="Se",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            se_socket.attribute_domain = "POINT"

            # Socket Br
            br_socket = select_element.interface.new_socket(
                name="Br",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            br_socket.attribute_domain = "POINT"

            # Socket Kr
            kr_socket = select_element.interface.new_socket(
                name="Kr",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            kr_socket.attribute_domain = "POINT"

            # Socket Rb
            rb_socket = select_element.interface.new_socket(
                name="Rb",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            rb_socket.attribute_domain = "POINT"

            # Socket Sr
            sr_socket = select_element.interface.new_socket(
                name="Sr",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            sr_socket.attribute_domain = "POINT"

            # Socket Y
            y_socket_1 = select_element.interface.new_socket(
                name="Y",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            y_socket_1.attribute_domain = "POINT"

            # Socket Zr
            zr_socket = select_element.interface.new_socket(
                name="Zr",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_21_40_panel,
            )
            zr_socket.attribute_domain = "POINT"

            # Panel 41-60
            _41_60_panel = select_element.interface.new_panel(
                "41-60", default_closed=True
            )
            # Socket Nb
            nb_socket = select_element.interface.new_socket(
                name="Nb",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            nb_socket.attribute_domain = "POINT"

            # Socket Mo
            mo_socket = select_element.interface.new_socket(
                name="Mo",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            mo_socket.attribute_domain = "POINT"

            # Socket Tc
            tc_socket = select_element.interface.new_socket(
                name="Tc",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            tc_socket.attribute_domain = "POINT"

            # Socket Ru
            ru_socket_2 = select_element.interface.new_socket(
                name="Ru",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            ru_socket_2.attribute_domain = "POINT"

            # Socket Rh
            rh_socket = select_element.interface.new_socket(
                name="Rh",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            rh_socket.attribute_domain = "POINT"

            # Socket Pd
            pd_socket = select_element.interface.new_socket(
                name="Pd",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            pd_socket.attribute_domain = "POINT"

            # Socket Ag
            ag_socket = select_element.interface.new_socket(
                name="Ag",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            ag_socket.attribute_domain = "POINT"

            # Socket Cd
            cd_socket = select_element.interface.new_socket(
                name="Cd",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            cd_socket.attribute_domain = "POINT"

            # Socket In
            in_socket = select_element.interface.new_socket(
                name="In",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            in_socket.attribute_domain = "POINT"

            # Socket Sn
            sn_socket = select_element.interface.new_socket(
                name="Sn",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            sn_socket.attribute_domain = "POINT"

            # Socket Sb
            sb_socket = select_element.interface.new_socket(
                name="Sb",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            sb_socket.attribute_domain = "POINT"

            # Socket Te
            te_socket = select_element.interface.new_socket(
                name="Te",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            te_socket.attribute_domain = "POINT"

            # Socket I
            i_socket_4 = select_element.interface.new_socket(
                name="I",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            i_socket_4.attribute_domain = "POINT"

            # Socket Xe
            xe_socket = select_element.interface.new_socket(
                name="Xe",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            xe_socket.attribute_domain = "POINT"

            # Socket Cs
            cs_socket = select_element.interface.new_socket(
                name="Cs",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            cs_socket.attribute_domain = "POINT"

            # Socket Ba
            ba_socket = select_element.interface.new_socket(
                name="Ba",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            ba_socket.attribute_domain = "POINT"

            # Socket La
            la_socket = select_element.interface.new_socket(
                name="La",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            la_socket.attribute_domain = "POINT"

            # Socket Ce
            ce_socket = select_element.interface.new_socket(
                name="Ce",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            ce_socket.attribute_domain = "POINT"

            # Socket Pr
            pr_socket = select_element.interface.new_socket(
                name="Pr",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            pr_socket.attribute_domain = "POINT"

            # Socket Nd
            nd_socket = select_element.interface.new_socket(
                name="Nd",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_41_60_panel,
            )
            nd_socket.attribute_domain = "POINT"

            # Panel 61-80
            _61_80_panel = select_element.interface.new_panel(
                "61-80", default_closed=True
            )
            # Socket Pm
            pm_socket = select_element.interface.new_socket(
                name="Pm",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            pm_socket.attribute_domain = "POINT"

            # Socket Sm
            sm_socket = select_element.interface.new_socket(
                name="Sm",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            sm_socket.attribute_domain = "POINT"

            # Socket Eu
            eu_socket = select_element.interface.new_socket(
                name="Eu",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            eu_socket.attribute_domain = "POINT"

            # Socket Gd
            gd_socket = select_element.interface.new_socket(
                name="Gd",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            gd_socket.attribute_domain = "POINT"

            # Socket Tb
            tb_socket = select_element.interface.new_socket(
                name="Tb",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            tb_socket.attribute_domain = "POINT"

            # Socket Dy
            dy_socket = select_element.interface.new_socket(
                name="Dy",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            dy_socket.attribute_domain = "POINT"

            # Socket Ho
            ho_socket = select_element.interface.new_socket(
                name="Ho",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            ho_socket.attribute_domain = "POINT"

            # Socket Er
            er_socket = select_element.interface.new_socket(
                name="Er",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            er_socket.attribute_domain = "POINT"

            # Socket Tm
            tm_socket = select_element.interface.new_socket(
                name="Tm",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            tm_socket.attribute_domain = "POINT"

            # Socket Yb
            yb_socket = select_element.interface.new_socket(
                name="Yb",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            yb_socket.attribute_domain = "POINT"

            # Socket Lu
            lu_socket = select_element.interface.new_socket(
                name="Lu",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            lu_socket.attribute_domain = "POINT"

            # Socket Hf
            hf_socket = select_element.interface.new_socket(
                name="Hf",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            hf_socket.attribute_domain = "POINT"

            # Socket Ta
            ta_socket = select_element.interface.new_socket(
                name="Ta",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            ta_socket.attribute_domain = "POINT"

            # Socket W
            w_socket = select_element.interface.new_socket(
                name="W",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            w_socket.attribute_domain = "POINT"

            # Socket Re
            re_socket = select_element.interface.new_socket(
                name="Re",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            re_socket.attribute_domain = "POINT"

            # Socket Os
            os_socket = select_element.interface.new_socket(
                name="Os",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            os_socket.attribute_domain = "POINT"

            # Socket Ir
            ir_socket = select_element.interface.new_socket(
                name="Ir",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            ir_socket.attribute_domain = "POINT"

            # Socket Pt
            pt_socket = select_element.interface.new_socket(
                name="Pt",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            pt_socket.attribute_domain = "POINT"

            # Socket Au
            au_socket = select_element.interface.new_socket(
                name="Au",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            au_socket.attribute_domain = "POINT"

            # Socket Hg
            hg_socket = select_element.interface.new_socket(
                name="Hg",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=_61_80_panel,
            )
            hg_socket.attribute_domain = "POINT"

            # initialize select_element nodes
            # node Group Input
            group_input_183 = select_element.nodes.new("NodeGroupInput")
            group_input_183.name = "Group Input"
            group_input_183.outputs[0].hide = True
            group_input_183.outputs[1].hide = True

            # node Group Output
            group_output_186 = select_element.nodes.new("NodeGroupOutput")
            group_output_186.name = "Group Output"
            group_output_186.is_active_output = True

            # node Named Attribute
            named_attribute_47 = select_element.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_47.name = "Named Attribute"
            named_attribute_47.data_type = "INT"
            # Name
            named_attribute_47.inputs[0].default_value = "atomic_number"

            # node Index Switch
            index_switch_9 = select_element.nodes.new("GeometryNodeIndexSwitch")
            index_switch_9.name = "Index Switch"
            index_switch_9.data_type = "BOOLEAN"
            index_switch_9.index_switch_items.clear()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            index_switch_9.index_switch_items.new()
            # Item_0
            index_switch_9.inputs[1].default_value = False

            # node Boolean Math
            boolean_math_44 = select_element.nodes.new("FunctionNodeBooleanMath")
            boolean_math_44.name = "Boolean Math"
            boolean_math_44.operation = "NOT"

            # node Reroute
            reroute_56 = select_element.nodes.new("NodeReroute")
            reroute_56.name = "Reroute"
            # node Boolean Math.001
            boolean_math_001_34 = select_element.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_34.name = "Boolean Math.001"
            boolean_math_001_34.operation = "AND"

            # node Boolean Math.002
            boolean_math_002_23 = select_element.nodes.new("FunctionNodeBooleanMath")
            boolean_math_002_23.name = "Boolean Math.002"
            boolean_math_002_23.operation = "OR"

            # node Group Input.001
            group_input_001_34 = select_element.nodes.new("NodeGroupInput")
            group_input_001_34.name = "Group Input.001"
            group_input_001_34.outputs[1].hide = True
            group_input_001_34.outputs[2].hide = True
            group_input_001_34.outputs[3].hide = True
            group_input_001_34.outputs[4].hide = True
            group_input_001_34.outputs[5].hide = True
            group_input_001_34.outputs[6].hide = True
            group_input_001_34.outputs[7].hide = True
            group_input_001_34.outputs[8].hide = True
            group_input_001_34.outputs[9].hide = True
            group_input_001_34.outputs[10].hide = True
            group_input_001_34.outputs[11].hide = True
            group_input_001_34.outputs[12].hide = True
            group_input_001_34.outputs[13].hide = True
            group_input_001_34.outputs[14].hide = True
            group_input_001_34.outputs[15].hide = True
            group_input_001_34.outputs[16].hide = True
            group_input_001_34.outputs[17].hide = True
            group_input_001_34.outputs[18].hide = True
            group_input_001_34.outputs[19].hide = True
            group_input_001_34.outputs[20].hide = True
            group_input_001_34.outputs[21].hide = True
            group_input_001_34.outputs[22].hide = True
            group_input_001_34.outputs[23].hide = True
            group_input_001_34.outputs[24].hide = True
            group_input_001_34.outputs[25].hide = True
            group_input_001_34.outputs[26].hide = True
            group_input_001_34.outputs[27].hide = True
            group_input_001_34.outputs[28].hide = True
            group_input_001_34.outputs[29].hide = True
            group_input_001_34.outputs[30].hide = True
            group_input_001_34.outputs[31].hide = True
            group_input_001_34.outputs[32].hide = True
            group_input_001_34.outputs[33].hide = True
            group_input_001_34.outputs[34].hide = True
            group_input_001_34.outputs[35].hide = True
            group_input_001_34.outputs[36].hide = True
            group_input_001_34.outputs[37].hide = True
            group_input_001_34.outputs[38].hide = True
            group_input_001_34.outputs[39].hide = True
            group_input_001_34.outputs[40].hide = True
            group_input_001_34.outputs[41].hide = True
            group_input_001_34.outputs[42].hide = True
            group_input_001_34.outputs[43].hide = True
            group_input_001_34.outputs[44].hide = True
            group_input_001_34.outputs[45].hide = True
            group_input_001_34.outputs[46].hide = True
            group_input_001_34.outputs[47].hide = True
            group_input_001_34.outputs[48].hide = True
            group_input_001_34.outputs[49].hide = True
            group_input_001_34.outputs[50].hide = True
            group_input_001_34.outputs[51].hide = True
            group_input_001_34.outputs[52].hide = True
            group_input_001_34.outputs[53].hide = True
            group_input_001_34.outputs[54].hide = True
            group_input_001_34.outputs[55].hide = True
            group_input_001_34.outputs[56].hide = True
            group_input_001_34.outputs[57].hide = True
            group_input_001_34.outputs[58].hide = True
            group_input_001_34.outputs[59].hide = True
            group_input_001_34.outputs[60].hide = True
            group_input_001_34.outputs[61].hide = True
            group_input_001_34.outputs[62].hide = True
            group_input_001_34.outputs[63].hide = True
            group_input_001_34.outputs[64].hide = True
            group_input_001_34.outputs[65].hide = True
            group_input_001_34.outputs[66].hide = True
            group_input_001_34.outputs[67].hide = True
            group_input_001_34.outputs[68].hide = True
            group_input_001_34.outputs[69].hide = True
            group_input_001_34.outputs[70].hide = True
            group_input_001_34.outputs[71].hide = True
            group_input_001_34.outputs[72].hide = True
            group_input_001_34.outputs[73].hide = True
            group_input_001_34.outputs[74].hide = True
            group_input_001_34.outputs[75].hide = True
            group_input_001_34.outputs[76].hide = True
            group_input_001_34.outputs[77].hide = True
            group_input_001_34.outputs[78].hide = True
            group_input_001_34.outputs[79].hide = True
            group_input_001_34.outputs[80].hide = True
            group_input_001_34.outputs[81].hide = True
            group_input_001_34.outputs[82].hide = True

            # node Group Input.002
            group_input_002_19 = select_element.nodes.new("NodeGroupInput")
            group_input_002_19.name = "Group Input.002"
            group_input_002_19.outputs[0].hide = True
            group_input_002_19.outputs[2].hide = True
            group_input_002_19.outputs[3].hide = True
            group_input_002_19.outputs[4].hide = True
            group_input_002_19.outputs[5].hide = True
            group_input_002_19.outputs[6].hide = True
            group_input_002_19.outputs[7].hide = True
            group_input_002_19.outputs[8].hide = True
            group_input_002_19.outputs[9].hide = True
            group_input_002_19.outputs[10].hide = True
            group_input_002_19.outputs[11].hide = True
            group_input_002_19.outputs[12].hide = True
            group_input_002_19.outputs[13].hide = True
            group_input_002_19.outputs[14].hide = True
            group_input_002_19.outputs[15].hide = True
            group_input_002_19.outputs[16].hide = True
            group_input_002_19.outputs[17].hide = True
            group_input_002_19.outputs[18].hide = True
            group_input_002_19.outputs[19].hide = True
            group_input_002_19.outputs[20].hide = True
            group_input_002_19.outputs[21].hide = True
            group_input_002_19.outputs[22].hide = True
            group_input_002_19.outputs[23].hide = True
            group_input_002_19.outputs[24].hide = True
            group_input_002_19.outputs[25].hide = True
            group_input_002_19.outputs[26].hide = True
            group_input_002_19.outputs[27].hide = True
            group_input_002_19.outputs[28].hide = True
            group_input_002_19.outputs[29].hide = True
            group_input_002_19.outputs[30].hide = True
            group_input_002_19.outputs[31].hide = True
            group_input_002_19.outputs[32].hide = True
            group_input_002_19.outputs[33].hide = True
            group_input_002_19.outputs[34].hide = True
            group_input_002_19.outputs[35].hide = True
            group_input_002_19.outputs[36].hide = True
            group_input_002_19.outputs[37].hide = True
            group_input_002_19.outputs[38].hide = True
            group_input_002_19.outputs[39].hide = True
            group_input_002_19.outputs[40].hide = True
            group_input_002_19.outputs[41].hide = True
            group_input_002_19.outputs[42].hide = True
            group_input_002_19.outputs[43].hide = True
            group_input_002_19.outputs[44].hide = True
            group_input_002_19.outputs[45].hide = True
            group_input_002_19.outputs[46].hide = True
            group_input_002_19.outputs[47].hide = True
            group_input_002_19.outputs[48].hide = True
            group_input_002_19.outputs[49].hide = True
            group_input_002_19.outputs[50].hide = True
            group_input_002_19.outputs[51].hide = True
            group_input_002_19.outputs[52].hide = True
            group_input_002_19.outputs[53].hide = True
            group_input_002_19.outputs[54].hide = True
            group_input_002_19.outputs[55].hide = True
            group_input_002_19.outputs[56].hide = True
            group_input_002_19.outputs[57].hide = True
            group_input_002_19.outputs[58].hide = True
            group_input_002_19.outputs[59].hide = True
            group_input_002_19.outputs[60].hide = True
            group_input_002_19.outputs[61].hide = True
            group_input_002_19.outputs[62].hide = True
            group_input_002_19.outputs[63].hide = True
            group_input_002_19.outputs[64].hide = True
            group_input_002_19.outputs[65].hide = True
            group_input_002_19.outputs[66].hide = True
            group_input_002_19.outputs[67].hide = True
            group_input_002_19.outputs[68].hide = True
            group_input_002_19.outputs[69].hide = True
            group_input_002_19.outputs[70].hide = True
            group_input_002_19.outputs[71].hide = True
            group_input_002_19.outputs[72].hide = True
            group_input_002_19.outputs[73].hide = True
            group_input_002_19.outputs[74].hide = True
            group_input_002_19.outputs[75].hide = True
            group_input_002_19.outputs[76].hide = True
            group_input_002_19.outputs[77].hide = True
            group_input_002_19.outputs[78].hide = True
            group_input_002_19.outputs[79].hide = True
            group_input_002_19.outputs[80].hide = True
            group_input_002_19.outputs[81].hide = True
            group_input_002_19.outputs[82].hide = True

            # Set locations
            group_input_183.location = (-340.0, 0.0)
            group_output_186.location = (625.14501953125, 42.824180603027344)
            named_attribute_47.location = (0.0, 150.0)
            index_switch_9.location = (0.0, 0.0)
            boolean_math_44.location = (625.14501953125, -157.17581176757812)
            reroute_56.location = (548.0000610351562, -46.49168395996094)
            boolean_math_001_34.location = (180.0, 0.0)
            boolean_math_002_23.location = (360.0, 0.0)
            group_input_001_34.location = (180.0, -140.0)
            group_input_002_19.location = (360.0, -140.0)

            # Set dimensions
            group_input_183.width, group_input_183.height = 140.0, 100.0
            group_output_186.width, group_output_186.height = 140.0, 100.0
            named_attribute_47.width, named_attribute_47.height = 140.0, 100.0
            index_switch_9.width, index_switch_9.height = 140.0, 100.0
            boolean_math_44.width, boolean_math_44.height = 140.0, 100.0
            reroute_56.width, reroute_56.height = 16.0, 100.0
            boolean_math_001_34.width, boolean_math_001_34.height = 140.0, 100.0
            boolean_math_002_23.width, boolean_math_002_23.height = 140.0, 100.0
            group_input_001_34.width, group_input_001_34.height = 140.0, 100.0
            group_input_002_19.width, group_input_002_19.height = 140.0, 100.0

            # initialize select_element links
            # named_attribute_47.Attribute -> index_switch_9.Index
            select_element.links.new(
                named_attribute_47.outputs[0], index_switch_9.inputs[0]
            )
            # group_input_183.H -> index_switch_9.1
            select_element.links.new(
                group_input_183.outputs[2], index_switch_9.inputs[2]
            )
            # group_input_183.He -> index_switch_9.2
            select_element.links.new(
                group_input_183.outputs[3], index_switch_9.inputs[3]
            )
            # group_input_183.Li -> index_switch_9.3
            select_element.links.new(
                group_input_183.outputs[4], index_switch_9.inputs[4]
            )
            # group_input_183.Be -> index_switch_9.4
            select_element.links.new(
                group_input_183.outputs[5], index_switch_9.inputs[5]
            )
            # group_input_183.B -> index_switch_9.5
            select_element.links.new(
                group_input_183.outputs[6], index_switch_9.inputs[6]
            )
            # group_input_183.C -> index_switch_9.6
            select_element.links.new(
                group_input_183.outputs[7], index_switch_9.inputs[7]
            )
            # group_input_183.N -> index_switch_9.7
            select_element.links.new(
                group_input_183.outputs[8], index_switch_9.inputs[8]
            )
            # group_input_183.O -> index_switch_9.8
            select_element.links.new(
                group_input_183.outputs[9], index_switch_9.inputs[9]
            )
            # group_input_183.F -> index_switch_9.9
            select_element.links.new(
                group_input_183.outputs[10], index_switch_9.inputs[10]
            )
            # group_input_183.Ne -> index_switch_9.10
            select_element.links.new(
                group_input_183.outputs[11], index_switch_9.inputs[11]
            )
            # group_input_183.Na -> index_switch_9.11
            select_element.links.new(
                group_input_183.outputs[12], index_switch_9.inputs[12]
            )
            # group_input_183.Mg -> index_switch_9.12
            select_element.links.new(
                group_input_183.outputs[13], index_switch_9.inputs[13]
            )
            # group_input_183.Al -> index_switch_9.13
            select_element.links.new(
                group_input_183.outputs[14], index_switch_9.inputs[14]
            )
            # group_input_183.Si -> index_switch_9.14
            select_element.links.new(
                group_input_183.outputs[15], index_switch_9.inputs[15]
            )
            # group_input_183.P -> index_switch_9.15
            select_element.links.new(
                group_input_183.outputs[16], index_switch_9.inputs[16]
            )
            # group_input_183.S -> index_switch_9.16
            select_element.links.new(
                group_input_183.outputs[17], index_switch_9.inputs[17]
            )
            # group_input_183.Cl -> index_switch_9.17
            select_element.links.new(
                group_input_183.outputs[18], index_switch_9.inputs[18]
            )
            # group_input_183.Ar -> index_switch_9.18
            select_element.links.new(
                group_input_183.outputs[19], index_switch_9.inputs[19]
            )
            # group_input_183.K -> index_switch_9.19
            select_element.links.new(
                group_input_183.outputs[20], index_switch_9.inputs[20]
            )
            # group_input_183.Ca -> index_switch_9.20
            select_element.links.new(
                group_input_183.outputs[21], index_switch_9.inputs[21]
            )
            # group_input_183.Sc -> index_switch_9.21
            select_element.links.new(
                group_input_183.outputs[22], index_switch_9.inputs[22]
            )
            # group_input_183.Ti -> index_switch_9.22
            select_element.links.new(
                group_input_183.outputs[23], index_switch_9.inputs[23]
            )
            # group_input_183.V -> index_switch_9.23
            select_element.links.new(
                group_input_183.outputs[24], index_switch_9.inputs[24]
            )
            # group_input_183.Cr -> index_switch_9.24
            select_element.links.new(
                group_input_183.outputs[25], index_switch_9.inputs[25]
            )
            # group_input_183.Mn -> index_switch_9.25
            select_element.links.new(
                group_input_183.outputs[26], index_switch_9.inputs[26]
            )
            # group_input_183.Fe -> index_switch_9.26
            select_element.links.new(
                group_input_183.outputs[27], index_switch_9.inputs[27]
            )
            # group_input_183.Co -> index_switch_9.27
            select_element.links.new(
                group_input_183.outputs[28], index_switch_9.inputs[28]
            )
            # group_input_183.Ni -> index_switch_9.28
            select_element.links.new(
                group_input_183.outputs[29], index_switch_9.inputs[29]
            )
            # group_input_183.Cu -> index_switch_9.29
            select_element.links.new(
                group_input_183.outputs[30], index_switch_9.inputs[30]
            )
            # group_input_183.Zn -> index_switch_9.30
            select_element.links.new(
                group_input_183.outputs[31], index_switch_9.inputs[31]
            )
            # group_input_183.Ga -> index_switch_9.31
            select_element.links.new(
                group_input_183.outputs[32], index_switch_9.inputs[32]
            )
            # group_input_183.Ge -> index_switch_9.32
            select_element.links.new(
                group_input_183.outputs[33], index_switch_9.inputs[33]
            )
            # group_input_183.As -> index_switch_9.33
            select_element.links.new(
                group_input_183.outputs[34], index_switch_9.inputs[34]
            )
            # group_input_183.Se -> index_switch_9.34
            select_element.links.new(
                group_input_183.outputs[35], index_switch_9.inputs[35]
            )
            # group_input_183.Br -> index_switch_9.35
            select_element.links.new(
                group_input_183.outputs[36], index_switch_9.inputs[36]
            )
            # group_input_183.Kr -> index_switch_9.36
            select_element.links.new(
                group_input_183.outputs[37], index_switch_9.inputs[37]
            )
            # group_input_183.Rb -> index_switch_9.37
            select_element.links.new(
                group_input_183.outputs[38], index_switch_9.inputs[38]
            )
            # group_input_183.Sr -> index_switch_9.38
            select_element.links.new(
                group_input_183.outputs[39], index_switch_9.inputs[39]
            )
            # group_input_183.Y -> index_switch_9.39
            select_element.links.new(
                group_input_183.outputs[40], index_switch_9.inputs[40]
            )
            # group_input_183.Zr -> index_switch_9.40
            select_element.links.new(
                group_input_183.outputs[41], index_switch_9.inputs[41]
            )
            # group_input_183.Nb -> index_switch_9.41
            select_element.links.new(
                group_input_183.outputs[42], index_switch_9.inputs[42]
            )
            # group_input_183.Mo -> index_switch_9.42
            select_element.links.new(
                group_input_183.outputs[43], index_switch_9.inputs[43]
            )
            # group_input_183.Tc -> index_switch_9.43
            select_element.links.new(
                group_input_183.outputs[44], index_switch_9.inputs[44]
            )
            # group_input_183.Ru -> index_switch_9.44
            select_element.links.new(
                group_input_183.outputs[45], index_switch_9.inputs[45]
            )
            # group_input_183.Rh -> index_switch_9.45
            select_element.links.new(
                group_input_183.outputs[46], index_switch_9.inputs[46]
            )
            # group_input_183.Pd -> index_switch_9.46
            select_element.links.new(
                group_input_183.outputs[47], index_switch_9.inputs[47]
            )
            # group_input_183.Ag -> index_switch_9.47
            select_element.links.new(
                group_input_183.outputs[48], index_switch_9.inputs[48]
            )
            # group_input_183.Cd -> index_switch_9.48
            select_element.links.new(
                group_input_183.outputs[49], index_switch_9.inputs[49]
            )
            # group_input_183.In -> index_switch_9.49
            select_element.links.new(
                group_input_183.outputs[50], index_switch_9.inputs[50]
            )
            # group_input_183.Sn -> index_switch_9.50
            select_element.links.new(
                group_input_183.outputs[51], index_switch_9.inputs[51]
            )
            # group_input_183.Sb -> index_switch_9.51
            select_element.links.new(
                group_input_183.outputs[52], index_switch_9.inputs[52]
            )
            # group_input_183.Te -> index_switch_9.52
            select_element.links.new(
                group_input_183.outputs[53], index_switch_9.inputs[53]
            )
            # group_input_183.I -> index_switch_9.53
            select_element.links.new(
                group_input_183.outputs[54], index_switch_9.inputs[54]
            )
            # group_input_183.Xe -> index_switch_9.54
            select_element.links.new(
                group_input_183.outputs[55], index_switch_9.inputs[55]
            )
            # group_input_183.Cs -> index_switch_9.55
            select_element.links.new(
                group_input_183.outputs[56], index_switch_9.inputs[56]
            )
            # group_input_183.Ba -> index_switch_9.56
            select_element.links.new(
                group_input_183.outputs[57], index_switch_9.inputs[57]
            )
            # group_input_183.La -> index_switch_9.57
            select_element.links.new(
                group_input_183.outputs[58], index_switch_9.inputs[58]
            )
            # group_input_183.Ce -> index_switch_9.58
            select_element.links.new(
                group_input_183.outputs[59], index_switch_9.inputs[59]
            )
            # group_input_183.Pr -> index_switch_9.59
            select_element.links.new(
                group_input_183.outputs[60], index_switch_9.inputs[60]
            )
            # group_input_183.Nd -> index_switch_9.60
            select_element.links.new(
                group_input_183.outputs[61], index_switch_9.inputs[61]
            )
            # group_input_183.Pm -> index_switch_9.61
            select_element.links.new(
                group_input_183.outputs[62], index_switch_9.inputs[62]
            )
            # group_input_183.Sm -> index_switch_9.62
            select_element.links.new(
                group_input_183.outputs[63], index_switch_9.inputs[63]
            )
            # group_input_183.Eu -> index_switch_9.63
            select_element.links.new(
                group_input_183.outputs[64], index_switch_9.inputs[64]
            )
            # group_input_183.Gd -> index_switch_9.64
            select_element.links.new(
                group_input_183.outputs[65], index_switch_9.inputs[65]
            )
            # group_input_183.Tb -> index_switch_9.65
            select_element.links.new(
                group_input_183.outputs[66], index_switch_9.inputs[66]
            )
            # group_input_183.Dy -> index_switch_9.66
            select_element.links.new(
                group_input_183.outputs[67], index_switch_9.inputs[67]
            )
            # group_input_183.Ho -> index_switch_9.67
            select_element.links.new(
                group_input_183.outputs[68], index_switch_9.inputs[68]
            )
            # group_input_183.Er -> index_switch_9.68
            select_element.links.new(
                group_input_183.outputs[69], index_switch_9.inputs[69]
            )
            # group_input_183.Tm -> index_switch_9.69
            select_element.links.new(
                group_input_183.outputs[70], index_switch_9.inputs[70]
            )
            # group_input_183.Yb -> index_switch_9.70
            select_element.links.new(
                group_input_183.outputs[71], index_switch_9.inputs[71]
            )
            # group_input_183.Lu -> index_switch_9.71
            select_element.links.new(
                group_input_183.outputs[72], index_switch_9.inputs[72]
            )
            # group_input_183.Hf -> index_switch_9.72
            select_element.links.new(
                group_input_183.outputs[73], index_switch_9.inputs[73]
            )
            # group_input_183.Ta -> index_switch_9.73
            select_element.links.new(
                group_input_183.outputs[74], index_switch_9.inputs[74]
            )
            # group_input_183.W -> index_switch_9.74
            select_element.links.new(
                group_input_183.outputs[75], index_switch_9.inputs[75]
            )
            # group_input_183.Re -> index_switch_9.75
            select_element.links.new(
                group_input_183.outputs[76], index_switch_9.inputs[76]
            )
            # group_input_183.Os -> index_switch_9.76
            select_element.links.new(
                group_input_183.outputs[77], index_switch_9.inputs[77]
            )
            # group_input_183.Ir -> index_switch_9.77
            select_element.links.new(
                group_input_183.outputs[78], index_switch_9.inputs[78]
            )
            # group_input_183.Pt -> index_switch_9.78
            select_element.links.new(
                group_input_183.outputs[79], index_switch_9.inputs[79]
            )
            # group_input_183.Au -> index_switch_9.79
            select_element.links.new(
                group_input_183.outputs[80], index_switch_9.inputs[80]
            )
            # group_input_183.Hg -> index_switch_9.80
            select_element.links.new(
                group_input_183.outputs[81], index_switch_9.inputs[81]
            )
            # reroute_56.Output -> group_output_186.Selection
            select_element.links.new(reroute_56.outputs[0], group_output_186.inputs[0])
            # reroute_56.Output -> boolean_math_44.Boolean
            select_element.links.new(reroute_56.outputs[0], boolean_math_44.inputs[0])
            # boolean_math_44.Boolean -> group_output_186.Inverted
            select_element.links.new(
                boolean_math_44.outputs[0], group_output_186.inputs[1]
            )
            # index_switch_9.Output -> boolean_math_001_34.Boolean
            select_element.links.new(
                index_switch_9.outputs[0], boolean_math_001_34.inputs[0]
            )
            # boolean_math_002_23.Boolean -> reroute_56.Input
            select_element.links.new(
                boolean_math_002_23.outputs[0], reroute_56.inputs[0]
            )
            # boolean_math_001_34.Boolean -> boolean_math_002_23.Boolean
            select_element.links.new(
                boolean_math_001_34.outputs[0], boolean_math_002_23.inputs[0]
            )
            # group_input_001_34.And -> boolean_math_001_34.Boolean
            select_element.links.new(
                group_input_001_34.outputs[0], boolean_math_001_34.inputs[1]
            )
            # group_input_002_19.Or -> boolean_math_002_23.Boolean
            select_element.links.new(
                group_input_002_19.outputs[1], boolean_math_002_23.inputs[1]
            )
            return select_element

        select_element = select_element_node_group()

        # initialize color_element node group
        def color_element_node_group():
            color_element = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Element"
            )

            color_element.color_tag = "COLOR"
            color_element.description = ""

            # color_element interface
            # Socket Color
            color_socket_25 = color_element.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_25.attribute_domain = "POINT"

            # Panel 1-20
            _1_20_panel_1 = color_element.interface.new_panel(
                "1-20", default_closed=True
            )
            # Socket H
            h_socket_3 = color_element.interface.new_socket(
                name="H",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            h_socket_3.attribute_domain = "POINT"

            # Socket He
            he_socket_1 = color_element.interface.new_socket(
                name="He",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            he_socket_1.attribute_domain = "POINT"

            # Socket Li
            li_socket_1 = color_element.interface.new_socket(
                name="Li",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            li_socket_1.attribute_domain = "POINT"

            # Socket Be
            be_socket_1 = color_element.interface.new_socket(
                name="Be",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            be_socket_1.attribute_domain = "POINT"

            # Socket B
            b_socket_7 = color_element.interface.new_socket(
                name="B",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            b_socket_7.attribute_domain = "POINT"

            # Socket C
            c_socket_11 = color_element.interface.new_socket(
                name="C",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            c_socket_11.attribute_domain = "POINT"

            # Socket N
            n_socket_5 = color_element.interface.new_socket(
                name="N",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            n_socket_5.attribute_domain = "POINT"

            # Socket O
            o_socket_5 = color_element.interface.new_socket(
                name="O",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            o_socket_5.attribute_domain = "POINT"

            # Socket F
            f_socket_1 = color_element.interface.new_socket(
                name="F",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            f_socket_1.attribute_domain = "POINT"

            # Socket Ne
            ne_socket_1 = color_element.interface.new_socket(
                name="Ne",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            ne_socket_1.attribute_domain = "POINT"

            # Socket Na
            na_socket_1 = color_element.interface.new_socket(
                name="Na",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            na_socket_1.attribute_domain = "POINT"

            # Socket Mg
            mg_socket_1 = color_element.interface.new_socket(
                name="Mg",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            mg_socket_1.attribute_domain = "POINT"

            # Socket Al
            al_socket_1 = color_element.interface.new_socket(
                name="Al",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            al_socket_1.attribute_domain = "POINT"

            # Socket Si
            si_socket_1 = color_element.interface.new_socket(
                name="Si",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            si_socket_1.attribute_domain = "POINT"

            # Socket P
            p_socket_1 = color_element.interface.new_socket(
                name="P",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            p_socket_1.attribute_domain = "POINT"

            # Socket S
            s_socket_1 = color_element.interface.new_socket(
                name="S",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            s_socket_1.attribute_domain = "POINT"

            # Socket Cl
            cl_socket_1 = color_element.interface.new_socket(
                name="Cl",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            cl_socket_1.attribute_domain = "POINT"

            # Socket Ar
            ar_socket_1 = color_element.interface.new_socket(
                name="Ar",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            ar_socket_1.attribute_domain = "POINT"

            # Socket K
            k_socket_1 = color_element.interface.new_socket(
                name="K",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            k_socket_1.attribute_domain = "POINT"

            # Socket Ca
            ca_socket_3 = color_element.interface.new_socket(
                name="Ca",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_1_20_panel_1,
            )
            ca_socket_3.attribute_domain = "POINT"

            # Panel 21-40
            _21_40_panel_1 = color_element.interface.new_panel(
                "21-40", default_closed=True
            )
            # Socket Sc
            sc_socket_1 = color_element.interface.new_socket(
                name="Sc",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            sc_socket_1.attribute_domain = "POINT"

            # Socket Ti
            ti_socket_1 = color_element.interface.new_socket(
                name="Ti",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            ti_socket_1.attribute_domain = "POINT"

            # Socket V
            v_socket_1 = color_element.interface.new_socket(
                name="V",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            v_socket_1.attribute_domain = "POINT"

            # Socket Cr
            cr_socket_1 = color_element.interface.new_socket(
                name="Cr",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            cr_socket_1.attribute_domain = "POINT"

            # Socket Mn
            mn_socket_1 = color_element.interface.new_socket(
                name="Mn",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            mn_socket_1.attribute_domain = "POINT"

            # Socket Fe
            fe_socket_1 = color_element.interface.new_socket(
                name="Fe",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            fe_socket_1.attribute_domain = "POINT"

            # Socket Co
            co_socket_1 = color_element.interface.new_socket(
                name="Co",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            co_socket_1.attribute_domain = "POINT"

            # Socket Ni
            ni_socket_1 = color_element.interface.new_socket(
                name="Ni",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            ni_socket_1.attribute_domain = "POINT"

            # Socket Cu
            cu_socket_1 = color_element.interface.new_socket(
                name="Cu",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            cu_socket_1.attribute_domain = "POINT"

            # Socket Zn
            zn_socket_1 = color_element.interface.new_socket(
                name="Zn",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            zn_socket_1.attribute_domain = "POINT"

            # Socket Ga
            ga_socket_1 = color_element.interface.new_socket(
                name="Ga",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            ga_socket_1.attribute_domain = "POINT"

            # Socket Ge
            ge_socket_1 = color_element.interface.new_socket(
                name="Ge",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            ge_socket_1.attribute_domain = "POINT"

            # Socket As
            as_socket_1 = color_element.interface.new_socket(
                name="As",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            as_socket_1.attribute_domain = "POINT"

            # Socket Se
            se_socket_1 = color_element.interface.new_socket(
                name="Se",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            se_socket_1.attribute_domain = "POINT"

            # Socket Br
            br_socket_1 = color_element.interface.new_socket(
                name="Br",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            br_socket_1.attribute_domain = "POINT"

            # Socket Kr
            kr_socket_1 = color_element.interface.new_socket(
                name="Kr",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            kr_socket_1.attribute_domain = "POINT"

            # Socket Rb
            rb_socket_1 = color_element.interface.new_socket(
                name="Rb",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            rb_socket_1.attribute_domain = "POINT"

            # Socket Sr
            sr_socket_1 = color_element.interface.new_socket(
                name="Sr",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            sr_socket_1.attribute_domain = "POINT"

            # Socket Y
            y_socket_2 = color_element.interface.new_socket(
                name="Y",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            y_socket_2.attribute_domain = "POINT"

            # Socket Zr
            zr_socket_1 = color_element.interface.new_socket(
                name="Zr",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_21_40_panel_1,
            )
            zr_socket_1.attribute_domain = "POINT"

            # Panel 41-60
            _41_60_panel_1 = color_element.interface.new_panel(
                "41-60", default_closed=True
            )
            # Socket Nb
            nb_socket_1 = color_element.interface.new_socket(
                name="Nb",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            nb_socket_1.attribute_domain = "POINT"

            # Socket Mo
            mo_socket_1 = color_element.interface.new_socket(
                name="Mo",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            mo_socket_1.attribute_domain = "POINT"

            # Socket Tc
            tc_socket_1 = color_element.interface.new_socket(
                name="Tc",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            tc_socket_1.attribute_domain = "POINT"

            # Socket Ru
            ru_socket_3 = color_element.interface.new_socket(
                name="Ru",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            ru_socket_3.attribute_domain = "POINT"

            # Socket Rh
            rh_socket_1 = color_element.interface.new_socket(
                name="Rh",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            rh_socket_1.attribute_domain = "POINT"

            # Socket Pd
            pd_socket_1 = color_element.interface.new_socket(
                name="Pd",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            pd_socket_1.attribute_domain = "POINT"

            # Socket Ag
            ag_socket_1 = color_element.interface.new_socket(
                name="Ag",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            ag_socket_1.attribute_domain = "POINT"

            # Socket Cd
            cd_socket_1 = color_element.interface.new_socket(
                name="Cd",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            cd_socket_1.attribute_domain = "POINT"

            # Socket In
            in_socket_1 = color_element.interface.new_socket(
                name="In",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            in_socket_1.attribute_domain = "POINT"

            # Socket Sn
            sn_socket_1 = color_element.interface.new_socket(
                name="Sn",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            sn_socket_1.attribute_domain = "POINT"

            # Socket Sb
            sb_socket_1 = color_element.interface.new_socket(
                name="Sb",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            sb_socket_1.attribute_domain = "POINT"

            # Socket Te
            te_socket_1 = color_element.interface.new_socket(
                name="Te",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            te_socket_1.attribute_domain = "POINT"

            # Socket I
            i_socket_5 = color_element.interface.new_socket(
                name="I",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            i_socket_5.attribute_domain = "POINT"

            # Socket Xe
            xe_socket_1 = color_element.interface.new_socket(
                name="Xe",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            xe_socket_1.attribute_domain = "POINT"

            # Socket Cs
            cs_socket_1 = color_element.interface.new_socket(
                name="Cs",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            cs_socket_1.attribute_domain = "POINT"

            # Socket Ba
            ba_socket_1 = color_element.interface.new_socket(
                name="Ba",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            ba_socket_1.attribute_domain = "POINT"

            # Socket La
            la_socket_1 = color_element.interface.new_socket(
                name="La",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            la_socket_1.attribute_domain = "POINT"

            # Socket Ce
            ce_socket_1 = color_element.interface.new_socket(
                name="Ce",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            ce_socket_1.attribute_domain = "POINT"

            # Socket Pr
            pr_socket_1 = color_element.interface.new_socket(
                name="Pr",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            pr_socket_1.attribute_domain = "POINT"

            # Socket Nd
            nd_socket_1 = color_element.interface.new_socket(
                name="Nd",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_41_60_panel_1,
            )
            nd_socket_1.attribute_domain = "POINT"

            # Panel 61-80
            _61_80_panel_1 = color_element.interface.new_panel(
                "61-80", default_closed=True
            )
            # Socket Pm
            pm_socket_1 = color_element.interface.new_socket(
                name="Pm",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            pm_socket_1.attribute_domain = "POINT"

            # Socket Sm
            sm_socket_1 = color_element.interface.new_socket(
                name="Sm",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            sm_socket_1.attribute_domain = "POINT"

            # Socket Eu
            eu_socket_1 = color_element.interface.new_socket(
                name="Eu",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            eu_socket_1.attribute_domain = "POINT"

            # Socket Gd
            gd_socket_1 = color_element.interface.new_socket(
                name="Gd",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            gd_socket_1.attribute_domain = "POINT"

            # Socket Tb
            tb_socket_1 = color_element.interface.new_socket(
                name="Tb",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            tb_socket_1.attribute_domain = "POINT"

            # Socket Dy
            dy_socket_1 = color_element.interface.new_socket(
                name="Dy",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            dy_socket_1.attribute_domain = "POINT"

            # Socket Ho
            ho_socket_1 = color_element.interface.new_socket(
                name="Ho",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            ho_socket_1.attribute_domain = "POINT"

            # Socket Er
            er_socket_1 = color_element.interface.new_socket(
                name="Er",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            er_socket_1.attribute_domain = "POINT"

            # Socket Tm
            tm_socket_1 = color_element.interface.new_socket(
                name="Tm",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            tm_socket_1.attribute_domain = "POINT"

            # Socket Yb
            yb_socket_1 = color_element.interface.new_socket(
                name="Yb",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            yb_socket_1.attribute_domain = "POINT"

            # Socket Lu
            lu_socket_1 = color_element.interface.new_socket(
                name="Lu",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            lu_socket_1.attribute_domain = "POINT"

            # Socket Hf
            hf_socket_1 = color_element.interface.new_socket(
                name="Hf",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            hf_socket_1.attribute_domain = "POINT"

            # Socket Ta
            ta_socket_1 = color_element.interface.new_socket(
                name="Ta",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            ta_socket_1.attribute_domain = "POINT"

            # Socket W
            w_socket_1 = color_element.interface.new_socket(
                name="W",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            w_socket_1.attribute_domain = "POINT"

            # Socket Re
            re_socket_1 = color_element.interface.new_socket(
                name="Re",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            re_socket_1.attribute_domain = "POINT"

            # Socket Os
            os_socket_1 = color_element.interface.new_socket(
                name="Os",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            os_socket_1.attribute_domain = "POINT"

            # Socket Ir
            ir_socket_1 = color_element.interface.new_socket(
                name="Ir",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            ir_socket_1.attribute_domain = "POINT"

            # Socket Pt
            pt_socket_1 = color_element.interface.new_socket(
                name="Pt",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            pt_socket_1.attribute_domain = "POINT"

            # Socket Au
            au_socket_1 = color_element.interface.new_socket(
                name="Au",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            au_socket_1.attribute_domain = "POINT"

            # Socket Hg
            hg_socket_1 = color_element.interface.new_socket(
                name="Hg",
                in_out="INPUT",
                socket_type="NodeSocketColor",
                parent=_61_80_panel_1,
            )
            hg_socket_1.attribute_domain = "POINT"

            # initialize color_element nodes
            # node Group Input
            group_input_184 = color_element.nodes.new("NodeGroupInput")
            group_input_184.name = "Group Input"

            # node Group Output
            group_output_187 = color_element.nodes.new("NodeGroupOutput")
            group_output_187.name = "Group Output"
            group_output_187.is_active_output = True

            # node Named Attribute
            named_attribute_48 = color_element.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_48.name = "Named Attribute"
            named_attribute_48.data_type = "INT"
            # Name
            named_attribute_48.inputs[0].default_value = "atomic_number"

            # node Index Switch
            index_switch_10 = color_element.nodes.new("GeometryNodeIndexSwitch")
            index_switch_10.name = "Index Switch"
            index_switch_10.data_type = "RGBA"
            index_switch_10.index_switch_items.clear()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            index_switch_10.index_switch_items.new()
            # Item_0
            index_switch_10.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # Set locations
            group_input_184.location = (-340.0, 0.0)
            group_output_187.location = (200.0, 0.0)
            named_attribute_48.location = (0.0, 150.0)
            index_switch_10.location = (0.0, 0.0)

            # Set dimensions
            group_input_184.width, group_input_184.height = 140.0, 100.0
            group_output_187.width, group_output_187.height = 140.0, 100.0
            named_attribute_48.width, named_attribute_48.height = 140.0, 100.0
            index_switch_10.width, index_switch_10.height = 140.0, 100.0

            # initialize color_element links
            # named_attribute_48.Attribute -> index_switch_10.Index
            color_element.links.new(
                named_attribute_48.outputs[0], index_switch_10.inputs[0]
            )
            # group_input_184.H -> index_switch_10.1
            color_element.links.new(
                group_input_184.outputs[0], index_switch_10.inputs[2]
            )
            # group_input_184.He -> index_switch_10.2
            color_element.links.new(
                group_input_184.outputs[1], index_switch_10.inputs[3]
            )
            # group_input_184.Li -> index_switch_10.3
            color_element.links.new(
                group_input_184.outputs[2], index_switch_10.inputs[4]
            )
            # group_input_184.Be -> index_switch_10.4
            color_element.links.new(
                group_input_184.outputs[3], index_switch_10.inputs[5]
            )
            # group_input_184.B -> index_switch_10.5
            color_element.links.new(
                group_input_184.outputs[4], index_switch_10.inputs[6]
            )
            # group_input_184.C -> index_switch_10.6
            color_element.links.new(
                group_input_184.outputs[5], index_switch_10.inputs[7]
            )
            # group_input_184.N -> index_switch_10.7
            color_element.links.new(
                group_input_184.outputs[6], index_switch_10.inputs[8]
            )
            # group_input_184.O -> index_switch_10.8
            color_element.links.new(
                group_input_184.outputs[7], index_switch_10.inputs[9]
            )
            # group_input_184.F -> index_switch_10.9
            color_element.links.new(
                group_input_184.outputs[8], index_switch_10.inputs[10]
            )
            # group_input_184.Ne -> index_switch_10.10
            color_element.links.new(
                group_input_184.outputs[9], index_switch_10.inputs[11]
            )
            # group_input_184.Na -> index_switch_10.11
            color_element.links.new(
                group_input_184.outputs[10], index_switch_10.inputs[12]
            )
            # group_input_184.Mg -> index_switch_10.12
            color_element.links.new(
                group_input_184.outputs[11], index_switch_10.inputs[13]
            )
            # group_input_184.Al -> index_switch_10.13
            color_element.links.new(
                group_input_184.outputs[12], index_switch_10.inputs[14]
            )
            # group_input_184.Si -> index_switch_10.14
            color_element.links.new(
                group_input_184.outputs[13], index_switch_10.inputs[15]
            )
            # group_input_184.P -> index_switch_10.15
            color_element.links.new(
                group_input_184.outputs[14], index_switch_10.inputs[16]
            )
            # group_input_184.S -> index_switch_10.16
            color_element.links.new(
                group_input_184.outputs[15], index_switch_10.inputs[17]
            )
            # group_input_184.Cl -> index_switch_10.17
            color_element.links.new(
                group_input_184.outputs[16], index_switch_10.inputs[18]
            )
            # group_input_184.Ar -> index_switch_10.18
            color_element.links.new(
                group_input_184.outputs[17], index_switch_10.inputs[19]
            )
            # group_input_184.K -> index_switch_10.19
            color_element.links.new(
                group_input_184.outputs[18], index_switch_10.inputs[20]
            )
            # group_input_184.Ca -> index_switch_10.20
            color_element.links.new(
                group_input_184.outputs[19], index_switch_10.inputs[21]
            )
            # group_input_184.Sc -> index_switch_10.21
            color_element.links.new(
                group_input_184.outputs[20], index_switch_10.inputs[22]
            )
            # group_input_184.Ti -> index_switch_10.22
            color_element.links.new(
                group_input_184.outputs[21], index_switch_10.inputs[23]
            )
            # group_input_184.V -> index_switch_10.23
            color_element.links.new(
                group_input_184.outputs[22], index_switch_10.inputs[24]
            )
            # group_input_184.Cr -> index_switch_10.24
            color_element.links.new(
                group_input_184.outputs[23], index_switch_10.inputs[25]
            )
            # group_input_184.Mn -> index_switch_10.25
            color_element.links.new(
                group_input_184.outputs[24], index_switch_10.inputs[26]
            )
            # group_input_184.Fe -> index_switch_10.26
            color_element.links.new(
                group_input_184.outputs[25], index_switch_10.inputs[27]
            )
            # group_input_184.Co -> index_switch_10.27
            color_element.links.new(
                group_input_184.outputs[26], index_switch_10.inputs[28]
            )
            # group_input_184.Ni -> index_switch_10.28
            color_element.links.new(
                group_input_184.outputs[27], index_switch_10.inputs[29]
            )
            # group_input_184.Cu -> index_switch_10.29
            color_element.links.new(
                group_input_184.outputs[28], index_switch_10.inputs[30]
            )
            # group_input_184.Zn -> index_switch_10.30
            color_element.links.new(
                group_input_184.outputs[29], index_switch_10.inputs[31]
            )
            # group_input_184.Ga -> index_switch_10.31
            color_element.links.new(
                group_input_184.outputs[30], index_switch_10.inputs[32]
            )
            # group_input_184.Ge -> index_switch_10.32
            color_element.links.new(
                group_input_184.outputs[31], index_switch_10.inputs[33]
            )
            # group_input_184.As -> index_switch_10.33
            color_element.links.new(
                group_input_184.outputs[32], index_switch_10.inputs[34]
            )
            # group_input_184.Se -> index_switch_10.34
            color_element.links.new(
                group_input_184.outputs[33], index_switch_10.inputs[35]
            )
            # group_input_184.Br -> index_switch_10.35
            color_element.links.new(
                group_input_184.outputs[34], index_switch_10.inputs[36]
            )
            # group_input_184.Kr -> index_switch_10.36
            color_element.links.new(
                group_input_184.outputs[35], index_switch_10.inputs[37]
            )
            # group_input_184.Rb -> index_switch_10.37
            color_element.links.new(
                group_input_184.outputs[36], index_switch_10.inputs[38]
            )
            # group_input_184.Sr -> index_switch_10.38
            color_element.links.new(
                group_input_184.outputs[37], index_switch_10.inputs[39]
            )
            # group_input_184.Y -> index_switch_10.39
            color_element.links.new(
                group_input_184.outputs[38], index_switch_10.inputs[40]
            )
            # group_input_184.Zr -> index_switch_10.40
            color_element.links.new(
                group_input_184.outputs[39], index_switch_10.inputs[41]
            )
            # group_input_184.Nb -> index_switch_10.41
            color_element.links.new(
                group_input_184.outputs[40], index_switch_10.inputs[42]
            )
            # group_input_184.Mo -> index_switch_10.42
            color_element.links.new(
                group_input_184.outputs[41], index_switch_10.inputs[43]
            )
            # group_input_184.Tc -> index_switch_10.43
            color_element.links.new(
                group_input_184.outputs[42], index_switch_10.inputs[44]
            )
            # group_input_184.Ru -> index_switch_10.44
            color_element.links.new(
                group_input_184.outputs[43], index_switch_10.inputs[45]
            )
            # group_input_184.Rh -> index_switch_10.45
            color_element.links.new(
                group_input_184.outputs[44], index_switch_10.inputs[46]
            )
            # group_input_184.Pd -> index_switch_10.46
            color_element.links.new(
                group_input_184.outputs[45], index_switch_10.inputs[47]
            )
            # group_input_184.Ag -> index_switch_10.47
            color_element.links.new(
                group_input_184.outputs[46], index_switch_10.inputs[48]
            )
            # group_input_184.Cd -> index_switch_10.48
            color_element.links.new(
                group_input_184.outputs[47], index_switch_10.inputs[49]
            )
            # group_input_184.In -> index_switch_10.49
            color_element.links.new(
                group_input_184.outputs[48], index_switch_10.inputs[50]
            )
            # group_input_184.Sn -> index_switch_10.50
            color_element.links.new(
                group_input_184.outputs[49], index_switch_10.inputs[51]
            )
            # group_input_184.Sb -> index_switch_10.51
            color_element.links.new(
                group_input_184.outputs[50], index_switch_10.inputs[52]
            )
            # group_input_184.Te -> index_switch_10.52
            color_element.links.new(
                group_input_184.outputs[51], index_switch_10.inputs[53]
            )
            # group_input_184.I -> index_switch_10.53
            color_element.links.new(
                group_input_184.outputs[52], index_switch_10.inputs[54]
            )
            # group_input_184.Xe -> index_switch_10.54
            color_element.links.new(
                group_input_184.outputs[53], index_switch_10.inputs[55]
            )
            # group_input_184.Cs -> index_switch_10.55
            color_element.links.new(
                group_input_184.outputs[54], index_switch_10.inputs[56]
            )
            # group_input_184.Ba -> index_switch_10.56
            color_element.links.new(
                group_input_184.outputs[55], index_switch_10.inputs[57]
            )
            # group_input_184.La -> index_switch_10.57
            color_element.links.new(
                group_input_184.outputs[56], index_switch_10.inputs[58]
            )
            # group_input_184.Ce -> index_switch_10.58
            color_element.links.new(
                group_input_184.outputs[57], index_switch_10.inputs[59]
            )
            # group_input_184.Pr -> index_switch_10.59
            color_element.links.new(
                group_input_184.outputs[58], index_switch_10.inputs[60]
            )
            # group_input_184.Nd -> index_switch_10.60
            color_element.links.new(
                group_input_184.outputs[59], index_switch_10.inputs[61]
            )
            # group_input_184.Pm -> index_switch_10.61
            color_element.links.new(
                group_input_184.outputs[60], index_switch_10.inputs[62]
            )
            # group_input_184.Sm -> index_switch_10.62
            color_element.links.new(
                group_input_184.outputs[61], index_switch_10.inputs[63]
            )
            # group_input_184.Eu -> index_switch_10.63
            color_element.links.new(
                group_input_184.outputs[62], index_switch_10.inputs[64]
            )
            # group_input_184.Gd -> index_switch_10.64
            color_element.links.new(
                group_input_184.outputs[63], index_switch_10.inputs[65]
            )
            # group_input_184.Tb -> index_switch_10.65
            color_element.links.new(
                group_input_184.outputs[64], index_switch_10.inputs[66]
            )
            # group_input_184.Dy -> index_switch_10.66
            color_element.links.new(
                group_input_184.outputs[65], index_switch_10.inputs[67]
            )
            # group_input_184.Ho -> index_switch_10.67
            color_element.links.new(
                group_input_184.outputs[66], index_switch_10.inputs[68]
            )
            # group_input_184.Er -> index_switch_10.68
            color_element.links.new(
                group_input_184.outputs[67], index_switch_10.inputs[69]
            )
            # group_input_184.Tm -> index_switch_10.69
            color_element.links.new(
                group_input_184.outputs[68], index_switch_10.inputs[70]
            )
            # group_input_184.Yb -> index_switch_10.70
            color_element.links.new(
                group_input_184.outputs[69], index_switch_10.inputs[71]
            )
            # group_input_184.Lu -> index_switch_10.71
            color_element.links.new(
                group_input_184.outputs[70], index_switch_10.inputs[72]
            )
            # group_input_184.Hf -> index_switch_10.72
            color_element.links.new(
                group_input_184.outputs[71], index_switch_10.inputs[73]
            )
            # group_input_184.Ta -> index_switch_10.73
            color_element.links.new(
                group_input_184.outputs[72], index_switch_10.inputs[74]
            )
            # group_input_184.W -> index_switch_10.74
            color_element.links.new(
                group_input_184.outputs[73], index_switch_10.inputs[75]
            )
            # group_input_184.Re -> index_switch_10.75
            color_element.links.new(
                group_input_184.outputs[74], index_switch_10.inputs[76]
            )
            # group_input_184.Os -> index_switch_10.76
            color_element.links.new(
                group_input_184.outputs[75], index_switch_10.inputs[77]
            )
            # group_input_184.Ir -> index_switch_10.77
            color_element.links.new(
                group_input_184.outputs[76], index_switch_10.inputs[78]
            )
            # group_input_184.Pt -> index_switch_10.78
            color_element.links.new(
                group_input_184.outputs[77], index_switch_10.inputs[79]
            )
            # group_input_184.Au -> index_switch_10.79
            color_element.links.new(
                group_input_184.outputs[78], index_switch_10.inputs[80]
            )
            # group_input_184.Hg -> index_switch_10.80
            color_element.links.new(
                group_input_184.outputs[79], index_switch_10.inputs[81]
            )
            # index_switch_10.Output -> group_output_187.Color
            color_element.links.new(
                index_switch_10.outputs[0], group_output_187.inputs[0]
            )
            return color_element

        color_element = color_element_node_group()

        # initialize utils_zyz_to_rotation node group
        def utils_zyz_to_rotation_node_group():
            utils_zyz_to_rotation = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Utils ZYZ to Rotation"
            )

            utils_zyz_to_rotation.color_tag = "CONVERTER"
            utils_zyz_to_rotation.description = ""

            # utils_zyz_to_rotation interface
            # Socket Rotation
            rotation_socket_9 = utils_zyz_to_rotation.interface.new_socket(
                name="Rotation", in_out="OUTPUT", socket_type="NodeSocketRotation"
            )
            rotation_socket_9.attribute_domain = "POINT"

            # Socket Phi
            phi_socket = utils_zyz_to_rotation.interface.new_socket(
                name="Phi", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            phi_socket.subtype = "NONE"
            phi_socket.default_value = 0.5
            phi_socket.min_value = -10000.0
            phi_socket.max_value = 10000.0
            phi_socket.attribute_domain = "POINT"

            # Socket Theta
            theta_socket = utils_zyz_to_rotation.interface.new_socket(
                name="Theta", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            theta_socket.subtype = "NONE"
            theta_socket.default_value = 0.5
            theta_socket.min_value = -10000.0
            theta_socket.max_value = 10000.0
            theta_socket.attribute_domain = "POINT"

            # Socket Psi
            psi_socket = utils_zyz_to_rotation.interface.new_socket(
                name="Psi", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            psi_socket.subtype = "NONE"
            psi_socket.default_value = 0.5
            psi_socket.min_value = -10000.0
            psi_socket.max_value = 10000.0
            psi_socket.attribute_domain = "POINT"

            # initialize utils_zyz_to_rotation nodes
            # node Math.002
            math_002_25 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_002_25.name = "Math.002"
            math_002_25.operation = "RADIANS"
            math_002_25.use_clamp = False

            # node Rotation to Euler.001
            rotation_to_euler_001 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeRotationToEuler"
            )
            rotation_to_euler_001.name = "Rotation to Euler.001"

            # node Axis Angle to Rotation.001
            axis_angle_to_rotation_001 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeAxisAngleToRotation"
            )
            axis_angle_to_rotation_001.name = "Axis Angle to Rotation.001"
            # Axis
            axis_angle_to_rotation_001.inputs[0].default_value = (0.0, 1.0, 0.0)

            # node Math.003
            math_003_21 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_003_21.name = "Math.003"
            math_003_21.operation = "MULTIPLY"
            math_003_21.use_clamp = False
            # Value_001
            math_003_21.inputs[1].default_value = -1.0

            # node Rotate Euler
            rotate_euler_2 = utils_zyz_to_rotation.nodes.new("FunctionNodeRotateEuler")
            rotate_euler_2.name = "Rotate Euler"
            rotate_euler_2.rotation_type = "EULER"
            rotate_euler_2.space = "OBJECT"

            # node Rotation to Euler
            rotation_to_euler = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeRotationToEuler"
            )
            rotation_to_euler.name = "Rotation to Euler"

            # node Axis Angle to Rotation
            axis_angle_to_rotation = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeAxisAngleToRotation"
            )
            axis_angle_to_rotation.name = "Axis Angle to Rotation"
            # Axis
            axis_angle_to_rotation.inputs[0].default_value = (0.0, 0.0, 1.0)

            # node Math.004
            math_004_8 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_004_8.name = "Math.004"
            math_004_8.operation = "MULTIPLY"
            math_004_8.use_clamp = False
            # Value_001
            math_004_8.inputs[1].default_value = -1.0

            # node Math.005
            math_005_7 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_005_7.name = "Math.005"
            math_005_7.operation = "RADIANS"
            math_005_7.use_clamp = False

            # node Rotation to Euler.002
            rotation_to_euler_002 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeRotationToEuler"
            )
            rotation_to_euler_002.name = "Rotation to Euler.002"

            # node Axis Angle to Rotation.002
            axis_angle_to_rotation_002 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeAxisAngleToRotation"
            )
            axis_angle_to_rotation_002.name = "Axis Angle to Rotation.002"
            # Axis
            axis_angle_to_rotation_002.inputs[0].default_value = (0.0, 0.0, 1.0)

            # node Math.006
            math_006_6 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_006_6.name = "Math.006"
            math_006_6.operation = "MULTIPLY"
            math_006_6.use_clamp = False
            # Value_001
            math_006_6.inputs[1].default_value = -1.0

            # node Rotate Euler.001
            rotate_euler_001 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeRotateEuler"
            )
            rotate_euler_001.name = "Rotate Euler.001"
            rotate_euler_001.rotation_type = "EULER"
            rotate_euler_001.space = "OBJECT"

            # node Group Output
            group_output_188 = utils_zyz_to_rotation.nodes.new("NodeGroupOutput")
            group_output_188.name = "Group Output"
            group_output_188.is_active_output = True

            # node Euler to Rotation
            euler_to_rotation_1 = utils_zyz_to_rotation.nodes.new(
                "FunctionNodeEulerToRotation"
            )
            euler_to_rotation_1.name = "Euler to Rotation"

            # node Math.001
            math_001_34 = utils_zyz_to_rotation.nodes.new("ShaderNodeMath")
            math_001_34.name = "Math.001"
            math_001_34.operation = "RADIANS"
            math_001_34.use_clamp = False

            # node Group Input
            group_input_185 = utils_zyz_to_rotation.nodes.new("NodeGroupInput")
            group_input_185.name = "Group Input"

            # Set locations
            math_002_25.location = (-694.4244995117188, -84.2993392944336)
            rotation_to_euler_001.location = (-10.165328979492188, 35.051002502441406)
            axis_angle_to_rotation_001.location = (
                -253.7509002685547,
                -19.897422790527344,
            )
            math_003_21.location = (-474.16217041015625, -123.19185638427734)
            rotate_euler_2.location = (164.9982452392578, 342.89154052734375)
            rotation_to_euler.location = (-93.54765319824219, 256.75140380859375)
            axis_angle_to_rotation.location = (-258.35333251953125, 220.27224731445312)
            math_004_8.location = (-478.16180419921875, 154.58316040039062)
            math_005_7.location = (-658.0630493164062, -378.8916931152344)
            rotation_to_euler_002.location = (-53.87699890136719, -285.2621765136719)
            axis_angle_to_rotation_002.location = (
                -218.6826629638672,
                -321.7413024902344,
            )
            math_006_6.location = (-438.49114990234375, -387.4303894042969)
            rotate_euler_001.location = (430.89129638671875, 252.57174682617188)
            group_output_188.location = (1071.1878662109375, 143.63784790039062)
            euler_to_rotation_1.location = (641.1380615234375, 110.34000396728516)
            math_001_34.location = (-697.7337036132812, 163.12179565429688)
            group_input_185.location = (-924.5353393554688, -5.580089569091797)

            # Set dimensions
            math_002_25.width, math_002_25.height = 140.0, 100.0
            rotation_to_euler_001.width, rotation_to_euler_001.height = 140.0, 100.0
            axis_angle_to_rotation_001.width, axis_angle_to_rotation_001.height = (
                140.0,
                100.0,
            )
            math_003_21.width, math_003_21.height = 140.0, 100.0
            rotate_euler_2.width, rotate_euler_2.height = 140.0, 100.0
            rotation_to_euler.width, rotation_to_euler.height = 140.0, 100.0
            axis_angle_to_rotation.width, axis_angle_to_rotation.height = 140.0, 100.0
            math_004_8.width, math_004_8.height = 140.0, 100.0
            math_005_7.width, math_005_7.height = 140.0, 100.0
            rotation_to_euler_002.width, rotation_to_euler_002.height = 140.0, 100.0
            axis_angle_to_rotation_002.width, axis_angle_to_rotation_002.height = (
                140.0,
                100.0,
            )
            math_006_6.width, math_006_6.height = 140.0, 100.0
            rotate_euler_001.width, rotate_euler_001.height = 140.0, 100.0
            group_output_188.width, group_output_188.height = 140.0, 100.0
            euler_to_rotation_1.width, euler_to_rotation_1.height = 140.0, 100.0
            math_001_34.width, math_001_34.height = 140.0, 100.0
            group_input_185.width, group_input_185.height = 140.0, 100.0

            # initialize utils_zyz_to_rotation links
            # math_006_6.Value -> axis_angle_to_rotation_002.Angle
            utils_zyz_to_rotation.links.new(
                math_006_6.outputs[0], axis_angle_to_rotation_002.inputs[1]
            )
            # rotation_to_euler.Euler -> rotate_euler_2.Rotation
            utils_zyz_to_rotation.links.new(
                rotation_to_euler.outputs[0], rotate_euler_2.inputs[0]
            )
            # axis_angle_to_rotation_002.Rotation -> rotation_to_euler_002.Rotation
            utils_zyz_to_rotation.links.new(
                axis_angle_to_rotation_002.outputs[0], rotation_to_euler_002.inputs[0]
            )
            # rotate_euler_2.Rotation -> rotate_euler_001.Rotation
            utils_zyz_to_rotation.links.new(
                rotate_euler_2.outputs[0], rotate_euler_001.inputs[0]
            )
            # rotation_to_euler_002.Euler -> rotate_euler_001.Rotate By
            utils_zyz_to_rotation.links.new(
                rotation_to_euler_002.outputs[0], rotate_euler_001.inputs[1]
            )
            # math_005_7.Value -> math_006_6.Value
            utils_zyz_to_rotation.links.new(math_005_7.outputs[0], math_006_6.inputs[0])
            # axis_angle_to_rotation_001.Rotation -> rotation_to_euler_001.Rotation
            utils_zyz_to_rotation.links.new(
                axis_angle_to_rotation_001.outputs[0], rotation_to_euler_001.inputs[0]
            )
            # math_003_21.Value -> axis_angle_to_rotation_001.Angle
            utils_zyz_to_rotation.links.new(
                math_003_21.outputs[0], axis_angle_to_rotation_001.inputs[1]
            )
            # math_004_8.Value -> axis_angle_to_rotation.Angle
            utils_zyz_to_rotation.links.new(
                math_004_8.outputs[0], axis_angle_to_rotation.inputs[1]
            )
            # math_001_34.Value -> math_004_8.Value
            utils_zyz_to_rotation.links.new(
                math_001_34.outputs[0], math_004_8.inputs[0]
            )
            # rotation_to_euler_001.Euler -> rotate_euler_2.Rotate By
            utils_zyz_to_rotation.links.new(
                rotation_to_euler_001.outputs[0], rotate_euler_2.inputs[1]
            )
            # axis_angle_to_rotation.Rotation -> rotation_to_euler.Rotation
            utils_zyz_to_rotation.links.new(
                axis_angle_to_rotation.outputs[0], rotation_to_euler.inputs[0]
            )
            # math_002_25.Value -> math_003_21.Value
            utils_zyz_to_rotation.links.new(
                math_002_25.outputs[0], math_003_21.inputs[0]
            )
            # rotate_euler_001.Rotation -> euler_to_rotation_1.Euler
            utils_zyz_to_rotation.links.new(
                rotate_euler_001.outputs[0], euler_to_rotation_1.inputs[0]
            )
            # euler_to_rotation_1.Rotation -> group_output_188.Rotation
            utils_zyz_to_rotation.links.new(
                euler_to_rotation_1.outputs[0], group_output_188.inputs[0]
            )
            # group_input_185.Theta -> math_002_25.Value
            utils_zyz_to_rotation.links.new(
                group_input_185.outputs[1], math_002_25.inputs[0]
            )
            # group_input_185.Phi -> math_001_34.Value
            utils_zyz_to_rotation.links.new(
                group_input_185.outputs[0], math_001_34.inputs[0]
            )
            # group_input_185.Psi -> math_005_7.Value
            utils_zyz_to_rotation.links.new(
                group_input_185.outputs[2], math_005_7.inputs[0]
            )
            return utils_zyz_to_rotation

        utils_zyz_to_rotation = utils_zyz_to_rotation_node_group()

        # initialize mn_starfile_micrograph node group
        def mn_starfile_micrograph_node_group():
            mn_starfile_micrograph = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="MN_Starfile_Micrograph"
            )

            mn_starfile_micrograph.color_tag = "NONE"
            mn_starfile_micrograph.description = ""

            # mn_starfile_micrograph interface
            # Socket Output
            output_socket_4 = mn_starfile_micrograph.interface.new_socket(
                name="Output", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            output_socket_4.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_40 = mn_starfile_micrograph.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_40.attribute_domain = "POINT"

            # Socket Switch
            switch_socket_1 = mn_starfile_micrograph.interface.new_socket(
                name="Switch", in_out="INPUT", socket_type="NodeSocketBool"
            )
            switch_socket_1.attribute_domain = "POINT"

            # Socket Image
            image_socket = mn_starfile_micrograph.interface.new_socket(
                name="Image", in_out="INPUT", socket_type="NodeSocketImage"
            )
            image_socket.attribute_domain = "POINT"

            # Socket A
            a_socket_11 = mn_starfile_micrograph.interface.new_socket(
                name="A", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            a_socket_11.subtype = "NONE"
            a_socket_11.default_value = 0.0
            a_socket_11.min_value = -10000.0
            a_socket_11.max_value = 10000.0
            a_socket_11.attribute_domain = "POINT"

            # Socket Z
            z_socket_1 = mn_starfile_micrograph.interface.new_socket(
                name="Z", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            z_socket_1.subtype = "NONE"
            z_socket_1.default_value = 0.0
            z_socket_1.min_value = -10000.0
            z_socket_1.max_value = 10000.0
            z_socket_1.attribute_domain = "POINT"

            # Socket Brightness
            brightness_socket = mn_starfile_micrograph.interface.new_socket(
                name="Brightness", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            brightness_socket.subtype = "NONE"
            brightness_socket.default_value = 0.0
            brightness_socket.min_value = -3.4028234663852886e38
            brightness_socket.max_value = 3.4028234663852886e38
            brightness_socket.attribute_domain = "POINT"

            # Socket Contrast
            contrast_socket = mn_starfile_micrograph.interface.new_socket(
                name="Contrast", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            contrast_socket.subtype = "NONE"
            contrast_socket.default_value = 0.0
            contrast_socket.min_value = -3.4028234663852886e38
            contrast_socket.max_value = 3.4028234663852886e38
            contrast_socket.attribute_domain = "POINT"

            # initialize mn_starfile_micrograph nodes
            # node Grid
            grid = mn_starfile_micrograph.nodes.new("GeometryNodeMeshGrid")
            grid.name = "Grid"
            # Size X
            grid.inputs[0].default_value = 1.0
            # Size Y
            grid.inputs[1].default_value = 1.0
            # Vertices X
            grid.inputs[2].default_value = 2
            # Vertices Y
            grid.inputs[3].default_value = 2

            # node Transform Geometry.006
            transform_geometry_006 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_006.name = "Transform Geometry.006"
            transform_geometry_006.mode = "COMPONENTS"
            # Translation
            transform_geometry_006.inputs[1].default_value = (0.5, 0.5, 0.0)
            # Rotation
            transform_geometry_006.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_006.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Transform Geometry.007
            transform_geometry_007 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_007.name = "Transform Geometry.007"
            transform_geometry_007.mode = "COMPONENTS"
            # Translation
            transform_geometry_007.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Rotation
            transform_geometry_007.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Transform Geometry.008
            transform_geometry_008 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_008.name = "Transform Geometry.008"
            transform_geometry_008.mode = "COMPONENTS"
            # Rotation
            transform_geometry_008.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_008.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Image Info
            image_info = mn_starfile_micrograph.nodes.new("GeometryNodeImageInfo")
            image_info.name = "Image Info"
            # Frame
            image_info.inputs[1].default_value = 0

            # node Combine XYZ.002
            combine_xyz_002_2 = mn_starfile_micrograph.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_002_2.name = "Combine XYZ.002"
            # X
            combine_xyz_002_2.inputs[0].default_value = 0.0
            # Y
            combine_xyz_002_2.inputs[1].default_value = 0.0

            # node Combine XYZ.001
            combine_xyz_001_5 = mn_starfile_micrograph.nodes.new("ShaderNodeCombineXYZ")
            combine_xyz_001_5.name = "Combine XYZ.001"
            # Z
            combine_xyz_001_5.inputs[2].default_value = 0.0

            # node Named Attribute.004
            named_attribute_004_7 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_7.name = "Named Attribute.004"
            named_attribute_004_7.data_type = "FLOAT"
            # Name
            named_attribute_004_7.inputs[0].default_value = "MNPixelSize"

            # node Attribute Statistic.002
            attribute_statistic_002 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_002.name = "Attribute Statistic.002"
            attribute_statistic_002.data_type = "FLOAT"
            attribute_statistic_002.domain = "POINT"
            # Selection
            attribute_statistic_002.inputs[1].default_value = True

            # node Attribute Statistic.001
            attribute_statistic_001 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_001.name = "Attribute Statistic.001"
            attribute_statistic_001.data_type = "FLOAT"
            attribute_statistic_001.domain = "POINT"
            # Selection
            attribute_statistic_001.inputs[1].default_value = True

            # node Switch.003
            switch_003_9 = mn_starfile_micrograph.nodes.new("GeometryNodeSwitch")
            switch_003_9.name = "Switch.003"
            switch_003_9.input_type = "FLOAT"
            # False
            switch_003_9.inputs[1].default_value = 1.0

            # node Compare.002
            compare_002_17 = mn_starfile_micrograph.nodes.new("FunctionNodeCompare")
            compare_002_17.name = "Compare.002"
            compare_002_17.data_type = "FLOAT"
            compare_002_17.mode = "ELEMENT"
            compare_002_17.operation = "GREATER_THAN"
            # B
            compare_002_17.inputs[1].default_value = 0.0

            # node Switch.004
            switch_004_5 = mn_starfile_micrograph.nodes.new("GeometryNodeSwitch")
            switch_004_5.name = "Switch.004"
            switch_004_5.input_type = "FLOAT"

            # node Math.001
            math_001_35 = mn_starfile_micrograph.nodes.new("ShaderNodeMath")
            math_001_35.name = "Math.001"
            math_001_35.operation = "DIVIDE"
            math_001_35.use_clamp = False
            # Value_001
            math_001_35.inputs[1].default_value = 100.0

            # node Vector Math
            vector_math_42 = mn_starfile_micrograph.nodes.new("ShaderNodeVectorMath")
            vector_math_42.name = "Vector Math"
            vector_math_42.operation = "MULTIPLY"

            # node Group Output
            group_output_189 = mn_starfile_micrograph.nodes.new("NodeGroupOutput")
            group_output_189.name = "Group Output"
            group_output_189.is_active_output = True

            # node Switch.002
            switch_002_20 = mn_starfile_micrograph.nodes.new("GeometryNodeSwitch")
            switch_002_20.name = "Switch.002"
            switch_002_20.input_type = "GEOMETRY"

            # node Set Material
            set_material_12 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeSetMaterial"
            )
            set_material_12.name = "Set Material"
            # Selection
            set_material_12.inputs[1].default_value = True
            if "MN_micrograph_material" in bpy.data.materials:
                set_material_12.inputs[2].default_value = bpy.data.materials[
                    "MN_micrograph_material"
                ]

            # node Store Named Attribute.001
            store_named_attribute_001_10 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_10.name = "Store Named Attribute.001"
            store_named_attribute_001_10.data_type = "FLOAT"
            store_named_attribute_001_10.domain = "POINT"
            # Selection
            store_named_attribute_001_10.inputs[1].default_value = True
            # Name
            store_named_attribute_001_10.inputs[2].default_value = "MNContrast"

            # node Group Input
            group_input_186 = mn_starfile_micrograph.nodes.new("NodeGroupInput")
            group_input_186.name = "Group Input"

            # node Store Named Attribute
            store_named_attribute_23 = mn_starfile_micrograph.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_23.name = "Store Named Attribute"
            store_named_attribute_23.data_type = "FLOAT"
            store_named_attribute_23.domain = "POINT"
            # Selection
            store_named_attribute_23.inputs[1].default_value = True
            # Name
            store_named_attribute_23.inputs[2].default_value = "MNBrightness"

            # Set locations
            grid.location = (-999.37109375, 99.62265014648438)
            transform_geometry_006.location = (-818.5869140625, 126.43045806884766)
            transform_geometry_007.location = (-631.0038452148438, 120.99168395996094)
            transform_geometry_008.location = (-280.42913818359375, 127.88481903076172)
            image_info.location = (-1585.4774169921875, -457.0034484863281)
            combine_xyz_002_2.location = (-463.28271484375, 19.085479736328125)
            combine_xyz_001_5.location = (-922.6502075195312, -307.76483154296875)
            named_attribute_004_7.location = (-1683.5006103515625, -1052.9495849609375)
            attribute_statistic_002.location = (-1112.16845703125, -966.6381225585938)
            attribute_statistic_001.location = (-1105.0552978515625, -612.5789184570312)
            switch_003_9.location = (-887.4561767578125, -835.5484619140625)
            compare_002_17.location = (-875.1576538085938, -657.2496948242188)
            switch_004_5.location = (-661.568359375, -714.772216796875)
            math_001_35.location = (-466.16815185546875, -596.7671508789062)
            vector_math_42.location = (-592.4921875, -338.4251403808594)
            group_output_189.location = (754.4419555664062, 429.34814453125)
            switch_002_20.location = (502.57647705078125, 427.40423583984375)
            set_material_12.location = (380.0, 200.0)
            store_named_attribute_001_10.location = (160.0, 140.0)
            group_input_186.location = (-1467.8316650390625, -14.638721466064453)
            store_named_attribute_23.location = (-60.0, 160.0)

            # Set dimensions
            grid.width, grid.height = 140.0, 100.0
            transform_geometry_006.width, transform_geometry_006.height = 140.0, 100.0
            transform_geometry_007.width, transform_geometry_007.height = 140.0, 100.0
            transform_geometry_008.width, transform_geometry_008.height = 140.0, 100.0
            image_info.width, image_info.height = 240.0, 100.0
            combine_xyz_002_2.width, combine_xyz_002_2.height = 140.0, 100.0
            combine_xyz_001_5.width, combine_xyz_001_5.height = 140.0, 100.0
            named_attribute_004_7.width, named_attribute_004_7.height = 140.0, 100.0
            attribute_statistic_002.width, attribute_statistic_002.height = 140.0, 100.0
            attribute_statistic_001.width, attribute_statistic_001.height = 140.0, 100.0
            switch_003_9.width, switch_003_9.height = 140.0, 100.0
            compare_002_17.width, compare_002_17.height = 140.0, 100.0
            switch_004_5.width, switch_004_5.height = 140.0, 100.0
            math_001_35.width, math_001_35.height = 140.0, 100.0
            vector_math_42.width, vector_math_42.height = 140.0, 100.0
            group_output_189.width, group_output_189.height = 140.0, 100.0
            switch_002_20.width, switch_002_20.height = 140.0, 100.0
            set_material_12.width, set_material_12.height = 140.0, 100.0
            store_named_attribute_001_10.width, store_named_attribute_001_10.height = (
                140.0,
                100.0,
            )
            group_input_186.width, group_input_186.height = 140.0, 100.0
            store_named_attribute_23.width, store_named_attribute_23.height = (
                140.0,
                100.0,
            )

            # initialize mn_starfile_micrograph links
            # switch_004_5.Output -> math_001_35.Value
            mn_starfile_micrograph.links.new(
                switch_004_5.outputs[0], math_001_35.inputs[0]
            )
            # attribute_statistic_001.Mean -> switch_003_9.True
            mn_starfile_micrograph.links.new(
                attribute_statistic_001.outputs[0], switch_003_9.inputs[2]
            )
            # compare_002_17.Result -> switch_004_5.Switch
            mn_starfile_micrograph.links.new(
                compare_002_17.outputs[0], switch_004_5.inputs[0]
            )
            # combine_xyz_001_5.Vector -> vector_math_42.Vector
            mn_starfile_micrograph.links.new(
                combine_xyz_001_5.outputs[0], vector_math_42.inputs[0]
            )
            # switch_003_9.Output -> switch_004_5.False
            mn_starfile_micrograph.links.new(
                switch_003_9.outputs[0], switch_004_5.inputs[1]
            )
            # set_material_12.Geometry -> switch_002_20.True
            mn_starfile_micrograph.links.new(
                set_material_12.outputs[0], switch_002_20.inputs[2]
            )
            # attribute_statistic_002.Mean -> switch_003_9.Switch
            mn_starfile_micrograph.links.new(
                attribute_statistic_002.outputs[0], switch_003_9.inputs[0]
            )
            # math_001_35.Value -> vector_math_42.Vector
            mn_starfile_micrograph.links.new(
                math_001_35.outputs[0], vector_math_42.inputs[1]
            )
            # transform_geometry_007.Geometry -> transform_geometry_008.Geometry
            mn_starfile_micrograph.links.new(
                transform_geometry_007.outputs[0], transform_geometry_008.inputs[0]
            )
            # vector_math_42.Vector -> transform_geometry_007.Scale
            mn_starfile_micrograph.links.new(
                vector_math_42.outputs[0], transform_geometry_007.inputs[3]
            )
            # named_attribute_004_7.Exists -> attribute_statistic_002.Attribute
            mn_starfile_micrograph.links.new(
                named_attribute_004_7.outputs[1], attribute_statistic_002.inputs[2]
            )
            # grid.Mesh -> transform_geometry_006.Geometry
            mn_starfile_micrograph.links.new(
                grid.outputs[0], transform_geometry_006.inputs[0]
            )
            # transform_geometry_006.Geometry -> transform_geometry_007.Geometry
            mn_starfile_micrograph.links.new(
                transform_geometry_006.outputs[0], transform_geometry_007.inputs[0]
            )
            # image_info.Width -> combine_xyz_001_5.X
            mn_starfile_micrograph.links.new(
                image_info.outputs[0], combine_xyz_001_5.inputs[0]
            )
            # image_info.Height -> combine_xyz_001_5.Y
            mn_starfile_micrograph.links.new(
                image_info.outputs[1], combine_xyz_001_5.inputs[1]
            )
            # combine_xyz_002_2.Vector -> transform_geometry_008.Translation
            mn_starfile_micrograph.links.new(
                combine_xyz_002_2.outputs[0], transform_geometry_008.inputs[1]
            )
            # named_attribute_004_7.Attribute -> attribute_statistic_001.Attribute
            mn_starfile_micrograph.links.new(
                named_attribute_004_7.outputs[0], attribute_statistic_001.inputs[2]
            )
            # group_input_186.A -> compare_002_17.A
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[3], compare_002_17.inputs[0]
            )
            # group_input_186.A -> switch_004_5.True
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[3], switch_004_5.inputs[2]
            )
            # group_input_186.Switch -> switch_002_20.Switch
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[1], switch_002_20.inputs[0]
            )
            # group_input_186.Z -> combine_xyz_002_2.Z
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[4], combine_xyz_002_2.inputs[2]
            )
            # group_input_186.Image -> image_info.Image
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[2], image_info.inputs[0]
            )
            # group_input_186.Geometry -> attribute_statistic_001.Geometry
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[0], attribute_statistic_001.inputs[0]
            )
            # group_input_186.Geometry -> attribute_statistic_002.Geometry
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[0], attribute_statistic_002.inputs[0]
            )
            # switch_002_20.Output -> group_output_189.Output
            mn_starfile_micrograph.links.new(
                switch_002_20.outputs[0], group_output_189.inputs[0]
            )
            # store_named_attribute_001_10.Geometry -> set_material_12.Geometry
            mn_starfile_micrograph.links.new(
                store_named_attribute_001_10.outputs[0], set_material_12.inputs[0]
            )
            # transform_geometry_008.Geometry -> store_named_attribute_23.Geometry
            mn_starfile_micrograph.links.new(
                transform_geometry_008.outputs[0], store_named_attribute_23.inputs[0]
            )
            # store_named_attribute_23.Geometry -> store_named_attribute_001_10.Geometry
            mn_starfile_micrograph.links.new(
                store_named_attribute_23.outputs[0],
                store_named_attribute_001_10.inputs[0],
            )
            # group_input_186.Brightness -> store_named_attribute_23.Value
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[5], store_named_attribute_23.inputs[3]
            )
            # group_input_186.Contrast -> store_named_attribute_001_10.Value
            mn_starfile_micrograph.links.new(
                group_input_186.outputs[6], store_named_attribute_001_10.inputs[3]
            )
            return mn_starfile_micrograph

        mn_starfile_micrograph = mn_starfile_micrograph_node_group()

        # initialize starfile_instances node group
        def starfile_instances_node_group():
            starfile_instances = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Starfile Instances"
            )

            starfile_instances.color_tag = "GEOMETRY"
            starfile_instances.description = ""

            # starfile_instances interface
            # Socket Instances
            instances_socket_9 = starfile_instances.interface.new_socket(
                name="Instances", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            instances_socket_9.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_41 = starfile_instances.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_41.attribute_domain = "POINT"

            # Socket Molecule
            molecule_socket = starfile_instances.interface.new_socket(
                name="Molecule", in_out="INPUT", socket_type="NodeSocketObject"
            )
            molecule_socket.attribute_domain = "POINT"
            molecule_socket.description = (
                "The object that should be placed at each instance"
            )

            # Socket Image
            image_socket_1 = starfile_instances.interface.new_socket(
                name="Image", in_out="INPUT", socket_type="NodeSocketInt"
            )
            image_socket_1.subtype = "NONE"
            image_socket_1.default_value = 1
            image_socket_1.min_value = 1
            image_socket_1.max_value = 2147483647
            image_socket_1.attribute_domain = "POINT"
            image_socket_1.description = "The ID of the image that should be shown"

            # Socket Simplify
            simplify_socket = starfile_instances.interface.new_socket(
                name="Simplify", in_out="INPUT", socket_type="NodeSocketBool"
            )
            simplify_socket.attribute_domain = "POINT"
            simplify_socket.description = (
                "Place axes instead of Molecule on each instance"
            )

            # Socket Show Micrograph
            show_micrograph_socket = starfile_instances.interface.new_socket(
                name="Show Micrograph", in_out="INPUT", socket_type="NodeSocketBool"
            )
            show_micrograph_socket.attribute_domain = "POINT"
            show_micrograph_socket.description = (
                "Show the micrograph in addition to the instances"
            )

            # Panel Micrograph Options
            micrograph_options_panel = starfile_instances.interface.new_panel(
                "Micrograph Options", default_closed=True
            )
            # Socket Micrograph
            micrograph_socket = starfile_instances.interface.new_socket(
                name="Micrograph",
                in_out="INPUT",
                socket_type="NodeSocketImage",
                parent=micrograph_options_panel,
            )
            micrograph_socket.attribute_domain = "POINT"
            micrograph_socket.description = (
                "The image object used for the micrograph (should be set automatically)"
            )

            # Socket Micrograph Pixelsize
            micrograph_pixelsize_socket = starfile_instances.interface.new_socket(
                name="Micrograph Pixelsize",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=micrograph_options_panel,
            )
            micrograph_pixelsize_socket.subtype = "NONE"
            micrograph_pixelsize_socket.default_value = -1.0
            micrograph_pixelsize_socket.min_value = -3.4028234663852886e38
            micrograph_pixelsize_socket.max_value = 3.4028234663852886e38
            micrograph_pixelsize_socket.attribute_domain = "POINT"
            micrograph_pixelsize_socket.description = "Pixelsize of the micrograph (enter a negative number to use value from starfile)"

            # Socket Micrograph Z
            micrograph_z_socket = starfile_instances.interface.new_socket(
                name="Micrograph Z",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=micrograph_options_panel,
            )
            micrograph_z_socket.subtype = "NONE"
            micrograph_z_socket.default_value = -10.0
            micrograph_z_socket.min_value = -3.4028234663852886e38
            micrograph_z_socket.max_value = 3.4028234663852886e38
            micrograph_z_socket.attribute_domain = "POINT"
            micrograph_z_socket.description = (
                "Position of the micrograph along the Z axis"
            )

            # Socket Brightness
            brightness_socket_1 = starfile_instances.interface.new_socket(
                name="Brightness",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=micrograph_options_panel,
            )
            brightness_socket_1.subtype = "NONE"
            brightness_socket_1.default_value = 0.5
            brightness_socket_1.min_value = 0.0
            brightness_socket_1.max_value = 1.0
            brightness_socket_1.attribute_domain = "POINT"
            brightness_socket_1.description = "Adjust micrograph brightness"

            # Socket Contrast
            contrast_socket_1 = starfile_instances.interface.new_socket(
                name="Contrast",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=micrograph_options_panel,
            )
            contrast_socket_1.subtype = "NONE"
            contrast_socket_1.default_value = 1.0
            contrast_socket_1.min_value = -3.4028234663852886e38
            contrast_socket_1.max_value = 3.4028234663852886e38
            contrast_socket_1.attribute_domain = "POINT"
            contrast_socket_1.description = "Adjust micrograph contrast"

            # initialize starfile_instances nodes
            # node Group Input
            group_input_187 = starfile_instances.nodes.new("NodeGroupInput")
            group_input_187.name = "Group Input"

            # node Math
            math_51 = starfile_instances.nodes.new("ShaderNodeMath")
            math_51.name = "Math"
            math_51.operation = "SUBTRACT"
            math_51.use_clamp = False
            # Value_001
            math_51.inputs[1].default_value = 1.0

            # node Object Info
            object_info_7 = starfile_instances.nodes.new("GeometryNodeObjectInfo")
            object_info_7.name = "Object Info"
            object_info_7.transform_space = "ORIGINAL"
            # As Instance
            object_info_7.inputs[1].default_value = False

            # node ID
            id = starfile_instances.nodes.new("GeometryNodeInputID")
            id.name = "ID"

            # node Attribute Statistic
            attribute_statistic_3 = starfile_instances.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_3.name = "Attribute Statistic"
            attribute_statistic_3.data_type = "FLOAT"
            attribute_statistic_3.domain = "POINT"
            # Selection
            attribute_statistic_3.inputs[1].default_value = True

            # node Compare.001
            compare_001_33 = starfile_instances.nodes.new("FunctionNodeCompare")
            compare_001_33.name = "Compare.001"
            compare_001_33.data_type = "FLOAT"
            compare_001_33.mode = "ELEMENT"
            compare_001_33.operation = "EQUAL"
            # B
            compare_001_33.inputs[1].default_value = 0.0
            # Epsilon
            compare_001_33.inputs[12].default_value = 0.0010000000474974513

            # node Boolean Math
            boolean_math_45 = starfile_instances.nodes.new("FunctionNodeBooleanMath")
            boolean_math_45.name = "Boolean Math"
            boolean_math_45.operation = "OR"

            # node Switch
            switch_49 = starfile_instances.nodes.new("GeometryNodeSwitch")
            switch_49.name = "Switch"
            switch_49.input_type = "GEOMETRY"

            # node Join Geometry.002
            join_geometry_002_4 = starfile_instances.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_002_4.name = "Join Geometry.002"

            # node Cone.001
            cone_001 = starfile_instances.nodes.new("GeometryNodeMeshCone")
            cone_001.name = "Cone.001"
            cone_001.fill_type = "NGON"
            # Vertices
            cone_001.inputs[0].default_value = 32
            # Side Segments
            cone_001.inputs[1].default_value = 1
            # Fill Segments
            cone_001.inputs[2].default_value = 1
            # Radius Top
            cone_001.inputs[3].default_value = 0.0
            # Radius Bottom
            cone_001.inputs[4].default_value = 0.30000001192092896
            # Depth
            cone_001.inputs[5].default_value = 0.5

            # node Transform Geometry.002
            transform_geometry_002_3 = starfile_instances.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_002_3.name = "Transform Geometry.002"
            transform_geometry_002_3.mode = "COMPONENTS"
            # Translation
            transform_geometry_002_3.inputs[1].default_value = (1.0, 0.0, 0.0)
            # Rotation
            transform_geometry_002_3.inputs[2].default_value = (
                0.0,
                1.5707963705062866,
                0.0,
            )
            # Scale
            transform_geometry_002_3.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Cylinder.001
            cylinder_001 = starfile_instances.nodes.new("GeometryNodeMeshCylinder")
            cylinder_001.name = "Cylinder.001"
            cylinder_001.fill_type = "NGON"
            # Vertices
            cylinder_001.inputs[0].default_value = 32
            # Side Segments
            cylinder_001.inputs[1].default_value = 1
            # Fill Segments
            cylinder_001.inputs[2].default_value = 1
            # Radius
            cylinder_001.inputs[3].default_value = 0.10000000149011612
            # Depth
            cylinder_001.inputs[4].default_value = 1.0

            # node Transform Geometry.003
            transform_geometry_003_1 = starfile_instances.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_003_1.name = "Transform Geometry.003"
            transform_geometry_003_1.mode = "COMPONENTS"
            # Translation
            transform_geometry_003_1.inputs[1].default_value = (0.5, 0.0, 0.0)
            # Rotation
            transform_geometry_003_1.inputs[2].default_value = (
                0.0,
                1.5707963705062866,
                0.0,
            )
            # Scale
            transform_geometry_003_1.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Join Geometry
            join_geometry_10 = starfile_instances.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_10.name = "Join Geometry"

            # node Cone
            cone_1 = starfile_instances.nodes.new("GeometryNodeMeshCone")
            cone_1.name = "Cone"
            cone_1.fill_type = "NGON"
            # Vertices
            cone_1.inputs[0].default_value = 32
            # Side Segments
            cone_1.inputs[1].default_value = 1
            # Fill Segments
            cone_1.inputs[2].default_value = 1
            # Radius Top
            cone_1.inputs[3].default_value = 0.0
            # Radius Bottom
            cone_1.inputs[4].default_value = 0.30000001192092896
            # Depth
            cone_1.inputs[5].default_value = 0.5

            # node Transform Geometry.001
            transform_geometry_001_4 = starfile_instances.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_001_4.name = "Transform Geometry.001"
            transform_geometry_001_4.mode = "COMPONENTS"
            # Translation
            transform_geometry_001_4.inputs[1].default_value = (0.0, 1.0, 0.0)
            # Rotation
            transform_geometry_001_4.inputs[2].default_value = (
                -1.5707963705062866,
                0.0,
                0.0,
            )
            # Scale
            transform_geometry_001_4.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Cylinder
            cylinder_2 = starfile_instances.nodes.new("GeometryNodeMeshCylinder")
            cylinder_2.name = "Cylinder"
            cylinder_2.fill_type = "NGON"
            # Vertices
            cylinder_2.inputs[0].default_value = 32
            # Side Segments
            cylinder_2.inputs[1].default_value = 1
            # Fill Segments
            cylinder_2.inputs[2].default_value = 1
            # Radius
            cylinder_2.inputs[3].default_value = 0.10000000149011612
            # Depth
            cylinder_2.inputs[4].default_value = 1.0

            # node Transform Geometry
            transform_geometry_6 = starfile_instances.nodes.new("GeometryNodeTransform")
            transform_geometry_6.name = "Transform Geometry"
            transform_geometry_6.mode = "COMPONENTS"
            # Translation
            transform_geometry_6.inputs[1].default_value = (0.0, 0.5, 0.0)
            # Rotation
            transform_geometry_6.inputs[2].default_value = (
                1.5707963705062866,
                0.0,
                0.0,
            )
            # Scale
            transform_geometry_6.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Join Geometry.003
            join_geometry_003 = starfile_instances.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_003.name = "Join Geometry.003"

            # node Cone.002
            cone_002 = starfile_instances.nodes.new("GeometryNodeMeshCone")
            cone_002.name = "Cone.002"
            cone_002.fill_type = "NGON"
            # Vertices
            cone_002.inputs[0].default_value = 32
            # Side Segments
            cone_002.inputs[1].default_value = 1
            # Fill Segments
            cone_002.inputs[2].default_value = 1
            # Radius Top
            cone_002.inputs[3].default_value = 0.0
            # Radius Bottom
            cone_002.inputs[4].default_value = 0.30000001192092896
            # Depth
            cone_002.inputs[5].default_value = 0.5

            # node Transform Geometry.004
            transform_geometry_004 = starfile_instances.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_004.name = "Transform Geometry.004"
            transform_geometry_004.mode = "COMPONENTS"
            # Translation
            transform_geometry_004.inputs[1].default_value = (0.0, 0.0, 1.0)
            # Rotation
            transform_geometry_004.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_004.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Cylinder.002
            cylinder_002 = starfile_instances.nodes.new("GeometryNodeMeshCylinder")
            cylinder_002.name = "Cylinder.002"
            cylinder_002.fill_type = "NGON"
            # Vertices
            cylinder_002.inputs[0].default_value = 32
            # Side Segments
            cylinder_002.inputs[1].default_value = 1
            # Fill Segments
            cylinder_002.inputs[2].default_value = 1
            # Radius
            cylinder_002.inputs[3].default_value = 0.10000000149011612
            # Depth
            cylinder_002.inputs[4].default_value = 1.0

            # node Transform Geometry.005
            transform_geometry_005 = starfile_instances.nodes.new(
                "GeometryNodeTransform"
            )
            transform_geometry_005.name = "Transform Geometry.005"
            transform_geometry_005.mode = "COMPONENTS"
            # Translation
            transform_geometry_005.inputs[1].default_value = (0.0, 0.0, 0.5)
            # Rotation
            transform_geometry_005.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Scale
            transform_geometry_005.inputs[3].default_value = (1.0, 1.0, 1.0)

            # node Set Material
            set_material_13 = starfile_instances.nodes.new("GeometryNodeSetMaterial")
            set_material_13.name = "Set Material"
            # Selection
            set_material_13.inputs[1].default_value = True

            # node Set Shade Smooth
            set_shade_smooth_7 = starfile_instances.nodes.new(
                "GeometryNodeSetShadeSmooth"
            )
            set_shade_smooth_7.name = "Set Shade Smooth"
            set_shade_smooth_7.domain = "FACE"
            # Selection
            set_shade_smooth_7.inputs[1].default_value = True
            # Shade Smooth
            set_shade_smooth_7.inputs[2].default_value = True

            # node Named Attribute
            named_attribute_49 = starfile_instances.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_49.name = "Named Attribute"
            named_attribute_49.data_type = "INT"
            # Name
            named_attribute_49.inputs[0].default_value = "MNImageId"

            # node Named Attribute.001
            named_attribute_001_28 = starfile_instances.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_001_28.name = "Named Attribute.001"
            named_attribute_001_28.data_type = "FLOAT"
            # Name
            named_attribute_001_28.inputs[0].default_value = "MNAnglePhi"

            # node Named Attribute.002
            named_attribute_002_22 = starfile_instances.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_22.name = "Named Attribute.002"
            named_attribute_002_22.data_type = "FLOAT"
            # Name
            named_attribute_002_22.inputs[0].default_value = "MNAngleTheta"

            # node Compare
            compare_55 = starfile_instances.nodes.new("FunctionNodeCompare")
            compare_55.name = "Compare"
            compare_55.data_type = "INT"
            compare_55.mode = "ELEMENT"
            compare_55.operation = "NOT_EQUAL"

            # node Named Attribute.003
            named_attribute_003_11 = starfile_instances.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_11.name = "Named Attribute.003"
            named_attribute_003_11.data_type = "FLOAT"
            # Name
            named_attribute_003_11.inputs[0].default_value = "MNAnglePsi"

            # node Instance on Points
            instance_on_points_9 = starfile_instances.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_9.name = "Instance on Points"
            # Selection
            instance_on_points_9.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_9.inputs[3].default_value = False
            # Instance Index
            instance_on_points_9.inputs[4].default_value = 0
            # Scale
            instance_on_points_9.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Store Named Attribute
            store_named_attribute_24 = starfile_instances.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_24.name = "Store Named Attribute"
            store_named_attribute_24.data_type = "QUATERNION"
            store_named_attribute_24.domain = "POINT"
            # Selection
            store_named_attribute_24.inputs[1].default_value = True
            # Name
            store_named_attribute_24.inputs[2].default_value = "MNDEBUGEuler"

            # node Delete Geometry
            delete_geometry_6 = starfile_instances.nodes.new(
                "GeometryNodeDeleteGeometry"
            )
            delete_geometry_6.name = "Delete Geometry"
            delete_geometry_6.domain = "POINT"
            delete_geometry_6.mode = "ALL"

            # node Rotation to Euler
            rotation_to_euler_1 = starfile_instances.nodes.new(
                "FunctionNodeRotationToEuler"
            )
            rotation_to_euler_1.name = "Rotation to Euler"

            # node Switch.001
            switch_001_27 = starfile_instances.nodes.new("GeometryNodeSwitch")
            switch_001_27.label = "MNDebug"
            switch_001_27.name = "Switch.001"
            switch_001_27.input_type = "GEOMETRY"
            # Switch
            switch_001_27.inputs[0].default_value = False

            # node Group
            group_54 = starfile_instances.nodes.new("GeometryNodeGroup")
            group_54.name = "Group"
            group_54.node_tree = utils_zyz_to_rotation

            # node Group Output
            group_output_190 = starfile_instances.nodes.new("NodeGroupOutput")
            group_output_190.name = "Group Output"
            group_output_190.is_active_output = True

            # node Join Geometry.004
            join_geometry_004 = starfile_instances.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_004.name = "Join Geometry.004"

            # node Group.001
            group_001_35 = starfile_instances.nodes.new("GeometryNodeGroup")
            group_001_35.name = "Group.001"
            group_001_35.node_tree = mn_starfile_micrograph

            # node Join Geometry.001
            join_geometry_001_9 = starfile_instances.nodes.new(
                "GeometryNodeJoinGeometry"
            )
            join_geometry_001_9.name = "Join Geometry.001"

            # node Group Input.001
            group_input_001_35 = starfile_instances.nodes.new("NodeGroupInput")
            group_input_001_35.name = "Group Input.001"

            # node Store Named Attribute.001
            store_named_attribute_001_11 = starfile_instances.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_001_11.name = "Store Named Attribute.001"
            store_named_attribute_001_11.data_type = "FLOAT_COLOR"
            store_named_attribute_001_11.domain = "POINT"
            # Selection
            store_named_attribute_001_11.inputs[1].default_value = True
            # Name
            store_named_attribute_001_11.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_001_11.inputs[3].default_value = (
                0.6239680051803589,
                0.010329999960958958,
                0.06301099807024002,
                1.0,
            )

            # node Store Named Attribute.002
            store_named_attribute_002_7 = starfile_instances.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_002_7.name = "Store Named Attribute.002"
            store_named_attribute_002_7.data_type = "FLOAT_COLOR"
            store_named_attribute_002_7.domain = "POINT"
            # Selection
            store_named_attribute_002_7.inputs[1].default_value = True
            # Name
            store_named_attribute_002_7.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_002_7.inputs[3].default_value = (
                0.07618500292301178,
                0.6239680051803589,
                0.08437500149011612,
                1.0,
            )

            # node Store Named Attribute.003
            store_named_attribute_003_6 = starfile_instances.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_003_6.name = "Store Named Attribute.003"
            store_named_attribute_003_6.data_type = "FLOAT_COLOR"
            store_named_attribute_003_6.domain = "POINT"
            # Selection
            store_named_attribute_003_6.inputs[1].default_value = True
            # Name
            store_named_attribute_003_6.inputs[2].default_value = "Color"
            # Value
            store_named_attribute_003_6.inputs[3].default_value = (
                0.0,
                0.000910000002477318,
                0.6239680051803589,
                1.0,
            )

            # Set locations
            group_input_187.location = (-19.999996185302734, 0.0)
            math_51.location = (140.0, 200.0)
            object_info_7.location = (180.0, -200.0)
            id.location = (-19.999996185302734, -200.0)
            attribute_statistic_3.location = (180.0, -400.0)
            compare_001_33.location = (380.0000305175781, -400.0)
            boolean_math_45.location = (580.0000610351562, -400.0)
            switch_49.location = (867.3298950195312, -400.0)
            join_geometry_002_4.location = (2.329805612564087, -1440.0)
            cone_001.location = (-1045.0001220703125, -360.0)
            transform_geometry_002_3.location = (-865.0, -360.0)
            cylinder_001.location = (-1045.0001220703125, -720.0)
            transform_geometry_003_1.location = (-865.0, -720.0)
            join_geometry_10.location = (-584.9999389648438, -1400.0)
            cone_1.location = (-1045.0001220703125, -1080.0)
            transform_geometry_001_4.location = (-865.0, -1080.0)
            cylinder_2.location = (-1045.0001220703125, -1440.0)
            transform_geometry_6.location = (-865.0, -1440.0)
            join_geometry_003.location = (-625.0, -2140.0)
            cone_002.location = (-1065.0, -1820.0)
            transform_geometry_004.location = (-905.0, -1820.0)
            cylinder_002.location = (-1085.0, -2180.0)
            transform_geometry_005.location = (-905.0, -2180.0)
            set_material_13.location = (442.2983093261719, -1408.9595947265625)
            set_shade_smooth_7.location = (222.3297882080078, -1426.9024658203125)
            named_attribute_49.location = (-19.999996185302734, 200.0)
            named_attribute_001_28.location = (20.0, 800.0)
            named_attribute_002_22.location = (20.0, 660.0)
            compare_55.location = (300.0000305175781, 200.0)
            named_attribute_003_11.location = (20.0, 520.0)
            instance_on_points_9.location = (1030.2874755859375, 31.402042388916016)
            store_named_attribute_24.location = (958.349853515625, 431.1212158203125)
            delete_geometry_6.location = (480.0000305175781, 0.0)
            rotation_to_euler_1.location = (609.8578491210938, 448.5572509765625)
            switch_001_27.location = (1269.211181640625, 151.81256103515625)
            group_54.location = (200.0, 720.0)
            group_output_190.location = (2267.6865234375, 202.171875)
            join_geometry_004.location = (1912.7755126953125, 172.54151916503906)
            group_001_35.location = (1574.0758056640625, 33.9083251953125)
            join_geometry_001_9.location = (-584.9999389648438, -680.0)
            group_input_001_35.location = (1395.191650390625, 30.3790283203125)
            store_named_attribute_001_11.location = (-180.0, -1140.0)
            store_named_attribute_002_7.location = (
                -177.67018127441406,
                -1347.7293701171875,
            )
            store_named_attribute_003_6.location = (-180.0, -1560.0)

            # Set dimensions
            group_input_187.width, group_input_187.height = 140.0, 100.0
            math_51.width, math_51.height = 140.0, 100.0
            object_info_7.width, object_info_7.height = 140.0, 100.0
            id.width, id.height = 140.0, 100.0
            attribute_statistic_3.width, attribute_statistic_3.height = 140.0, 100.0
            compare_001_33.width, compare_001_33.height = 140.0, 100.0
            boolean_math_45.width, boolean_math_45.height = 140.0, 100.0
            switch_49.width, switch_49.height = 140.0, 100.0
            join_geometry_002_4.width, join_geometry_002_4.height = 140.0, 100.0
            cone_001.width, cone_001.height = 140.0, 100.0
            transform_geometry_002_3.width, transform_geometry_002_3.height = (
                140.0,
                100.0,
            )
            cylinder_001.width, cylinder_001.height = 140.0, 100.0
            transform_geometry_003_1.width, transform_geometry_003_1.height = (
                140.0,
                100.0,
            )
            join_geometry_10.width, join_geometry_10.height = 140.0, 100.0
            cone_1.width, cone_1.height = 140.0, 100.0
            transform_geometry_001_4.width, transform_geometry_001_4.height = (
                140.0,
                100.0,
            )
            cylinder_2.width, cylinder_2.height = 140.0, 100.0
            transform_geometry_6.width, transform_geometry_6.height = 140.0, 100.0
            join_geometry_003.width, join_geometry_003.height = 140.0, 100.0
            cone_002.width, cone_002.height = 140.0, 100.0
            transform_geometry_004.width, transform_geometry_004.height = 140.0, 100.0
            cylinder_002.width, cylinder_002.height = 140.0, 100.0
            transform_geometry_005.width, transform_geometry_005.height = 140.0, 100.0
            set_material_13.width, set_material_13.height = 140.0, 100.0
            set_shade_smooth_7.width, set_shade_smooth_7.height = 140.0, 100.0
            named_attribute_49.width, named_attribute_49.height = 140.0, 100.0
            named_attribute_001_28.width, named_attribute_001_28.height = 140.0, 100.0
            named_attribute_002_22.width, named_attribute_002_22.height = 140.0, 100.0
            compare_55.width, compare_55.height = 140.0, 100.0
            named_attribute_003_11.width, named_attribute_003_11.height = 140.0, 100.0
            instance_on_points_9.width, instance_on_points_9.height = 140.0, 100.0
            store_named_attribute_24.width, store_named_attribute_24.height = (
                140.0,
                100.0,
            )
            delete_geometry_6.width, delete_geometry_6.height = 140.0, 100.0
            rotation_to_euler_1.width, rotation_to_euler_1.height = 140.0, 100.0
            switch_001_27.width, switch_001_27.height = 140.0, 100.0
            group_54.width, group_54.height = 210.0706787109375, 100.0
            group_output_190.width, group_output_190.height = 140.0, 100.0
            join_geometry_004.width, join_geometry_004.height = 140.0, 100.0
            group_001_35.width, group_001_35.height = 140.0, 100.0
            join_geometry_001_9.width, join_geometry_001_9.height = 140.0, 100.0
            group_input_001_35.width, group_input_001_35.height = 80.0, 100.0
            store_named_attribute_001_11.width, store_named_attribute_001_11.height = (
                140.0,
                100.0,
            )
            store_named_attribute_002_7.width, store_named_attribute_002_7.height = (
                140.0,
                100.0,
            )
            store_named_attribute_003_6.width, store_named_attribute_003_6.height = (
                140.0,
                100.0,
            )

            # initialize starfile_instances links
            # group_input_187.Geometry -> delete_geometry_6.Geometry
            starfile_instances.links.new(
                group_input_187.outputs[0], delete_geometry_6.inputs[0]
            )
            # delete_geometry_6.Geometry -> instance_on_points_9.Points
            starfile_instances.links.new(
                delete_geometry_6.outputs[0], instance_on_points_9.inputs[0]
            )
            # group_input_187.Molecule -> object_info_7.Object
            starfile_instances.links.new(
                group_input_187.outputs[1], object_info_7.inputs[0]
            )
            # group_input_187.Image -> math_51.Value
            starfile_instances.links.new(group_input_187.outputs[2], math_51.inputs[0])
            # group_input_187.Simplify -> boolean_math_45.Boolean
            starfile_instances.links.new(
                group_input_187.outputs[3], boolean_math_45.inputs[0]
            )
            # math_51.Value -> compare_55.A
            starfile_instances.links.new(math_51.outputs[0], compare_55.inputs[2])
            # named_attribute_49.Attribute -> compare_55.B
            starfile_instances.links.new(
                named_attribute_49.outputs[0], compare_55.inputs[3]
            )
            # compare_55.Result -> delete_geometry_6.Selection
            starfile_instances.links.new(
                compare_55.outputs[0], delete_geometry_6.inputs[1]
            )
            # attribute_statistic_3.Max -> compare_001_33.A
            starfile_instances.links.new(
                attribute_statistic_3.outputs[4], compare_001_33.inputs[0]
            )
            # compare_001_33.Result -> boolean_math_45.Boolean
            starfile_instances.links.new(
                compare_001_33.outputs[0], boolean_math_45.inputs[1]
            )
            # id.ID -> attribute_statistic_3.Attribute
            starfile_instances.links.new(id.outputs[0], attribute_statistic_3.inputs[2])
            # object_info_7.Geometry -> attribute_statistic_3.Geometry
            starfile_instances.links.new(
                object_info_7.outputs[4], attribute_statistic_3.inputs[0]
            )
            # boolean_math_45.Boolean -> switch_49.Switch
            starfile_instances.links.new(
                boolean_math_45.outputs[0], switch_49.inputs[0]
            )
            # object_info_7.Geometry -> switch_49.False
            starfile_instances.links.new(object_info_7.outputs[4], switch_49.inputs[1])
            # set_material_13.Geometry -> switch_49.True
            starfile_instances.links.new(
                set_material_13.outputs[0], switch_49.inputs[2]
            )
            # switch_49.Output -> instance_on_points_9.Instance
            starfile_instances.links.new(
                switch_49.outputs[0], instance_on_points_9.inputs[2]
            )
            # set_shade_smooth_7.Geometry -> set_material_13.Geometry
            starfile_instances.links.new(
                set_shade_smooth_7.outputs[0], set_material_13.inputs[0]
            )
            # transform_geometry_6.Geometry -> join_geometry_10.Geometry
            starfile_instances.links.new(
                transform_geometry_6.outputs[0], join_geometry_10.inputs[0]
            )
            # cylinder_2.Mesh -> transform_geometry_6.Geometry
            starfile_instances.links.new(
                cylinder_2.outputs[0], transform_geometry_6.inputs[0]
            )
            # cone_1.Mesh -> transform_geometry_001_4.Geometry
            starfile_instances.links.new(
                cone_1.outputs[0], transform_geometry_001_4.inputs[0]
            )
            # transform_geometry_003_1.Geometry -> join_geometry_001_9.Geometry
            starfile_instances.links.new(
                transform_geometry_003_1.outputs[0], join_geometry_001_9.inputs[0]
            )
            # cylinder_001.Mesh -> transform_geometry_003_1.Geometry
            starfile_instances.links.new(
                cylinder_001.outputs[0], transform_geometry_003_1.inputs[0]
            )
            # cone_001.Mesh -> transform_geometry_002_3.Geometry
            starfile_instances.links.new(
                cone_001.outputs[0], transform_geometry_002_3.inputs[0]
            )
            # transform_geometry_005.Geometry -> join_geometry_003.Geometry
            starfile_instances.links.new(
                transform_geometry_005.outputs[0], join_geometry_003.inputs[0]
            )
            # cylinder_002.Mesh -> transform_geometry_005.Geometry
            starfile_instances.links.new(
                cylinder_002.outputs[0], transform_geometry_005.inputs[0]
            )
            # cone_002.Mesh -> transform_geometry_004.Geometry
            starfile_instances.links.new(
                cone_002.outputs[0], transform_geometry_004.inputs[0]
            )
            # join_geometry_002_4.Geometry -> set_shade_smooth_7.Geometry
            starfile_instances.links.new(
                join_geometry_002_4.outputs[0], set_shade_smooth_7.inputs[0]
            )
            # rotation_to_euler_1.Euler -> instance_on_points_9.Rotation
            starfile_instances.links.new(
                rotation_to_euler_1.outputs[0], instance_on_points_9.inputs[5]
            )
            # group_54.Rotation -> rotation_to_euler_1.Rotation
            starfile_instances.links.new(
                group_54.outputs[0], rotation_to_euler_1.inputs[0]
            )
            # named_attribute_001_28.Attribute -> group_54.Phi
            starfile_instances.links.new(
                named_attribute_001_28.outputs[0], group_54.inputs[0]
            )
            # named_attribute_002_22.Attribute -> group_54.Theta
            starfile_instances.links.new(
                named_attribute_002_22.outputs[0], group_54.inputs[1]
            )
            # named_attribute_003_11.Attribute -> group_54.Psi
            starfile_instances.links.new(
                named_attribute_003_11.outputs[0], group_54.inputs[2]
            )
            # join_geometry_004.Geometry -> group_output_190.Instances
            starfile_instances.links.new(
                join_geometry_004.outputs[0], group_output_190.inputs[0]
            )
            # delete_geometry_6.Geometry -> store_named_attribute_24.Geometry
            starfile_instances.links.new(
                delete_geometry_6.outputs[0], store_named_attribute_24.inputs[0]
            )
            # instance_on_points_9.Instances -> switch_001_27.False
            starfile_instances.links.new(
                instance_on_points_9.outputs[0], switch_001_27.inputs[1]
            )
            # store_named_attribute_24.Geometry -> switch_001_27.True
            starfile_instances.links.new(
                store_named_attribute_24.outputs[0], switch_001_27.inputs[2]
            )
            # group_54.Rotation -> store_named_attribute_24.Value
            starfile_instances.links.new(
                group_54.outputs[0], store_named_attribute_24.inputs[3]
            )
            # group_001_35.Output -> join_geometry_004.Geometry
            starfile_instances.links.new(
                group_001_35.outputs[0], join_geometry_004.inputs[0]
            )
            # group_input_001_35.Micrograph Pixelsize -> group_001_35.A
            starfile_instances.links.new(
                group_input_001_35.outputs[6], group_001_35.inputs[3]
            )
            # group_input_001_35.Show Micrograph -> group_001_35.Switch
            starfile_instances.links.new(
                group_input_001_35.outputs[4], group_001_35.inputs[1]
            )
            # group_input_001_35.Micrograph Z -> group_001_35.Z
            starfile_instances.links.new(
                group_input_001_35.outputs[7], group_001_35.inputs[4]
            )
            # group_input_001_35.Micrograph -> group_001_35.Image
            starfile_instances.links.new(
                group_input_001_35.outputs[5], group_001_35.inputs[2]
            )
            # group_input_001_35.Geometry -> group_001_35.Geometry
            starfile_instances.links.new(
                group_input_001_35.outputs[0], group_001_35.inputs[0]
            )
            # group_input_001_35.Brightness -> group_001_35.Brightness
            starfile_instances.links.new(
                group_input_001_35.outputs[8], group_001_35.inputs[5]
            )
            # group_input_001_35.Contrast -> group_001_35.Contrast
            starfile_instances.links.new(
                group_input_001_35.outputs[9], group_001_35.inputs[6]
            )
            # store_named_attribute_003_6.Geometry -> join_geometry_002_4.Geometry
            starfile_instances.links.new(
                store_named_attribute_003_6.outputs[0], join_geometry_002_4.inputs[0]
            )
            # join_geometry_001_9.Geometry -> store_named_attribute_001_11.Geometry
            starfile_instances.links.new(
                join_geometry_001_9.outputs[0], store_named_attribute_001_11.inputs[0]
            )
            # join_geometry_10.Geometry -> store_named_attribute_002_7.Geometry
            starfile_instances.links.new(
                join_geometry_10.outputs[0], store_named_attribute_002_7.inputs[0]
            )
            # join_geometry_003.Geometry -> store_named_attribute_003_6.Geometry
            starfile_instances.links.new(
                join_geometry_003.outputs[0], store_named_attribute_003_6.inputs[0]
            )
            # transform_geometry_001_4.Geometry -> join_geometry_10.Geometry
            starfile_instances.links.new(
                transform_geometry_001_4.outputs[0], join_geometry_10.inputs[0]
            )
            # transform_geometry_002_3.Geometry -> join_geometry_001_9.Geometry
            starfile_instances.links.new(
                transform_geometry_002_3.outputs[0], join_geometry_001_9.inputs[0]
            )
            # transform_geometry_004.Geometry -> join_geometry_003.Geometry
            starfile_instances.links.new(
                transform_geometry_004.outputs[0], join_geometry_003.inputs[0]
            )
            # switch_001_27.Output -> join_geometry_004.Geometry
            starfile_instances.links.new(
                switch_001_27.outputs[0], join_geometry_004.inputs[0]
            )
            # store_named_attribute_002_7.Geometry -> join_geometry_002_4.Geometry
            starfile_instances.links.new(
                store_named_attribute_002_7.outputs[0], join_geometry_002_4.inputs[0]
            )
            # store_named_attribute_001_11.Geometry -> join_geometry_002_4.Geometry
            starfile_instances.links.new(
                store_named_attribute_001_11.outputs[0], join_geometry_002_4.inputs[0]
            )
            return starfile_instances

        starfile_instances = starfile_instances_node_group()

        # initialize _mn_utils_int_multiply node group
        def _mn_utils_int_multiply_node_group():
            _mn_utils_int_multiply = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_utils_int_multiply"
            )

            _mn_utils_int_multiply.color_tag = "CONVERTER"
            _mn_utils_int_multiply.description = ""

            # _mn_utils_int_multiply interface
            # Socket Value
            value_socket_23 = _mn_utils_int_multiply.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            value_socket_23.subtype = "NONE"
            value_socket_23.default_value = 0
            value_socket_23.min_value = -2147483648
            value_socket_23.max_value = 2147483647
            value_socket_23.attribute_domain = "POINT"

            # Socket Value
            value_socket_24 = _mn_utils_int_multiply.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketInt"
            )
            value_socket_24.subtype = "NONE"
            value_socket_24.default_value = 0
            value_socket_24.min_value = -2147483648
            value_socket_24.max_value = 2147483647
            value_socket_24.attribute_domain = "POINT"

            # Socket Value
            value_socket_25 = _mn_utils_int_multiply.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketInt"
            )
            value_socket_25.subtype = "NONE"
            value_socket_25.default_value = 0
            value_socket_25.min_value = -2147483648
            value_socket_25.max_value = 2147483647
            value_socket_25.attribute_domain = "POINT"

            # initialize _mn_utils_int_multiply nodes
            # node Group Output
            group_output_191 = _mn_utils_int_multiply.nodes.new("NodeGroupOutput")
            group_output_191.name = "Group Output"
            group_output_191.is_active_output = True

            # node Math.001
            math_001_36 = _mn_utils_int_multiply.nodes.new("ShaderNodeMath")
            math_001_36.name = "Math.001"
            math_001_36.operation = "MULTIPLY"
            math_001_36.use_clamp = False

            # node Group Input
            group_input_188 = _mn_utils_int_multiply.nodes.new("NodeGroupInput")
            group_input_188.name = "Group Input"

            # Set locations
            group_output_191.location = (190.0, 0.0)
            math_001_36.location = (0.0, 0.0)
            group_input_188.location = (-235.15338134765625, -44.40943145751953)

            # Set dimensions
            group_output_191.width, group_output_191.height = 140.0, 100.0
            math_001_36.width, math_001_36.height = 140.0, 100.0
            group_input_188.width, group_input_188.height = 140.0, 100.0

            # initialize _mn_utils_int_multiply links
            # group_input_188.Value -> math_001_36.Value
            _mn_utils_int_multiply.links.new(
                group_input_188.outputs[0], math_001_36.inputs[0]
            )
            # group_input_188.Value -> math_001_36.Value
            _mn_utils_int_multiply.links.new(
                group_input_188.outputs[1], math_001_36.inputs[1]
            )
            # math_001_36.Value -> group_output_191.Value
            _mn_utils_int_multiply.links.new(
                math_001_36.outputs[0], group_output_191.inputs[0]
            )
            return _mn_utils_int_multiply

        _mn_utils_int_multiply = _mn_utils_int_multiply_node_group()

        # initialize bond_count node group
        def bond_count_node_group():
            bond_count = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Bond Count"
            )

            bond_count.color_tag = "INPUT"
            bond_count.description = ""

            # bond_count interface
            # Socket Is Bonded
            is_bonded_socket_3 = bond_count.interface.new_socket(
                name="Is Bonded", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            is_bonded_socket_3.attribute_domain = "POINT"

            # Socket Bonds
            bonds_socket = bond_count.interface.new_socket(
                name="Bonds", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            bonds_socket.subtype = "NONE"
            bonds_socket.default_value = 0
            bonds_socket.min_value = -2147483648
            bonds_socket.max_value = 2147483647
            bonds_socket.attribute_domain = "POINT"
            bonds_socket.description = "The number of bonds or edges that a point has"

            # initialize bond_count nodes
            # node Group Output
            group_output_192 = bond_count.nodes.new("NodeGroupOutput")
            group_output_192.name = "Group Output"
            group_output_192.is_active_output = True

            # node Group Input
            group_input_189 = bond_count.nodes.new("NodeGroupInput")
            group_input_189.name = "Group Input"

            # node Edges of Vertex.001
            edges_of_vertex_001_1 = bond_count.nodes.new("GeometryNodeEdgesOfVertex")
            edges_of_vertex_001_1.name = "Edges of Vertex.001"
            # Vertex Index
            edges_of_vertex_001_1.inputs[0].default_value = 0
            # Weights
            edges_of_vertex_001_1.inputs[1].default_value = 0.0
            # Sort Index
            edges_of_vertex_001_1.inputs[2].default_value = 0

            # node Compare
            compare_56 = bond_count.nodes.new("FunctionNodeCompare")
            compare_56.name = "Compare"
            compare_56.data_type = "INT"
            compare_56.mode = "ELEMENT"
            compare_56.operation = "GREATER_THAN"
            # B_INT
            compare_56.inputs[3].default_value = 0

            # Set locations
            group_output_192.location = (200.0, 100.0)
            group_input_189.location = (-200.0, 0.0)
            edges_of_vertex_001_1.location = (0.0, 0.0)
            compare_56.location = (0.0, 160.0)

            # Set dimensions
            group_output_192.width, group_output_192.height = 140.0, 100.0
            group_input_189.width, group_input_189.height = 140.0, 100.0
            edges_of_vertex_001_1.width, edges_of_vertex_001_1.height = 140.0, 100.0
            compare_56.width, compare_56.height = 140.0, 100.0

            # initialize bond_count links
            # edges_of_vertex_001_1.Total -> group_output_192.Bonds
            bond_count.links.new(
                edges_of_vertex_001_1.outputs[1], group_output_192.inputs[1]
            )
            # edges_of_vertex_001_1.Total -> compare_56.A
            bond_count.links.new(edges_of_vertex_001_1.outputs[1], compare_56.inputs[2])
            # compare_56.Result -> group_output_192.Is Bonded
            bond_count.links.new(compare_56.outputs[0], group_output_192.inputs[0])
            return bond_count

        bond_count = bond_count_node_group()

        # initialize style_preset_2 node group
        def style_preset_2_node_group():
            style_preset_2 = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Preset 2"
            )

            style_preset_2.color_tag = "GEOMETRY"
            style_preset_2.description = ""

            # style_preset_2 interface
            # Socket Geometry
            geometry_socket_42 = style_preset_2.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_42.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_40 = style_preset_2.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_40.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_64 = style_preset_2.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_64.attribute_domain = "POINT"
            selection_socket_64.hide_value = True

            # Socket Quality
            quality_socket_9 = style_preset_2.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_9.subtype = "NONE"
            quality_socket_9.default_value = 3
            quality_socket_9.min_value = 0
            quality_socket_9.max_value = 6
            quality_socket_9.attribute_domain = "POINT"

            # Socket Color Blur
            color_blur_socket_7 = style_preset_2.interface.new_socket(
                name="Color Blur", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_blur_socket_7.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_18 = style_preset_2.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_18.attribute_domain = "POINT"

            # Socket Material
            material_socket_23 = style_preset_2.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_23.attribute_domain = "POINT"

            # initialize style_preset_2 nodes
            # node Group Output
            group_output_193 = style_preset_2.nodes.new("NodeGroupOutput")
            group_output_193.name = "Group Output"
            group_output_193.is_active_output = True

            # node Group Input
            group_input_190 = style_preset_2.nodes.new("NodeGroupInput")
            group_input_190.name = "Group Input"

            # node Compare.004
            compare_004_11 = style_preset_2.nodes.new("FunctionNodeCompare")
            compare_004_11.name = "Compare.004"
            compare_004_11.data_type = "INT"
            compare_004_11.mode = "ELEMENT"
            compare_004_11.operation = "GREATER_THAN"
            # B_INT
            compare_004_11.inputs[3].default_value = 0

            # node Switch.004
            switch_004_6 = style_preset_2.nodes.new("GeometryNodeSwitch")
            switch_004_6.name = "Switch.004"
            switch_004_6.input_type = "FLOAT"
            # False
            switch_004_6.inputs[1].default_value = 1.0
            # True
            switch_004_6.inputs[2].default_value = 0.30000001192092896

            # node Separate Geometry.002
            separate_geometry_002_8 = style_preset_2.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_002_8.name = "Separate Geometry.002"
            separate_geometry_002_8.domain = "POINT"

            # node Group.010
            group_010_11 = style_preset_2.nodes.new("GeometryNodeGroup")
            group_010_11.name = "Group.010"
            group_010_11.node_tree = _mn_utils_int_multiply
            # Input_1
            group_010_11.inputs[1].default_value = 4

            # node Group.003
            group_003_16 = style_preset_2.nodes.new("GeometryNodeGroup")
            group_003_16.label = "Ball and Stick"
            group_003_16.name = "Group.003"
            group_003_16.node_tree = style_ball_and_stick
            # Socket_5
            group_003_16.inputs[1].default_value = 0
            # Input_1
            group_003_16.inputs[2].default_value = True
            # Input_2
            group_003_16.inputs[3].default_value = True
            # Socket_3
            group_003_16.inputs[5].default_value = True
            # Input_7
            group_003_16.inputs[6].default_value = 0.25

            # node Group
            group_55 = style_preset_2.nodes.new("GeometryNodeGroup")
            group_55.label = "Separate Polymers"
            group_55.name = "Group"
            group_55.node_tree = separate_polymers

            # node MN_select_proximity
            mn_select_proximity = style_preset_2.nodes.new("GeometryNodeGroup")
            mn_select_proximity.label = "Select Proximity"
            mn_select_proximity.name = "MN_select_proximity"
            mn_select_proximity.node_tree = select_proximity
            # Input_5
            mn_select_proximity.inputs[1].default_value = True
            # Input_4
            mn_select_proximity.inputs[2].default_value = True
            # Input_1
            mn_select_proximity.inputs[3].default_value = 3.0

            # node MN_select_atomic_number
            mn_select_atomic_number = style_preset_2.nodes.new("GeometryNodeGroup")
            mn_select_atomic_number.label = "Select Atomic Number"
            mn_select_atomic_number.name = "MN_select_atomic_number"
            mn_select_atomic_number.node_tree = select_atomic_number
            # Socket_0
            mn_select_atomic_number.inputs[0].default_value = True
            # Socket_1
            mn_select_atomic_number.inputs[1].default_value = False
            # Input_0
            mn_select_atomic_number.inputs[2].default_value = 1

            # node Boolean Math.001
            boolean_math_001_35 = style_preset_2.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_35.name = "Boolean Math.001"
            boolean_math_001_35.operation = "NIMPLY"

            # node MN_style_sticks
            mn_style_sticks = style_preset_2.nodes.new("GeometryNodeGroup")
            mn_style_sticks.label = "Style Sticks"
            mn_style_sticks.name = "MN_style_sticks"
            mn_style_sticks.node_tree = style_sticks
            # Socket_4
            mn_style_sticks.inputs[2].default_value = 2
            # Socket_3
            mn_style_sticks.inputs[3].default_value = 0.20000000298023224

            # node Join Geometry.002
            join_geometry_002_5 = style_preset_2.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_002_5.name = "Join Geometry.002"

            # node Join Geometry.003
            join_geometry_003_1 = style_preset_2.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_003_1.name = "Join Geometry.003"

            # node Domain Size
            domain_size_12 = style_preset_2.nodes.new("GeometryNodeAttributeDomainSize")
            domain_size_12.name = "Domain Size"
            domain_size_12.component = "MESH"
            domain_size_12.outputs[1].hide = True
            domain_size_12.outputs[2].hide = True
            domain_size_12.outputs[3].hide = True
            domain_size_12.outputs[4].hide = True
            domain_size_12.outputs[5].hide = True

            # node Compare.005
            compare_005_4 = style_preset_2.nodes.new("FunctionNodeCompare")
            compare_005_4.name = "Compare.005"
            compare_005_4.data_type = "INT"
            compare_005_4.mode = "ELEMENT"
            compare_005_4.operation = "GREATER_THAN"
            # B_INT
            compare_005_4.inputs[3].default_value = 0

            # node Boolean Math.003
            boolean_math_003_17 = style_preset_2.nodes.new("FunctionNodeBooleanMath")
            boolean_math_003_17.name = "Boolean Math.003"
            boolean_math_003_17.operation = "AND"

            # node MN_style_cartoon
            mn_style_cartoon = style_preset_2.nodes.new("GeometryNodeGroup")
            mn_style_cartoon.name = "MN_style_cartoon"
            mn_style_cartoon.node_tree = style_cartoon
            # Input_1
            mn_style_cartoon.inputs[1].default_value = True
            # Socket_3
            mn_style_cartoon.inputs[3].default_value = False
            # Input_4
            mn_style_cartoon.inputs[4].default_value = False
            # Input_3
            mn_style_cartoon.inputs[5].default_value = True
            # Input_11
            mn_style_cartoon.inputs[6].default_value = False
            # Input_5
            mn_style_cartoon.inputs[7].default_value = 0.4000000059604645
            # Input_6
            mn_style_cartoon.inputs[8].default_value = 2.4000000953674316
            # Input_12
            mn_style_cartoon.inputs[9].default_value = 0.20000000298023224
            # Input_7
            mn_style_cartoon.inputs[10].default_value = 0.5

            # node Group.013
            group_013_4 = style_preset_2.nodes.new("GeometryNodeGroup")
            group_013_4.name = "Group.013"
            group_013_4.node_tree = is_side_chain
            # Socket_3
            group_013_4.inputs[1].default_value = False

            # node Frame
            frame_29 = style_preset_2.nodes.new("NodeFrame")
            frame_29.label = (
                "Sticks for atoms that are close to nucleic acids or ligands"
            )
            frame_29.name = "Frame"
            frame_29.label_size = 20
            frame_29.shrink = True

            # node Frame.001
            frame_001_15 = style_preset_2.nodes.new("NodeFrame")
            frame_001_15.label = "Cartoon that is applied to protein"
            frame_001_15.name = "Frame.001"
            frame_001_15.label_size = 20
            frame_001_15.shrink = True

            # node Frame.003
            frame_003_7 = style_preset_2.nodes.new("NodeFrame")
            frame_003_7.label = "Ball and stick for non-peptide and non-nucleic atoms"
            frame_003_7.name = "Frame.003"
            frame_003_7.label_size = 20
            frame_003_7.shrink = True

            # node Group.001
            group_001_36 = style_preset_2.nodes.new("GeometryNodeGroup")
            group_001_36.name = "Group.001"
            group_001_36.node_tree = bond_count

            # node Join Geometry
            join_geometry_11 = style_preset_2.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_11.name = "Join Geometry"

            # Set parents
            compare_004_11.parent = frame_003_7
            switch_004_6.parent = frame_003_7
            group_010_11.parent = frame_003_7
            group_003_16.parent = frame_003_7
            mn_select_proximity.parent = frame_29
            mn_select_atomic_number.parent = frame_29
            boolean_math_001_35.parent = frame_29
            mn_style_sticks.parent = frame_29
            join_geometry_002_5.parent = frame_29
            domain_size_12.parent = frame_29
            compare_005_4.parent = frame_29
            boolean_math_003_17.parent = frame_29
            mn_style_cartoon.parent = frame_001_15
            group_013_4.parent = frame_29

            # Set locations
            group_output_193.location = (900.0, 80.0)
            group_input_190.location = (-1011.8084716796875, 0.0)
            compare_004_11.location = (-60.0, -780.0)
            switch_004_6.location = (100.0, -780.0)
            separate_geometry_002_8.location = (-760.0, 60.0)
            group_010_11.location = (100.0, -940.0)
            group_003_16.location = (328.498291015625, -688.9818115234375)
            group_55.location = (-580.0, 60.0)
            mn_select_proximity.location = (-100.0, 640.0)
            mn_select_atomic_number.location = (-100.0, 460.0)
            boolean_math_001_35.location = (140.0, 640.0)
            mn_style_sticks.location = (620.0, 780.0)
            join_geometry_002_5.location = (-300.0, 460.0)
            join_geometry_003_1.location = (680.0, 100.0)
            domain_size_12.location = (-309.04931640625, 584.9669189453125)
            compare_005_4.location = (-309.04931640625, 744.9669189453125)
            boolean_math_003_17.location = (460.0, 780.0)
            mn_style_cartoon.location = (220.0, 100.0)
            group_013_4.location = (300.0, 640.0)
            frame_29.location = (-361.0, -60.0)
            frame_001_15.location = (0.0, 0.0)
            frame_003_7.location = (-90.0, 269.0)
            group_001_36.location = (-420.0, -560.0)
            join_geometry_11.location = (40.0, 100.0)

            # Set dimensions
            group_output_193.width, group_output_193.height = 140.0, 100.0
            group_input_190.width, group_input_190.height = 140.0, 100.0
            compare_004_11.width, compare_004_11.height = 140.0, 100.0
            switch_004_6.width, switch_004_6.height = 140.0, 100.0
            separate_geometry_002_8.width, separate_geometry_002_8.height = 140.0, 100.0
            group_010_11.width, group_010_11.height = 140.0, 100.0
            group_003_16.width, group_003_16.height = 200.0, 100.0
            group_55.width, group_55.height = 200.0, 100.0
            mn_select_proximity.width, mn_select_proximity.height = 200.0, 100.0
            mn_select_atomic_number.width, mn_select_atomic_number.height = 200.0, 100.0
            boolean_math_001_35.width, boolean_math_001_35.height = 140.0, 100.0
            mn_style_sticks.width, mn_style_sticks.height = 200.0, 100.0
            join_geometry_002_5.width, join_geometry_002_5.height = 140.0, 100.0
            join_geometry_003_1.width, join_geometry_003_1.height = 140.0, 100.0
            domain_size_12.width, domain_size_12.height = 140.0, 100.0
            compare_005_4.width, compare_005_4.height = 140.0, 100.0
            boolean_math_003_17.width, boolean_math_003_17.height = 140.0, 100.0
            mn_style_cartoon.width, mn_style_cartoon.height = 200.0, 100.0
            group_013_4.width, group_013_4.height = 140.0, 100.0
            frame_29.width, frame_29.height = 1189.60009765625, 530.7999877929688
            frame_001_15.width, frame_001_15.height = 260.0, 503.6000061035156
            frame_003_7.width, frame_003_7.height = 648.800048828125, 439.5999755859375
            group_001_36.width, group_001_36.height = 140.0, 100.0
            join_geometry_11.width, join_geometry_11.height = 140.0, 100.0

            # initialize style_preset_2 links
            # group_input_190.Material -> group_003_16.Material
            style_preset_2.links.new(group_input_190.outputs[5], group_003_16.inputs[9])
            # separate_geometry_002_8.Selection -> group_55.Atoms
            style_preset_2.links.new(
                separate_geometry_002_8.outputs[0], group_55.inputs[0]
            )
            # group_input_190.Shade Smooth -> group_003_16.Shade Smooth
            style_preset_2.links.new(group_input_190.outputs[4], group_003_16.inputs[8])
            # group_input_190.Shade Smooth -> mn_style_cartoon.Shade Smooth
            style_preset_2.links.new(
                group_input_190.outputs[4], mn_style_cartoon.inputs[12]
            )
            # group_55.Other -> group_003_16.Atoms
            style_preset_2.links.new(group_55.outputs[2], group_003_16.inputs[0])
            # group_input_190.Quality -> mn_style_cartoon.Quality
            style_preset_2.links.new(
                group_input_190.outputs[2], mn_style_cartoon.inputs[2]
            )
            # boolean_math_003_17.Boolean -> mn_style_sticks.Selection
            style_preset_2.links.new(
                boolean_math_003_17.outputs[0], mn_style_sticks.inputs[1]
            )
            # switch_004_6.Output -> group_003_16.Sphere Radii
            style_preset_2.links.new(switch_004_6.outputs[0], group_003_16.inputs[4])
            # group_001_36.Bonds -> compare_004_11.A
            style_preset_2.links.new(group_001_36.outputs[1], compare_004_11.inputs[2])
            # compare_005_4.Result -> boolean_math_003_17.Boolean
            style_preset_2.links.new(
                compare_005_4.outputs[0], boolean_math_003_17.inputs[0]
            )
            # domain_size_12.Point Count -> compare_005_4.A
            style_preset_2.links.new(domain_size_12.outputs[0], compare_005_4.inputs[2])
            # compare_004_11.Result -> switch_004_6.Switch
            style_preset_2.links.new(compare_004_11.outputs[0], switch_004_6.inputs[0])
            # join_geometry_002_5.Geometry -> domain_size_12.Geometry
            style_preset_2.links.new(
                join_geometry_002_5.outputs[0], domain_size_12.inputs[0]
            )
            # group_55.Peptide -> mn_style_sticks.Atoms
            style_preset_2.links.new(group_55.outputs[0], mn_style_sticks.inputs[0])
            # group_input_190.Shade Smooth -> mn_style_sticks.Shade Smooth
            style_preset_2.links.new(
                group_input_190.outputs[4], mn_style_sticks.inputs[5]
            )
            # mn_select_proximity.Selection -> boolean_math_001_35.Boolean
            style_preset_2.links.new(
                mn_select_proximity.outputs[0], boolean_math_001_35.inputs[0]
            )
            # group_input_190.Material -> mn_style_cartoon.Material
            style_preset_2.links.new(
                group_input_190.outputs[5], mn_style_cartoon.inputs[13]
            )
            # join_geometry_002_5.Geometry -> mn_select_proximity.Target Atoms
            style_preset_2.links.new(
                join_geometry_002_5.outputs[0], mn_select_proximity.inputs[0]
            )
            # group_input_190.Quality -> group_010_11.Value
            style_preset_2.links.new(group_input_190.outputs[2], group_010_11.inputs[0])
            # group_55.Other -> join_geometry_002_5.Geometry
            style_preset_2.links.new(group_55.outputs[2], join_geometry_002_5.inputs[0])
            # group_input_190.Selection -> separate_geometry_002_8.Selection
            style_preset_2.links.new(
                group_input_190.outputs[1], separate_geometry_002_8.inputs[1]
            )
            # group_input_190.Atoms -> separate_geometry_002_8.Geometry
            style_preset_2.links.new(
                group_input_190.outputs[0], separate_geometry_002_8.inputs[0]
            )
            # join_geometry_003_1.Geometry -> group_output_193.Geometry
            style_preset_2.links.new(
                join_geometry_003_1.outputs[0], group_output_193.inputs[0]
            )
            # group_input_190.Material -> mn_style_sticks.Material
            style_preset_2.links.new(
                group_input_190.outputs[5], mn_style_sticks.inputs[6]
            )
            # mn_select_atomic_number.Selection -> boolean_math_001_35.Boolean
            style_preset_2.links.new(
                mn_select_atomic_number.outputs[0], boolean_math_001_35.inputs[1]
            )
            # boolean_math_001_35.Boolean -> group_013_4.And
            style_preset_2.links.new(
                boolean_math_001_35.outputs[0], group_013_4.inputs[0]
            )
            # group_013_4.Selection -> boolean_math_003_17.Boolean
            style_preset_2.links.new(
                group_013_4.outputs[0], boolean_math_003_17.inputs[1]
            )
            # group_003_16.Geometry -> join_geometry_003_1.Geometry
            style_preset_2.links.new(
                group_003_16.outputs[0], join_geometry_003_1.inputs[0]
            )
            # group_55.Nucleic -> join_geometry_11.Geometry
            style_preset_2.links.new(group_55.outputs[1], join_geometry_11.inputs[0])
            # join_geometry_11.Geometry -> mn_style_cartoon.Atoms
            style_preset_2.links.new(
                join_geometry_11.outputs[0], mn_style_cartoon.inputs[0]
            )
            # group_input_190.Color Blur -> mn_style_sticks.Color Blur
            style_preset_2.links.new(
                group_input_190.outputs[3], mn_style_sticks.inputs[4]
            )
            # group_input_190.Color Blur -> mn_style_cartoon.Color Blur
            style_preset_2.links.new(
                group_input_190.outputs[3], mn_style_cartoon.inputs[11]
            )
            # group_input_190.Color Blur -> group_003_16.Color Blur
            style_preset_2.links.new(group_input_190.outputs[3], group_003_16.inputs[7])
            # group_55.Nucleic -> join_geometry_002_5.Geometry
            style_preset_2.links.new(group_55.outputs[1], join_geometry_002_5.inputs[0])
            # mn_style_cartoon.Geometry -> join_geometry_003_1.Geometry
            style_preset_2.links.new(
                mn_style_cartoon.outputs[0], join_geometry_003_1.inputs[0]
            )
            # group_55.Peptide -> join_geometry_11.Geometry
            style_preset_2.links.new(group_55.outputs[0], join_geometry_11.inputs[0])
            # mn_style_sticks.Geometry -> join_geometry_003_1.Geometry
            style_preset_2.links.new(
                mn_style_sticks.outputs[0], join_geometry_003_1.inputs[0]
            )
            return style_preset_2

        style_preset_2 = style_preset_2_node_group()

        # initialize style_preset_3 node group
        def style_preset_3_node_group():
            style_preset_3 = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Preset 3"
            )

            style_preset_3.color_tag = "GEOMETRY"
            style_preset_3.description = ""

            # style_preset_3 interface
            # Socket Geometry
            geometry_socket_43 = style_preset_3.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_43.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_41 = style_preset_3.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_41.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_65 = style_preset_3.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_65.attribute_domain = "POINT"
            selection_socket_65.hide_value = True

            # Socket Quality
            quality_socket_10 = style_preset_3.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_10.subtype = "NONE"
            quality_socket_10.default_value = 3
            quality_socket_10.min_value = 0
            quality_socket_10.max_value = 6
            quality_socket_10.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_19 = style_preset_3.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_19.attribute_domain = "POINT"

            # Socket Material
            material_socket_24 = style_preset_3.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_24.attribute_domain = "POINT"

            # initialize style_preset_3 nodes
            # node Group Output
            group_output_194 = style_preset_3.nodes.new("NodeGroupOutput")
            group_output_194.name = "Group Output"
            group_output_194.is_active_output = True

            # node Group Input
            group_input_191 = style_preset_3.nodes.new("NodeGroupInput")
            group_input_191.name = "Group Input"

            # node Join Geometry.004
            join_geometry_004_1 = style_preset_3.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_004_1.name = "Join Geometry.004"

            # node Separate Geometry.004
            separate_geometry_004_4 = style_preset_3.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_004_4.name = "Separate Geometry.004"
            separate_geometry_004_4.domain = "POINT"

            # node MN_style_surface
            mn_style_surface = style_preset_3.nodes.new("GeometryNodeGroup")
            mn_style_surface.label = "Style Surface"
            mn_style_surface.name = "MN_style_surface"
            mn_style_surface.node_tree = style_surface
            # Socket_12
            mn_style_surface.inputs[3].default_value = True
            # Socket_15
            mn_style_surface.inputs[4].default_value = "chain_id"
            # Socket_5
            mn_style_surface.inputs[5].default_value = 1.5
            # Socket_6
            mn_style_surface.inputs[6].default_value = 1.0
            # Socket_18
            mn_style_surface.inputs[7].default_value = True
            # Socket_17
            mn_style_surface.inputs[8].default_value = 10
            # Socket_8
            mn_style_surface.inputs[9].default_value = True
            # Socket_9
            mn_style_surface.inputs[10].default_value = 2

            # node Group.004
            group_004_12 = style_preset_3.nodes.new("GeometryNodeGroup")
            group_004_12.label = "Atoms"
            group_004_12.name = "Group.004"
            group_004_12.node_tree = style_spheres
            # Input_2
            group_004_12.inputs[2].default_value = False
            # Input_3
            group_004_12.inputs[3].default_value = 0.5

            # node Group.014
            group_014_8 = style_preset_3.nodes.new("GeometryNodeGroup")
            group_014_8.name = "Group.014"
            group_014_8.node_tree = is_peptide
            # Socket_1
            group_014_8.inputs[0].default_value = True
            # Socket_3
            group_014_8.inputs[1].default_value = False

            # Set locations
            group_output_194.location = (708.8781127929688, 0.0)
            group_input_191.location = (-688.6596069335938, 0.0)
            join_geometry_004_1.location = (488.65960693359375, 37.614501953125)
            separate_geometry_004_4.location = (-215.12188720703125, 176.895751953125)
            mn_style_surface.location = (80.0, 260.0)
            group_004_12.location = (80.0, -240.0)
            group_014_8.location = (-220.0, 20.0)

            # Set dimensions
            group_output_194.width, group_output_194.height = 140.0, 100.0
            group_input_191.width, group_input_191.height = 140.0, 100.0
            join_geometry_004_1.width, join_geometry_004_1.height = 140.0, 100.0
            separate_geometry_004_4.width, separate_geometry_004_4.height = 140.0, 100.0
            mn_style_surface.width, mn_style_surface.height = 200.0, 100.0
            group_004_12.width, group_004_12.height = 200.0, 100.0
            group_014_8.width, group_014_8.height = 140.0, 100.0

            # initialize style_preset_3 links
            # group_004_12.Geometry -> join_geometry_004_1.Geometry
            style_preset_3.links.new(
                group_004_12.outputs[0], join_geometry_004_1.inputs[0]
            )
            # group_input_191.Material -> group_004_12.Material
            style_preset_3.links.new(group_input_191.outputs[4], group_004_12.inputs[6])
            # separate_geometry_004_4.Selection -> mn_style_surface.Atoms
            style_preset_3.links.new(
                separate_geometry_004_4.outputs[0], mn_style_surface.inputs[0]
            )
            # group_input_191.Shade Smooth -> group_004_12.Shade Smooth
            style_preset_3.links.new(group_input_191.outputs[3], group_004_12.inputs[5])
            # separate_geometry_004_4.Inverted -> group_004_12.Atoms
            style_preset_3.links.new(
                separate_geometry_004_4.outputs[1], group_004_12.inputs[0]
            )
            # group_input_191.Quality -> group_004_12.Sphere Subdivisions
            style_preset_3.links.new(group_input_191.outputs[2], group_004_12.inputs[4])
            # group_input_191.Quality -> mn_style_surface.Quality
            style_preset_3.links.new(
                group_input_191.outputs[2], mn_style_surface.inputs[2]
            )
            # group_014_8.Selection -> separate_geometry_004_4.Selection
            style_preset_3.links.new(
                group_014_8.outputs[0], separate_geometry_004_4.inputs[1]
            )
            # group_input_191.Material -> mn_style_surface.Material
            style_preset_3.links.new(
                group_input_191.outputs[4], mn_style_surface.inputs[12]
            )
            # group_input_191.Atoms -> separate_geometry_004_4.Geometry
            style_preset_3.links.new(
                group_input_191.outputs[0], separate_geometry_004_4.inputs[0]
            )
            # group_input_191.Shade Smooth -> mn_style_surface.Shade Smooth
            style_preset_3.links.new(
                group_input_191.outputs[3], mn_style_surface.inputs[11]
            )
            # join_geometry_004_1.Geometry -> group_output_194.Geometry
            style_preset_3.links.new(
                join_geometry_004_1.outputs[0], group_output_194.inputs[0]
            )
            # group_input_191.Selection -> mn_style_surface.Selection
            style_preset_3.links.new(
                group_input_191.outputs[1], mn_style_surface.inputs[1]
            )
            # group_input_191.Selection -> group_004_12.Selection
            style_preset_3.links.new(group_input_191.outputs[1], group_004_12.inputs[1])
            # mn_style_surface.Geometry -> join_geometry_004_1.Geometry
            style_preset_3.links.new(
                mn_style_surface.outputs[0], join_geometry_004_1.inputs[0]
            )
            return style_preset_3

        style_preset_3 = style_preset_3_node_group()

        # initialize attribute_map node group
        def attribute_map_node_group():
            attribute_map = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Attribute Map"
            )

            attribute_map.color_tag = "CONVERTER"
            attribute_map.description = "Maps the range of values of the attribute on from the target atoms, to the range from min to max"

            # attribute_map interface
            # Socket Value
            value_socket_26 = attribute_map.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_26.subtype = "NONE"
            value_socket_26.default_value = 0.0
            value_socket_26.min_value = -3.4028234663852886e38
            value_socket_26.max_value = 3.4028234663852886e38
            value_socket_26.attribute_domain = "POINT"

            # Socket Sample Atoms
            sample_atoms_socket = attribute_map.interface.new_socket(
                name="Sample Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            sample_atoms_socket.attribute_domain = "POINT"

            # Socket Attribute
            attribute_socket_3 = attribute_map.interface.new_socket(
                name="Attribute", in_out="INPUT", socket_type="NodeSocketString"
            )
            attribute_socket_3.attribute_domain = "POINT"

            # Socket Value Min
            value_min_socket_1 = attribute_map.interface.new_socket(
                name="Value Min", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_min_socket_1.subtype = "NONE"
            value_min_socket_1.default_value = 0.20000000298023224
            value_min_socket_1.min_value = -10000.0
            value_min_socket_1.max_value = 10000.0
            value_min_socket_1.attribute_domain = "POINT"

            # Socket Value Max
            value_max_socket_1 = attribute_map.interface.new_socket(
                name="Value Max", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_max_socket_1.subtype = "NONE"
            value_max_socket_1.default_value = 3.0
            value_max_socket_1.min_value = -10000.0
            value_max_socket_1.max_value = 10000.0
            value_max_socket_1.attribute_domain = "POINT"

            # initialize attribute_map nodes
            # node Group Output
            group_output_195 = attribute_map.nodes.new("NodeGroupOutput")
            group_output_195.name = "Group Output"
            group_output_195.is_active_output = True

            # node Group Input
            group_input_192 = attribute_map.nodes.new("NodeGroupInput")
            group_input_192.name = "Group Input"

            # node Map Range
            map_range_14 = attribute_map.nodes.new("ShaderNodeMapRange")
            map_range_14.name = "Map Range"
            map_range_14.clamp = True
            map_range_14.data_type = "FLOAT"
            map_range_14.interpolation_type = "LINEAR"

            # node Named Attribute.004
            named_attribute_004_8 = attribute_map.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_004_8.name = "Named Attribute.004"
            named_attribute_004_8.data_type = "FLOAT"

            # node Attribute Statistic
            attribute_statistic_4 = attribute_map.nodes.new(
                "GeometryNodeAttributeStatistic"
            )
            attribute_statistic_4.name = "Attribute Statistic"
            attribute_statistic_4.data_type = "FLOAT"
            attribute_statistic_4.domain = "POINT"
            attribute_statistic_4.inputs[1].hide = True
            attribute_statistic_4.outputs[0].hide = True
            attribute_statistic_4.outputs[1].hide = True
            attribute_statistic_4.outputs[2].hide = True
            attribute_statistic_4.outputs[5].hide = True
            attribute_statistic_4.outputs[6].hide = True
            attribute_statistic_4.outputs[7].hide = True
            # Selection
            attribute_statistic_4.inputs[1].default_value = True

            # Set locations
            group_output_195.location = (270.0, 0.0)
            group_input_192.location = (-280.0, 0.0)
            map_range_14.location = (80.0, 70.0)
            named_attribute_004_8.location = (-80.0, 70.0)
            attribute_statistic_4.location = (-80.0, -70.0)

            # Set dimensions
            group_output_195.width, group_output_195.height = 140.0, 100.0
            group_input_192.width, group_input_192.height = 140.0, 100.0
            map_range_14.width, map_range_14.height = 140.0, 100.0
            named_attribute_004_8.width, named_attribute_004_8.height = 140.0, 100.0
            attribute_statistic_4.width, attribute_statistic_4.height = 140.0, 100.0

            # initialize attribute_map links
            # attribute_statistic_4.Max -> map_range_14.From Max
            attribute_map.links.new(
                attribute_statistic_4.outputs[4], map_range_14.inputs[2]
            )
            # named_attribute_004_8.Attribute -> attribute_statistic_4.Attribute
            attribute_map.links.new(
                named_attribute_004_8.outputs[0], attribute_statistic_4.inputs[2]
            )
            # attribute_statistic_4.Min -> map_range_14.From Min
            attribute_map.links.new(
                attribute_statistic_4.outputs[3], map_range_14.inputs[1]
            )
            # named_attribute_004_8.Attribute -> map_range_14.Value
            attribute_map.links.new(
                named_attribute_004_8.outputs[0], map_range_14.inputs[0]
            )
            # group_input_192.Sample Atoms -> attribute_statistic_4.Geometry
            attribute_map.links.new(
                group_input_192.outputs[0], attribute_statistic_4.inputs[0]
            )
            # map_range_14.Result -> group_output_195.Value
            attribute_map.links.new(map_range_14.outputs[0], group_output_195.inputs[0])
            # group_input_192.Attribute -> named_attribute_004_8.Name
            attribute_map.links.new(
                group_input_192.outputs[1], named_attribute_004_8.inputs[0]
            )
            # group_input_192.Value Min -> map_range_14.To Min
            attribute_map.links.new(group_input_192.outputs[2], map_range_14.inputs[3])
            # group_input_192.Value Max -> map_range_14.To Max
            attribute_map.links.new(group_input_192.outputs[3], map_range_14.inputs[4])
            return attribute_map

        attribute_map = attribute_map_node_group()

        # initialize style_preset_1 node group
        def style_preset_1_node_group():
            style_preset_1 = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Preset 1"
            )

            style_preset_1.color_tag = "GEOMETRY"
            style_preset_1.description = ""

            # style_preset_1 interface
            # Socket Geometry
            geometry_socket_44 = style_preset_1.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_44.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_42 = style_preset_1.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_42.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_66 = style_preset_1.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_66.attribute_domain = "POINT"
            selection_socket_66.hide_value = True

            # Socket Quality
            quality_socket_11 = style_preset_1.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_11.subtype = "NONE"
            quality_socket_11.default_value = 3
            quality_socket_11.min_value = 0
            quality_socket_11.max_value = 6
            quality_socket_11.attribute_domain = "POINT"

            # Socket Color Blur
            color_blur_socket_8 = style_preset_1.interface.new_socket(
                name="Color Blur", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_blur_socket_8.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_20 = style_preset_1.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_20.attribute_domain = "POINT"

            # Socket Material
            material_socket_25 = style_preset_1.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_25.attribute_domain = "POINT"

            # initialize style_preset_1 nodes
            # node Group Output
            group_output_196 = style_preset_1.nodes.new("NodeGroupOutput")
            group_output_196.name = "Group Output"
            group_output_196.is_active_output = True

            # node Group Input
            group_input_193 = style_preset_1.nodes.new("NodeGroupInput")
            group_input_193.name = "Group Input"

            # node Boolean Math
            boolean_math_46 = style_preset_1.nodes.new("FunctionNodeBooleanMath")
            boolean_math_46.name = "Boolean Math"
            boolean_math_46.operation = "OR"

            # node Switch.002
            switch_002_21 = style_preset_1.nodes.new("GeometryNodeSwitch")
            switch_002_21.name = "Switch.002"
            switch_002_21.input_type = "FLOAT"
            # False
            switch_002_21.inputs[1].default_value = 1.0
            # True
            switch_002_21.inputs[2].default_value = 0.30000001192092896

            # node Join Geometry
            join_geometry_12 = style_preset_1.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_12.name = "Join Geometry"

            # node Separate Geometry.001
            separate_geometry_001_15 = style_preset_1.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_001_15.name = "Separate Geometry.001"
            separate_geometry_001_15.domain = "POINT"

            # node Group.002
            group_002_23 = style_preset_1.nodes.new("GeometryNodeGroup")
            group_002_23.label = "Ball and Stick"
            group_002_23.name = "Group.002"
            group_002_23.node_tree = style_ball_and_stick
            # Input_2
            group_002_23.inputs[3].default_value = False
            # Socket_3
            group_002_23.inputs[5].default_value = True
            # Input_7
            group_002_23.inputs[6].default_value = 0.25

            # node MN_style_ribbon
            mn_style_ribbon = style_preset_1.nodes.new("GeometryNodeGroup")
            mn_style_ribbon.label = "Style Ribbon"
            mn_style_ribbon.name = "MN_style_ribbon"
            mn_style_ribbon.node_tree = style_ribbon
            # Socket_4
            mn_style_ribbon.inputs[3].default_value = 1.399999976158142
            # Socket_7
            mn_style_ribbon.inputs[4].default_value = 0.5

            # node Group.012
            group_012_7 = style_preset_1.nodes.new("GeometryNodeGroup")
            group_012_7.name = "Group.012"
            group_012_7.node_tree = is_nucleic
            # Socket_1
            group_012_7.inputs[0].default_value = True
            # Socket_3
            group_012_7.inputs[1].default_value = False

            # node Group.006
            group_006_10 = style_preset_1.nodes.new("GeometryNodeGroup")
            group_006_10.name = "Group.006"
            group_006_10.node_tree = is_peptide
            # Socket_1
            group_006_10.inputs[0].default_value = True
            # Socket_3
            group_006_10.inputs[1].default_value = False

            # node Group
            group_56 = style_preset_1.nodes.new("GeometryNodeGroup")
            group_56.name = "Group"
            group_56.node_tree = bond_count

            # node Math
            math_52 = style_preset_1.nodes.new("ShaderNodeMath")
            math_52.name = "Math"
            math_52.operation = "MULTIPLY"
            math_52.use_clamp = False
            # Value_001
            math_52.inputs[1].default_value = 4.0

            # Set locations
            group_output_196.location = (790.41015625, 0.0)
            group_input_193.location = (-770.58984375, 0.0)
            boolean_math_46.location = (-100.0, 240.0)
            switch_002_21.location = (120.0, -160.0)
            join_geometry_12.location = (570.58984375, 20.10931396484375)
            separate_geometry_001_15.location = (100.0, 240.0)
            group_002_23.location = (300.0, -40.0)
            mn_style_ribbon.location = (300.0, 240.0)
            group_012_7.location = (-260.0, 140.0)
            group_006_10.location = (-260.0, 240.0)
            group_56.location = (-60.0, -160.0)
            math_52.location = (120.0, -340.0)

            # Set dimensions
            group_output_196.width, group_output_196.height = 140.0, 100.0
            group_input_193.width, group_input_193.height = 140.0, 100.0
            boolean_math_46.width, boolean_math_46.height = 140.0, 100.0
            switch_002_21.width, switch_002_21.height = 140.0, 100.0
            join_geometry_12.width, join_geometry_12.height = 140.0, 100.0
            separate_geometry_001_15.width, separate_geometry_001_15.height = (
                140.0,
                100.0,
            )
            group_002_23.width, group_002_23.height = 200.0, 100.0
            mn_style_ribbon.width, mn_style_ribbon.height = 200.0, 100.0
            group_012_7.width, group_012_7.height = 140.0, 100.0
            group_006_10.width, group_006_10.height = 140.0, 100.0
            group_56.width, group_56.height = 140.0, 100.0
            math_52.width, math_52.height = 140.0, 100.0

            # initialize style_preset_1 links
            # separate_geometry_001_15.Inverted -> group_002_23.Atoms
            style_preset_1.links.new(
                separate_geometry_001_15.outputs[1], group_002_23.inputs[0]
            )
            # group_002_23.Geometry -> join_geometry_12.Geometry
            style_preset_1.links.new(
                group_002_23.outputs[0], join_geometry_12.inputs[0]
            )
            # separate_geometry_001_15.Selection -> mn_style_ribbon.Atoms
            style_preset_1.links.new(
                separate_geometry_001_15.outputs[0], mn_style_ribbon.inputs[0]
            )
            # switch_002_21.Output -> group_002_23.Sphere Radii
            style_preset_1.links.new(switch_002_21.outputs[0], group_002_23.inputs[4])
            # boolean_math_46.Boolean -> separate_geometry_001_15.Selection
            style_preset_1.links.new(
                boolean_math_46.outputs[0], separate_geometry_001_15.inputs[1]
            )
            # group_012_7.Selection -> boolean_math_46.Boolean
            style_preset_1.links.new(group_012_7.outputs[0], boolean_math_46.inputs[1])
            # group_input_193.Atoms -> separate_geometry_001_15.Geometry
            style_preset_1.links.new(
                group_input_193.outputs[0], separate_geometry_001_15.inputs[0]
            )
            # group_006_10.Selection -> boolean_math_46.Boolean
            style_preset_1.links.new(group_006_10.outputs[0], boolean_math_46.inputs[0])
            # group_input_193.Shade Smooth -> group_002_23.Shade Smooth
            style_preset_1.links.new(group_input_193.outputs[4], group_002_23.inputs[8])
            # group_input_193.Shade Smooth -> mn_style_ribbon.Shade Smooth
            style_preset_1.links.new(
                group_input_193.outputs[4], mn_style_ribbon.inputs[6]
            )
            # group_input_193.Quality -> mn_style_ribbon.Quality
            style_preset_1.links.new(
                group_input_193.outputs[2], mn_style_ribbon.inputs[2]
            )
            # group_input_193.Material -> group_002_23.Material
            style_preset_1.links.new(group_input_193.outputs[5], group_002_23.inputs[9])
            # group_input_193.Material -> mn_style_ribbon.Material
            style_preset_1.links.new(
                group_input_193.outputs[5], mn_style_ribbon.inputs[7]
            )
            # join_geometry_12.Geometry -> group_output_196.Geometry
            style_preset_1.links.new(
                join_geometry_12.outputs[0], group_output_196.inputs[0]
            )
            # group_56.Is Bonded -> switch_002_21.Switch
            style_preset_1.links.new(group_56.outputs[0], switch_002_21.inputs[0])
            # group_input_193.Quality -> math_52.Value
            style_preset_1.links.new(group_input_193.outputs[2], math_52.inputs[0])
            # group_input_193.Color Blur -> mn_style_ribbon.Color Blur
            style_preset_1.links.new(
                group_input_193.outputs[3], mn_style_ribbon.inputs[5]
            )
            # group_input_193.Color Blur -> group_002_23.Color Blur
            style_preset_1.links.new(group_input_193.outputs[3], group_002_23.inputs[7])
            # group_input_193.Quality -> group_002_23.Quality
            style_preset_1.links.new(group_input_193.outputs[2], group_002_23.inputs[1])
            # group_input_193.Selection -> mn_style_ribbon.Selection
            style_preset_1.links.new(
                group_input_193.outputs[1], mn_style_ribbon.inputs[1]
            )
            # group_input_193.Selection -> group_002_23.Selection
            style_preset_1.links.new(group_input_193.outputs[1], group_002_23.inputs[2])
            # mn_style_ribbon.Geometry -> join_geometry_12.Geometry
            style_preset_1.links.new(
                mn_style_ribbon.outputs[0], join_geometry_12.inputs[0]
            )
            return style_preset_1

        style_preset_1 = style_preset_1_node_group()

        # initialize style_preset_4 node group
        def style_preset_4_node_group():
            style_preset_4 = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Style Preset 4"
            )

            style_preset_4.color_tag = "GEOMETRY"
            style_preset_4.description = ""

            # style_preset_4 interface
            # Socket Geometry
            geometry_socket_45 = style_preset_4.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_45.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_43 = style_preset_4.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_43.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_67 = style_preset_4.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_67.attribute_domain = "POINT"
            selection_socket_67.hide_value = True

            # Socket Quality
            quality_socket_12 = style_preset_4.interface.new_socket(
                name="Quality", in_out="INPUT", socket_type="NodeSocketInt"
            )
            quality_socket_12.subtype = "NONE"
            quality_socket_12.default_value = 3
            quality_socket_12.min_value = 0
            quality_socket_12.max_value = 6
            quality_socket_12.attribute_domain = "POINT"

            # Socket Color Blur
            color_blur_socket_9 = style_preset_4.interface.new_socket(
                name="Color Blur", in_out="INPUT", socket_type="NodeSocketBool"
            )
            color_blur_socket_9.attribute_domain = "POINT"

            # Socket Shade Smooth
            shade_smooth_socket_21 = style_preset_4.interface.new_socket(
                name="Shade Smooth", in_out="INPUT", socket_type="NodeSocketBool"
            )
            shade_smooth_socket_21.attribute_domain = "POINT"

            # Socket Material
            material_socket_26 = style_preset_4.interface.new_socket(
                name="Material", in_out="INPUT", socket_type="NodeSocketMaterial"
            )
            material_socket_26.attribute_domain = "POINT"

            # initialize style_preset_4 nodes
            # node Group Output
            group_output_197 = style_preset_4.nodes.new("NodeGroupOutput")
            group_output_197.name = "Group Output"
            group_output_197.is_active_output = True

            # node Group Input
            group_input_194 = style_preset_4.nodes.new("NodeGroupInput")
            group_input_194.name = "Group Input"

            # node Frame.003
            frame_003_8 = style_preset_4.nodes.new("NodeFrame")
            frame_003_8.label = "Preset 4"
            frame_003_8.name = "Frame.003"
            frame_003_8.label_size = 20
            frame_003_8.shrink = True

            # node Join Geometry.005
            join_geometry_005 = style_preset_4.nodes.new("GeometryNodeJoinGeometry")
            join_geometry_005.name = "Join Geometry.005"

            # node Separate Geometry.006
            separate_geometry_006_1 = style_preset_4.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_006_1.name = "Separate Geometry.006"
            separate_geometry_006_1.domain = "POINT"

            # node Group.005
            group_005_14 = style_preset_4.nodes.new("GeometryNodeGroup")
            group_005_14.label = "Ribbon Protein"
            group_005_14.name = "Group.005"
            group_005_14.node_tree = style_ribbon
            # Socket_7
            group_005_14.inputs[4].default_value = 0.5

            # node Group.011
            group_011_11 = style_preset_4.nodes.new("GeometryNodeGroup")
            group_011_11.label = "Style Spheres"
            group_011_11.name = "Group.011"
            group_011_11.node_tree = style_spheres
            # Input_2
            group_011_11.inputs[2].default_value = False
            # Input_3
            group_011_11.inputs[3].default_value = 0.800000011920929

            # node Reroute.002
            reroute_002_29 = style_preset_4.nodes.new("NodeReroute")
            reroute_002_29.name = "Reroute.002"
            # node Group.015
            group_015_3 = style_preset_4.nodes.new("GeometryNodeGroup")
            group_015_3.name = "Group.015"
            group_015_3.node_tree = is_peptide
            # Socket_1
            group_015_3.inputs[0].default_value = True
            # Socket_3
            group_015_3.inputs[1].default_value = False

            # node Reroute
            reroute_57 = style_preset_4.nodes.new("NodeReroute")
            reroute_57.name = "Reroute"
            # node Reroute.001
            reroute_001_39 = style_preset_4.nodes.new("NodeReroute")
            reroute_001_39.name = "Reroute.001"
            # node Group
            group_57 = style_preset_4.nodes.new("GeometryNodeGroup")
            group_57.name = "Group"
            group_57.node_tree = attribute_map
            # Socket_2
            group_57.inputs[1].default_value = "b_factor"
            # Socket_3
            group_57.inputs[2].default_value = 0.20000000298023224
            # Socket_4
            group_57.inputs[3].default_value = 3.0

            # node Reroute.003
            reroute_003_22 = style_preset_4.nodes.new("NodeReroute")
            reroute_003_22.name = "Reroute.003"

            # Set parents
            join_geometry_005.parent = frame_003_8
            separate_geometry_006_1.parent = frame_003_8
            group_005_14.parent = frame_003_8
            group_011_11.parent = frame_003_8
            reroute_002_29.parent = frame_003_8
            group_015_3.parent = frame_003_8
            reroute_57.parent = frame_003_8
            reroute_001_39.parent = frame_003_8
            group_57.parent = frame_003_8
            reroute_003_22.parent = frame_003_8

            # Set locations
            group_output_197.location = (749.06005859375, 0.0)
            group_input_194.location = (-744.8936157226562, -118.712646484375)
            frame_003_8.location = (827.06005859375, 3586.0)
            join_geometry_005.location = (-387.06005859375, -3646.0)
            separate_geometry_006_1.location = (-895.833251953125, -3555.84814453125)
            group_005_14.location = (-695.833251953125, -3495.84814453125)
            group_011_11.location = (-695.833251953125, -3815.84814453125)
            reroute_002_29.location = (-886.0, -3916.0)
            group_015_3.location = (-1086.0, -3656.0)
            reroute_57.location = (-886.0, -3876.0)
            reroute_001_39.location = (-886.0, -3896.0)
            group_57.location = (-947.06005859375, -3366.0)
            reroute_003_22.location = (-887.06005859375, -3846.0)

            # Set dimensions
            group_output_197.width, group_output_197.height = 140.0, 100.0
            group_input_194.width, group_input_194.height = 140.0, 100.0
            frame_003_8.width, frame_003_8.height = 899.199951171875, 800.39990234375
            join_geometry_005.width, join_geometry_005.height = 140.0, 100.0
            separate_geometry_006_1.width, separate_geometry_006_1.height = 140.0, 100.0
            group_005_14.width, group_005_14.height = 200.0, 100.0
            group_011_11.width, group_011_11.height = 200.0, 100.0
            reroute_002_29.width, reroute_002_29.height = 16.0, 100.0
            group_015_3.width, group_015_3.height = 140.0, 100.0
            reroute_57.width, reroute_57.height = 16.0, 100.0
            reroute_001_39.width, reroute_001_39.height = 16.0, 100.0
            group_57.width, group_57.height = 198.40765380859375, 100.0
            reroute_003_22.width, reroute_003_22.height = 16.0, 100.0

            # initialize style_preset_4 links
            # separate_geometry_006_1.Inverted -> group_011_11.Atoms
            style_preset_4.links.new(
                separate_geometry_006_1.outputs[1], group_011_11.inputs[0]
            )
            # group_input_194.Atoms -> separate_geometry_006_1.Geometry
            style_preset_4.links.new(
                group_input_194.outputs[0], separate_geometry_006_1.inputs[0]
            )
            # group_011_11.Geometry -> join_geometry_005.Geometry
            style_preset_4.links.new(
                group_011_11.outputs[0], join_geometry_005.inputs[0]
            )
            # group_57.Value -> group_005_14.Radius
            style_preset_4.links.new(group_57.outputs[0], group_005_14.inputs[3])
            # reroute_002_29.Output -> group_005_14.Material
            style_preset_4.links.new(reroute_002_29.outputs[0], group_005_14.inputs[7])
            # reroute_57.Output -> group_011_11.Sphere Subdivisions
            style_preset_4.links.new(reroute_57.outputs[0], group_011_11.inputs[4])
            # reroute_001_39.Output -> group_005_14.Shade Smooth
            style_preset_4.links.new(reroute_001_39.outputs[0], group_005_14.inputs[6])
            # reroute_002_29.Output -> group_011_11.Material
            style_preset_4.links.new(reroute_002_29.outputs[0], group_011_11.inputs[6])
            # reroute_57.Output -> group_005_14.Quality
            style_preset_4.links.new(reroute_57.outputs[0], group_005_14.inputs[2])
            # group_015_3.Selection -> separate_geometry_006_1.Selection
            style_preset_4.links.new(
                group_015_3.outputs[0], separate_geometry_006_1.inputs[1]
            )
            # reroute_001_39.Output -> group_011_11.Shade Smooth
            style_preset_4.links.new(reroute_001_39.outputs[0], group_011_11.inputs[5])
            # separate_geometry_006_1.Selection -> group_005_14.Atoms
            style_preset_4.links.new(
                separate_geometry_006_1.outputs[0], group_005_14.inputs[0]
            )
            # group_input_194.Material -> reroute_002_29.Input
            style_preset_4.links.new(
                group_input_194.outputs[5], reroute_002_29.inputs[0]
            )
            # group_input_194.Quality -> reroute_57.Input
            style_preset_4.links.new(group_input_194.outputs[2], reroute_57.inputs[0])
            # group_input_194.Shade Smooth -> reroute_001_39.Input
            style_preset_4.links.new(
                group_input_194.outputs[4], reroute_001_39.inputs[0]
            )
            # join_geometry_005.Geometry -> group_output_197.Geometry
            style_preset_4.links.new(
                join_geometry_005.outputs[0], group_output_197.inputs[0]
            )
            # group_input_194.Atoms -> group_57.Sample Atoms
            style_preset_4.links.new(group_input_194.outputs[0], group_57.inputs[0])
            # reroute_003_22.Output -> group_005_14.Selection
            style_preset_4.links.new(reroute_003_22.outputs[0], group_005_14.inputs[1])
            # reroute_003_22.Output -> group_011_11.Selection
            style_preset_4.links.new(reroute_003_22.outputs[0], group_011_11.inputs[1])
            # group_input_194.Selection -> reroute_003_22.Input
            style_preset_4.links.new(
                group_input_194.outputs[1], reroute_003_22.inputs[0]
            )
            # group_input_194.Color Blur -> group_005_14.Color Blur
            style_preset_4.links.new(group_input_194.outputs[3], group_005_14.inputs[5])
            # group_005_14.Geometry -> join_geometry_005.Geometry
            style_preset_4.links.new(
                group_005_14.outputs[0], join_geometry_005.inputs[0]
            )
            return style_preset_4

        style_preset_4 = style_preset_4_node_group()

        # initialize _mn_point_curve_trails node group
        def _mn_point_curve_trails_node_group():
            _mn_point_curve_trails = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".MN_point_curve_trails"
            )

            _mn_point_curve_trails.color_tag = "NONE"
            _mn_point_curve_trails.description = ""

            # _mn_point_curve_trails interface
            # Socket Geometry
            geometry_socket_46 = _mn_point_curve_trails.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_46.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_47 = _mn_point_curve_trails.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_47.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_68 = _mn_point_curve_trails.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_68.attribute_domain = "POINT"
            selection_socket_68.hide_value = True

            # Socket Count
            count_socket = _mn_point_curve_trails.interface.new_socket(
                name="Count", in_out="INPUT", socket_type="NodeSocketInt"
            )
            count_socket.subtype = "NONE"
            count_socket.default_value = 5
            count_socket.min_value = 1
            count_socket.max_value = 100000
            count_socket.attribute_domain = "POINT"

            # initialize _mn_point_curve_trails nodes
            # node Group Output
            group_output_198 = _mn_point_curve_trails.nodes.new("NodeGroupOutput")
            group_output_198.name = "Group Output"
            group_output_198.is_active_output = True

            # node Group Input
            group_input_195 = _mn_point_curve_trails.nodes.new("NodeGroupInput")
            group_input_195.name = "Group Input"

            # node Separate Geometry
            separate_geometry_24 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeSeparateGeometry"
            )
            separate_geometry_24.name = "Separate Geometry"
            separate_geometry_24.domain = "POINT"

            # node Simulation Input
            simulation_input = _mn_point_curve_trails.nodes.new(
                "GeometryNodeSimulationInput"
            )
            simulation_input.name = "Simulation Input"
            # node Simulation Output
            simulation_output = _mn_point_curve_trails.nodes.new(
                "GeometryNodeSimulationOutput"
            )
            simulation_output.name = "Simulation Output"
            simulation_output.active_index = 1
            simulation_output.state_items.clear()
            # Create item "Geometry"
            simulation_output.state_items.new("GEOMETRY", "Geometry")
            simulation_output.state_items[0].attribute_domain = "POINT"
            # Create item "Index"
            simulation_output.state_items.new("INT", "Index")
            simulation_output.state_items[1].attribute_domain = "POINT"
            # Skip
            simulation_output.inputs[0].default_value = False

            # node Index
            index_22 = _mn_point_curve_trails.nodes.new("GeometryNodeInputIndex")
            index_22.name = "Index"

            # node Instance on Points
            instance_on_points_10 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeInstanceOnPoints"
            )
            instance_on_points_10.name = "Instance on Points"
            # Selection
            instance_on_points_10.inputs[1].default_value = True
            # Pick Instance
            instance_on_points_10.inputs[3].default_value = False
            # Instance Index
            instance_on_points_10.inputs[4].default_value = 0
            # Rotation
            instance_on_points_10.inputs[5].default_value = (0.0, 0.0, 0.0)
            # Scale
            instance_on_points_10.inputs[6].default_value = (1.0, 1.0, 1.0)

            # node Curve Line
            curve_line = _mn_point_curve_trails.nodes.new(
                "GeometryNodeCurvePrimitiveLine"
            )
            curve_line.name = "Curve Line"
            curve_line.mode = "POINTS"
            # Start
            curve_line.inputs[0].default_value = (0.0, 0.0, 0.0)
            # End
            curve_line.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Set Position
            set_position_15 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeSetPosition"
            )
            set_position_15.name = "Set Position"
            # Selection
            set_position_15.inputs[1].default_value = True
            # Offset
            set_position_15.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Switch
            switch_50 = _mn_point_curve_trails.nodes.new("GeometryNodeSwitch")
            switch_50.name = "Switch"
            switch_50.input_type = "VECTOR"

            # node Endpoint Selection
            endpoint_selection_3 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeCurveEndpointSelection"
            )
            endpoint_selection_3.name = "Endpoint Selection"
            # Start Size
            endpoint_selection_3.inputs[0].default_value = 0
            # End Size
            endpoint_selection_3.inputs[1].default_value = 1

            # node Sample Index
            sample_index_12 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeSampleIndex"
            )
            sample_index_12.name = "Sample Index"
            sample_index_12.clamp = False
            sample_index_12.data_type = "FLOAT_VECTOR"
            sample_index_12.domain = "POINT"

            # node Position.001
            position_001_12 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeInputPosition"
            )
            position_001_12.name = "Position.001"

            # node Evaluate at Index
            evaluate_at_index_18 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_18.name = "Evaluate at Index"
            evaluate_at_index_18.data_type = "FLOAT_VECTOR"
            evaluate_at_index_18.domain = "POINT"

            # node Offset Point in Curve
            offset_point_in_curve_2 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeOffsetPointInCurve"
            )
            offset_point_in_curve_2.name = "Offset Point in Curve"
            # Point Index
            offset_point_in_curve_2.inputs[0].default_value = 0
            # Offset
            offset_point_in_curve_2.inputs[1].default_value = 1

            # node Capture Attribute.001
            capture_attribute_001_6 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_001_6.name = "Capture Attribute.001"
            capture_attribute_001_6.active_index = 0
            capture_attribute_001_6.capture_items.clear()
            capture_attribute_001_6.capture_items.new("FLOAT", "Index")
            capture_attribute_001_6.capture_items["Index"].data_type = "INT"
            capture_attribute_001_6.domain = "POINT"

            # node Realize Instances.001
            realize_instances_001_3 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeRealizeInstances"
            )
            realize_instances_001_3.name = "Realize Instances.001"
            # Selection
            realize_instances_001_3.inputs[1].default_value = True
            # Realize All
            realize_instances_001_3.inputs[2].default_value = True
            # Depth
            realize_instances_001_3.inputs[3].default_value = 0

            # node Reroute
            reroute_58 = _mn_point_curve_trails.nodes.new("NodeReroute")
            reroute_58.name = "Reroute"
            # node Resample Curve.002
            resample_curve_002 = _mn_point_curve_trails.nodes.new(
                "GeometryNodeResampleCurve"
            )
            resample_curve_002.name = "Resample Curve.002"
            resample_curve_002.mode = "COUNT"
            # Selection
            resample_curve_002.inputs[1].default_value = True

            # Process zone input Simulation Input
            simulation_input.pair_with_output(simulation_output)

            # Skip
            simulation_output.inputs[0].default_value = False

            # Set locations
            group_output_198.location = (1002.3253173828125, 0.0)
            group_input_195.location = (-1012.3253173828125, 0.0)
            separate_geometry_24.location = (-812.3253173828125, 210.2117919921875)
            simulation_input.location = (132.3253173828125, 240.0)
            simulation_output.location = (812.3253173828125, 240.0)
            index_22.location = (-627.6746826171875, 80.0)
            instance_on_points_10.location = (-207.6746826171875, 240.0)
            curve_line.location = (-389.73974609375, 178.92279052734375)
            set_position_15.location = (632.3253173828125, 240.0)
            switch_50.location = (632.3253173828125, -120.0)
            endpoint_selection_3.location = (632.3253173828125, 0.0)
            sample_index_12.location = (452.3253173828125, 80.0)
            position_001_12.location = (252.3253173828125, -240.0)
            evaluate_at_index_18.location = (452.3253173828125, -120.0)
            offset_point_in_curve_2.location = (252.3253173828125, -100.0)
            capture_attribute_001_6.location = (-633.4364013671875, 219.3778076171875)
            realize_instances_001_3.location = (-47.6746826171875, 240.0)
            reroute_58.location = (-427.6746826171875, -120.0)
            resample_curve_002.location = (312.3253173828125, 240.0)

            # Set dimensions
            group_output_198.width, group_output_198.height = 140.0, 100.0
            group_input_195.width, group_input_195.height = 140.0, 100.0
            separate_geometry_24.width, separate_geometry_24.height = 140.0, 100.0
            simulation_input.width, simulation_input.height = 140.0, 100.0
            simulation_output.width, simulation_output.height = 140.0, 100.0
            index_22.width, index_22.height = 140.0, 100.0
            instance_on_points_10.width, instance_on_points_10.height = 140.0, 100.0
            curve_line.width, curve_line.height = 140.0, 100.0
            set_position_15.width, set_position_15.height = 140.0, 100.0
            switch_50.width, switch_50.height = 140.0, 100.0
            endpoint_selection_3.width, endpoint_selection_3.height = 140.0, 100.0
            sample_index_12.width, sample_index_12.height = 140.0, 100.0
            position_001_12.width, position_001_12.height = 140.0, 100.0
            evaluate_at_index_18.width, evaluate_at_index_18.height = 140.0, 100.0
            offset_point_in_curve_2.width, offset_point_in_curve_2.height = 140.0, 100.0
            capture_attribute_001_6.width, capture_attribute_001_6.height = 140.0, 100.0
            realize_instances_001_3.width, realize_instances_001_3.height = 140.0, 100.0
            reroute_58.width, reroute_58.height = 16.0, 100.0
            resample_curve_002.width, resample_curve_002.height = 140.0, 100.0

            # initialize _mn_point_curve_trails links
            # realize_instances_001_3.Geometry -> simulation_input.Geometry
            _mn_point_curve_trails.links.new(
                realize_instances_001_3.outputs[0], simulation_input.inputs[0]
            )
            # switch_50.Output -> set_position_15.Position
            _mn_point_curve_trails.links.new(
                switch_50.outputs[0], set_position_15.inputs[2]
            )
            # curve_line.Curve -> instance_on_points_10.Instance
            _mn_point_curve_trails.links.new(
                curve_line.outputs[0], instance_on_points_10.inputs[2]
            )
            # sample_index_12.Value -> switch_50.True
            _mn_point_curve_trails.links.new(
                sample_index_12.outputs[0], switch_50.inputs[2]
            )
            # instance_on_points_10.Instances -> realize_instances_001_3.Geometry
            _mn_point_curve_trails.links.new(
                instance_on_points_10.outputs[0], realize_instances_001_3.inputs[0]
            )
            # position_001_12.Position -> evaluate_at_index_18.Value
            _mn_point_curve_trails.links.new(
                position_001_12.outputs[0], evaluate_at_index_18.inputs[1]
            )
            # endpoint_selection_3.Selection -> switch_50.Switch
            _mn_point_curve_trails.links.new(
                endpoint_selection_3.outputs[0], switch_50.inputs[0]
            )
            # set_position_15.Geometry -> simulation_output.Geometry
            _mn_point_curve_trails.links.new(
                set_position_15.outputs[0], simulation_output.inputs[1]
            )
            # capture_attribute_001_6.Index -> simulation_input.Index
            _mn_point_curve_trails.links.new(
                capture_attribute_001_6.outputs[1], simulation_input.inputs[1]
            )
            # simulation_input.Index -> simulation_output.Index
            _mn_point_curve_trails.links.new(
                simulation_input.outputs[2], simulation_output.inputs[2]
            )
            # separate_geometry_24.Selection -> capture_attribute_001_6.Geometry
            _mn_point_curve_trails.links.new(
                separate_geometry_24.outputs[0], capture_attribute_001_6.inputs[0]
            )
            # capture_attribute_001_6.Geometry -> reroute_58.Input
            _mn_point_curve_trails.links.new(
                capture_attribute_001_6.outputs[0], reroute_58.inputs[0]
            )
            # index_22.Index -> capture_attribute_001_6.Index
            _mn_point_curve_trails.links.new(
                index_22.outputs[0], capture_attribute_001_6.inputs[1]
            )
            # reroute_58.Output -> sample_index_12.Geometry
            _mn_point_curve_trails.links.new(
                reroute_58.outputs[0], sample_index_12.inputs[0]
            )
            # evaluate_at_index_18.Value -> switch_50.False
            _mn_point_curve_trails.links.new(
                evaluate_at_index_18.outputs[0], switch_50.inputs[1]
            )
            # capture_attribute_001_6.Geometry -> instance_on_points_10.Points
            _mn_point_curve_trails.links.new(
                capture_attribute_001_6.outputs[0], instance_on_points_10.inputs[0]
            )
            # position_001_12.Position -> sample_index_12.Value
            _mn_point_curve_trails.links.new(
                position_001_12.outputs[0], sample_index_12.inputs[1]
            )
            # simulation_input.Geometry -> resample_curve_002.Curve
            _mn_point_curve_trails.links.new(
                simulation_input.outputs[1], resample_curve_002.inputs[0]
            )
            # simulation_input.Index -> sample_index_12.Index
            _mn_point_curve_trails.links.new(
                simulation_input.outputs[2], sample_index_12.inputs[2]
            )
            # resample_curve_002.Curve -> set_position_15.Geometry
            _mn_point_curve_trails.links.new(
                resample_curve_002.outputs[0], set_position_15.inputs[0]
            )
            # offset_point_in_curve_2.Point Index -> evaluate_at_index_18.Index
            _mn_point_curve_trails.links.new(
                offset_point_in_curve_2.outputs[1], evaluate_at_index_18.inputs[0]
            )
            # group_input_195.Geometry -> separate_geometry_24.Geometry
            _mn_point_curve_trails.links.new(
                group_input_195.outputs[0], separate_geometry_24.inputs[0]
            )
            # group_input_195.Count -> resample_curve_002.Count
            _mn_point_curve_trails.links.new(
                group_input_195.outputs[2], resample_curve_002.inputs[2]
            )
            # group_input_195.Selection -> separate_geometry_24.Selection
            _mn_point_curve_trails.links.new(
                group_input_195.outputs[1], separate_geometry_24.inputs[1]
            )
            # simulation_output.Geometry -> group_output_198.Geometry
            _mn_point_curve_trails.links.new(
                simulation_output.outputs[0], group_output_198.inputs[0]
            )
            return _mn_point_curve_trails

        _mn_point_curve_trails = _mn_point_curve_trails_node_group()

        # initialize animate_trails node group
        def animate_trails_node_group():
            animate_trails = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Animate Trails"
            )

            animate_trails.color_tag = "GEOMETRY"
            animate_trails.description = ""

            # animate_trails interface
            # Socket Geometry
            geometry_socket_48 = animate_trails.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_48.attribute_domain = "POINT"

            # Socket Atoms
            atoms_socket_44 = animate_trails.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_44.attribute_domain = "POINT"
            atoms_socket_44.description = "Atoms to add trails to"

            # Socket Selection
            selection_socket_69 = animate_trails.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_69.attribute_domain = "POINT"
            selection_socket_69.hide_value = True
            selection_socket_69.description = "Selection of atoms to apply this node to"

            # Panel Trail
            trail_panel = animate_trails.interface.new_panel("Trail")
            # Socket Trail Frames
            trail_frames_socket = animate_trails.interface.new_socket(
                name="Trail Frames",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=trail_panel,
            )
            trail_frames_socket.subtype = "NONE"
            trail_frames_socket.default_value = 5
            trail_frames_socket.min_value = 1
            trail_frames_socket.max_value = 100000
            trail_frames_socket.attribute_domain = "POINT"
            trail_frames_socket.description = (
                "Number of previous frames from the trajectory to display"
            )

            # Socket Trail Radius
            trail_radius_socket = animate_trails.interface.new_socket(
                name="Trail Radius",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=trail_panel,
            )
            trail_radius_socket.subtype = "NONE"
            trail_radius_socket.default_value = 1.0
            trail_radius_socket.min_value = 0.0
            trail_radius_socket.max_value = 10000.0
            trail_radius_socket.attribute_domain = "POINT"

            # Socket Trail Cutoff (A)
            trail_cutoff__a__socket = animate_trails.interface.new_socket(
                name="Trail Cutoff (A)",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=trail_panel,
            )
            trail_cutoff__a__socket.subtype = "NONE"
            trail_cutoff__a__socket.default_value = 10.0
            trail_cutoff__a__socket.min_value = 0.0
            trail_cutoff__a__socket.max_value = 10000.0
            trail_cutoff__a__socket.attribute_domain = "POINT"

            # Socket Trail Subdivisions
            trail_subdivisions_socket = animate_trails.interface.new_socket(
                name="Trail Subdivisions",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=trail_panel,
            )
            trail_subdivisions_socket.subtype = "NONE"
            trail_subdivisions_socket.default_value = 6
            trail_subdivisions_socket.min_value = 1
            trail_subdivisions_socket.max_value = 16
            trail_subdivisions_socket.attribute_domain = "POINT"

            # Socket Trail Resolution
            trail_resolution_socket = animate_trails.interface.new_socket(
                name="Trail Resolution",
                in_out="INPUT",
                socket_type="NodeSocketInt",
                parent=trail_panel,
            )
            trail_resolution_socket.subtype = "NONE"
            trail_resolution_socket.default_value = 6
            trail_resolution_socket.min_value = 3
            trail_resolution_socket.max_value = 32
            trail_resolution_socket.attribute_domain = "POINT"
            trail_resolution_socket.description = "Tail radial resolution"

            # Panel Material
            material_panel_10 = animate_trails.interface.new_panel("Material")
            # Socket Shade Smooth
            shade_smooth_socket_22 = animate_trails.interface.new_socket(
                name="Shade Smooth",
                in_out="INPUT",
                socket_type="NodeSocketBool",
                parent=material_panel_10,
            )
            shade_smooth_socket_22.attribute_domain = "POINT"

            # Socket Material
            material_socket_27 = animate_trails.interface.new_socket(
                name="Material",
                in_out="INPUT",
                socket_type="NodeSocketMaterial",
                parent=material_panel_10,
            )
            material_socket_27.attribute_domain = "POINT"

            # initialize animate_trails nodes
            # node Group Output
            group_output_199 = animate_trails.nodes.new("NodeGroupOutput")
            group_output_199.name = "Group Output"
            group_output_199.is_active_output = True

            # node Group Input
            group_input_196 = animate_trails.nodes.new("NodeGroupInput")
            group_input_196.name = "Group Input"
            group_input_196.outputs[3].hide = True
            group_input_196.outputs[4].hide = True
            group_input_196.outputs[5].hide = True
            group_input_196.outputs[6].hide = True
            group_input_196.outputs[8].hide = True

            # node Set Spline Type
            set_spline_type_4 = animate_trails.nodes.new("GeometryNodeCurveSplineType")
            set_spline_type_4.name = "Set Spline Type"
            set_spline_type_4.spline_type = "BEZIER"
            # Selection
            set_spline_type_4.inputs[1].default_value = True

            # node Curve to Mesh
            curve_to_mesh_9 = animate_trails.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_9.name = "Curve to Mesh"
            # Fill Caps
            curve_to_mesh_9.inputs[2].default_value = True

            # node Curve Circle
            curve_circle_8 = animate_trails.nodes.new(
                "GeometryNodeCurvePrimitiveCircle"
            )
            curve_circle_8.name = "Curve Circle"
            curve_circle_8.mode = "RADIUS"
            # Radius
            curve_circle_8.inputs[4].default_value = 1.0

            # node Curve to Mesh.001
            curve_to_mesh_001 = animate_trails.nodes.new("GeometryNodeCurveToMesh")
            curve_to_mesh_001.name = "Curve to Mesh.001"
            # Fill Caps
            curve_to_mesh_001.inputs[2].default_value = False

            # node Delete Geometry
            delete_geometry_7 = animate_trails.nodes.new("GeometryNodeDeleteGeometry")
            delete_geometry_7.name = "Delete Geometry"
            delete_geometry_7.domain = "EDGE"
            delete_geometry_7.mode = "ALL"

            # node Compare
            compare_57 = animate_trails.nodes.new("FunctionNodeCompare")
            compare_57.name = "Compare"
            compare_57.data_type = "FLOAT"
            compare_57.mode = "ELEMENT"
            compare_57.operation = "GREATER_THAN"

            # node Vector Math
            vector_math_43 = animate_trails.nodes.new("ShaderNodeVectorMath")
            vector_math_43.name = "Vector Math"
            vector_math_43.operation = "DISTANCE"

            # node Edge Vertices
            edge_vertices_7 = animate_trails.nodes.new(
                "GeometryNodeInputMeshEdgeVertices"
            )
            edge_vertices_7.name = "Edge Vertices"

            # node Mesh to Curve
            mesh_to_curve_5 = animate_trails.nodes.new("GeometryNodeMeshToCurve")
            mesh_to_curve_5.name = "Mesh to Curve"
            # Selection
            mesh_to_curve_5.inputs[1].default_value = True

            # node Set Curve Radius
            set_curve_radius_6 = animate_trails.nodes.new("GeometryNodeSetCurveRadius")
            set_curve_radius_6.name = "Set Curve Radius"
            # Selection
            set_curve_radius_6.inputs[1].default_value = True

            # node Spline Parameter
            spline_parameter_3 = animate_trails.nodes.new("GeometryNodeSplineParameter")
            spline_parameter_3.name = "Spline Parameter"
            spline_parameter_3.outputs[1].hide = True
            spline_parameter_3.outputs[2].hide = True

            # node Set Material
            set_material_14 = animate_trails.nodes.new("GeometryNodeSetMaterial")
            set_material_14.name = "Set Material"
            # Selection
            set_material_14.inputs[1].default_value = True

            # node Math
            math_53 = animate_trails.nodes.new("ShaderNodeMath")
            math_53.name = "Math"
            math_53.operation = "MULTIPLY"
            math_53.use_clamp = False

            # node Math.001
            math_001_37 = animate_trails.nodes.new("ShaderNodeMath")
            math_001_37.name = "Math.001"
            math_001_37.operation = "MULTIPLY"
            math_001_37.use_clamp = False

            # node Capture Attribute
            capture_attribute_14 = animate_trails.nodes.new(
                "GeometryNodeCaptureAttribute"
            )
            capture_attribute_14.name = "Capture Attribute"
            capture_attribute_14.active_index = 1
            capture_attribute_14.capture_items.clear()
            capture_attribute_14.capture_items.new("FLOAT", "Factor")
            capture_attribute_14.capture_items["Factor"].data_type = "FLOAT"
            capture_attribute_14.capture_items.new("FLOAT", "Attribute")
            capture_attribute_14.capture_items["Attribute"].data_type = "FLOAT"
            capture_attribute_14.domain = "POINT"

            # node Named Attribute.003
            named_attribute_003_12 = animate_trails.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_003_12.name = "Named Attribute.003"
            named_attribute_003_12.data_type = "FLOAT"
            # Name
            named_attribute_003_12.inputs[0].default_value = "vdw_radii"

            # node Group Input.002
            group_input_002_20 = animate_trails.nodes.new("NodeGroupInput")
            group_input_002_20.name = "Group Input.002"
            group_input_002_20.outputs[0].hide = True
            group_input_002_20.outputs[1].hide = True
            group_input_002_20.outputs[2].hide = True
            group_input_002_20.outputs[3].hide = True
            group_input_002_20.outputs[5].hide = True
            group_input_002_20.outputs[6].hide = True
            group_input_002_20.outputs[7].hide = True
            group_input_002_20.outputs[8].hide = True
            group_input_002_20.outputs[9].hide = True

            # node Group
            group_58 = animate_trails.nodes.new("GeometryNodeGroup")
            group_58.name = "Group"
            group_58.node_tree = mn_units

            # node Set Shade Smooth
            set_shade_smooth_8 = animate_trails.nodes.new("GeometryNodeSetShadeSmooth")
            set_shade_smooth_8.name = "Set Shade Smooth"
            set_shade_smooth_8.domain = "FACE"
            # Selection
            set_shade_smooth_8.inputs[1].default_value = True

            # node Group Input.003
            group_input_003_10 = animate_trails.nodes.new("NodeGroupInput")
            group_input_003_10.name = "Group Input.003"
            group_input_003_10.outputs[0].hide = True
            group_input_003_10.outputs[1].hide = True
            group_input_003_10.outputs[2].hide = True
            group_input_003_10.outputs[3].hide = True
            group_input_003_10.outputs[4].hide = True
            group_input_003_10.outputs[5].hide = True
            group_input_003_10.outputs[6].hide = True
            group_input_003_10.outputs[9].hide = True

            # node Group Input.001
            group_input_001_36 = animate_trails.nodes.new("NodeGroupInput")
            group_input_001_36.name = "Group Input.001"
            group_input_001_36.outputs[0].hide = True
            group_input_001_36.outputs[1].hide = True
            group_input_001_36.outputs[2].hide = True
            group_input_001_36.outputs[3].hide = True
            group_input_001_36.outputs[4].hide = True
            group_input_001_36.outputs[5].hide = True
            group_input_001_36.outputs[7].hide = True
            group_input_001_36.outputs[8].hide = True
            group_input_001_36.outputs[9].hide = True

            # node Group Input.004
            group_input_004_8 = animate_trails.nodes.new("NodeGroupInput")
            group_input_004_8.name = "Group Input.004"
            group_input_004_8.outputs[0].hide = True
            group_input_004_8.outputs[1].hide = True
            group_input_004_8.outputs[2].hide = True
            group_input_004_8.outputs[4].hide = True
            group_input_004_8.outputs[5].hide = True
            group_input_004_8.outputs[6].hide = True
            group_input_004_8.outputs[7].hide = True
            group_input_004_8.outputs[8].hide = True
            group_input_004_8.outputs[9].hide = True

            # node Set Spline Resolution
            set_spline_resolution_4 = animate_trails.nodes.new(
                "GeometryNodeSetSplineResolution"
            )
            set_spline_resolution_4.name = "Set Spline Resolution"
            # Selection
            set_spline_resolution_4.inputs[1].default_value = True

            # node Set Handle Type
            set_handle_type_3 = animate_trails.nodes.new("GeometryNodeCurveSetHandles")
            set_handle_type_3.name = "Set Handle Type"
            set_handle_type_3.handle_type = "AUTO"
            set_handle_type_3.mode = {"LEFT", "RIGHT"}
            # Selection
            set_handle_type_3.inputs[1].default_value = True

            # node Group Input.005
            group_input_005_5 = animate_trails.nodes.new("NodeGroupInput")
            group_input_005_5.name = "Group Input.005"
            group_input_005_5.outputs[0].hide = True
            group_input_005_5.outputs[1].hide = True
            group_input_005_5.outputs[2].hide = True
            group_input_005_5.outputs[3].hide = True
            group_input_005_5.outputs[4].hide = True
            group_input_005_5.outputs[6].hide = True
            group_input_005_5.outputs[7].hide = True
            group_input_005_5.outputs[8].hide = True
            group_input_005_5.outputs[9].hide = True

            # node Store Named Attribute
            store_named_attribute_25 = animate_trails.nodes.new(
                "GeometryNodeStoreNamedAttribute"
            )
            store_named_attribute_25.name = "Store Named Attribute"
            store_named_attribute_25.data_type = "FLOAT"
            store_named_attribute_25.domain = "POINT"
            # Selection
            store_named_attribute_25.inputs[1].default_value = True
            # Name
            store_named_attribute_25.inputs[2].default_value = "Factor"

            # node Group.001
            group_001_37 = animate_trails.nodes.new("GeometryNodeGroup")
            group_001_37.name = "Group.001"
            group_001_37.node_tree = _mn_point_curve_trails

            # Set locations
            group_output_199.location = (1080.0, 80.0)
            group_input_196.location = (-1360.0, 140.0)
            set_spline_type_4.location = (-160.0, 100.0)
            curve_to_mesh_9.location = (560.0, 80.0)
            curve_circle_8.location = (360.0, -40.0)
            curve_to_mesh_001.location = (-640.0, 520.0)
            delete_geometry_7.location = (-480.0, 520.0)
            compare_57.location = (-680.0, 360.0)
            vector_math_43.location = (-840.0, 360.0)
            edge_vertices_7.location = (-1000.0, 360.0)
            mesh_to_curve_5.location = (-320.0, 520.0)
            set_curve_radius_6.location = (380.0, 80.0)
            spline_parameter_3.location = (-1020.0, -40.0)
            set_material_14.location = (920.0, 80.0)
            math_53.location = (180.0, -120.0)
            math_001_37.location = (180.0, -280.0)
            capture_attribute_14.location = (-840.0, 140.0)
            named_attribute_003_12.location = (-1020.0, -100.0)
            group_input_002_20.location = (-840.0, 220.0)
            group_58.location = (-680.0, 200.0)
            set_shade_smooth_8.location = (760.0, 80.0)
            group_input_003_10.location = (540.0, -80.0)
            group_input_001_36.location = (360.0, -180.0)
            group_input_004_8.location = (-180.0, -400.0)
            set_spline_resolution_4.location = (160.0, 100.0)
            set_handle_type_3.location = (0.0, 100.0)
            group_input_005_5.location = (-200.0, -60.0)
            store_named_attribute_25.location = (-1020.0, 160.0)
            group_001_37.location = (-1180.0, 140.0)

            # Set dimensions
            group_output_199.width, group_output_199.height = 140.0, 100.0
            group_input_196.width, group_input_196.height = 140.0, 100.0
            set_spline_type_4.width, set_spline_type_4.height = 140.0, 100.0
            curve_to_mesh_9.width, curve_to_mesh_9.height = 140.0, 100.0
            curve_circle_8.width, curve_circle_8.height = 140.0, 100.0
            curve_to_mesh_001.width, curve_to_mesh_001.height = 140.0, 100.0
            delete_geometry_7.width, delete_geometry_7.height = 140.0, 100.0
            compare_57.width, compare_57.height = 140.0, 100.0
            vector_math_43.width, vector_math_43.height = 140.0, 100.0
            edge_vertices_7.width, edge_vertices_7.height = 140.0, 100.0
            mesh_to_curve_5.width, mesh_to_curve_5.height = 140.0, 100.0
            set_curve_radius_6.width, set_curve_radius_6.height = 140.0, 100.0
            spline_parameter_3.width, spline_parameter_3.height = 140.0, 100.0
            set_material_14.width, set_material_14.height = 140.0, 100.0
            math_53.width, math_53.height = 140.0, 100.0
            math_001_37.width, math_001_37.height = 140.0, 100.0
            capture_attribute_14.width, capture_attribute_14.height = 140.0, 100.0
            named_attribute_003_12.width, named_attribute_003_12.height = 140.0, 100.0
            group_input_002_20.width, group_input_002_20.height = 140.0, 100.0
            group_58.width, group_58.height = 140.0, 100.0
            set_shade_smooth_8.width, set_shade_smooth_8.height = 140.0, 100.0
            group_input_003_10.width, group_input_003_10.height = 140.0, 100.0
            group_input_001_36.width, group_input_001_36.height = 140.0, 100.0
            group_input_004_8.width, group_input_004_8.height = 140.0, 100.0
            set_spline_resolution_4.width, set_spline_resolution_4.height = 140.0, 100.0
            set_handle_type_3.width, set_handle_type_3.height = 140.0, 100.0
            group_input_005_5.width, group_input_005_5.height = 140.0, 100.0
            store_named_attribute_25.width, store_named_attribute_25.height = (
                140.0,
                100.0,
            )
            group_001_37.width, group_001_37.height = 140.0, 100.0

            # initialize animate_trails links
            # compare_57.Result -> delete_geometry_7.Selection
            animate_trails.links.new(compare_57.outputs[0], delete_geometry_7.inputs[1])
            # vector_math_43.Value -> compare_57.A
            animate_trails.links.new(vector_math_43.outputs[1], compare_57.inputs[0])
            # edge_vertices_7.Position 1 -> vector_math_43.Vector
            animate_trails.links.new(
                edge_vertices_7.outputs[2], vector_math_43.inputs[0]
            )
            # edge_vertices_7.Position 2 -> vector_math_43.Vector
            animate_trails.links.new(
                edge_vertices_7.outputs[3], vector_math_43.inputs[1]
            )
            # delete_geometry_7.Geometry -> mesh_to_curve_5.Mesh
            animate_trails.links.new(
                delete_geometry_7.outputs[0], mesh_to_curve_5.inputs[0]
            )
            # set_spline_resolution_4.Geometry -> set_curve_radius_6.Curve
            animate_trails.links.new(
                set_spline_resolution_4.outputs[0], set_curve_radius_6.inputs[0]
            )
            # set_shade_smooth_8.Geometry -> set_material_14.Geometry
            animate_trails.links.new(
                set_shade_smooth_8.outputs[0], set_material_14.inputs[0]
            )
            # math_53.Value -> set_curve_radius_6.Radius
            animate_trails.links.new(math_53.outputs[0], set_curve_radius_6.inputs[2])
            # math_001_37.Value -> math_53.Value
            animate_trails.links.new(math_001_37.outputs[0], math_53.inputs[1])
            # set_curve_radius_6.Curve -> curve_to_mesh_9.Curve
            animate_trails.links.new(
                set_curve_radius_6.outputs[0], curve_to_mesh_9.inputs[0]
            )
            # curve_circle_8.Curve -> curve_to_mesh_9.Profile Curve
            animate_trails.links.new(
                curve_circle_8.outputs[0], curve_to_mesh_9.inputs[1]
            )
            # capture_attribute_14.Geometry -> curve_to_mesh_001.Curve
            animate_trails.links.new(
                capture_attribute_14.outputs[0], curve_to_mesh_001.inputs[0]
            )
            # curve_to_mesh_001.Mesh -> delete_geometry_7.Geometry
            animate_trails.links.new(
                curve_to_mesh_001.outputs[0], delete_geometry_7.inputs[0]
            )
            # mesh_to_curve_5.Curve -> set_spline_type_4.Curve
            animate_trails.links.new(
                mesh_to_curve_5.outputs[0], set_spline_type_4.inputs[0]
            )
            # set_material_14.Geometry -> group_output_199.Geometry
            animate_trails.links.new(
                set_material_14.outputs[0], group_output_199.inputs[0]
            )
            # capture_attribute_14.Factor -> math_53.Value
            animate_trails.links.new(capture_attribute_14.outputs[1], math_53.inputs[0])
            # store_named_attribute_25.Geometry -> capture_attribute_14.Geometry
            animate_trails.links.new(
                store_named_attribute_25.outputs[0], capture_attribute_14.inputs[0]
            )
            # named_attribute_003_12.Attribute -> capture_attribute_14.Attribute
            animate_trails.links.new(
                named_attribute_003_12.outputs[0], capture_attribute_14.inputs[2]
            )
            # capture_attribute_14.Attribute -> math_001_37.Value
            animate_trails.links.new(
                capture_attribute_14.outputs[2], math_001_37.inputs[0]
            )
            # spline_parameter_3.Factor -> capture_attribute_14.Factor
            animate_trails.links.new(
                spline_parameter_3.outputs[0], capture_attribute_14.inputs[1]
            )
            # group_input_002_20.Trail Cutoff (A) -> group_58.Value
            animate_trails.links.new(group_input_002_20.outputs[4], group_58.inputs[0])
            # group_58.Angstrom -> compare_57.B
            animate_trails.links.new(group_58.outputs[0], compare_57.inputs[1])
            # curve_to_mesh_9.Mesh -> set_shade_smooth_8.Geometry
            animate_trails.links.new(
                curve_to_mesh_9.outputs[0], set_shade_smooth_8.inputs[0]
            )
            # group_input_003_10.Material -> set_material_14.Material
            animate_trails.links.new(
                group_input_003_10.outputs[8], set_material_14.inputs[2]
            )
            # group_input_001_36.Trail Resolution -> curve_circle_8.Resolution
            animate_trails.links.new(
                group_input_001_36.outputs[6], curve_circle_8.inputs[0]
            )
            # group_input_004_8.Trail Radius -> math_001_37.Value
            animate_trails.links.new(
                group_input_004_8.outputs[3], math_001_37.inputs[1]
            )
            # set_handle_type_3.Curve -> set_spline_resolution_4.Geometry
            animate_trails.links.new(
                set_handle_type_3.outputs[0], set_spline_resolution_4.inputs[0]
            )
            # set_spline_type_4.Curve -> set_handle_type_3.Curve
            animate_trails.links.new(
                set_spline_type_4.outputs[0], set_handle_type_3.inputs[0]
            )
            # group_input_005_5.Trail Subdivisions -> set_spline_resolution_4.Resolution
            animate_trails.links.new(
                group_input_005_5.outputs[5], set_spline_resolution_4.inputs[2]
            )
            # group_input_003_10.Shade Smooth -> set_shade_smooth_8.Shade Smooth
            animate_trails.links.new(
                group_input_003_10.outputs[7], set_shade_smooth_8.inputs[2]
            )
            # spline_parameter_3.Factor -> store_named_attribute_25.Value
            animate_trails.links.new(
                spline_parameter_3.outputs[0], store_named_attribute_25.inputs[3]
            )
            # group_001_37.Geometry -> store_named_attribute_25.Geometry
            animate_trails.links.new(
                group_001_37.outputs[0], store_named_attribute_25.inputs[0]
            )
            # group_input_196.Atoms -> group_001_37.Geometry
            animate_trails.links.new(group_input_196.outputs[0], group_001_37.inputs[0])
            # group_input_196.Trail Frames -> group_001_37.Count
            animate_trails.links.new(group_input_196.outputs[2], group_001_37.inputs[2])
            # group_input_196.Selection -> group_001_37.Selection
            animate_trails.links.new(group_input_196.outputs[1], group_001_37.inputs[1])
            return animate_trails

        animate_trails = animate_trails_node_group()

        # initialize _topo_count_residues node group
        def _topo_count_residues_node_group():
            _topo_count_residues = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".Topo Count Residues"
            )

            _topo_count_residues.color_tag = "NONE"
            _topo_count_residues.description = ""

            # _topo_count_residues interface
            # Socket Counted Res ID
            counted_res_id_socket = _topo_count_residues.interface.new_socket(
                name="Counted Res ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            counted_res_id_socket.subtype = "NONE"
            counted_res_id_socket.default_value = 0
            counted_res_id_socket.min_value = -2147483648
            counted_res_id_socket.max_value = 2147483647
            counted_res_id_socket.attribute_domain = "POINT"

            # Socket Total
            total_socket_2 = _topo_count_residues.interface.new_socket(
                name="Total", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            total_socket_2.subtype = "NONE"
            total_socket_2.default_value = 0
            total_socket_2.min_value = -2147483648
            total_socket_2.max_value = 2147483647
            total_socket_2.attribute_domain = "POINT"
            total_socket_2.description = "Total number of residues"

            # Socket First Res ID
            first_res_id_socket = _topo_count_residues.interface.new_socket(
                name="First Res ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_res_id_socket.subtype = "NONE"
            first_res_id_socket.default_value = 0
            first_res_id_socket.min_value = -2147483648
            first_res_id_socket.max_value = 2147483647
            first_res_id_socket.attribute_domain = "POINT"
            first_res_id_socket.description = "Res ID value for the first residue"

            # Socket Last Res ID
            last_res_id_socket = _topo_count_residues.interface.new_socket(
                name="Last Res ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_res_id_socket.subtype = "NONE"
            last_res_id_socket.default_value = 0
            last_res_id_socket.min_value = -2147483648
            last_res_id_socket.max_value = 2147483647
            last_res_id_socket.attribute_domain = "POINT"
            last_res_id_socket.description = "Res ID value for the last residue"

            # Socket Index First
            index_first_socket = _topo_count_residues.interface.new_socket(
                name="Index First", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_first_socket.subtype = "NONE"
            index_first_socket.default_value = 0
            index_first_socket.min_value = -2147483648
            index_first_socket.max_value = 2147483647
            index_first_socket.attribute_domain = "POINT"

            # Socket Index Last
            index_last_socket = _topo_count_residues.interface.new_socket(
                name="Index Last", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_last_socket.subtype = "NONE"
            index_last_socket.default_value = 0
            index_last_socket.min_value = -2147483648
            index_last_socket.max_value = 2147483647
            index_last_socket.attribute_domain = "POINT"

            # Socket Input
            input_socket_8 = _topo_count_residues.interface.new_socket(
                name="Input", in_out="INPUT", socket_type="NodeSocketInt"
            )
            input_socket_8.subtype = "NONE"
            input_socket_8.default_value = 0
            input_socket_8.min_value = -2147483648
            input_socket_8.max_value = 2147483647
            input_socket_8.attribute_domain = "POINT"

            # initialize _topo_count_residues nodes
            # node Group Output
            group_output_200 = _topo_count_residues.nodes.new("NodeGroupOutput")
            group_output_200.name = "Group Output"
            group_output_200.is_active_output = True

            # node Group Input
            group_input_197 = _topo_count_residues.nodes.new("NodeGroupInput")
            group_input_197.name = "Group Input"

            # node Named Attribute
            named_attribute_50 = _topo_count_residues.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_50.name = "Named Attribute"
            named_attribute_50.data_type = "INT"
            # Name
            named_attribute_50.inputs[0].default_value = "res_id"

            # node Accumulate Field
            accumulate_field_10 = _topo_count_residues.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_10.name = "Accumulate Field"
            accumulate_field_10.data_type = "INT"
            accumulate_field_10.domain = "POINT"

            # node Group
            group_59 = _topo_count_residues.nodes.new("GeometryNodeGroup")
            group_59.name = "Group"
            group_59.node_tree = offset_integer
            # Socket_1
            group_59.inputs[0].default_value = 0
            # Socket_2
            group_59.inputs[2].default_value = 1

            # node Compare.001
            compare_001_34 = _topo_count_residues.nodes.new("FunctionNodeCompare")
            compare_001_34.name = "Compare.001"
            compare_001_34.data_type = "INT"
            compare_001_34.mode = "ELEMENT"
            compare_001_34.operation = "NOT_EQUAL"

            # node Group.001
            group_001_38 = _topo_count_residues.nodes.new("GeometryNodeGroup")
            group_001_38.name = "Group.001"
            group_001_38.node_tree = group_info

            # node Evaluate at Index
            evaluate_at_index_19 = _topo_count_residues.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_19.name = "Evaluate at Index"
            evaluate_at_index_19.data_type = "INT"
            evaluate_at_index_19.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_13 = _topo_count_residues.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_13.name = "Evaluate at Index.001"
            evaluate_at_index_001_13.data_type = "INT"
            evaluate_at_index_001_13.domain = "POINT"

            # node Named Attribute.002
            named_attribute_002_23 = _topo_count_residues.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_23.name = "Named Attribute.002"
            named_attribute_002_23.data_type = "INT"
            # Name
            named_attribute_002_23.inputs[0].default_value = "res_id"

            # node Reroute
            reroute_59 = _topo_count_residues.nodes.new("NodeReroute")
            reroute_59.name = "Reroute"

            # Set locations
            group_output_200.location = (935.2698974609375, 237.94854736328125)
            group_input_197.location = (-200.0, -40.0)
            named_attribute_50.location = (-380.0, 180.0)
            accumulate_field_10.location = (220.0, 300.0)
            group_59.location = (-200.0, 120.0)
            compare_001_34.location = (-20.0, 240.0)
            group_001_38.location = (220.0, 60.0)
            evaluate_at_index_19.location = (568.0663452148438, -10.300434112548828)
            evaluate_at_index_001_13.location = (568.0663452148438, -170.30044555664062)
            named_attribute_002_23.location = (220.0, -160.0)
            reroute_59.location = (149.45323181152344, -57.92286682128906)

            # Set dimensions
            group_output_200.width, group_output_200.height = 140.0, 100.0
            group_input_197.width, group_input_197.height = 140.0, 100.0
            named_attribute_50.width, named_attribute_50.height = 140.0, 100.0
            accumulate_field_10.width, accumulate_field_10.height = (
                156.1656494140625,
                100.0,
            )
            group_59.width, group_59.height = 140.0, 100.0
            compare_001_34.width, compare_001_34.height = 140.0, 100.0
            group_001_38.width, group_001_38.height = 155.5599365234375, 100.0
            evaluate_at_index_19.width, evaluate_at_index_19.height = 140.0, 100.0
            evaluate_at_index_001_13.width, evaluate_at_index_001_13.height = (
                140.0,
                100.0,
            )
            named_attribute_002_23.width, named_attribute_002_23.height = 140.0, 100.0
            reroute_59.width, reroute_59.height = 16.0, 100.0

            # initialize _topo_count_residues links
            # group_59.Value -> compare_001_34.B
            _topo_count_residues.links.new(
                group_59.outputs[0], compare_001_34.inputs[3]
            )
            # compare_001_34.Result -> accumulate_field_10.Value
            _topo_count_residues.links.new(
                compare_001_34.outputs[0], accumulate_field_10.inputs[0]
            )
            # reroute_59.Output -> accumulate_field_10.Group ID
            _topo_count_residues.links.new(
                reroute_59.outputs[0], accumulate_field_10.inputs[1]
            )
            # named_attribute_50.Attribute -> group_59.Value
            _topo_count_residues.links.new(
                named_attribute_50.outputs[0], group_59.inputs[1]
            )
            # named_attribute_50.Attribute -> compare_001_34.A
            _topo_count_residues.links.new(
                named_attribute_50.outputs[0], compare_001_34.inputs[2]
            )
            # reroute_59.Output -> group_001_38.Group ID
            _topo_count_residues.links.new(
                reroute_59.outputs[0], group_001_38.inputs[0]
            )
            # group_001_38.First Index -> evaluate_at_index_19.Index
            _topo_count_residues.links.new(
                group_001_38.outputs[0], evaluate_at_index_19.inputs[0]
            )
            # group_001_38.Last Index -> evaluate_at_index_001_13.Index
            _topo_count_residues.links.new(
                group_001_38.outputs[1], evaluate_at_index_001_13.inputs[0]
            )
            # evaluate_at_index_19.Value -> group_output_200.First Res ID
            _topo_count_residues.links.new(
                evaluate_at_index_19.outputs[0], group_output_200.inputs[2]
            )
            # evaluate_at_index_001_13.Value -> group_output_200.Last Res ID
            _topo_count_residues.links.new(
                evaluate_at_index_001_13.outputs[0], group_output_200.inputs[3]
            )
            # named_attribute_002_23.Attribute -> evaluate_at_index_19.Value
            _topo_count_residues.links.new(
                named_attribute_002_23.outputs[0], evaluate_at_index_19.inputs[1]
            )
            # named_attribute_002_23.Attribute -> evaluate_at_index_001_13.Value
            _topo_count_residues.links.new(
                named_attribute_002_23.outputs[0], evaluate_at_index_001_13.inputs[1]
            )
            # group_001_38.First Index -> group_output_200.Index First
            _topo_count_residues.links.new(
                group_001_38.outputs[0], group_output_200.inputs[4]
            )
            # group_001_38.Last Index -> group_output_200.Index Last
            _topo_count_residues.links.new(
                group_001_38.outputs[1], group_output_200.inputs[5]
            )
            # accumulate_field_10.Trailing -> group_output_200.Counted Res ID
            _topo_count_residues.links.new(
                accumulate_field_10.outputs[1], group_output_200.inputs[0]
            )
            # accumulate_field_10.Total -> group_output_200.Total
            _topo_count_residues.links.new(
                accumulate_field_10.outputs[2], group_output_200.inputs[1]
            )
            # group_input_197.Input -> reroute_59.Input
            _topo_count_residues.links.new(
                group_input_197.outputs[0], reroute_59.inputs[0]
            )
            return _topo_count_residues

        _topo_count_residues = _topo_count_residues_node_group()

        # initialize chain_info node group
        def chain_info_node_group():
            chain_info = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Chain Info"
            )

            chain_info.color_tag = "INPUT"
            chain_info.description = ""

            # chain_info interface
            # Socket Factor
            factor_socket_5 = chain_info.interface.new_socket(
                name="Factor", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_5.subtype = "FACTOR"
            factor_socket_5.default_value = 0.0
            factor_socket_5.min_value = 0.0
            factor_socket_5.max_value = 1.0
            factor_socket_5.attribute_domain = "POINT"
            factor_socket_5.description = "A residues relative position along a chain. 0 being the first residue in a chain, 1 being the last"

            # Socket Length
            length_socket_2 = chain_info.interface.new_socket(
                name="Length", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            length_socket_2.subtype = "NONE"
            length_socket_2.default_value = 0
            length_socket_2.min_value = -2147483648
            length_socket_2.max_value = 2147483647
            length_socket_2.attribute_domain = "POINT"
            length_socket_2.description = "Number of residues in the chain"

            # Socket Counted Index
            counted_index_socket = chain_info.interface.new_socket(
                name="Counted Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            counted_index_socket.subtype = "NONE"
            counted_index_socket.default_value = 0
            counted_index_socket.min_value = -2147483648
            counted_index_socket.max_value = 2147483647
            counted_index_socket.attribute_domain = "POINT"
            counted_index_socket.description = (
                "Res ID along the chain if counting from 1"
            )

            # Socket First Res ID
            first_res_id_socket_1 = chain_info.interface.new_socket(
                name="First Res ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_res_id_socket_1.subtype = "NONE"
            first_res_id_socket_1.default_value = 0
            first_res_id_socket_1.min_value = -2147483648
            first_res_id_socket_1.max_value = 2147483647
            first_res_id_socket_1.attribute_domain = "POINT"
            first_res_id_socket_1.description = (
                "The first Res ID in a chain (truncated chains start above 1)"
            )

            # Socket Last Res ID
            last_res_id_socket_1 = chain_info.interface.new_socket(
                name="Last Res ID", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_res_id_socket_1.subtype = "NONE"
            last_res_id_socket_1.default_value = 0
            last_res_id_socket_1.min_value = -2147483648
            last_res_id_socket_1.max_value = 2147483647
            last_res_id_socket_1.attribute_domain = "POINT"
            last_res_id_socket_1.description = "The Res ID of the last residue in chain (not equal to Length if chain is truncated)"

            # Socket Index First
            index_first_socket_1 = chain_info.interface.new_socket(
                name="Index First", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_first_socket_1.subtype = "NONE"
            index_first_socket_1.default_value = 0
            index_first_socket_1.min_value = -2147483648
            index_first_socket_1.max_value = 2147483647
            index_first_socket_1.attribute_domain = "POINT"
            index_first_socket_1.description = (
                "Index in whole structure of the first atom in the chain"
            )

            # Socket Index Last
            index_last_socket_1 = chain_info.interface.new_socket(
                name="Index Last", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_last_socket_1.subtype = "NONE"
            index_last_socket_1.default_value = 0
            index_last_socket_1.min_value = -2147483648
            index_last_socket_1.max_value = 2147483647
            index_last_socket_1.attribute_domain = "POINT"
            index_last_socket_1.description = (
                "Index in the whole structure the last atom in the chain"
            )

            # Socket Per Chain
            per_chain_socket = chain_info.interface.new_socket(
                name="Per Chain", in_out="INPUT", socket_type="NodeSocketBool"
            )
            per_chain_socket.attribute_domain = "POINT"

            # initialize chain_info nodes
            # node Group Output
            group_output_201 = chain_info.nodes.new("NodeGroupOutput")
            group_output_201.name = "Group Output"
            group_output_201.is_active_output = True

            # node Group Input
            group_input_198 = chain_info.nodes.new("NodeGroupInput")
            group_input_198.name = "Group Input"

            # node Group.002
            group_002_24 = chain_info.nodes.new("GeometryNodeGroup")
            group_002_24.name = "Group.002"
            group_002_24.node_tree = _topo_count_residues

            # node Map Range.001
            map_range_001_6 = chain_info.nodes.new("ShaderNodeMapRange")
            map_range_001_6.name = "Map Range.001"
            map_range_001_6.clamp = True
            map_range_001_6.data_type = "FLOAT"
            map_range_001_6.interpolation_type = "LINEAR"
            # From Min
            map_range_001_6.inputs[1].default_value = 0.0
            # To Min
            map_range_001_6.inputs[3].default_value = 0.0
            # To Max
            map_range_001_6.inputs[4].default_value = 1.0

            # node Named Attribute
            named_attribute_51 = chain_info.nodes.new("GeometryNodeInputNamedAttribute")
            named_attribute_51.name = "Named Attribute"
            named_attribute_51.data_type = "INT"
            # Name
            named_attribute_51.inputs[0].default_value = "chain_id"

            # node Switch
            switch_51 = chain_info.nodes.new("GeometryNodeSwitch")
            switch_51.name = "Switch"
            switch_51.input_type = "INT"
            # False
            switch_51.inputs[1].default_value = 0

            # Set locations
            group_output_201.location = (360.0, -40.0)
            group_input_198.location = (-460.0, -140.0)
            group_002_24.location = (-120.0, -60.0)
            map_range_001_6.location = (200.0, 100.0)
            named_attribute_51.location = (-460.0, -220.0)
            switch_51.location = (-283.28857421875, -154.70787048339844)

            # Set dimensions
            group_output_201.width, group_output_201.height = 140.0, 100.0
            group_input_198.width, group_input_198.height = 140.0, 100.0
            group_002_24.width, group_002_24.height = 240.44110107421875, 100.0
            map_range_001_6.width, map_range_001_6.height = 140.0, 100.0
            named_attribute_51.width, named_attribute_51.height = 140.0, 100.0
            switch_51.width, switch_51.height = 140.0, 100.0

            # initialize chain_info links
            # map_range_001_6.Result -> group_output_201.Factor
            chain_info.links.new(map_range_001_6.outputs[0], group_output_201.inputs[0])
            # group_002_24.Total -> map_range_001_6.From Max
            chain_info.links.new(group_002_24.outputs[1], map_range_001_6.inputs[2])
            # group_002_24.Counted Res ID -> map_range_001_6.Value
            chain_info.links.new(group_002_24.outputs[0], map_range_001_6.inputs[0])
            # group_002_24.First Res ID -> group_output_201.First Res ID
            chain_info.links.new(group_002_24.outputs[2], group_output_201.inputs[3])
            # group_002_24.Last Res ID -> group_output_201.Last Res ID
            chain_info.links.new(group_002_24.outputs[3], group_output_201.inputs[4])
            # group_002_24.Total -> group_output_201.Length
            chain_info.links.new(group_002_24.outputs[1], group_output_201.inputs[1])
            # group_002_24.Counted Res ID -> group_output_201.Counted Index
            chain_info.links.new(group_002_24.outputs[0], group_output_201.inputs[2])
            # group_002_24.Index First -> group_output_201.Index First
            chain_info.links.new(group_002_24.outputs[4], group_output_201.inputs[5])
            # group_002_24.Index Last -> group_output_201.Index Last
            chain_info.links.new(group_002_24.outputs[5], group_output_201.inputs[6])
            # named_attribute_51.Attribute -> switch_51.True
            chain_info.links.new(named_attribute_51.outputs[0], switch_51.inputs[2])
            # switch_51.Output -> group_002_24.Input
            chain_info.links.new(switch_51.outputs[0], group_002_24.inputs[0])
            # group_input_198.Per Chain -> switch_51.Switch
            chain_info.links.new(group_input_198.outputs[0], switch_51.inputs[0])
            return chain_info

        chain_info = chain_info_node_group()

        # initialize color_rainbow node group
        def color_rainbow_node_group():
            color_rainbow = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Rainbow"
            )

            color_rainbow.color_tag = "COLOR"
            color_rainbow.description = ""

            # color_rainbow interface
            # Socket Color
            color_socket_26 = color_rainbow.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_26.attribute_domain = "POINT"

            # Socket Per Chain
            per_chain_socket_1 = color_rainbow.interface.new_socket(
                name="Per Chain", in_out="INPUT", socket_type="NodeSocketBool"
            )
            per_chain_socket_1.attribute_domain = "POINT"

            # Socket Offset
            offset_socket_16 = color_rainbow.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            offset_socket_16.subtype = "FACTOR"
            offset_socket_16.default_value = 0.0
            offset_socket_16.min_value = 0.0
            offset_socket_16.max_value = 1.0
            offset_socket_16.attribute_domain = "POINT"
            offset_socket_16.description = "Offset rainbow along chain"

            # Panel Color
            color_panel_4 = color_rainbow.interface.new_panel("Color")
            # Socket Color Saturation
            color_saturation_socket_1 = color_rainbow.interface.new_socket(
                name="Color Saturation",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=color_panel_4,
            )
            color_saturation_socket_1.subtype = "FACTOR"
            color_saturation_socket_1.default_value = 0.800000011920929
            color_saturation_socket_1.min_value = 0.0
            color_saturation_socket_1.max_value = 1.0
            color_saturation_socket_1.attribute_domain = "POINT"

            # Socket Color Value
            color_value_socket = color_rainbow.interface.new_socket(
                name="Color Value",
                in_out="INPUT",
                socket_type="NodeSocketFloat",
                parent=color_panel_4,
            )
            color_value_socket.subtype = "FACTOR"
            color_value_socket.default_value = 0.800000011920929
            color_value_socket.min_value = 0.0
            color_value_socket.max_value = 1.0
            color_value_socket.attribute_domain = "POINT"

            # initialize color_rainbow nodes
            # node Group Output
            group_output_202 = color_rainbow.nodes.new("NodeGroupOutput")
            group_output_202.name = "Group Output"
            group_output_202.is_active_output = True

            # node Group Input
            group_input_199 = color_rainbow.nodes.new("NodeGroupInput")
            group_input_199.name = "Group Input"

            # node Combine Color
            combine_color_1 = color_rainbow.nodes.new("FunctionNodeCombineColor")
            combine_color_1.name = "Combine Color"
            combine_color_1.mode = "HSV"
            # Alpha
            combine_color_1.inputs[3].default_value = 1.0

            # node Group.001
            group_001_39 = color_rainbow.nodes.new("GeometryNodeGroup")
            group_001_39.name = "Group.001"
            group_001_39.node_tree = chain_info
            group_001_39.outputs[1].hide = True
            group_001_39.outputs[2].hide = True
            group_001_39.outputs[3].hide = True
            group_001_39.outputs[4].hide = True
            group_001_39.outputs[5].hide = True
            group_001_39.outputs[6].hide = True

            # node Math
            math_54 = color_rainbow.nodes.new("ShaderNodeMath")
            math_54.name = "Math"
            math_54.operation = "ADD"
            math_54.use_clamp = False

            # node Math.001
            math_001_38 = color_rainbow.nodes.new("ShaderNodeMath")
            math_001_38.name = "Math.001"
            math_001_38.operation = "WRAP"
            math_001_38.use_clamp = False
            # Value_001
            math_001_38.inputs[1].default_value = 0.0
            # Value_002
            math_001_38.inputs[2].default_value = 1.0

            # Set locations
            group_output_202.location = (420.0, 220.0)
            group_input_199.location = (-440.0, 120.0)
            combine_color_1.location = (240.0, 220.0)
            group_001_39.location = (-260.0, 220.0)
            math_54.location = (-80.0, 220.0)
            math_001_38.location = (80.0, 220.0)

            # Set dimensions
            group_output_202.width, group_output_202.height = 140.0, 100.0
            group_input_199.width, group_input_199.height = 140.0, 100.0
            combine_color_1.width, combine_color_1.height = 140.0, 100.0
            group_001_39.width, group_001_39.height = 140.0, 100.0
            math_54.width, math_54.height = 140.0, 100.0
            math_001_38.width, math_001_38.height = 140.0, 100.0

            # initialize color_rainbow links
            # combine_color_1.Color -> group_output_202.Color
            color_rainbow.links.new(
                combine_color_1.outputs[0], group_output_202.inputs[0]
            )
            # group_input_199.Color Saturation -> combine_color_1.Green
            color_rainbow.links.new(
                group_input_199.outputs[2], combine_color_1.inputs[1]
            )
            # group_input_199.Color Value -> combine_color_1.Blue
            color_rainbow.links.new(
                group_input_199.outputs[3], combine_color_1.inputs[2]
            )
            # group_001_39.Factor -> math_54.Value
            color_rainbow.links.new(group_001_39.outputs[0], math_54.inputs[0])
            # math_54.Value -> math_001_38.Value
            color_rainbow.links.new(math_54.outputs[0], math_001_38.inputs[0])
            # math_001_38.Value -> combine_color_1.Red
            color_rainbow.links.new(math_001_38.outputs[0], combine_color_1.inputs[0])
            # group_input_199.Offset -> math_54.Value
            color_rainbow.links.new(group_input_199.outputs[1], math_54.inputs[1])
            # group_input_199.Per Chain -> group_001_39.Per Chain
            color_rainbow.links.new(group_input_199.outputs[0], group_001_39.inputs[0])
            return color_rainbow

        color_rainbow = color_rainbow_node_group()

        # initialize between_vector node group
        def between_vector_node_group():
            between_vector = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Between Vector"
            )

            between_vector.color_tag = "CONVERTER"
            between_vector.description = ""

            # between_vector interface
            # Socket Boolean
            boolean_socket_20 = between_vector.interface.new_socket(
                name="Boolean", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            boolean_socket_20.attribute_domain = "POINT"

            # Socket Value
            value_socket_27 = between_vector.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketVector"
            )
            value_socket_27.subtype = "NONE"
            value_socket_27.default_value = (0.0, 0.0, 0.0)
            value_socket_27.min_value = -3.4028234663852886e38
            value_socket_27.max_value = 3.4028234663852886e38
            value_socket_27.attribute_domain = "POINT"

            # Socket Lower
            lower_socket_2 = between_vector.interface.new_socket(
                name="Lower", in_out="INPUT", socket_type="NodeSocketVector"
            )
            lower_socket_2.subtype = "NONE"
            lower_socket_2.default_value = (0.0, 0.0, 0.0)
            lower_socket_2.min_value = -3.4028234663852886e38
            lower_socket_2.max_value = 3.4028234663852886e38
            lower_socket_2.attribute_domain = "POINT"

            # Socket Upper
            upper_socket_2 = between_vector.interface.new_socket(
                name="Upper", in_out="INPUT", socket_type="NodeSocketVector"
            )
            upper_socket_2.subtype = "NONE"
            upper_socket_2.default_value = (0.0, 0.0, 0.0)
            upper_socket_2.min_value = -3.4028234663852886e38
            upper_socket_2.max_value = 3.4028234663852886e38
            upper_socket_2.attribute_domain = "POINT"

            # initialize between_vector nodes
            # node Group Output
            group_output_203 = between_vector.nodes.new("NodeGroupOutput")
            group_output_203.name = "Group Output"
            group_output_203.is_active_output = True

            # node Group Input
            group_input_200 = between_vector.nodes.new("NodeGroupInput")
            group_input_200.name = "Group Input"

            # node Compare
            compare_58 = between_vector.nodes.new("FunctionNodeCompare")
            compare_58.name = "Compare"
            compare_58.data_type = "VECTOR"
            compare_58.mode = "ELEMENT"
            compare_58.operation = "LESS_EQUAL"

            # node Compare.001
            compare_001_35 = between_vector.nodes.new("FunctionNodeCompare")
            compare_001_35.name = "Compare.001"
            compare_001_35.data_type = "VECTOR"
            compare_001_35.mode = "ELEMENT"
            compare_001_35.operation = "GREATER_EQUAL"

            # node Boolean Math
            boolean_math_47 = between_vector.nodes.new("FunctionNodeBooleanMath")
            boolean_math_47.name = "Boolean Math"
            boolean_math_47.operation = "AND"

            # Set locations
            group_output_203.location = (260.0, 0.0)
            group_input_200.location = (-280.0, 0.0)
            compare_58.location = (-80.0, -20.0)
            compare_001_35.location = (-80.0, 180.0)
            boolean_math_47.location = (80.0, 180.0)

            # Set dimensions
            group_output_203.width, group_output_203.height = 140.0, 100.0
            group_input_200.width, group_input_200.height = 140.0, 100.0
            compare_58.width, compare_58.height = 140.0, 100.0
            compare_001_35.width, compare_001_35.height = 140.0, 100.0
            boolean_math_47.width, boolean_math_47.height = 140.0, 100.0

            # initialize between_vector links
            # compare_58.Result -> boolean_math_47.Boolean
            between_vector.links.new(compare_58.outputs[0], boolean_math_47.inputs[1])
            # compare_001_35.Result -> boolean_math_47.Boolean
            between_vector.links.new(
                compare_001_35.outputs[0], boolean_math_47.inputs[0]
            )
            # group_input_200.Value -> compare_58.A
            between_vector.links.new(group_input_200.outputs[0], compare_58.inputs[2])
            # group_input_200.Value -> compare_001_35.A
            between_vector.links.new(
                group_input_200.outputs[0], compare_001_35.inputs[2]
            )
            # boolean_math_47.Boolean -> group_output_203.Boolean
            between_vector.links.new(
                boolean_math_47.outputs[0], group_output_203.inputs[0]
            )
            # group_input_200.Lower -> compare_001_35.B
            between_vector.links.new(
                group_input_200.outputs[1], compare_001_35.inputs[3]
            )
            # group_input_200.Upper -> compare_58.B
            between_vector.links.new(group_input_200.outputs[2], compare_58.inputs[3])
            # group_input_200.Value -> compare_001_35.A
            between_vector.links.new(
                group_input_200.outputs[0], compare_001_35.inputs[0]
            )
            # group_input_200.Value -> compare_58.A
            between_vector.links.new(group_input_200.outputs[0], compare_58.inputs[0])
            # group_input_200.Lower -> compare_001_35.B
            between_vector.links.new(
                group_input_200.outputs[1], compare_001_35.inputs[1]
            )
            # group_input_200.Upper -> compare_58.B
            between_vector.links.new(group_input_200.outputs[2], compare_58.inputs[1])
            # group_input_200.Value -> compare_001_35.A
            between_vector.links.new(
                group_input_200.outputs[0], compare_001_35.inputs[4]
            )
            # group_input_200.Lower -> compare_001_35.B
            between_vector.links.new(
                group_input_200.outputs[1], compare_001_35.inputs[5]
            )
            # group_input_200.Value -> compare_58.A
            between_vector.links.new(group_input_200.outputs[0], compare_58.inputs[4])
            # group_input_200.Upper -> compare_58.B
            between_vector.links.new(group_input_200.outputs[2], compare_58.inputs[5])
            return between_vector

        between_vector = between_vector_node_group()

        # initialize _topo_count_atoms node group
        def _topo_count_atoms_node_group():
            _topo_count_atoms = bpy.data.node_groups.new(
                type="GeometryNodeTree", name=".Topo Count Atoms"
            )

            _topo_count_atoms.color_tag = "NONE"
            _topo_count_atoms.description = ""

            # _topo_count_atoms interface
            # Socket Total
            total_socket_3 = _topo_count_atoms.interface.new_socket(
                name="Total", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            total_socket_3.subtype = "NONE"
            total_socket_3.default_value = 0
            total_socket_3.min_value = -2147483648
            total_socket_3.max_value = 2147483647
            total_socket_3.attribute_domain = "POINT"
            total_socket_3.description = "Total number of residues"

            # Socket Counted Index
            counted_index_socket_1 = _topo_count_atoms.interface.new_socket(
                name="Counted Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            counted_index_socket_1.subtype = "NONE"
            counted_index_socket_1.default_value = 0
            counted_index_socket_1.min_value = -2147483648
            counted_index_socket_1.max_value = 2147483647
            counted_index_socket_1.attribute_domain = "POINT"

            # Socket First atom_name
            first_atom_name_socket = _topo_count_atoms.interface.new_socket(
                name="First atom_name", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_atom_name_socket.subtype = "NONE"
            first_atom_name_socket.default_value = 0
            first_atom_name_socket.min_value = -2147483648
            first_atom_name_socket.max_value = 2147483647
            first_atom_name_socket.attribute_domain = "POINT"
            first_atom_name_socket.description = "Res ID value for the first residue"

            # Socket Last atom_name
            last_atom_name_socket = _topo_count_atoms.interface.new_socket(
                name="Last atom_name", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_atom_name_socket.subtype = "NONE"
            last_atom_name_socket.default_value = 0
            last_atom_name_socket.min_value = -2147483648
            last_atom_name_socket.max_value = 2147483647
            last_atom_name_socket.attribute_domain = "POINT"
            last_atom_name_socket.description = "Res ID value for the last residue"

            # Socket Index First
            index_first_socket_2 = _topo_count_atoms.interface.new_socket(
                name="Index First", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_first_socket_2.subtype = "NONE"
            index_first_socket_2.default_value = 0
            index_first_socket_2.min_value = -2147483648
            index_first_socket_2.max_value = 2147483647
            index_first_socket_2.attribute_domain = "POINT"

            # Socket Index Last
            index_last_socket_2 = _topo_count_atoms.interface.new_socket(
                name="Index Last", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            index_last_socket_2.subtype = "NONE"
            index_last_socket_2.default_value = 0
            index_last_socket_2.min_value = -2147483648
            index_last_socket_2.max_value = 2147483647
            index_last_socket_2.attribute_domain = "POINT"

            # initialize _topo_count_atoms nodes
            # node Group Output
            group_output_204 = _topo_count_atoms.nodes.new("NodeGroupOutput")
            group_output_204.name = "Group Output"
            group_output_204.is_active_output = True

            # node Group Input
            group_input_201 = _topo_count_atoms.nodes.new("NodeGroupInput")
            group_input_201.name = "Group Input"

            # node Named Attribute
            named_attribute_52 = _topo_count_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_52.name = "Named Attribute"
            named_attribute_52.data_type = "INT"
            # Name
            named_attribute_52.inputs[0].default_value = "res_id"

            # node Group
            group_60 = _topo_count_atoms.nodes.new("GeometryNodeGroup")
            group_60.name = "Group"
            group_60.node_tree = offset_integer
            # Socket_1
            group_60.inputs[0].default_value = 0
            # Socket_2
            group_60.inputs[2].default_value = -1

            # node Compare.001
            compare_001_36 = _topo_count_atoms.nodes.new("FunctionNodeCompare")
            compare_001_36.name = "Compare.001"
            compare_001_36.data_type = "INT"
            compare_001_36.mode = "ELEMENT"
            compare_001_36.operation = "NOT_EQUAL"

            # node Group.001
            group_001_40 = _topo_count_atoms.nodes.new("GeometryNodeGroup")
            group_001_40.name = "Group.001"
            group_001_40.node_tree = group_info

            # node Evaluate at Index
            evaluate_at_index_20 = _topo_count_atoms.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_20.name = "Evaluate at Index"
            evaluate_at_index_20.data_type = "INT"
            evaluate_at_index_20.domain = "POINT"

            # node Evaluate at Index.001
            evaluate_at_index_001_14 = _topo_count_atoms.nodes.new(
                "GeometryNodeFieldAtIndex"
            )
            evaluate_at_index_001_14.name = "Evaluate at Index.001"
            evaluate_at_index_001_14.data_type = "INT"
            evaluate_at_index_001_14.domain = "POINT"

            # node Named Attribute.002
            named_attribute_002_24 = _topo_count_atoms.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_002_24.name = "Named Attribute.002"
            named_attribute_002_24.data_type = "INT"
            # Name
            named_attribute_002_24.inputs[0].default_value = "atom_name"

            # node Accumulate Field.001
            accumulate_field_001_8 = _topo_count_atoms.nodes.new(
                "GeometryNodeAccumulateField"
            )
            accumulate_field_001_8.name = "Accumulate Field.001"
            accumulate_field_001_8.data_type = "INT"
            accumulate_field_001_8.domain = "POINT"
            # Group Index
            accumulate_field_001_8.inputs[1].default_value = 0

            # Set locations
            group_output_204.location = (860.0, 340.0)
            group_input_201.location = (-488.64056396484375, -107.26788330078125)
            named_attribute_52.location = (-620.0, 120.0)
            group_60.location = (-440.0, 60.0)
            compare_001_36.location = (-260.0, 180.0)
            group_001_40.location = (220.0, 240.0)
            evaluate_at_index_20.location = (540.0, 160.0)
            evaluate_at_index_001_14.location = (540.0, 0.0)
            named_attribute_002_24.location = (220.0, 40.0)
            accumulate_field_001_8.location = (20.0, 240.0)

            # Set dimensions
            group_output_204.width, group_output_204.height = 140.0, 100.0
            group_input_201.width, group_input_201.height = 140.0, 100.0
            named_attribute_52.width, named_attribute_52.height = 140.0, 100.0
            group_60.width, group_60.height = 140.0, 100.0
            compare_001_36.width, compare_001_36.height = 140.0, 100.0
            group_001_40.width, group_001_40.height = 155.5599365234375, 100.0
            evaluate_at_index_20.width, evaluate_at_index_20.height = 140.0, 100.0
            evaluate_at_index_001_14.width, evaluate_at_index_001_14.height = (
                140.0,
                100.0,
            )
            named_attribute_002_24.width, named_attribute_002_24.height = 140.0, 100.0
            accumulate_field_001_8.width, accumulate_field_001_8.height = (
                156.1656494140625,
                100.0,
            )

            # initialize _topo_count_atoms links
            # group_60.Value -> compare_001_36.B
            _topo_count_atoms.links.new(group_60.outputs[0], compare_001_36.inputs[3])
            # named_attribute_52.Attribute -> group_60.Value
            _topo_count_atoms.links.new(
                named_attribute_52.outputs[0], group_60.inputs[1]
            )
            # named_attribute_52.Attribute -> compare_001_36.A
            _topo_count_atoms.links.new(
                named_attribute_52.outputs[0], compare_001_36.inputs[2]
            )
            # accumulate_field_001_8.Leading -> group_001_40.Group ID
            _topo_count_atoms.links.new(
                accumulate_field_001_8.outputs[0], group_001_40.inputs[0]
            )
            # group_001_40.First Index -> evaluate_at_index_20.Index
            _topo_count_atoms.links.new(
                group_001_40.outputs[0], evaluate_at_index_20.inputs[0]
            )
            # group_001_40.Last Index -> evaluate_at_index_001_14.Index
            _topo_count_atoms.links.new(
                group_001_40.outputs[1], evaluate_at_index_001_14.inputs[0]
            )
            # evaluate_at_index_20.Value -> group_output_204.First atom_name
            _topo_count_atoms.links.new(
                evaluate_at_index_20.outputs[0], group_output_204.inputs[2]
            )
            # evaluate_at_index_001_14.Value -> group_output_204.Last atom_name
            _topo_count_atoms.links.new(
                evaluate_at_index_001_14.outputs[0], group_output_204.inputs[3]
            )
            # named_attribute_002_24.Attribute -> evaluate_at_index_20.Value
            _topo_count_atoms.links.new(
                named_attribute_002_24.outputs[0], evaluate_at_index_20.inputs[1]
            )
            # named_attribute_002_24.Attribute -> evaluate_at_index_001_14.Value
            _topo_count_atoms.links.new(
                named_attribute_002_24.outputs[0], evaluate_at_index_001_14.inputs[1]
            )
            # group_001_40.First Index -> group_output_204.Index First
            _topo_count_atoms.links.new(
                group_001_40.outputs[0], group_output_204.inputs[4]
            )
            # group_001_40.Last Index -> group_output_204.Index Last
            _topo_count_atoms.links.new(
                group_001_40.outputs[1], group_output_204.inputs[5]
            )
            # compare_001_36.Result -> accumulate_field_001_8.Value
            _topo_count_atoms.links.new(
                compare_001_36.outputs[0], accumulate_field_001_8.inputs[0]
            )
            # group_001_40.Size -> group_output_204.Total
            _topo_count_atoms.links.new(
                group_001_40.outputs[3], group_output_204.inputs[0]
            )
            # group_001_40.Index in Group -> group_output_204.Counted Index
            _topo_count_atoms.links.new(
                group_001_40.outputs[2], group_output_204.inputs[1]
            )
            return _topo_count_atoms

        _topo_count_atoms = _topo_count_atoms_node_group()

        # initialize res_info node group
        def res_info_node_group():
            res_info = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Res Info"
            )

            res_info.color_tag = "INPUT"
            res_info.description = ""

            # res_info interface
            # Socket Factor
            factor_socket_6 = res_info.interface.new_socket(
                name="Factor", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            factor_socket_6.subtype = "FACTOR"
            factor_socket_6.default_value = 0.0
            factor_socket_6.min_value = 0.0
            factor_socket_6.max_value = 1.0
            factor_socket_6.attribute_domain = "POINT"
            factor_socket_6.description = "An atom's relative position in a residue, with the first atom being 0 and the last atom being 1"

            # Socket Length
            length_socket_3 = res_info.interface.new_socket(
                name="Length", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            length_socket_3.subtype = "NONE"
            length_socket_3.default_value = 0
            length_socket_3.min_value = -2147483648
            length_socket_3.max_value = 2147483647
            length_socket_3.attribute_domain = "POINT"
            length_socket_3.description = "Number of  atoms in a residue"

            # Socket Counted Index
            counted_index_socket_2 = res_info.interface.new_socket(
                name="Counted Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            counted_index_socket_2.subtype = "NONE"
            counted_index_socket_2.default_value = 0
            counted_index_socket_2.min_value = -2147483648
            counted_index_socket_2.max_value = 2147483647
            counted_index_socket_2.attribute_domain = "POINT"
            counted_index_socket_2.description = (
                "Index of an atom in a residue when counting from 0"
            )

            # Socket First atom_name
            first_atom_name_socket_1 = res_info.interface.new_socket(
                name="First atom_name", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_atom_name_socket_1.subtype = "NONE"
            first_atom_name_socket_1.default_value = 0
            first_atom_name_socket_1.min_value = -2147483648
            first_atom_name_socket_1.max_value = 2147483647
            first_atom_name_socket_1.attribute_domain = "POINT"
            first_atom_name_socket_1.description = (
                "the atom_name for the first atom in a residue"
            )

            # Socket Last atom_name
            last_atom_name_socket_1 = res_info.interface.new_socket(
                name="Last atom_name", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_atom_name_socket_1.subtype = "NONE"
            last_atom_name_socket_1.default_value = 0
            last_atom_name_socket_1.min_value = -2147483648
            last_atom_name_socket_1.max_value = 2147483647
            last_atom_name_socket_1.attribute_domain = "POINT"
            last_atom_name_socket_1.description = (
                "The atom_name for the last atom in a residue"
            )

            # Socket First Index
            first_index_socket_1 = res_info.interface.new_socket(
                name="First Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            first_index_socket_1.subtype = "NONE"
            first_index_socket_1.default_value = 0
            first_index_socket_1.min_value = -2147483648
            first_index_socket_1.max_value = 2147483647
            first_index_socket_1.attribute_domain = "POINT"
            first_index_socket_1.description = (
                "Index (in the whole structure) for the first atom in a  residue"
            )

            # Socket Last Index
            last_index_socket_1 = res_info.interface.new_socket(
                name="Last Index", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            last_index_socket_1.subtype = "NONE"
            last_index_socket_1.default_value = 0
            last_index_socket_1.min_value = -2147483648
            last_index_socket_1.max_value = 2147483647
            last_index_socket_1.attribute_domain = "POINT"
            last_index_socket_1.description = (
                "Index (in the whole structure) for the last atom in a  residue"
            )

            # initialize res_info nodes
            # node Group Output
            group_output_205 = res_info.nodes.new("NodeGroupOutput")
            group_output_205.name = "Group Output"
            group_output_205.is_active_output = True

            # node Group Input
            group_input_202 = res_info.nodes.new("NodeGroupInput")
            group_input_202.name = "Group Input"

            # node Group.002
            group_002_25 = res_info.nodes.new("GeometryNodeGroup")
            group_002_25.name = "Group.002"
            group_002_25.node_tree = _topo_count_atoms

            # node Map Range.001
            map_range_001_7 = res_info.nodes.new("ShaderNodeMapRange")
            map_range_001_7.name = "Map Range.001"
            map_range_001_7.clamp = True
            map_range_001_7.data_type = "FLOAT"
            map_range_001_7.interpolation_type = "LINEAR"
            # From Min
            map_range_001_7.inputs[1].default_value = 0.0
            # To Min
            map_range_001_7.inputs[3].default_value = 0.0
            # To Max
            map_range_001_7.inputs[4].default_value = 1.0

            # Set locations
            group_output_205.location = (374.8729553222656, -40.41082000732422)
            group_input_202.location = (-330.0, 0.0)
            group_002_25.location = (-120.0, -60.0)
            map_range_001_7.location = (200.0, 180.0)

            # Set dimensions
            group_output_205.width, group_output_205.height = 140.0, 100.0
            group_input_202.width, group_input_202.height = 140.0, 100.0
            group_002_25.width, group_002_25.height = 240.44110107421875, 100.0
            map_range_001_7.width, map_range_001_7.height = 140.0, 100.0

            # initialize res_info links
            # map_range_001_7.Result -> group_output_205.Factor
            res_info.links.new(map_range_001_7.outputs[0], group_output_205.inputs[0])
            # group_002_25.Total -> map_range_001_7.From Max
            res_info.links.new(group_002_25.outputs[0], map_range_001_7.inputs[2])
            # group_002_25.Counted Index -> map_range_001_7.Value
            res_info.links.new(group_002_25.outputs[1], map_range_001_7.inputs[0])
            # group_002_25.First atom_name -> group_output_205.First atom_name
            res_info.links.new(group_002_25.outputs[2], group_output_205.inputs[3])
            # group_002_25.Last atom_name -> group_output_205.Last atom_name
            res_info.links.new(group_002_25.outputs[3], group_output_205.inputs[4])
            # group_002_25.Total -> group_output_205.Length
            res_info.links.new(group_002_25.outputs[0], group_output_205.inputs[1])
            # group_002_25.Counted Index -> group_output_205.Counted Index
            res_info.links.new(group_002_25.outputs[1], group_output_205.inputs[2])
            # group_002_25.Index First -> group_output_205.First Index
            res_info.links.new(group_002_25.outputs[4], group_output_205.inputs[5])
            # group_002_25.Index Last -> group_output_205.Last Index
            res_info.links.new(group_002_25.outputs[5], group_output_205.inputs[6])
            return res_info

        res_info = res_info_node_group()

        # initialize centroid node group
        def centroid_node_group():
            centroid = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Centroid"
            )

            centroid.color_tag = "CONVERTER"
            centroid.description = ""

            # centroid interface
            # Socket Centroid
            centroid_socket = centroid.interface.new_socket(
                name="Centroid", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            centroid_socket.subtype = "NONE"
            centroid_socket.default_value = (0.0, 0.0, 0.0)
            centroid_socket.min_value = -3.4028234663852886e38
            centroid_socket.max_value = 3.4028234663852886e38
            centroid_socket.attribute_domain = "POINT"
            centroid_socket.description = (
                "Centroid point for the the points in the selectoin"
            )

            # Socket Position
            position_socket_10 = centroid.interface.new_socket(
                name="Position", in_out="INPUT", socket_type="NodeSocketVector"
            )
            position_socket_10.subtype = "NONE"
            position_socket_10.default_value = (0.0, 0.0, 0.0)
            position_socket_10.min_value = -3.4028234663852886e38
            position_socket_10.max_value = 3.4028234663852886e38
            position_socket_10.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_70 = centroid.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_70.attribute_domain = "POINT"
            selection_socket_70.hide_value = True
            selection_socket_70.description = (
                "Selection to use for calculating centroid value"
            )

            # Socket Group ID
            group_id_socket_6 = centroid.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_6.subtype = "NONE"
            group_id_socket_6.default_value = 0
            group_id_socket_6.min_value = -2147483648
            group_id_socket_6.max_value = 2147483647
            group_id_socket_6.attribute_domain = "POINT"
            group_id_socket_6.description = "ID to calculate on a per-group basis"

            # initialize centroid nodes
            # node Group Output
            group_output_206 = centroid.nodes.new("NodeGroupOutput")
            group_output_206.name = "Group Output"
            group_output_206.is_active_output = True

            # node Group Input
            group_input_203 = centroid.nodes.new("NodeGroupInput")
            group_input_203.name = "Group Input"

            # node Accumulate Field
            accumulate_field_11 = centroid.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_11.name = "Accumulate Field"
            accumulate_field_11.data_type = "FLOAT_VECTOR"
            accumulate_field_11.domain = "POINT"

            # node Accumulate Field.001
            accumulate_field_001_9 = centroid.nodes.new("GeometryNodeAccumulateField")
            accumulate_field_001_9.name = "Accumulate Field.001"
            accumulate_field_001_9.data_type = "INT"
            accumulate_field_001_9.domain = "POINT"

            # node Vector Math
            vector_math_44 = centroid.nodes.new("ShaderNodeVectorMath")
            vector_math_44.name = "Vector Math"
            vector_math_44.operation = "DIVIDE"

            # node Switch
            switch_52 = centroid.nodes.new("GeometryNodeSwitch")
            switch_52.name = "Switch"
            switch_52.input_type = "VECTOR"
            # False
            switch_52.inputs[1].default_value = (0.0, 0.0, 0.0)

            # Set locations
            group_output_206.location = (260.0, 60.0)
            group_input_203.location = (-500.0, -40.0)
            accumulate_field_11.location = (-80.0, 60.0)
            accumulate_field_001_9.location = (-80.0, -160.0)
            vector_math_44.location = (80.0, 60.0)
            switch_52.location = (-260.0, 60.0)

            # Set dimensions
            group_output_206.width, group_output_206.height = 140.0, 100.0
            group_input_203.width, group_input_203.height = 140.0, 100.0
            accumulate_field_11.width, accumulate_field_11.height = 140.0, 100.0
            accumulate_field_001_9.width, accumulate_field_001_9.height = 140.0, 100.0
            vector_math_44.width, vector_math_44.height = 140.0, 100.0
            switch_52.width, switch_52.height = 140.0, 100.0

            # initialize centroid links
            # group_input_203.Selection -> accumulate_field_001_9.Value
            centroid.links.new(
                group_input_203.outputs[1], accumulate_field_001_9.inputs[0]
            )
            # accumulate_field_11.Total -> vector_math_44.Vector
            centroid.links.new(accumulate_field_11.outputs[2], vector_math_44.inputs[0])
            # accumulate_field_001_9.Total -> vector_math_44.Vector
            centroid.links.new(
                accumulate_field_001_9.outputs[2], vector_math_44.inputs[1]
            )
            # group_input_203.Selection -> switch_52.Switch
            centroid.links.new(group_input_203.outputs[1], switch_52.inputs[0])
            # vector_math_44.Vector -> group_output_206.Centroid
            centroid.links.new(vector_math_44.outputs[0], group_output_206.inputs[0])
            # switch_52.Output -> accumulate_field_11.Value
            centroid.links.new(switch_52.outputs[0], accumulate_field_11.inputs[0])
            # group_input_203.Group ID -> accumulate_field_11.Group ID
            centroid.links.new(
                group_input_203.outputs[2], accumulate_field_11.inputs[1]
            )
            # group_input_203.Group ID -> accumulate_field_001_9.Group ID
            centroid.links.new(
                group_input_203.outputs[2], accumulate_field_001_9.inputs[1]
            )
            # group_input_203.Position -> switch_52.True
            centroid.links.new(group_input_203.outputs[0], switch_52.inputs[2])
            return centroid

        centroid = centroid_node_group()

        # initialize centre_on_selection node group
        def centre_on_selection_node_group():
            centre_on_selection = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Centre on Selection"
            )

            centre_on_selection.color_tag = "GEOMETRY"
            centre_on_selection.description = ""

            # centre_on_selection interface
            # Socket Atoms
            atoms_socket_45 = centre_on_selection.interface.new_socket(
                name="Atoms", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_45.attribute_domain = "POINT"
            atoms_socket_45.description = "Atoms that have been moved to object origin based on their group's calculated centroid"

            # Socket Offset
            offset_socket_17 = centre_on_selection.interface.new_socket(
                name="Offset", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            offset_socket_17.subtype = "NONE"
            offset_socket_17.default_value = (0.0, 0.0, 0.0)
            offset_socket_17.min_value = -3.4028234663852886e38
            offset_socket_17.max_value = 3.4028234663852886e38
            offset_socket_17.attribute_domain = "POINT"
            offset_socket_17.description = (
                "The calculated vector offset applied to centre the points"
            )

            # Socket Atoms
            atoms_socket_46 = centre_on_selection.interface.new_socket(
                name="Atoms", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            atoms_socket_46.attribute_domain = "POINT"

            # Socket Selection
            selection_socket_71 = centre_on_selection.interface.new_socket(
                name="Selection", in_out="INPUT", socket_type="NodeSocketBool"
            )
            selection_socket_71.attribute_domain = "POINT"
            selection_socket_71.hide_value = True
            selection_socket_71.description = "Selection within the groups to calculate the centroid for, which then affects all other points in the group"

            # Socket Group ID
            group_id_socket_7 = centre_on_selection.interface.new_socket(
                name="Group ID", in_out="INPUT", socket_type="NodeSocketInt"
            )
            group_id_socket_7.subtype = "NONE"
            group_id_socket_7.default_value = 0
            group_id_socket_7.min_value = -2147483648
            group_id_socket_7.max_value = 2147483647
            group_id_socket_7.attribute_domain = "POINT"
            group_id_socket_7.hide_value = True
            group_id_socket_7.description = "An optional `Group ID` value to calculate the centroid and offset points on a per-group basis"

            # initialize centre_on_selection nodes
            # node Group Output
            group_output_207 = centre_on_selection.nodes.new("NodeGroupOutput")
            group_output_207.name = "Group Output"
            group_output_207.is_active_output = True

            # node Group Input
            group_input_204 = centre_on_selection.nodes.new("NodeGroupInput")
            group_input_204.name = "Group Input"

            # node Set Position
            set_position_16 = centre_on_selection.nodes.new("GeometryNodeSetPosition")
            set_position_16.name = "Set Position"
            # Selection
            set_position_16.inputs[1].default_value = True
            # Position
            set_position_16.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Vector Math.001
            vector_math_001_25 = centre_on_selection.nodes.new("ShaderNodeVectorMath")
            vector_math_001_25.name = "Vector Math.001"
            vector_math_001_25.operation = "SCALE"
            # Scale
            vector_math_001_25.inputs[3].default_value = -1.0

            # node Group
            group_61 = centre_on_selection.nodes.new("GeometryNodeGroup")
            group_61.name = "Group"
            group_61.node_tree = centroid
            # Socket_4
            group_61.inputs[0].default_value = (0.0, 0.0, 0.0)

            # Set locations
            group_output_207.location = (80.0, 120.0)
            group_input_204.location = (-520.0, 100.0)
            set_position_16.location = (-100.0, 120.0)
            vector_math_001_25.location = (-100.0, -40.0)
            group_61.location = (-283.7733154296875, -40.0)

            # Set dimensions
            group_output_207.width, group_output_207.height = 140.0, 100.0
            group_input_204.width, group_input_204.height = 140.0, 100.0
            set_position_16.width, set_position_16.height = 140.0, 100.0
            vector_math_001_25.width, vector_math_001_25.height = 140.0, 100.0
            group_61.width, group_61.height = 163.9580078125, 100.0

            # initialize centre_on_selection links
            # group_input_204.Atoms -> set_position_16.Geometry
            centre_on_selection.links.new(
                group_input_204.outputs[0], set_position_16.inputs[0]
            )
            # set_position_16.Geometry -> group_output_207.Atoms
            centre_on_selection.links.new(
                set_position_16.outputs[0], group_output_207.inputs[0]
            )
            # group_61.Centroid -> vector_math_001_25.Vector
            centre_on_selection.links.new(
                group_61.outputs[0], vector_math_001_25.inputs[0]
            )
            # group_input_204.Selection -> group_61.Selection
            centre_on_selection.links.new(
                group_input_204.outputs[1], group_61.inputs[1]
            )
            # vector_math_001_25.Vector -> set_position_16.Offset
            centre_on_selection.links.new(
                vector_math_001_25.outputs[0], set_position_16.inputs[3]
            )
            # vector_math_001_25.Vector -> group_output_207.Offset
            centre_on_selection.links.new(
                vector_math_001_25.outputs[0], group_output_207.inputs[1]
            )
            # group_input_204.Group ID -> group_61.Group ID
            centre_on_selection.links.new(
                group_input_204.outputs[2], group_61.inputs[2]
            )
            return centre_on_selection

        centre_on_selection = centre_on_selection_node_group()

        # initialize fallback_integer node group
        def fallback_integer_node_group():
            fallback_integer = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Fallback Integer"
            )

            fallback_integer.color_tag = "INPUT"
            fallback_integer.description = ""

            # fallback_integer interface
            # Socket Integer
            integer_socket_3 = fallback_integer.interface.new_socket(
                name="Integer", in_out="OUTPUT", socket_type="NodeSocketInt"
            )
            integer_socket_3.subtype = "NONE"
            integer_socket_3.default_value = 0
            integer_socket_3.min_value = -2147483648
            integer_socket_3.max_value = 2147483647
            integer_socket_3.attribute_domain = "POINT"

            # Socket Name
            name_socket_5 = fallback_integer.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_5.attribute_domain = "POINT"

            # Socket Fallback
            fallback_socket_2 = fallback_integer.interface.new_socket(
                name="Fallback", in_out="INPUT", socket_type="NodeSocketInt"
            )
            fallback_socket_2.subtype = "NONE"
            fallback_socket_2.default_value = 0
            fallback_socket_2.min_value = -2147483648
            fallback_socket_2.max_value = 2147483647
            fallback_socket_2.attribute_domain = "POINT"
            fallback_socket_2.description = "Fallback value if Field is 0"

            # initialize fallback_integer nodes
            # node Group Output
            group_output_208 = fallback_integer.nodes.new("NodeGroupOutput")
            group_output_208.name = "Group Output"
            group_output_208.is_active_output = True

            # node Group Input
            group_input_205 = fallback_integer.nodes.new("NodeGroupInput")
            group_input_205.name = "Group Input"

            # node Switch
            switch_53 = fallback_integer.nodes.new("GeometryNodeSwitch")
            switch_53.name = "Switch"
            switch_53.input_type = "INT"

            # node Named Attribute
            named_attribute_53 = fallback_integer.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_53.name = "Named Attribute"
            named_attribute_53.data_type = "INT"

            # Set locations
            group_output_208.location = (288.23382568359375, 0.0)
            group_input_205.location = (-320.0, -40.0)
            switch_53.location = (98.23382568359375, 26.690887451171875)
            named_attribute_53.location = (-120.0, -80.0)

            # Set dimensions
            group_output_208.width, group_output_208.height = 140.0, 100.0
            group_input_205.width, group_input_205.height = 140.0, 100.0
            switch_53.width, switch_53.height = 140.0, 100.0
            named_attribute_53.width, named_attribute_53.height = 140.0, 100.0

            # initialize fallback_integer links
            # switch_53.Output -> group_output_208.Integer
            fallback_integer.links.new(switch_53.outputs[0], group_output_208.inputs[0])
            # group_input_205.Fallback -> switch_53.False
            fallback_integer.links.new(group_input_205.outputs[1], switch_53.inputs[1])
            # group_input_205.Name -> named_attribute_53.Name
            fallback_integer.links.new(
                group_input_205.outputs[0], named_attribute_53.inputs[0]
            )
            # named_attribute_53.Exists -> switch_53.Switch
            fallback_integer.links.new(
                named_attribute_53.outputs[1], switch_53.inputs[0]
            )
            # named_attribute_53.Attribute -> switch_53.True
            fallback_integer.links.new(
                named_attribute_53.outputs[0], switch_53.inputs[2]
            )
            return fallback_integer

        fallback_integer = fallback_integer_node_group()

        # initialize fallback_float node group
        def fallback_float_node_group():
            fallback_float = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Fallback Float"
            )

            fallback_float.color_tag = "INPUT"
            fallback_float.description = ""

            # fallback_float interface
            # Socket Value
            value_socket_28 = fallback_float.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_28.subtype = "NONE"
            value_socket_28.default_value = 0.0
            value_socket_28.min_value = -3.4028234663852886e38
            value_socket_28.max_value = 3.4028234663852886e38
            value_socket_28.attribute_domain = "POINT"

            # Socket Name
            name_socket_6 = fallback_float.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_6.attribute_domain = "POINT"

            # Socket Fallback
            fallback_socket_3 = fallback_float.interface.new_socket(
                name="Fallback", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            fallback_socket_3.subtype = "NONE"
            fallback_socket_3.default_value = 0.0
            fallback_socket_3.min_value = -3.4028234663852886e38
            fallback_socket_3.max_value = 3.4028234663852886e38
            fallback_socket_3.attribute_domain = "POINT"

            # initialize fallback_float nodes
            # node Group Output
            group_output_209 = fallback_float.nodes.new("NodeGroupOutput")
            group_output_209.name = "Group Output"
            group_output_209.is_active_output = True

            # node Group Input
            group_input_206 = fallback_float.nodes.new("NodeGroupInput")
            group_input_206.name = "Group Input"

            # node Named Attribute
            named_attribute_54 = fallback_float.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_54.name = "Named Attribute"
            named_attribute_54.data_type = "FLOAT"

            # node Switch
            switch_54 = fallback_float.nodes.new("GeometryNodeSwitch")
            switch_54.name = "Switch"
            switch_54.input_type = "FLOAT"

            # Set locations
            group_output_209.location = (306.3518981933594, 0.0)
            group_input_206.location = (-316.3518981933594, 0.0)
            named_attribute_54.location = (-136.0193634033203, 58.357723236083984)
            switch_54.location = (116.35189819335938, 12.828765869140625)

            # Set dimensions
            group_output_209.width, group_output_209.height = 140.0, 100.0
            group_input_206.width, group_input_206.height = 140.0, 100.0
            named_attribute_54.width, named_attribute_54.height = (
                168.09637451171875,
                100.0,
            )
            switch_54.width, switch_54.height = 140.0, 100.0

            # initialize fallback_float links
            # named_attribute_54.Exists -> switch_54.Switch
            fallback_float.links.new(named_attribute_54.outputs[1], switch_54.inputs[0])
            # named_attribute_54.Attribute -> switch_54.True
            fallback_float.links.new(named_attribute_54.outputs[0], switch_54.inputs[2])
            # group_input_206.Name -> named_attribute_54.Name
            fallback_float.links.new(
                group_input_206.outputs[0], named_attribute_54.inputs[0]
            )
            # group_input_206.Fallback -> switch_54.False
            fallback_float.links.new(group_input_206.outputs[1], switch_54.inputs[1])
            # switch_54.Output -> group_output_209.Value
            fallback_float.links.new(switch_54.outputs[0], group_output_209.inputs[0])
            return fallback_float

        fallback_float = fallback_float_node_group()

        # initialize dihedral_phi node group
        def dihedral_phi_node_group():
            dihedral_phi = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Dihedral Phi"
            )

            dihedral_phi.color_tag = "INPUT"
            dihedral_phi.description = ""

            # dihedral_phi interface
            # Socket Phi
            phi_socket_1 = dihedral_phi.interface.new_socket(
                name="Phi", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            phi_socket_1.subtype = "ANGLE"
            phi_socket_1.default_value = 0.0
            phi_socket_1.min_value = -3.4028234663852886e38
            phi_socket_1.max_value = 3.4028234663852886e38
            phi_socket_1.attribute_domain = "POINT"

            # Socket BA⟂(BC)
            ba__bc__socket_2 = dihedral_phi.interface.new_socket(
                name="BA⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ba__bc__socket_2.subtype = "NONE"
            ba__bc__socket_2.default_value = (0.0, 0.0, 0.0)
            ba__bc__socket_2.min_value = -3.4028234663852886e38
            ba__bc__socket_2.max_value = 3.4028234663852886e38
            ba__bc__socket_2.attribute_domain = "POINT"

            # Socket CD⟂(BC)
            cd__bc__socket_2 = dihedral_phi.interface.new_socket(
                name="CD⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            cd__bc__socket_2.subtype = "NONE"
            cd__bc__socket_2.default_value = (0.0, 0.0, 0.0)
            cd__bc__socket_2.min_value = -3.4028234663852886e38
            cd__bc__socket_2.max_value = 3.4028234663852886e38
            cd__bc__socket_2.attribute_domain = "POINT"

            # Socket BC
            bc_socket_2 = dihedral_phi.interface.new_socket(
                name="BC", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            bc_socket_2.subtype = "NONE"
            bc_socket_2.default_value = (0.0, 0.0, 0.0)
            bc_socket_2.min_value = -3.4028234663852886e38
            bc_socket_2.max_value = 3.4028234663852886e38
            bc_socket_2.attribute_domain = "POINT"

            # initialize dihedral_phi nodes
            # node Group Output
            group_output_210 = dihedral_phi.nodes.new("NodeGroupOutput")
            group_output_210.name = "Group Output"
            group_output_210.is_active_output = True

            # node Group.009
            group_009_10 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_009_10.name = "Group.009"
            group_009_10.node_tree = dihedral_angle

            # node Group
            group_62 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_62.name = "Group"
            group_62.node_tree = backbone_position
            # Socket_3
            group_62.inputs[0].default_value = 0
            # Socket_2
            group_62.inputs[1].default_value = "backbone_N"
            # Socket_4
            group_62.inputs[2].default_value = 0

            # node Group.001
            group_001_41 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_001_41.name = "Group.001"
            group_001_41.node_tree = backbone_position
            # Socket_3
            group_001_41.inputs[0].default_value = 0
            # Socket_2
            group_001_41.inputs[1].default_value = "backbone_CA"
            # Socket_4
            group_001_41.inputs[2].default_value = 0

            # node Group.002
            group_002_26 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_002_26.name = "Group.002"
            group_002_26.node_tree = backbone_position
            # Socket_3
            group_002_26.inputs[0].default_value = 0
            # Socket_2
            group_002_26.inputs[1].default_value = "backbone_C"
            # Socket_4
            group_002_26.inputs[2].default_value = 0

            # node Group.003
            group_003_17 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_003_17.name = "Group.003"
            group_003_17.node_tree = backbone_position
            # Socket_3
            group_003_17.inputs[0].default_value = 0
            # Socket_2
            group_003_17.inputs[1].default_value = "backbone_C"
            # Socket_4
            group_003_17.inputs[2].default_value = -1

            # node Group.004
            group_004_13 = dihedral_phi.nodes.new("GeometryNodeGroup")
            group_004_13.name = "Group.004"
            group_004_13.node_tree = fallback_float
            # Socket_0
            group_004_13.inputs[0].default_value = "Phi"

            # Set locations
            group_output_210.location = (880.0, 240.0)
            group_009_10.location = (119.99998474121094, 240.0)
            group_62.location = (-139.99998474121094, 40.0)
            group_001_41.location = (-139.99998474121094, 180.0)
            group_002_26.location = (-139.99998474121094, 320.0)
            group_003_17.location = (-139.99998474121094, -100.0)
            group_004_13.location = (480.0000305175781, 320.0)

            # Set dimensions
            group_output_210.width, group_output_210.height = 140.0, 100.0
            group_009_10.width, group_009_10.height = 299.8184509277344, 100.0
            group_62.width, group_62.height = 165.52227783203125, 100.0
            group_001_41.width, group_001_41.height = 165.52227783203125, 100.0
            group_002_26.width, group_002_26.height = 165.52227783203125, 100.0
            group_003_17.width, group_003_17.height = 165.52227783203125, 100.0
            group_004_13.width, group_004_13.height = 140.0, 100.0

            # initialize dihedral_phi links
            # group_009_10.BC -> group_output_210.BC
            dihedral_phi.links.new(group_009_10.outputs[3], group_output_210.inputs[3])
            # group_009_10.CD⟂(BC) -> group_output_210.CD⟂(BC)
            dihedral_phi.links.new(group_009_10.outputs[2], group_output_210.inputs[2])
            # group_62.Position -> group_009_10.C
            dihedral_phi.links.new(group_62.outputs[0], group_009_10.inputs[2])
            # group_001_41.Position -> group_009_10.B
            dihedral_phi.links.new(group_001_41.outputs[0], group_009_10.inputs[1])
            # group_003_17.Position -> group_009_10.D
            dihedral_phi.links.new(group_003_17.outputs[0], group_009_10.inputs[3])
            # group_002_26.Position -> group_009_10.A
            dihedral_phi.links.new(group_002_26.outputs[0], group_009_10.inputs[0])
            # group_009_10.BA⟂(BC) -> group_output_210.BA⟂(BC)
            dihedral_phi.links.new(group_009_10.outputs[1], group_output_210.inputs[1])
            # group_009_10.Angle -> group_004_13.Fallback
            dihedral_phi.links.new(group_009_10.outputs[0], group_004_13.inputs[1])
            # group_004_13.Value -> group_output_210.Phi
            dihedral_phi.links.new(group_004_13.outputs[0], group_output_210.inputs[0])
            return dihedral_phi

        dihedral_phi = dihedral_phi_node_group()

        # initialize dihedral_psi node group
        def dihedral_psi_node_group():
            dihedral_psi = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Dihedral Psi"
            )

            dihedral_psi.color_tag = "INPUT"
            dihedral_psi.description = ""

            # dihedral_psi interface
            # Socket Psi
            psi_socket_1 = dihedral_psi.interface.new_socket(
                name="Psi", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            psi_socket_1.subtype = "ANGLE"
            psi_socket_1.default_value = 0.0
            psi_socket_1.min_value = -3.4028234663852886e38
            psi_socket_1.max_value = 3.4028234663852886e38
            psi_socket_1.attribute_domain = "POINT"

            # Socket BA⟂(BC)
            ba__bc__socket_3 = dihedral_psi.interface.new_socket(
                name="BA⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            ba__bc__socket_3.subtype = "NONE"
            ba__bc__socket_3.default_value = (0.0, 0.0, 0.0)
            ba__bc__socket_3.min_value = -3.4028234663852886e38
            ba__bc__socket_3.max_value = 3.4028234663852886e38
            ba__bc__socket_3.attribute_domain = "POINT"

            # Socket CD⟂(BC)
            cd__bc__socket_3 = dihedral_psi.interface.new_socket(
                name="CD⟂(BC)", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            cd__bc__socket_3.subtype = "NONE"
            cd__bc__socket_3.default_value = (0.0, 0.0, 0.0)
            cd__bc__socket_3.min_value = -3.4028234663852886e38
            cd__bc__socket_3.max_value = 3.4028234663852886e38
            cd__bc__socket_3.attribute_domain = "POINT"

            # Socket BC
            bc_socket_3 = dihedral_psi.interface.new_socket(
                name="BC", in_out="OUTPUT", socket_type="NodeSocketVector"
            )
            bc_socket_3.subtype = "NONE"
            bc_socket_3.default_value = (0.0, 0.0, 0.0)
            bc_socket_3.min_value = -3.4028234663852886e38
            bc_socket_3.max_value = 3.4028234663852886e38
            bc_socket_3.attribute_domain = "POINT"

            # initialize dihedral_psi nodes
            # node Group Output
            group_output_211 = dihedral_psi.nodes.new("NodeGroupOutput")
            group_output_211.name = "Group Output"
            group_output_211.is_active_output = True

            # node Group.009
            group_009_11 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_009_11.name = "Group.009"
            group_009_11.node_tree = dihedral_angle

            # node Group
            group_63 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_63.name = "Group"
            group_63.node_tree = backbone_position
            # Socket_3
            group_63.inputs[0].default_value = 0
            # Socket_2
            group_63.inputs[1].default_value = "backbone_N"
            # Socket_4
            group_63.inputs[2].default_value = 0

            # node Group.001
            group_001_42 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_001_42.name = "Group.001"
            group_001_42.node_tree = backbone_position
            # Socket_3
            group_001_42.inputs[0].default_value = 0
            # Socket_2
            group_001_42.inputs[1].default_value = "backbone_CA"
            # Socket_4
            group_001_42.inputs[2].default_value = 0

            # node Group.002
            group_002_27 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_002_27.name = "Group.002"
            group_002_27.node_tree = backbone_position
            # Socket_3
            group_002_27.inputs[0].default_value = 0
            # Socket_2
            group_002_27.inputs[1].default_value = "backbone_C"
            # Socket_4
            group_002_27.inputs[2].default_value = 0

            # node Group.003
            group_003_18 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_003_18.name = "Group.003"
            group_003_18.node_tree = backbone_position
            # Socket_3
            group_003_18.inputs[0].default_value = 0
            # Socket_2
            group_003_18.inputs[1].default_value = "backbone_N"
            # Socket_4
            group_003_18.inputs[2].default_value = 1

            # node Group.004
            group_004_14 = dihedral_psi.nodes.new("GeometryNodeGroup")
            group_004_14.name = "Group.004"
            group_004_14.node_tree = fallback_float
            # Socket_0
            group_004_14.inputs[0].default_value = "Psi"

            # Set locations
            group_output_211.location = (845.9104614257812, 244.38949584960938)
            group_009_11.location = (300.0, 240.0)
            group_63.location = (60.0, 340.0)
            group_001_42.location = (60.0, 200.0)
            group_002_27.location = (60.0, 60.0)
            group_003_18.location = (60.0, -80.0)
            group_004_14.location = (640.0, 320.0)

            # Set dimensions
            group_output_211.width, group_output_211.height = 140.0, 100.0
            group_009_11.width, group_009_11.height = 299.8184509277344, 100.0
            group_63.width, group_63.height = 140.0, 100.0
            group_001_42.width, group_001_42.height = 140.0, 100.0
            group_002_27.width, group_002_27.height = 140.0, 100.0
            group_003_18.width, group_003_18.height = 140.0, 100.0
            group_004_14.width, group_004_14.height = 140.0, 100.0

            # initialize dihedral_psi links
            # group_009_11.BA⟂(BC) -> group_output_211.BA⟂(BC)
            dihedral_psi.links.new(group_009_11.outputs[1], group_output_211.inputs[1])
            # group_009_11.BC -> group_output_211.BC
            dihedral_psi.links.new(group_009_11.outputs[3], group_output_211.inputs[3])
            # group_009_11.CD⟂(BC) -> group_output_211.CD⟂(BC)
            dihedral_psi.links.new(group_009_11.outputs[2], group_output_211.inputs[2])
            # group_63.Position -> group_009_11.A
            dihedral_psi.links.new(group_63.outputs[0], group_009_11.inputs[0])
            # group_001_42.Position -> group_009_11.B
            dihedral_psi.links.new(group_001_42.outputs[0], group_009_11.inputs[1])
            # group_002_27.Position -> group_009_11.C
            dihedral_psi.links.new(group_002_27.outputs[0], group_009_11.inputs[2])
            # group_003_18.Position -> group_009_11.D
            dihedral_psi.links.new(group_003_18.outputs[0], group_009_11.inputs[3])
            # group_004_14.Value -> group_output_211.Psi
            dihedral_psi.links.new(group_004_14.outputs[0], group_output_211.inputs[0])
            # group_009_11.Angle -> group_004_14.Fallback
            dihedral_psi.links.new(group_009_11.outputs[0], group_004_14.inputs[1])
            return dihedral_psi

        dihedral_psi = dihedral_psi_node_group()

        # initialize offset_float node group
        def offset_float_node_group():
            offset_float = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Offset Float"
            )

            offset_float.color_tag = "CONVERTER"
            offset_float.description = ""

            # offset_float interface
            # Socket Value
            value_socket_29 = offset_float.interface.new_socket(
                name="Value", in_out="OUTPUT", socket_type="NodeSocketFloat"
            )
            value_socket_29.subtype = "NONE"
            value_socket_29.default_value = 0.0
            value_socket_29.min_value = -3.4028234663852886e38
            value_socket_29.max_value = 3.4028234663852886e38
            value_socket_29.attribute_domain = "POINT"

            # Socket Index
            index_socket_14 = offset_float.interface.new_socket(
                name="Index", in_out="INPUT", socket_type="NodeSocketInt"
            )
            index_socket_14.subtype = "NONE"
            index_socket_14.default_value = 0
            index_socket_14.min_value = 0
            index_socket_14.max_value = 2147483647
            index_socket_14.attribute_domain = "POINT"

            # Socket Value
            value_socket_30 = offset_float.interface.new_socket(
                name="Value", in_out="INPUT", socket_type="NodeSocketFloat"
            )
            value_socket_30.subtype = "NONE"
            value_socket_30.default_value = 0.0
            value_socket_30.min_value = -3.4028234663852886e38
            value_socket_30.max_value = 3.4028234663852886e38
            value_socket_30.attribute_domain = "POINT"
            value_socket_30.hide_value = True

            # Socket Offset
            offset_socket_18 = offset_float.interface.new_socket(
                name="Offset", in_out="INPUT", socket_type="NodeSocketInt"
            )
            offset_socket_18.subtype = "NONE"
            offset_socket_18.default_value = 0
            offset_socket_18.min_value = -2147483647
            offset_socket_18.max_value = 2147483647
            offset_socket_18.attribute_domain = "POINT"

            # initialize offset_float nodes
            # node Group Output
            group_output_212 = offset_float.nodes.new("NodeGroupOutput")
            group_output_212.name = "Group Output"
            group_output_212.is_active_output = True

            # node Group Input
            group_input_207 = offset_float.nodes.new("NodeGroupInput")
            group_input_207.name = "Group Input"

            # node Evaluate at Index
            evaluate_at_index_21 = offset_float.nodes.new("GeometryNodeFieldAtIndex")
            evaluate_at_index_21.name = "Evaluate at Index"
            evaluate_at_index_21.data_type = "FLOAT"
            evaluate_at_index_21.domain = "POINT"

            # node Math
            math_55 = offset_float.nodes.new("ShaderNodeMath")
            math_55.name = "Math"
            math_55.operation = "ADD"
            math_55.use_clamp = False

            # Set locations
            group_output_212.location = (190.0, 0.0)
            group_input_207.location = (-344.3331298828125, -46.23834991455078)
            evaluate_at_index_21.location = (0.0, 0.0)
            math_55.location = (-160.0, 0.0)

            # Set dimensions
            group_output_212.width, group_output_212.height = 140.0, 100.0
            group_input_207.width, group_input_207.height = 140.0, 100.0
            evaluate_at_index_21.width, evaluate_at_index_21.height = 140.0, 100.0
            math_55.width, math_55.height = 140.0, 100.0

            # initialize offset_float links
            # evaluate_at_index_21.Value -> group_output_212.Value
            offset_float.links.new(
                evaluate_at_index_21.outputs[0], group_output_212.inputs[0]
            )
            # group_input_207.Value -> evaluate_at_index_21.Value
            offset_float.links.new(
                group_input_207.outputs[1], evaluate_at_index_21.inputs[1]
            )
            # group_input_207.Index -> math_55.Value
            offset_float.links.new(group_input_207.outputs[0], math_55.inputs[1])
            # math_55.Value -> evaluate_at_index_21.Index
            offset_float.links.new(math_55.outputs[0], evaluate_at_index_21.inputs[0])
            # group_input_207.Offset -> math_55.Value
            offset_float.links.new(group_input_207.outputs[2], math_55.inputs[0])
            return offset_float

        offset_float = offset_float_node_group()

        # initialize select_segment_ node group
        def select_segment__node_group():
            select_segment_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Select Segment_"
            )

            select_segment_.color_tag = "INPUT"
            select_segment_.description = ""

            # select_segment_ interface
            # Socket Selection
            selection_socket_72 = select_segment_.interface.new_socket(
                name="Selection", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            selection_socket_72.attribute_domain = "POINT"
            selection_socket_72.description = "The calculated selection"

            # Socket Inverted
            inverted_socket_27 = select_segment_.interface.new_socket(
                name="Inverted", in_out="OUTPUT", socket_type="NodeSocketBool"
            )
            inverted_socket_27.attribute_domain = "POINT"
            inverted_socket_27.description = "The inverse of the calculated selection"

            # Socket Segment A
            segment_a_socket = select_segment_.interface.new_socket(
                name="Segment A", in_out="INPUT", socket_type="NodeSocketBool"
            )
            segment_a_socket.attribute_domain = "POINT"
            segment_a_socket.description = "Select the atoms in Ligand A"

            # Socket Segment B
            segment_b_socket = select_segment_.interface.new_socket(
                name="Segment B", in_out="INPUT", socket_type="NodeSocketBool"
            )
            segment_b_socket.attribute_domain = "POINT"
            segment_b_socket.description = "Select the atoms in Ligand B"

            # Socket Segment ...
            segment_____socket = select_segment_.interface.new_socket(
                name="Segment ...", in_out="INPUT", socket_type="NodeSocketBool"
            )
            segment_____socket.attribute_domain = "POINT"
            segment_____socket.description = "Select the atoms in Ligand ..."

            # initialize select_segment_ nodes
            # node Named Attribute
            named_attribute_55 = select_segment_.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_55.name = "Named Attribute"
            named_attribute_55.data_type = "INT"
            # Name
            named_attribute_55.inputs[0].default_value = "segid"

            # node Group Output
            group_output_213 = select_segment_.nodes.new("NodeGroupOutput")
            group_output_213.name = "Group Output"
            group_output_213.is_active_output = True

            # node Boolean Math.001
            boolean_math_001_36 = select_segment_.nodes.new("FunctionNodeBooleanMath")
            boolean_math_001_36.name = "Boolean Math.001"
            boolean_math_001_36.operation = "NOT"

            # node Group Input
            group_input_208 = select_segment_.nodes.new("NodeGroupInput")
            group_input_208.name = "Group Input"

            # node Index Switch
            index_switch_11 = select_segment_.nodes.new("GeometryNodeIndexSwitch")
            index_switch_11.name = "Index Switch"
            index_switch_11.data_type = "BOOLEAN"
            index_switch_11.index_switch_items.clear()
            index_switch_11.index_switch_items.new()
            index_switch_11.index_switch_items.new()
            index_switch_11.index_switch_items.new()

            # Set locations
            named_attribute_55.location = (-780.0, -100.0)
            group_output_213.location = (-240.0, -160.0)
            boolean_math_001_36.location = (-420.0, -240.0)
            group_input_208.location = (-780.0, -240.0)
            index_switch_11.location = (-580.0, -160.0)

            # Set dimensions
            named_attribute_55.width, named_attribute_55.height = 140.0, 100.0
            group_output_213.width, group_output_213.height = 140.0, 100.0
            boolean_math_001_36.width, boolean_math_001_36.height = 140.0, 100.0
            group_input_208.width, group_input_208.height = 140.0, 100.0
            index_switch_11.width, index_switch_11.height = 140.0, 100.0

            # initialize select_segment_ links
            # index_switch_11.Output -> boolean_math_001_36.Boolean
            select_segment_.links.new(
                index_switch_11.outputs[0], boolean_math_001_36.inputs[0]
            )
            # index_switch_11.Output -> group_output_213.Selection
            select_segment_.links.new(
                index_switch_11.outputs[0], group_output_213.inputs[0]
            )
            # boolean_math_001_36.Boolean -> group_output_213.Inverted
            select_segment_.links.new(
                boolean_math_001_36.outputs[0], group_output_213.inputs[1]
            )
            # named_attribute_55.Attribute -> index_switch_11.Index
            select_segment_.links.new(
                named_attribute_55.outputs[0], index_switch_11.inputs[0]
            )
            # group_input_208.Segment A -> index_switch_11.0
            select_segment_.links.new(
                group_input_208.outputs[0], index_switch_11.inputs[1]
            )
            # group_input_208.Segment B -> index_switch_11.1
            select_segment_.links.new(
                group_input_208.outputs[1], index_switch_11.inputs[2]
            )
            # group_input_208.Segment ... -> index_switch_11.2
            select_segment_.links.new(
                group_input_208.outputs[2], index_switch_11.inputs[3]
            )
            return select_segment_

        select_segment_ = select_segment__node_group()

        # initialize color_segment_ node group
        def color_segment__node_group():
            color_segment_ = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Color Segment_"
            )

            color_segment_.color_tag = "COLOR"
            color_segment_.description = ""

            # color_segment_ interface
            # Socket Color
            color_socket_27 = color_segment_.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_27.attribute_domain = "POINT"
            color_socket_27.description = "The colors based on `entity_id`"

            # Socket Segment A
            segment_a_socket_1 = color_segment_.interface.new_socket(
                name="Segment A", in_out="INPUT", socket_type="NodeSocketColor"
            )
            segment_a_socket_1.attribute_domain = "POINT"
            segment_a_socket_1.description = "Color to set for Ligand B"

            # Socket Segment B
            segment_b_socket_1 = color_segment_.interface.new_socket(
                name="Segment B", in_out="INPUT", socket_type="NodeSocketColor"
            )
            segment_b_socket_1.attribute_domain = "POINT"
            segment_b_socket_1.description = "Color to set for Ligand B"

            # Socket ...
            ____socket_3 = color_segment_.interface.new_socket(
                name="...", in_out="INPUT", socket_type="NodeSocketColor"
            )
            ____socket_3.attribute_domain = "POINT"
            ____socket_3.description = "Color to set for Ligand ..."

            # initialize color_segment_ nodes
            # node Group Output
            group_output_214 = color_segment_.nodes.new("NodeGroupOutput")
            group_output_214.name = "Group Output"
            group_output_214.is_active_output = True

            # node Switch.001
            switch_001_28 = color_segment_.nodes.new("GeometryNodeSwitch")
            switch_001_28.name = "Switch.001"
            switch_001_28.input_type = "RGBA"

            # node Group.059
            group_059_4 = color_segment_.nodes.new("GeometryNodeGroup")
            group_059_4.name = "Group.059"
            group_059_4.node_tree = _mn_select_sec_struct
            # Socket_1
            group_059_4.inputs[0].default_value = True

            # node Switch.002
            switch_002_22 = color_segment_.nodes.new("GeometryNodeSwitch")
            switch_002_22.name = "Switch.002"
            switch_002_22.input_type = "RGBA"

            # node Switch
            switch_55 = color_segment_.nodes.new("GeometryNodeSwitch")
            switch_55.name = "Switch"
            switch_55.input_type = "RGBA"
            # False
            switch_55.inputs[1].default_value = (
                0.800000011920929,
                0.800000011920929,
                0.800000011920929,
                1.0,
            )

            # node Group Input
            group_input_209 = color_segment_.nodes.new("NodeGroupInput")
            group_input_209.name = "Group Input"

            # Set locations
            group_output_214.location = (278.192138671875, 0.0)
            switch_001_28.location = (80.0, -140.0)
            group_059_4.location = (-100.0, 20.0)
            switch_002_22.location = (80.0, -300.0)
            switch_55.location = (80.0, 20.0)
            group_input_209.location = (-288.192138671875, 0.0)

            # Set dimensions
            group_output_214.width, group_output_214.height = 140.0, 100.0
            switch_001_28.width, switch_001_28.height = 140.0, 100.0
            group_059_4.width, group_059_4.height = 140.0, 100.0
            switch_002_22.width, switch_002_22.height = 140.0, 100.0
            switch_55.width, switch_55.height = 140.0, 100.0
            group_input_209.width, group_input_209.height = 140.0, 100.0

            # initialize color_segment_ links
            # group_059_4.Is Helix -> switch_55.Switch
            color_segment_.links.new(group_059_4.outputs[0], switch_55.inputs[0])
            # group_input_209.Segment A -> switch_55.True
            color_segment_.links.new(group_input_209.outputs[0], switch_55.inputs[2])
            # switch_001_28.Output -> switch_002_22.False
            color_segment_.links.new(switch_001_28.outputs[0], switch_002_22.inputs[1])
            # group_059_4.Is Sheet -> switch_001_28.Switch
            color_segment_.links.new(group_059_4.outputs[1], switch_001_28.inputs[0])
            # group_059_4.Is Loop -> switch_002_22.Switch
            color_segment_.links.new(group_059_4.outputs[3], switch_002_22.inputs[0])
            # switch_002_22.Output -> group_output_214.Color
            color_segment_.links.new(
                switch_002_22.outputs[0], group_output_214.inputs[0]
            )
            # switch_55.Output -> switch_001_28.False
            color_segment_.links.new(switch_55.outputs[0], switch_001_28.inputs[1])
            # group_input_209.Segment B -> switch_001_28.True
            color_segment_.links.new(
                group_input_209.outputs[1], switch_001_28.inputs[2]
            )
            # group_input_209.... -> switch_002_22.True
            color_segment_.links.new(
                group_input_209.outputs[2], switch_002_22.inputs[2]
            )
            return color_segment_

        color_segment_ = color_segment__node_group()

        # initialize fallback_color node group
        def fallback_color_node_group():
            fallback_color = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="Fallback Color"
            )

            fallback_color.color_tag = "INPUT"
            fallback_color.description = ""

            # fallback_color interface
            # Socket Color
            color_socket_28 = fallback_color.interface.new_socket(
                name="Color", in_out="OUTPUT", socket_type="NodeSocketColor"
            )
            color_socket_28.attribute_domain = "POINT"

            # Socket Name
            name_socket_7 = fallback_color.interface.new_socket(
                name="Name", in_out="INPUT", socket_type="NodeSocketString"
            )
            name_socket_7.attribute_domain = "POINT"

            # Socket Fallback
            fallback_socket_4 = fallback_color.interface.new_socket(
                name="Fallback", in_out="INPUT", socket_type="NodeSocketColor"
            )
            fallback_socket_4.attribute_domain = "POINT"
            fallback_socket_4.description = "Fallback value if Field is 0"

            # initialize fallback_color nodes
            # node Group Output
            group_output_215 = fallback_color.nodes.new("NodeGroupOutput")
            group_output_215.name = "Group Output"
            group_output_215.is_active_output = True

            # node Group Input
            group_input_210 = fallback_color.nodes.new("NodeGroupInput")
            group_input_210.name = "Group Input"

            # node Switch
            switch_56 = fallback_color.nodes.new("GeometryNodeSwitch")
            switch_56.name = "Switch"
            switch_56.input_type = "RGBA"

            # node Named Attribute
            named_attribute_56 = fallback_color.nodes.new(
                "GeometryNodeInputNamedAttribute"
            )
            named_attribute_56.name = "Named Attribute"
            named_attribute_56.data_type = "FLOAT_COLOR"

            # Set locations
            group_output_215.location = (288.23382568359375, 0.0)
            group_input_210.location = (-320.0, -40.0)
            switch_56.location = (98.23382568359375, 26.690887451171875)
            named_attribute_56.location = (-123.81201934814453, -87.02108001708984)

            # Set dimensions
            group_output_215.width, group_output_215.height = 140.0, 100.0
            group_input_210.width, group_input_210.height = 140.0, 100.0
            switch_56.width, switch_56.height = 140.0, 100.0
            named_attribute_56.width, named_attribute_56.height = 140.0, 100.0

            # initialize fallback_color links
            # switch_56.Output -> group_output_215.Color
            fallback_color.links.new(switch_56.outputs[0], group_output_215.inputs[0])
            # named_attribute_56.Exists -> switch_56.Switch
            fallback_color.links.new(named_attribute_56.outputs[1], switch_56.inputs[0])
            # named_attribute_56.Attribute -> switch_56.True
            fallback_color.links.new(named_attribute_56.outputs[0], switch_56.inputs[2])
            # group_input_210.Fallback -> switch_56.False
            fallback_color.links.new(group_input_210.outputs[1], switch_56.inputs[1])
            # group_input_210.Name -> named_attribute_56.Name
            fallback_color.links.new(
                group_input_210.outputs[0], named_attribute_56.inputs[0]
            )
            return fallback_color

        fallback_color = fallback_color_node_group()

        # initialize nodestorage node group
        def nodestorage_node_group():
            nodestorage = bpy.data.node_groups.new(
                type="GeometryNodeTree", name="NodeStorage"
            )

            nodestorage.color_tag = "NONE"
            nodestorage.description = ""

            nodestorage.is_modifier = True

            # nodestorage interface
            # Socket Geometry
            geometry_socket_49 = nodestorage.interface.new_socket(
                name="Geometry", in_out="OUTPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_49.attribute_domain = "POINT"

            # Socket Geometry
            geometry_socket_50 = nodestorage.interface.new_socket(
                name="Geometry", in_out="INPUT", socket_type="NodeSocketGeometry"
            )
            geometry_socket_50.attribute_domain = "POINT"

            # initialize nodestorage nodes
            # node Styling
            styling = nodestorage.nodes.new("NodeFrame")
            styling.label = "Styling"
            styling.name = "Styling"
            styling.label_size = 20
            styling.shrink = True

            # node Selections
            selections = nodestorage.nodes.new("NodeFrame")
            selections.label = "Selections"
            selections.name = "Selections"
            selections.label_size = 20
            selections.shrink = True

            # node Frame.001
            frame_001_16 = nodestorage.nodes.new("NodeFrame")
            frame_001_16.label = "Topology"
            frame_001_16.name = "Frame.001"
            frame_001_16.label_size = 20
            frame_001_16.shrink = True

            # node Density
            density = nodestorage.nodes.new("NodeFrame")
            density.label = "Density"
            density.name = "Density"
            density.label_size = 20
            density.shrink = True

            # node Animation
            animation = nodestorage.nodes.new("NodeFrame")
            animation.label = "Animation"
            animation.name = "Animation"
            animation.label_size = 20
            animation.shrink = True

            # node Color
            color = nodestorage.nodes.new("NodeFrame")
            color.label = "Color"
            color.name = "Color"
            color.label_size = 20
            color.shrink = True

            # node Assembly
            assembly = nodestorage.nodes.new("NodeFrame")
            assembly.label = "Assembly"
            assembly.name = "Assembly"
            assembly.label_size = 20
            assembly.shrink = True

            # node Utilities
            utilities = nodestorage.nodes.new("NodeFrame")
            utilities.label = "Utilities"
            utilities.name = "Utilities"
            utilities.label_size = 20
            utilities.shrink = True

            # node Frame
            frame_30 = nodestorage.nodes.new("NodeFrame")
            frame_30.label = "Ensemble"
            frame_30.name = "Frame"
            frame_30.label_size = 20
            frame_30.shrink = True

            # node New DNA
            new_dna = nodestorage.nodes.new("NodeFrame")
            new_dna.label = "New DNA"
            new_dna.name = "New DNA"
            new_dna.label_size = 20
            new_dna.shrink = True

            # node Group.011
            group_011_12 = nodestorage.nodes.new("GeometryNodeGroup")
            group_011_12.name = "Group.011"
            group_011_12.node_tree = style_sticks
            # Socket_1
            group_011_12.inputs[1].default_value = True
            # Socket_4
            group_011_12.inputs[2].default_value = 1
            # Socket_3
            group_011_12.inputs[3].default_value = 0.20000000298023224
            # Socket_8
            group_011_12.inputs[4].default_value = False
            # Socket_5
            group_011_12.inputs[5].default_value = True

            # node Group.029
            group_029_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_029_2.name = "Group.029"
            group_029_2.node_tree = style_ribbon
            # Socket_2
            group_029_2.inputs[1].default_value = True
            # Socket_3
            group_029_2.inputs[2].default_value = 3
            # Socket_4
            group_029_2.inputs[3].default_value = 1.600000023841858
            # Socket_7
            group_029_2.inputs[4].default_value = 0.5
            # Socket_10
            group_029_2.inputs[5].default_value = True
            # Socket_5
            group_029_2.inputs[6].default_value = True

            # node MN_style_spheres
            mn_style_spheres_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_style_spheres_1.name = "MN_style_spheres"
            mn_style_spheres_1.node_tree = style_spheres
            # Input_1
            mn_style_spheres_1.inputs[1].default_value = True
            # Input_2
            mn_style_spheres_1.inputs[2].default_value = True
            # Input_3
            mn_style_spheres_1.inputs[3].default_value = 0.800000011920929
            # Input_4
            mn_style_spheres_1.inputs[4].default_value = 1
            # Input_5
            mn_style_spheres_1.inputs[5].default_value = True

            # node MN_select_atomic_number
            mn_select_atomic_number_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_atomic_number_1.label = "Select Atomic Number"
            mn_select_atomic_number_1.name = "MN_select_atomic_number"
            mn_select_atomic_number_1.node_tree = select_atomic_number
            # Socket_0
            mn_select_atomic_number_1.inputs[0].default_value = True
            # Socket_1
            mn_select_atomic_number_1.inputs[1].default_value = False
            # Input_0
            mn_select_atomic_number_1.inputs[2].default_value = 6

            # node MN_select_sphere
            mn_select_sphere = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_sphere.label = "Select Sphere"
            mn_select_sphere.name = "MN_select_sphere"
            mn_select_sphere.node_tree = select_sphere
            # Socket_0
            mn_select_sphere.inputs[0].default_value = True
            # Socket_1
            mn_select_sphere.inputs[1].default_value = False
            if "select_sphere" in bpy.data.objects:
                mn_select_sphere.inputs[2].default_value = bpy.data.objects[
                    "select_sphere"
                ]
            # Input_4
            mn_select_sphere.inputs[3].default_value = 0.0
            # Input_5
            mn_select_sphere.inputs[4].default_value = 10.0

            # node MN_select_proximity
            mn_select_proximity_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_proximity_1.label = "Select Proximity"
            mn_select_proximity_1.name = "MN_select_proximity"
            mn_select_proximity_1.node_tree = select_proximity
            # Input_5
            mn_select_proximity_1.inputs[1].default_value = True
            # Input_4
            mn_select_proximity_1.inputs[2].default_value = False
            # Input_1
            mn_select_proximity_1.inputs[3].default_value = 3.0

            # node MN_select_res_ID_single
            mn_select_res_id_single = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_res_id_single.label = "Select Res ID Single"
            mn_select_res_id_single.name = "MN_select_res_ID_single"
            mn_select_res_id_single.node_tree = select_res_id
            # Socket_0
            mn_select_res_id_single.inputs[0].default_value = True
            # Socket_1
            mn_select_res_id_single.inputs[1].default_value = False
            # Input_0
            mn_select_res_id_single.inputs[2].default_value = 10

            # node MN_select_res_id_
            mn_select_res_id_ = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_res_id_.label = "Select Res ID"
            mn_select_res_id_.name = "MN_select_res_id_"
            mn_select_res_id_.node_tree = select_res_id_
            # Input_0
            mn_select_res_id_.inputs[0].default_value = 10
            # Input_4
            mn_select_res_id_.inputs[1].default_value = 15
            # Input_5
            mn_select_res_id_.inputs[2].default_value = 20
            # Input_3
            mn_select_res_id_.inputs[3].default_value = 50

            # node Select Ligand_
            select_ligand__1 = nodestorage.nodes.new("GeometryNodeGroup")
            select_ligand__1.label = "Select Ligand_"
            select_ligand__1.name = "Select Ligand_"
            select_ligand__1.node_tree = select_ligand_
            # Input_7
            select_ligand__1.inputs[0].default_value = False
            # Input_8
            select_ligand__1.inputs[1].default_value = False
            # Input_9
            select_ligand__1.inputs[2].default_value = False

            # node Select Entity_
            select_entity__1 = nodestorage.nodes.new("GeometryNodeGroup")
            select_entity__1.label = "Select Entity_"
            select_entity__1.name = "Select Entity_"
            select_entity__1.node_tree = select_entity_
            # Input_7
            select_entity__1.inputs[0].default_value = False
            # Input_8
            select_entity__1.inputs[1].default_value = False
            # Input_9
            select_entity__1.inputs[2].default_value = False

            # node MN_select_separate_atoms
            mn_select_separate_atoms = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_separate_atoms.label = "Separate Atoms"
            mn_select_separate_atoms.name = "MN_select_separate_atoms"
            mn_select_separate_atoms.node_tree = separate_atoms
            # Input_1
            mn_select_separate_atoms.inputs[1].default_value = True

            # node MN_select_distance_empty
            mn_select_distance_empty_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_distance_empty_1.label = "Select Distance to Empty"
            mn_select_distance_empty_1.name = "MN_select_distance_empty"
            mn_select_distance_empty_1.node_tree = mn_select_distance_empty
            if "select_sphere" in bpy.data.objects:
                mn_select_distance_empty_1.inputs[0].default_value = bpy.data.objects[
                    "select_sphere"
                ]
            # Input_12
            mn_select_distance_empty_1.inputs[1].default_value = 0.0
            # Input_13
            mn_select_distance_empty_1.inputs[2].default_value = 1.0
            # Input_14
            mn_select_distance_empty_1.inputs[3].default_value = 3.0

            # node Group.070
            group_070_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_070_2.name = "Group.070"
            group_070_2.node_tree = _3_point_angle
            # Socket_0
            group_070_2.inputs[0].default_value = 0
            # Socket_1
            group_070_2.inputs[1].default_value = 1
            # Socket_2
            group_070_2.inputs[2].default_value = 2

            # node Group.075
            group_075_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_075_2.name = "Group.075"
            group_075_2.node_tree = residue_mask
            # Socket_1
            group_075_2.inputs[0].default_value = 2
            # Socket_5
            group_075_2.inputs[1].default_value = True
            # Socket_4
            group_075_2.inputs[2].default_value = 0

            # node Group.074
            group_074 = nodestorage.nodes.new("GeometryNodeGroup")
            group_074.name = "Group.074"
            group_074.node_tree = point_distance
            # Socket_0
            group_074.inputs[0].default_value = 100

            # node Group.072
            group_072 = nodestorage.nodes.new("GeometryNodeGroup")
            group_072.name = "Group.072"
            group_072.node_tree = points_of_edge
            # Socket_0
            group_072.inputs[0].default_value = 0

            # node Group.073
            group_073 = nodestorage.nodes.new("GeometryNodeGroup")
            group_073.name = "Group.073"
            group_073.node_tree = edge_info
            # Socket_1
            group_073.inputs[0].default_value = 0

            # node Group.071
            group_071_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_071_2.name = "Group.071"
            group_071_2.node_tree = point_edge_angle
            # Socket_0
            group_071_2.inputs[0].default_value = 0
            # Socket_1
            group_071_2.inputs[1].default_value = 1

            # node Group.067
            group_067_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_067_1.name = "Group.067"
            group_067_1.node_tree = _2_point_angle
            # Socket_0
            group_067_1.inputs[0].default_value = 0
            # Socket_2
            group_067_1.inputs[1].default_value = 2

            # node Group.078
            group_078 = nodestorage.nodes.new("GeometryNodeGroup")
            group_078.name = "Group.078"
            group_078.node_tree = backbone_positions
            # Socket_3
            group_078.inputs[0].default_value = 0

            # node Group.055
            group_055 = nodestorage.nodes.new("GeometryNodeGroup")
            group_055.name = "Group.055"
            group_055.node_tree = sample_nearest_atoms

            # node Group.054
            group_054 = nodestorage.nodes.new("GeometryNodeGroup")
            group_054.name = "Group.054"
            group_054.node_tree = style_density_surface
            # Input_3
            group_054.inputs[1].default_value = 0.7300000190734863
            # Socket_1
            group_054.inputs[2].default_value = True
            # Socket_2
            group_054.inputs[3].default_value = 0.0
            # Input_1
            group_054.inputs[4].default_value = (
                0.1994359940290451,
                0.5091630220413208,
                0.13218000531196594,
                1.0,
            )

            # node Group.045
            group_045 = nodestorage.nodes.new("GeometryNodeGroup")
            group_045.name = "Group.045"
            group_045.node_tree = style_density_wire
            # Input_3
            group_045.inputs[1].default_value = 0.800000011920929
            # Socket_2
            group_045.inputs[2].default_value = 0.0
            # Input_5
            group_045.inputs[3].default_value = 3.0
            # Input_6
            group_045.inputs[4].default_value = 3
            # Input_1
            group_045.inputs[5].default_value = (
                0.1994362473487854,
                0.5091632008552551,
                0.13218021392822266,
                1.0,
            )

            # node Group.043
            group_043 = nodestorage.nodes.new("GeometryNodeGroup")
            group_043.name = "Group.043"
            group_043.node_tree = mn_animate_noise_field
            # Input_10
            group_043.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_1
            group_043.inputs[1].default_value = 0.23999999463558197
            # Input_2
            group_043.inputs[2].default_value = 1.8399999141693115
            # Input_3
            group_043.inputs[3].default_value = 1.0
            # Input_4
            group_043.inputs[4].default_value = 3.0
            # Input_5
            group_043.inputs[5].default_value = 1.0
            # Input_6
            group_043.inputs[6].default_value = 0.0

            # node Group.042
            group_042 = nodestorage.nodes.new("GeometryNodeGroup")
            group_042.name = "Group.042"
            group_042.node_tree = mn_animate_noise_position
            # Input_1
            group_042.inputs[0].default_value = 0.23999999463558197
            # Input_2
            group_042.inputs[1].default_value = 1.8399999141693115
            # Input_3
            group_042.inputs[2].default_value = 1.0
            # Input_4
            group_042.inputs[3].default_value = 3.0
            # Input_5
            group_042.inputs[4].default_value = 1.0
            # Input_6
            group_042.inputs[5].default_value = 0.0

            # node Group.053
            group_053 = nodestorage.nodes.new("GeometryNodeGroup")
            group_053.name = "Group.053"
            group_053.node_tree = mn_animate_noise_repeat
            # Input_1
            group_053.inputs[0].default_value = 0.1900000125169754
            # Input_3
            group_053.inputs[1].default_value = 13.59999942779541
            # Input_4
            group_053.inputs[2].default_value = 0.3687782883644104
            # Input_5
            group_053.inputs[3].default_value = 1.4800000190734863
            # Input_7
            group_053.inputs[4].default_value = (0.0, 0.0, 0.0)
            # Input_8
            group_053.inputs[5].default_value = 0.5
            # Input_9
            group_053.inputs[6].default_value = 5.159999847412109

            # node MOL_col_element_common
            mol_col_element_common = nodestorage.nodes.new("GeometryNodeGroup")
            mol_col_element_common.label = "Color by Common Elements"
            mol_col_element_common.name = "MOL_col_element_common"
            mol_col_element_common.node_tree = color_common
            # Input_0
            mol_col_element_common.inputs[0].default_value = (1.0, 1.0, 1.0, 1.0)
            # Input_4
            mol_col_element_common.inputs[1].default_value = (
                0.15248222649097443,
                0.15248222649097443,
                0.15248222649097443,
                1.0,
            )
            # Input_5
            mol_col_element_common.inputs[2].default_value = (
                0.1600000411272049,
                0.23398137092590332,
                0.800000011920929,
                1.0,
            )
            # Input_6
            mol_col_element_common.inputs[3].default_value = (
                0.800000011920929,
                0.1600000411272049,
                0.1600000411272049,
                1.0,
            )
            # Input_7
            mol_col_element_common.inputs[4].default_value = (
                0.8000000715255737,
                0.1718127280473709,
                0.525249719619751,
                1.0,
            )
            # Input_8
            mol_col_element_common.inputs[5].default_value = (
                0.8000000715255737,
                0.7251728177070618,
                0.08188272267580032,
                1.0,
            )

            # node Group.020
            group_020_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_020_1.name = "Group.020"
            group_020_1.node_tree = color_backbone
            # Input_0
            group_020_1.inputs[0].default_value = (
                0.46948108077049255,
                0.23999999463558197,
                0.6000000238418579,
                1.0,
            )
            # Input_1
            group_020_1.inputs[1].default_value = (
                0.5255193710327148,
                0.6000000238418579,
                0.23999999463558197,
                1.0,
            )

            # node Group.061
            group_061 = nodestorage.nodes.new("GeometryNodeGroup")
            group_061.name = "Group.061"
            group_061.node_tree = color_chain_
            # Input_0
            group_061.inputs[0].default_value = (
                0.16151683032512665,
                0.623960554599762,
                0.1956024467945099,
                1.0,
            )
            # Input_2
            group_061.inputs[1].default_value = (
                1.0,
                0.15063196420669556,
                0.15063196420669556,
                1.0,
            )
            # Input_3
            group_061.inputs[2].default_value = (
                0.17016737163066864,
                0.36792799830436707,
                0.8000000715255737,
                1.0,
            )

            # node Group.068
            group_068_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_068_2.name = "Group.068"
            group_068_2.node_tree = color_ligand_
            # Input_0
            group_068_2.inputs[0].default_value = (
                0.16151683032512665,
                0.623960554599762,
                0.1956024467945099,
                1.0,
            )
            # Input_2
            group_068_2.inputs[1].default_value = (
                1.0,
                0.15063196420669556,
                0.15063196420669556,
                1.0,
            )
            # Input_3
            group_068_2.inputs[2].default_value = (
                0.17016737163066864,
                0.36792799830436707,
                0.8000000715255737,
                1.0,
            )

            # node Group.065
            group_065 = nodestorage.nodes.new("GeometryNodeGroup")
            group_065.name = "Group.065"
            group_065.node_tree = color_entity_
            # Input_0
            group_065.inputs[0].default_value = (
                0.16151683032512665,
                0.623960554599762,
                0.1956024467945099,
                1.0,
            )
            # Input_2
            group_065.inputs[1].default_value = (
                1.0,
                0.15063196420669556,
                0.15063196420669556,
                1.0,
            )
            # Input_3
            group_065.inputs[2].default_value = (
                0.17016737163066864,
                0.36792799830436707,
                0.8000000715255737,
                1.0,
            )

            # node Group.012
            group_012_8 = nodestorage.nodes.new("GeometryNodeGroup")
            group_012_8.name = "Group.012"
            group_012_8.node_tree = animate_value
            # Input_3
            group_012_8.inputs[0].default_value = False
            # Input_6
            group_012_8.inputs[1].default_value = False
            # Input_0
            group_012_8.inputs[2].default_value = 1
            # Input_1
            group_012_8.inputs[3].default_value = 250
            # Input_4
            group_012_8.inputs[4].default_value = 0.0
            # Input_5
            group_012_8.inputs[5].default_value = 1.0

            # node Group.030
            group_030_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_030_2.name = "Group.030"
            group_030_2.node_tree = _mn_animate_field
            # Input_10
            group_030_2.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_11
            group_030_2.inputs[1].default_value = 0.0
            # Input_18
            group_030_2.inputs[3].default_value = 0
            # Input_19
            group_030_2.inputs[4].default_value = -1
            # Input_5
            group_030_2.inputs[5].default_value = 1.0
            # Input_8
            group_030_2.inputs[6].default_value = True
            # Input_7
            group_030_2.inputs[7].default_value = False
            # Input_13
            group_030_2.inputs[8].default_value = 0

            # node Group.060
            group_060 = nodestorage.nodes.new("GeometryNodeGroup")
            group_060.name = "Group.060"
            group_060.node_tree = color_sec_struct
            # Input_0
            group_060.inputs[0].default_value = (
                0.16151683032512665,
                0.623960554599762,
                0.1956024467945099,
                1.0,
            )
            # Input_2
            group_060.inputs[1].default_value = (
                1.0,
                0.15063196420669556,
                0.15063196420669556,
                1.0,
            )
            # Input_3
            group_060.inputs[2].default_value = (
                0.17016737163066864,
                0.36792799830436707,
                0.8000000715255737,
                1.0,
            )

            # node Group.035
            group_035_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_035_1.name = "Group.035"
            group_035_1.node_tree = color_atomic_number
            # Input_0
            group_035_1.inputs[0].default_value = 6
            # Input_3
            group_035_1.inputs[1].default_value = (
                0.8000000715255737,
                0.16871961951255798,
                0.06896969676017761,
                1.0,
            )

            # node Group.009
            group_009_12 = nodestorage.nodes.new("GeometryNodeGroup")
            group_009_12.name = "Group.009"
            group_009_12.node_tree = set_color
            # Input_15
            group_009_12.inputs[1].default_value = True
            # Input_16
            group_009_12.inputs[2].default_value = (
                0.16151699423789978,
                0.6239609718322754,
                0.19560199975967407,
                1.0,
            )

            # node Group.062
            group_062 = nodestorage.nodes.new("GeometryNodeGroup")
            group_062.name = "Group.062"
            group_062.node_tree = color_attribute_random
            # Input_0
            group_062.inputs[0].default_value = "chain_id"
            # Input_2
            group_062.inputs[1].default_value = 0.6000000238418579
            # Input_3
            group_062.inputs[2].default_value = 0.6000000238418579
            # Input_4
            group_062.inputs[3].default_value = 0

            # node Group.005
            group_005_15 = nodestorage.nodes.new("GeometryNodeGroup")
            group_005_15.name = "Group.005"
            group_005_15.node_tree = color_attribute_map
            # Input_6
            group_005_15.inputs[0].default_value = "b_factor"
            # Input_3
            group_005_15.inputs[1].default_value = 0.0
            # Input_4
            group_005_15.inputs[2].default_value = 100.0
            # Input_7
            group_005_15.inputs[3].default_value = True
            # Input_0
            group_005_15.inputs[4].default_value = (
                0.07694950699806213,
                0.4785124361515045,
                0.5,
                1.0,
            )
            # Input_1
            group_005_15.inputs[5].default_value = (0.5, 0.5, 0.5, 1.0)
            # Input_2
            group_005_15.inputs[6].default_value = (
                0.5,
                0.15948081016540527,
                0.058025065809488297,
                1.0,
            )

            # node Group.031
            group_031 = nodestorage.nodes.new("GeometryNodeGroup")
            group_031.name = "Group.031"
            group_031.node_tree = animate_peptide_to_curve
            # Input_7
            group_031.inputs[2].default_value = 0.0
            # Input_8
            group_031.inputs[3].default_value = 0.0
            # Input_9
            group_031.inputs[4].default_value = 1.0
            # Input_10
            group_031.inputs[5].default_value = 0.5
            # Input_11
            group_031.inputs[6].default_value = 1.0

            # node Group.039
            group_039 = nodestorage.nodes.new("GeometryNodeGroup")
            group_039.name = "Group.039"
            group_039.node_tree = color_goodsell
            # Input_4
            group_039.inputs[0].default_value = False
            # Input_0
            group_039.inputs[1].default_value = 0.5
            # Input_1
            group_039.inputs[2].default_value = (
                0.11998318135738373,
                0.39260193705558777,
                0.5,
                1.0,
            )

            # node Group
            group_64 = nodestorage.nodes.new("GeometryNodeGroup")
            group_64.name = "Group"
            group_64.node_tree = animate_frames
            # Input_16
            group_64.inputs[1].default_value = True
            # Input_7
            group_64.inputs[3].default_value = False
            # Input_8
            group_64.inputs[4].default_value = True
            # Socket_0
            group_64.inputs[5].default_value = 1.0

            # node Group.037
            group_037_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_037_1.name = "Group.037"
            group_037_1.node_tree = _mn_utils_aa_atom_pos
            # Input_2
            group_037_1.inputs[0].default_value = 5

            # node Group.063
            group_063 = nodestorage.nodes.new("GeometryNodeGroup")
            group_063.name = "Group.063"
            group_063.node_tree = _mn_utils_split_instance
            # Input_1
            group_063.inputs[1].default_value = 0
            # Input_3
            group_063.inputs[2].default_value = 0
            # Input_4
            group_063.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group.066
            group_066 = nodestorage.nodes.new("GeometryNodeGroup")
            group_066.name = "Group.066"
            group_066.node_tree = mn_assembly_
            # Input_3
            group_066.inputs[1].default_value = 1.0
            # Input_4
            group_066.inputs[2].default_value = 1.0
            # Input_5
            group_066.inputs[3].default_value = 0

            # node Group.023
            group_023_3 = nodestorage.nodes.new("GeometryNodeGroup")
            group_023_3.name = "Group.023"
            group_023_3.node_tree = mn_assembly_center
            # Input_2
            group_023_3.inputs[1].default_value = True
            # Input_5
            group_023_3.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group.001
            group_001_43 = nodestorage.nodes.new("GeometryNodeGroup")
            group_001_43.name = "Group.001"
            group_001_43.node_tree = _mn_assembly_rotate
            # Input_5
            group_001_43.inputs[1].default_value = True
            # Input_2
            group_001_43.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Input_4
            group_001_43.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group Output
            group_output_216 = nodestorage.nodes.new("NodeGroupOutput")
            group_output_216.name = "Group Output"
            group_output_216.is_active_output = True

            # node Group.003
            group_003_19 = nodestorage.nodes.new("GeometryNodeGroup")
            group_003_19.name = "Group.003"
            group_003_19.node_tree = mn_oxdna_style_ribbon
            # Socket_11
            group_003_19.inputs[1].default_value = True
            # Socket_5
            group_003_19.inputs[3].default_value = (
                0.2746773660182953,
                0.5457246899604797,
                0.7991029620170593,
                1.0,
            )
            # Socket_6
            group_003_19.inputs[4].default_value = (
                0.2945820093154907,
                0.800000011920929,
                0.18778899312019348,
                1.0,
            )
            # Socket_7
            group_003_19.inputs[5].default_value = (
                0.800000011920929,
                0.23661400377750397,
                0.1674170047044754,
                1.0,
            )
            # Socket_8
            group_003_19.inputs[6].default_value = (
                0.800000011920929,
                0.269802987575531,
                0.5268980264663696,
                1.0,
            )
            # Socket_2
            group_003_19.inputs[7].default_value = (1.0, 1.0, 1.0)
            # Socket_12
            group_003_19.inputs[8].default_value = 6
            # Socket_9
            group_003_19.inputs[9].default_value = 1
            # Socket_4
            group_003_19.inputs[10].default_value = 2.0
            # Socket_10
            group_003_19.inputs[11].default_value = True

            # node Group.064
            group_064 = nodestorage.nodes.new("GeometryNodeGroup")
            group_064.name = "Group.064"
            group_064.node_tree = _mn_assembly_instance_chains
            # Input_3
            group_064.inputs[1].default_value = 1.0
            # Input_4
            group_064.inputs[2].default_value = 1.0
            # Input_5
            group_064.inputs[3].default_value = 0

            # node Group.006
            group_006_11 = nodestorage.nodes.new("GeometryNodeGroup")
            group_006_11.name = "Group.006"
            group_006_11.node_tree = _mn_utils_bio_assembly
            # Input_7
            group_006_11.inputs[2].default_value = 1.0
            # Input_8
            group_006_11.inputs[3].default_value = 1.0

            # node Group.076
            group_076 = nodestorage.nodes.new("GeometryNodeGroup")
            group_076.name = "Group.076"
            group_076.node_tree = vector_angle
            # Socket_1
            group_076.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Socket_2
            group_076.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Group.040
            group_040 = nodestorage.nodes.new("GeometryNodeGroup")
            group_040.name = "Group.040"
            group_040.node_tree = mn_utils_curve_resample
            # Input_12
            group_040.inputs[1].default_value = 2.299999952316284
            # Input_2
            group_040.inputs[2].default_value = 0.36000001430511475
            # Input_7
            group_040.inputs[3].default_value = 0.0
            # Input_9
            group_040.inputs[4].default_value = 0
            # Input_11
            group_040.inputs[5].default_value = (0.0, 0.0, 0.0)

            # node Group.049
            group_049 = nodestorage.nodes.new("GeometryNodeGroup")
            group_049.name = "Group.049"
            group_049.node_tree = mn_dna_style_spheres_eevee
            # Input_2
            group_049.inputs[1].default_value = True
            # Input_3
            group_049.inputs[2].default_value = 1.0
            # Input_13
            group_049.inputs[3].default_value = 2
            # Input_14
            group_049.inputs[4].default_value = True

            # node Group.048
            group_048 = nodestorage.nodes.new("GeometryNodeGroup")
            group_048.name = "Group.048"
            group_048.node_tree = mn_dna_style_spheres_cycles
            # Input_2
            group_048.inputs[1].default_value = True
            # Input_3
            group_048.inputs[2].default_value = 1.0

            # node Group.047
            group_047 = nodestorage.nodes.new("GeometryNodeGroup")
            group_047.name = "Group.047"
            group_047.node_tree = mn_dna_bases
            if "prim_DNA" in bpy.data.collections:
                group_047.inputs[0].default_value = bpy.data.collections["prim_DNA"]
            # Input_0
            group_047.inputs[1].default_value = (
                0.3064832389354706,
                0.9674258828163147,
                0.14814630150794983,
                1.0,
            )
            # Input_1
            group_047.inputs[2].default_value = (
                0.21314002573490143,
                0.45463669300079346,
                0.6208675503730774,
                1.0,
            )
            # Input_3
            group_047.inputs[3].default_value = (
                0.7381805777549744,
                0.24614499509334564,
                0.8000000715255737,
                1.0,
            )
            # Input_4
            group_047.inputs[4].default_value = (
                0.8000000715255737,
                0.43615972995758057,
                0.2251065969467163,
                1.0,
            )
            # Input_8
            group_047.inputs[5].default_value = True
            # Input_9
            group_047.inputs[6].default_value = (
                0.7991029620170593,
                0.1094617024064064,
                0.1247718334197998,
                1.0,
            )

            # node Group.051
            group_051 = nodestorage.nodes.new("GeometryNodeGroup")
            group_051.name = "Group.051"
            group_051.node_tree = mn_dna_style_surface
            # Input_2
            group_051.inputs[1].default_value = True
            # Input_6
            group_051.inputs[2].default_value = 8
            # Input_7
            group_051.inputs[3].default_value = 1.0
            # Input_13
            group_051.inputs[4].default_value = 0.0
            # Input_8
            group_051.inputs[5].default_value = 0
            # Input_10
            group_051.inputs[6].default_value = True
            # Input_12
            group_051.inputs[7].default_value = 0
            # Input_9
            group_051.inputs[8].default_value = True

            # node Group.052
            group_052 = nodestorage.nodes.new("GeometryNodeGroup")
            group_052.name = "Group.052"
            group_052.node_tree = mn_dna_double_helix
            # Input_3
            group_052.inputs[2].default_value = 0.0
            # Input_4
            group_052.inputs[3].default_value = 1.0
            # Input_5
            group_052.inputs[4].default_value = 0.0
            # Input_6
            group_052.inputs[5].default_value = 1.0

            # node Group.050
            group_050 = nodestorage.nodes.new("GeometryNodeGroup")
            group_050.name = "Group.050"
            group_050.node_tree = mn_dna_style_ball_and_stick
            # Input_12
            group_050.inputs[1].default_value = True
            # Input_13
            group_050.inputs[2].default_value = True
            # Input_14
            group_050.inputs[3].default_value = 2
            # Input_15
            group_050.inputs[4].default_value = 0.30000001192092896
            # Input_16
            group_050.inputs[5].default_value = False
            # Input_17
            group_050.inputs[6].default_value = 8
            # Input_18
            group_050.inputs[7].default_value = 0.20000000298023224
            # Input_20
            group_050.inputs[9].default_value = False
            # Input_21
            group_050.inputs[10].default_value = 1.0
            # Input_22
            group_050.inputs[11].default_value = 1.1299999952316284
            # Input_23
            group_050.inputs[12].default_value = 3
            # Input_24
            group_050.inputs[13].default_value = 0.800000011920929
            # Input_25
            group_050.inputs[14].default_value = 0.0

            # node Group.028
            group_028_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_028_2.name = "Group.028"
            group_028_2.node_tree = mn_utils_extend_curve
            # Input_8
            group_028_2.inputs[1].default_value = 4
            # Input_9
            group_028_2.inputs[2].default_value = 1.0
            # Input_3
            group_028_2.inputs[3].default_value = 6.5799994468688965

            # node Group.079
            group_079 = nodestorage.nodes.new("GeometryNodeGroup")
            group_079.name = "Group.079"
            group_079.node_tree = dihedral_angle
            # Socket_5
            group_079.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Socket_6
            group_079.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Socket_7
            group_079.inputs[2].default_value = (0.0, 0.0, 0.0)
            # Socket_4
            group_079.inputs[3].default_value = (0.0, 0.0, 0.0)

            # node Group Input
            group_input_211 = nodestorage.nodes.new("NodeGroupInput")
            group_input_211.name = "Group Input"

            # node Select Chain_
            select_chain__1 = nodestorage.nodes.new("GeometryNodeGroup")
            select_chain__1.label = "Select Chain_"
            select_chain__1.name = "Select Chain_"
            select_chain__1.node_tree = select_chain_
            # Input_7
            select_chain__1.inputs[0].default_value = False
            # Input_8
            select_chain__1.inputs[1].default_value = False
            # Input_9
            select_chain__1.inputs[2].default_value = False

            # node MN_select_cube
            mn_select_cube = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_cube.label = "Select Cube"
            mn_select_cube.name = "MN_select_cube"
            mn_select_cube.node_tree = select_cube
            # Socket_0
            mn_select_cube.inputs[0].default_value = True
            # Socket_1
            mn_select_cube.inputs[1].default_value = False
            if "select_cube" in bpy.data.objects:
                mn_select_cube.inputs[2].default_value = bpy.data.objects["select_cube"]
            # Input_4
            mn_select_cube.inputs[3].default_value = 0.0
            # Input_5
            mn_select_cube.inputs[4].default_value = 10.0

            # node Is Peptide
            is_peptide_1 = nodestorage.nodes.new("GeometryNodeGroup")
            is_peptide_1.name = "Is Peptide"
            is_peptide_1.node_tree = is_peptide
            # Socket_1
            is_peptide_1.inputs[0].default_value = True
            # Socket_3
            is_peptide_1.inputs[1].default_value = False

            # node Is Side Chain
            is_side_chain_1 = nodestorage.nodes.new("GeometryNodeGroup")
            is_side_chain_1.name = "Is Side Chain"
            is_side_chain_1.node_tree = is_side_chain
            # Socket_1
            is_side_chain_1.inputs[0].default_value = True
            # Socket_3
            is_side_chain_1.inputs[1].default_value = False

            # node Is Alpha Carbon
            is_alpha_carbon_1 = nodestorage.nodes.new("GeometryNodeGroup")
            is_alpha_carbon_1.label = "Is Alpha Carbon"
            is_alpha_carbon_1.name = "Is Alpha Carbon"
            is_alpha_carbon_1.node_tree = is_alpha_carbon
            # Socket_1
            is_alpha_carbon_1.inputs[0].default_value = True
            # Socket_3
            is_alpha_carbon_1.inputs[1].default_value = False

            # node Group.083
            group_083 = nodestorage.nodes.new("GeometryNodeGroup")
            group_083.name = "Group.083"
            group_083.node_tree = select_attribute
            # Socket_1
            group_083.inputs[0].default_value = True
            # Socket_4
            group_083.inputs[1].default_value = False
            # Socket_3
            group_083.inputs[2].default_value = "is_peptide"

            # node Group.086
            group_086 = nodestorage.nodes.new("GeometryNodeGroup")
            group_086.name = "Group.086"
            group_086.node_tree = is_solvent
            # Socket_1
            group_086.inputs[0].default_value = True
            # Socket_3
            group_086.inputs[1].default_value = False

            # node Is Lipid
            is_lipid_1 = nodestorage.nodes.new("GeometryNodeGroup")
            is_lipid_1.label = "Is Lipid"
            is_lipid_1.name = "Is Lipid"
            is_lipid_1.node_tree = is_lipid
            # Socket_1
            is_lipid_1.inputs[0].default_value = True
            # Socket_3
            is_lipid_1.inputs[1].default_value = False

            # node Group.087
            group_087 = nodestorage.nodes.new("GeometryNodeGroup")
            group_087.name = "Group.087"
            group_087.node_tree = is_backbone
            # Socket_1
            group_087.inputs[0].default_value = True
            # Socket_3
            group_087.inputs[1].default_value = False

            # node MN_select_whole_res
            mn_select_whole_res = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_whole_res.label = "Select Whole Res"
            mn_select_whole_res.name = "MN_select_whole_res"
            mn_select_whole_res.node_tree = select_res_whole
            # Input_0
            mn_select_whole_res.inputs[0].default_value = False
            # Socket_0
            mn_select_whole_res.inputs[1].default_value = False

            # node Is Helix
            is_helix_1 = nodestorage.nodes.new("GeometryNodeGroup")
            is_helix_1.name = "Is Helix"
            is_helix_1.node_tree = is_helix
            # Socket_1
            is_helix_1.inputs[0].default_value = True
            # Socket_3
            is_helix_1.inputs[1].default_value = False

            # node Group.089
            group_089 = nodestorage.nodes.new("GeometryNodeGroup")
            group_089.name = "Group.089"
            group_089.node_tree = is_sheet
            # Socket_1
            group_089.inputs[0].default_value = True
            # Socket_3
            group_089.inputs[1].default_value = False

            # node Group.090
            group_090 = nodestorage.nodes.new("GeometryNodeGroup")
            group_090.name = "Group.090"
            group_090.node_tree = is_loop
            # Socket_1
            group_090.inputs[0].default_value = True
            # Socket_3
            group_090.inputs[1].default_value = False

            # node MN_select_sec_struct.001
            mn_select_sec_struct_001 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_sec_struct_001.label = "Select Sec Struct"
            mn_select_sec_struct_001.name = "MN_select_sec_struct.001"
            mn_select_sec_struct_001.node_tree = _mn_select_sec_struct
            # Socket_1
            mn_select_sec_struct_001.inputs[0].default_value = True

            # node Group.046
            group_046 = nodestorage.nodes.new("GeometryNodeGroup")
            group_046.name = "Group.046"
            group_046.node_tree = _mn_animate_falloff_points
            # Input_7
            group_046.inputs[1].default_value = False
            # Input_3
            group_046.inputs[2].default_value = 0.0
            # Input_4
            group_046.inputs[3].default_value = 1.0
            # Input_5
            group_046.inputs[4].default_value = 0.0
            # Input_6
            group_046.inputs[5].default_value = 1.0

            # node Group.044
            group_044 = nodestorage.nodes.new("GeometryNodeGroup")
            group_044.name = "Group.044"
            group_044.node_tree = _mn_animate_falloff_empty
            # Input_7
            group_044.inputs[1].default_value = False
            # Input_3
            group_044.inputs[2].default_value = 0.0
            # Input_4
            group_044.inputs[3].default_value = 1.0
            # Input_5
            group_044.inputs[4].default_value = 0.0
            # Input_6
            group_044.inputs[5].default_value = 1.0

            # node Group.081
            group_081 = nodestorage.nodes.new("GeometryNodeGroup")
            group_081.name = "Group.081"
            group_081.node_tree = color_plddt
            # Socket_1
            group_081.inputs[0].default_value = (
                1.0001691579818726,
                0.20506973564624786,
                0.05950700864195824,
                1.0,
            )
            # Socket_2
            group_081.inputs[1].default_value = (
                1.0001686811447144,
                0.7083451151847839,
                0.006511816289275885,
                1.0,
            )
            # Socket_3
            group_081.inputs[2].default_value = (
                0.13015742599964142,
                0.5971758961677551,
                0.8962045907974243,
                1.0,
            )
            # Socket_4
            group_081.inputs[3].default_value = (
                0.0,
                0.08649647235870361,
                0.6723945140838623,
                1.0,
            )

            # node Group.014
            group_014_9 = nodestorage.nodes.new("GeometryNodeGroup")
            group_014_9.label = "Select Res Name"
            group_014_9.name = "Group.014"
            group_014_9.node_tree = select_res_name
            # Socket_33
            group_014_9.inputs[0].default_value = True
            # Socket_34
            group_014_9.inputs[1].default_value = False
            # Socket_2
            group_014_9.inputs[2].default_value = False
            # Socket_3
            group_014_9.inputs[3].default_value = False
            # Socket_4
            group_014_9.inputs[4].default_value = False
            # Socket_5
            group_014_9.inputs[5].default_value = False
            # Socket_6
            group_014_9.inputs[6].default_value = False
            # Socket_7
            group_014_9.inputs[7].default_value = False
            # Socket_8
            group_014_9.inputs[8].default_value = False
            # Socket_9
            group_014_9.inputs[9].default_value = False
            # Socket_10
            group_014_9.inputs[10].default_value = False
            # Socket_11
            group_014_9.inputs[11].default_value = False
            # Socket_12
            group_014_9.inputs[12].default_value = False
            # Socket_13
            group_014_9.inputs[13].default_value = False
            # Socket_14
            group_014_9.inputs[14].default_value = False
            # Socket_15
            group_014_9.inputs[15].default_value = False
            # Socket_16
            group_014_9.inputs[16].default_value = False
            # Socket_17
            group_014_9.inputs[17].default_value = False
            # Socket_18
            group_014_9.inputs[18].default_value = False
            # Socket_19
            group_014_9.inputs[19].default_value = False
            # Socket_20
            group_014_9.inputs[20].default_value = False
            # Socket_21
            group_014_9.inputs[21].default_value = False
            # Socket_23
            group_014_9.inputs[22].default_value = False
            # Socket_24
            group_014_9.inputs[23].default_value = False
            # Socket_25
            group_014_9.inputs[24].default_value = False
            # Socket_26
            group_014_9.inputs[25].default_value = False
            # Socket_27
            group_014_9.inputs[26].default_value = False
            # Socket_29
            group_014_9.inputs[27].default_value = False
            # Socket_28
            group_014_9.inputs[28].default_value = False
            # Socket_30
            group_014_9.inputs[29].default_value = False

            # node MN_select_res_name
            mn_select_res_name = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_res_name.label = "Select Res Name"
            mn_select_res_name.name = "MN_select_res_name"
            mn_select_res_name.node_tree = _mn_select_res_name_peptide
            # Input_7
            mn_select_res_name.inputs[0].default_value = False
            # Input_8
            mn_select_res_name.inputs[1].default_value = False
            # Input_9
            mn_select_res_name.inputs[2].default_value = False
            # Input_10
            mn_select_res_name.inputs[3].default_value = False
            # Input_11
            mn_select_res_name.inputs[4].default_value = False
            # Input_12
            mn_select_res_name.inputs[5].default_value = False
            # Input_13
            mn_select_res_name.inputs[6].default_value = False
            # Input_14
            mn_select_res_name.inputs[7].default_value = False
            # Input_15
            mn_select_res_name.inputs[8].default_value = False
            # Input_16
            mn_select_res_name.inputs[9].default_value = False
            # Input_17
            mn_select_res_name.inputs[10].default_value = False
            # Input_18
            mn_select_res_name.inputs[11].default_value = False
            # Input_19
            mn_select_res_name.inputs[12].default_value = False
            # Input_20
            mn_select_res_name.inputs[13].default_value = False
            # Input_21
            mn_select_res_name.inputs[14].default_value = False
            # Input_22
            mn_select_res_name.inputs[15].default_value = False
            # Input_23
            mn_select_res_name.inputs[16].default_value = False
            # Input_24
            mn_select_res_name.inputs[17].default_value = False
            # Input_25
            mn_select_res_name.inputs[18].default_value = False
            # Input_26
            mn_select_res_name.inputs[19].default_value = False

            # node Group.069
            group_069_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_069_1.name = "Group.069"
            group_069_1.node_tree = animate_wiggle
            # Input_2
            group_069_1.inputs[1].default_value = True
            # Input_7
            group_069_1.inputs[2].default_value = 1.0
            # Input_4
            group_069_1.inputs[3].default_value = 1.0
            # Input_8
            group_069_1.inputs[4].default_value = 1.0
            # Input_9
            group_069_1.inputs[5].default_value = 0.4000000059604645
            # Input_6
            group_069_1.inputs[6].default_value = 3.0
            # Input_3
            group_069_1.inputs[7].default_value = 0.0

            # node Group.026
            group_026_3 = nodestorage.nodes.new("GeometryNodeGroup")
            group_026_3.name = "Group.026"
            group_026_3.node_tree = ensemble_instance
            # Input_1
            group_026_3.inputs[1].default_value = True
            # Input_2
            group_026_3.inputs[3].default_value = 1.0
            # Input_5
            group_026_3.inputs[4].default_value = True
            # Input_6
            group_026_3.inputs[5].default_value = 0.10000000149011612

            # node MN_separate_polymers
            mn_separate_polymers = nodestorage.nodes.new("GeometryNodeGroup")
            mn_separate_polymers.label = "Separate Polymers"
            mn_separate_polymers.name = "MN_separate_polymers"
            mn_separate_polymers.node_tree = separate_polymers

            # node MN_select_res_ID_range
            mn_select_res_id_range = nodestorage.nodes.new("GeometryNodeGroup")
            mn_select_res_id_range.label = "Select Res ID Range"
            mn_select_res_id_range.name = "MN_select_res_ID_range"
            mn_select_res_id_range.node_tree = select_res_id_range
            # Socket_1
            mn_select_res_id_range.inputs[0].default_value = True
            # Socket_2
            mn_select_res_id_range.inputs[1].default_value = False
            # Input_0
            mn_select_res_id_range.inputs[2].default_value = 10
            # Input_3
            mn_select_res_id_range.inputs[3].default_value = 100

            # node Group.002
            group_002_28 = nodestorage.nodes.new("GeometryNodeGroup")
            group_002_28.name = "Group.002"
            group_002_28.node_tree = _mn_utils_style_spheres_points
            # Input_2
            group_002_28.inputs[1].default_value = True
            # Input_3
            group_002_28.inputs[2].default_value = 0.800000011920929

            # node Group.038
            group_038 = nodestorage.nodes.new("GeometryNodeGroup")
            group_038.name = "Group.038"
            group_038.node_tree = _mn_utils_style_ribbon_nucleic
            # Input_2
            group_038.inputs[1].default_value = True
            # Socket_2
            group_038.inputs[3].default_value = False
            # Input_3
            group_038.inputs[4].default_value = 3
            # Input_5
            group_038.inputs[5].default_value = 8
            # Input_4
            group_038.inputs[6].default_value = 2.0
            # Input_7
            group_038.inputs[7].default_value = True
            # Input_28
            group_038.inputs[8].default_value = 0.20000000298023224
            # Input_29
            group_038.inputs[9].default_value = 6

            # node Group.008
            group_008_9 = nodestorage.nodes.new("GeometryNodeGroup")
            group_008_9.name = "Group.008"
            group_008_9.node_tree = _mn_utils_style_old_ball_and_stick
            # Input_3
            group_008_9.inputs[1].default_value = True
            # Input_4
            group_008_9.inputs[2].default_value = True
            # Input_6
            group_008_9.inputs[3].default_value = 3
            # Input_7
            group_008_9.inputs[4].default_value = 0.30000001192092896
            # Input_28
            group_008_9.inputs[5].default_value = False
            # Input_8
            group_008_9.inputs[6].default_value = 8
            # Input_9
            group_008_9.inputs[7].default_value = 0.20000000298023224
            # Input_25
            group_008_9.inputs[8].default_value = False
            # Input_11
            group_008_9.inputs[9].default_value = 1.0
            # Input_27
            group_008_9.inputs[10].default_value = 1.0
            # Input_23
            group_008_9.inputs[11].default_value = 3
            # Input_12
            group_008_9.inputs[12].default_value = 0.20000000298023224
            # Input_21
            group_008_9.inputs[13].default_value = 0.0

            # node Group.059
            group_059_5 = nodestorage.nodes.new("GeometryNodeGroup")
            group_059_5.name = "Group.059"
            group_059_5.node_tree = _mn_utils_style_cartoon
            # Input_97
            group_059_5.inputs[1].default_value = True
            # Input_11
            group_059_5.inputs[2].default_value = True
            # Socket_6
            group_059_5.inputs[3].default_value = True
            # Input_74
            group_059_5.inputs[5].default_value = True
            # Input_121
            group_059_5.inputs[6].default_value = False
            # Input_122
            group_059_5.inputs[7].default_value = False
            # Input_80
            group_059_5.inputs[8].default_value = 1.0
            # Input_81
            group_059_5.inputs[9].default_value = 1.0
            # Input_95
            group_059_5.inputs[11].default_value = 12
            # Input_87
            group_059_5.inputs[12].default_value = 0.0
            # Input_46
            group_059_5.inputs[13].default_value = 0.5
            # Input_8
            group_059_5.inputs[14].default_value = 2.0
            # Input_43
            group_059_5.inputs[15].default_value = 1.0
            # Input_96
            group_059_5.inputs[16].default_value = 3
            # Input_68
            group_059_5.inputs[17].default_value = False
            # Input_69
            group_059_5.inputs[18].default_value = True
            # Input_0
            group_059_5.inputs[19].default_value = 3.0
            # Input_66
            group_059_5.inputs[20].default_value = 12
            # Input_67
            group_059_5.inputs[21].default_value = 5
            # Input_4
            group_059_5.inputs[22].default_value = 0.0
            # Input_7
            group_059_5.inputs[23].default_value = 0.5
            # Input_47
            group_059_5.inputs[24].default_value = 2.0
            # Input_9
            group_059_5.inputs[25].default_value = 3
            # Input_86
            group_059_5.inputs[26].default_value = True
            # Input_75
            group_059_5.inputs[27].default_value = 6
            # Input_45
            group_059_5.inputs[28].default_value = 0.30000001192092896
            # Input_76
            group_059_5.inputs[29].default_value = 8

            # node Group.004
            group_004_15 = nodestorage.nodes.new("GeometryNodeGroup")
            group_004_15.name = "Group.004"
            group_004_15.node_tree = _mn_utils_style_ribbon_peptide
            # Input_2
            group_004_15.inputs[1].default_value = True
            # Input_3
            group_004_15.inputs[2].default_value = 3
            # Input_4
            group_004_15.inputs[3].default_value = 2.0
            # Input_18
            group_004_15.inputs[4].default_value = 1.0
            # Socket_0
            group_004_15.inputs[5].default_value = False
            # Input_7
            group_004_15.inputs[6].default_value = True

            # node Group.056
            group_056 = nodestorage.nodes.new("GeometryNodeGroup")
            group_056.name = "Group.056"
            group_056.node_tree = _mn_utils_style_surface_new
            # Input_4
            group_056.inputs[1].default_value = True
            # Input_3
            group_056.inputs[2].default_value = 12
            # Input_5
            group_056.inputs[3].default_value = 1.0
            # Input_23
            group_056.inputs[4].default_value = 0.6000000238418579
            # Input_12
            group_056.inputs[5].default_value = True
            # Input_22
            group_056.inputs[6].default_value = 1
            # Input_6
            group_056.inputs[7].default_value = True
            # Socket_0
            group_056.inputs[8].default_value = True
            # Socket_1
            group_056.inputs[10].default_value = 30

            # node Group.027
            group_027_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_027_2.name = "Group.027"
            group_027_2.node_tree = mn_style_surface_old
            # Socket_3
            group_027_2.inputs[1].default_value = True
            # Socket_4
            group_027_2.inputs[2].default_value = 2
            # Socket_5
            group_027_2.inputs[3].default_value = 1.0
            # Socket_6
            group_027_2.inputs[4].default_value = 0.6000000238418579
            # Socket_12
            group_027_2.inputs[5].default_value = True
            # Socket_15
            group_027_2.inputs[6].default_value = "chain_id"
            # Socket_8
            group_027_2.inputs[7].default_value = True
            # Socket_9
            group_027_2.inputs[8].default_value = 1
            # Socket_10
            group_027_2.inputs[9].default_value = True

            # node MN_style_sticks
            mn_style_sticks_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_style_sticks_1.name = "MN_style_sticks"
            mn_style_sticks_1.node_tree = _mn_utils_style_sticks
            # Socket_0
            mn_style_sticks_1.inputs[1].default_value = True
            # Input_2
            mn_style_sticks_1.inputs[2].default_value = 0.30000001192092896
            # Input_10
            mn_style_sticks_1.inputs[3].default_value = 6
            # Input_15
            mn_style_sticks_1.inputs[4].default_value = False
            # Input_12
            mn_style_sticks_1.inputs[5].default_value = False
            # Input_14
            mn_style_sticks_1.inputs[6].default_value = True

            # node Group.025
            group_025_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_025_2.name = "Group.025"
            group_025_2.node_tree = _mn_utils_style_spheres_icosphere
            # Input_2
            group_025_2.inputs[1].default_value = True
            # Input_3
            group_025_2.inputs[2].default_value = 0.800000011920929
            # Input_5
            group_025_2.inputs[3].default_value = 2
            # Input_6
            group_025_2.inputs[4].default_value = True

            # node Group.022
            group_022_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_022_2.name = "Group.022"
            group_022_2.node_tree = select_bonded
            # Input_0
            group_022_2.inputs[0].default_value = False
            # Input_1
            group_022_2.inputs[1].default_value = 2

            # node Group.033
            group_033_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_033_1.name = "Group.033"
            group_033_1.node_tree = topology_break_bonds
            # Input_3
            group_033_1.inputs[1].default_value = False
            # Input_2
            group_033_1.inputs[2].default_value = 2.5

            # node Group.034
            group_034_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_034_1.name = "Group.034"
            group_034_1.node_tree = topology_find_bonds
            # Input_35
            group_034_1.inputs[1].default_value = True
            # Input_2
            group_034_1.inputs[2].default_value = 1.0

            # node Group.024
            group_024_3 = nodestorage.nodes.new("GeometryNodeGroup")
            group_024_3.name = "Group.024"
            group_024_3.node_tree = mn_utils_primitive_atom
            # Input_0
            group_024_3.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Input_1
            group_024_3.inputs[1].default_value = 0.10000000149011612
            # Input_2
            group_024_3.inputs[2].default_value = 0.0
            # Input_4
            group_024_3.inputs[3].default_value = 0
            # Input_6
            group_024_3.inputs[4].default_value = 0
            # Input_7
            group_024_3.inputs[5].default_value = 0
            # Input_8
            group_024_3.inputs[6].default_value = False
            # Input_9
            group_024_3.inputs[7].default_value = False
            # Input_10
            group_024_3.inputs[8].default_value = False
            # Input_12
            group_024_3.inputs[9].default_value = False

            # node MN_style_cartoon
            mn_style_cartoon_1 = nodestorage.nodes.new("GeometryNodeGroup")
            mn_style_cartoon_1.name = "MN_style_cartoon"
            mn_style_cartoon_1.node_tree = style_cartoon
            # Input_1
            mn_style_cartoon_1.inputs[1].default_value = True
            # Input_2
            mn_style_cartoon_1.inputs[2].default_value = 2
            # Socket_3
            mn_style_cartoon_1.inputs[3].default_value = False
            # Input_4
            mn_style_cartoon_1.inputs[4].default_value = False
            # Input_3
            mn_style_cartoon_1.inputs[5].default_value = True
            # Input_11
            mn_style_cartoon_1.inputs[6].default_value = False
            # Input_5
            mn_style_cartoon_1.inputs[7].default_value = 0.5
            # Input_6
            mn_style_cartoon_1.inputs[8].default_value = 1.7999999523162842
            # Input_12
            mn_style_cartoon_1.inputs[9].default_value = 0.18000000715255737
            # Input_7
            mn_style_cartoon_1.inputs[10].default_value = 0.5
            # Socket_1
            mn_style_cartoon_1.inputs[11].default_value = False
            # Input_8
            mn_style_cartoon_1.inputs[12].default_value = True

            # node Group.082
            group_082 = nodestorage.nodes.new("GeometryNodeGroup")
            group_082.name = "Group.082"
            group_082.node_tree = style_surface
            # Socket_3
            group_082.inputs[1].default_value = True
            # Socket_4
            group_082.inputs[2].default_value = 3
            # Socket_12
            group_082.inputs[3].default_value = True
            # Socket_15
            group_082.inputs[4].default_value = "chain_id"
            # Socket_5
            group_082.inputs[5].default_value = 1.5
            # Socket_6
            group_082.inputs[6].default_value = 1.0
            # Socket_18
            group_082.inputs[7].default_value = True
            # Socket_17
            group_082.inputs[8].default_value = 30
            # Socket_8
            group_082.inputs[9].default_value = True
            # Socket_9
            group_082.inputs[10].default_value = 2
            # Socket_10
            group_082.inputs[11].default_value = True

            # node MN_style_ball_and_stick
            mn_style_ball_and_stick = nodestorage.nodes.new("GeometryNodeGroup")
            mn_style_ball_and_stick.name = "MN_style_ball_and_stick"
            mn_style_ball_and_stick.node_tree = style_ball_and_stick
            # Socket_5
            mn_style_ball_and_stick.inputs[1].default_value = 0
            # Input_1
            mn_style_ball_and_stick.inputs[2].default_value = True
            # Input_2
            mn_style_ball_and_stick.inputs[3].default_value = True
            # Input_3
            mn_style_ball_and_stick.inputs[4].default_value = 0.30000001192092896
            # Socket_3
            mn_style_ball_and_stick.inputs[5].default_value = True
            # Input_7
            mn_style_ball_and_stick.inputs[6].default_value = 0.30000001192092896
            # Socket_6
            mn_style_ball_and_stick.inputs[7].default_value = False
            # Input_4
            mn_style_ball_and_stick.inputs[8].default_value = True

            # node Is Nucleic
            is_nucleic_2 = nodestorage.nodes.new("GeometryNodeGroup")
            is_nucleic_2.label = "Is Nucleic"
            is_nucleic_2.name = "Is Nucleic"
            is_nucleic_2.node_tree = is_nucleic
            # Socket_1
            is_nucleic_2.inputs[0].default_value = True
            # Socket_3
            is_nucleic_2.inputs[1].default_value = False

            # node Color Res Name
            color_res_name_1 = nodestorage.nodes.new("GeometryNodeGroup")
            color_res_name_1.name = "Color Res Name"
            color_res_name_1.node_tree = color_res_name
            # Socket_0
            color_res_name_1.inputs[0].default_value = (0.0, 0.0, 0.0, 1.0)
            # Socket_1
            color_res_name_1.inputs[1].default_value = (
                0.09462588280439377,
                0.09462588280439377,
                0.09462588280439377,
                1.0,
            )
            # Socket_2
            color_res_name_1.inputs[2].default_value = (
                0.11411894112825394,
                0.22025452554225922,
                0.18504783511161804,
                1.0,
            )
            # Socket_3
            color_res_name_1.inputs[3].default_value = (
                0.1408783346414566,
                0.33738043904304504,
                0.42922618985176086,
                1.0,
            )
            # Socket_4
            color_res_name_1.inputs[4].default_value = (
                0.28100982308387756,
                0.15101823210716248,
                0.10579018294811249,
                1.0,
            )
            # Socket_5
            color_res_name_1.inputs[5].default_value = (
                0.20190106332302094,
                0.20190106332302094,
                0.20190106332302094,
                1.0,
            )
            # Socket_6
            color_res_name_1.inputs[6].default_value = (
                0.12770424783229828,
                0.20473986864089966,
                0.8000000715255737,
                1.0,
            )
            # Socket_7
            color_res_name_1.inputs[7].default_value = (
                0.8000000715255737,
                0.0689556673169136,
                0.06778784096240997,
                1.0,
            )
            # Socket_8
            color_res_name_1.inputs[8].default_value = (
                0.18364381790161133,
                0.761273205280304,
                0.3411029577255249,
                1.0,
            )
            # Socket_9
            color_res_name_1.inputs[9].default_value = (
                0.09119512140750885,
                0.6266628503799438,
                0.12943390011787415,
                1.0,
            )
            # Socket_10
            color_res_name_1.inputs[10].default_value = (
                0.0366930328309536,
                0.17026513814926147,
                0.41093894839286804,
                1.0,
            )
            # Socket_11
            color_res_name_1.inputs[11].default_value = (
                0.052218127995729446,
                0.052218127995729446,
                0.052218127995729446,
                1.0,
            )
            # Socket_12
            color_res_name_1.inputs[12].default_value = (
                0.527719259262085,
                0.45242294669151306,
                0.49789106845855713,
                1.0,
            )
            # Socket_13
            color_res_name_1.inputs[13].default_value = (
                0.3588410019874573,
                0.3051301836967468,
                0.09418508410453796,
                1.0,
            )
            # Socket_14
            color_res_name_1.inputs[14].default_value = (
                0.8000000715255737,
                0.1718127280473709,
                0.525249719619751,
                1.0,
            )
            # Socket_15
            color_res_name_1.inputs[15].default_value = (
                0.8000000715255737,
                0.7220579385757446,
                0.051990706473588943,
                1.0,
            )
            # Socket_16
            color_res_name_1.inputs[16].default_value = (
                0.10636822879314423,
                1.0,
                0.11561121791601181,
                1.0,
            )
            # Socket_17
            color_res_name_1.inputs[17].default_value = (
                0.527719259262085,
                0.1365669220685959,
                0.4106137752532959,
                1.0,
            )
            # Socket_18
            color_res_name_1.inputs[18].default_value = (
                0.08601968735456467,
                0.36478209495544434,
                0.6382719874382019,
                1.0,
            )
            # Socket_19
            color_res_name_1.inputs[19].default_value = (
                0.06929229199886322,
                0.15196387469768524,
                0.5596004128456116,
                1.0,
            )
            # Socket_20
            color_res_name_1.inputs[20].default_value = (
                0.2737779915332794,
                0.5478230118751526,
                0.800000011920929,
                1.0,
            )
            # Socket_21
            color_res_name_1.inputs[21].default_value = (
                0.2945820093154907,
                0.800000011920929,
                0.18778899312019348,
                1.0,
            )
            # Socket_22
            color_res_name_1.inputs[22].default_value = (
                0.8500000238418579,
                0.2514023780822754,
                0.17788057029247284,
                1.0,
            )
            # Socket_23
            color_res_name_1.inputs[23].default_value = (
                0.800000011920929,
                0.269802987575531,
                0.5268980264663696,
                1.0,
            )
            # Socket_24
            color_res_name_1.inputs[24].default_value = (
                0.2737779915332794,
                0.5478230118751526,
                0.800000011920929,
                1.0,
            )
            # Socket_25
            color_res_name_1.inputs[25].default_value = (
                0.2945820093154907,
                0.800000011920929,
                0.18778899312019348,
                1.0,
            )
            # Socket_26
            color_res_name_1.inputs[26].default_value = (
                0.8500000238418579,
                0.2514023780822754,
                0.17788057029247284,
                1.0,
            )
            # Socket_27
            color_res_name_1.inputs[27].default_value = (
                0.800000011920929,
                0.269802987575531,
                0.5268980264663696,
                1.0,
            )

            # node Group.010
            group_010_12 = nodestorage.nodes.new("GeometryNodeGroup")
            group_010_12.name = "Group.010"
            group_010_12.node_tree = between_integer
            # Socket_1
            group_010_12.inputs[0].default_value = 0
            # Socket_2
            group_010_12.inputs[1].default_value = 0
            # Socket_3
            group_010_12.inputs[2].default_value = 19

            # node Group.093
            group_093 = nodestorage.nodes.new("GeometryNodeGroup")
            group_093.name = "Group.093"
            group_093.node_tree = select_element
            # Socket_86
            group_093.inputs[0].default_value = True
            # Socket_87
            group_093.inputs[1].default_value = False
            # Socket_0
            group_093.inputs[2].default_value = False
            # Socket_2
            group_093.inputs[3].default_value = False
            # Socket_3
            group_093.inputs[4].default_value = False
            # Socket_4
            group_093.inputs[5].default_value = False
            # Socket_5
            group_093.inputs[6].default_value = False
            # Socket_6
            group_093.inputs[7].default_value = False
            # Socket_7
            group_093.inputs[8].default_value = False
            # Socket_8
            group_093.inputs[9].default_value = False
            # Socket_9
            group_093.inputs[10].default_value = False
            # Socket_10
            group_093.inputs[11].default_value = False
            # Socket_11
            group_093.inputs[12].default_value = False
            # Socket_12
            group_093.inputs[13].default_value = False
            # Socket_13
            group_093.inputs[14].default_value = False
            # Socket_14
            group_093.inputs[15].default_value = False
            # Socket_15
            group_093.inputs[16].default_value = False
            # Socket_16
            group_093.inputs[17].default_value = False
            # Socket_17
            group_093.inputs[18].default_value = False
            # Socket_18
            group_093.inputs[19].default_value = False
            # Socket_19
            group_093.inputs[20].default_value = False
            # Socket_20
            group_093.inputs[21].default_value = False
            # Socket_21
            group_093.inputs[22].default_value = False
            # Socket_23
            group_093.inputs[23].default_value = False
            # Socket_24
            group_093.inputs[24].default_value = False
            # Socket_25
            group_093.inputs[25].default_value = False
            # Socket_26
            group_093.inputs[26].default_value = False
            # Socket_27
            group_093.inputs[27].default_value = False
            # Socket_28
            group_093.inputs[28].default_value = False
            # Socket_29
            group_093.inputs[29].default_value = False
            # Socket_30
            group_093.inputs[30].default_value = False
            # Socket_31
            group_093.inputs[31].default_value = False
            # Socket_32
            group_093.inputs[32].default_value = False
            # Socket_33
            group_093.inputs[33].default_value = False
            # Socket_34
            group_093.inputs[34].default_value = False
            # Socket_35
            group_093.inputs[35].default_value = False
            # Socket_36
            group_093.inputs[36].default_value = False
            # Socket_37
            group_093.inputs[37].default_value = False
            # Socket_38
            group_093.inputs[38].default_value = False
            # Socket_39
            group_093.inputs[39].default_value = False
            # Socket_40
            group_093.inputs[40].default_value = False
            # Socket_41
            group_093.inputs[41].default_value = False
            # Socket_42
            group_093.inputs[42].default_value = False
            # Socket_44
            group_093.inputs[43].default_value = False
            # Socket_45
            group_093.inputs[44].default_value = False
            # Socket_46
            group_093.inputs[45].default_value = False
            # Socket_47
            group_093.inputs[46].default_value = False
            # Socket_48
            group_093.inputs[47].default_value = False
            # Socket_49
            group_093.inputs[48].default_value = False
            # Socket_50
            group_093.inputs[49].default_value = False
            # Socket_51
            group_093.inputs[50].default_value = False
            # Socket_52
            group_093.inputs[51].default_value = False
            # Socket_53
            group_093.inputs[52].default_value = False
            # Socket_54
            group_093.inputs[53].default_value = False
            # Socket_55
            group_093.inputs[54].default_value = False
            # Socket_56
            group_093.inputs[55].default_value = False
            # Socket_57
            group_093.inputs[56].default_value = False
            # Socket_58
            group_093.inputs[57].default_value = False
            # Socket_59
            group_093.inputs[58].default_value = False
            # Socket_60
            group_093.inputs[59].default_value = False
            # Socket_61
            group_093.inputs[60].default_value = False
            # Socket_62
            group_093.inputs[61].default_value = False
            # Socket_63
            group_093.inputs[62].default_value = False
            # Socket_65
            group_093.inputs[63].default_value = False
            # Socket_66
            group_093.inputs[64].default_value = False
            # Socket_67
            group_093.inputs[65].default_value = False
            # Socket_68
            group_093.inputs[66].default_value = False
            # Socket_69
            group_093.inputs[67].default_value = False
            # Socket_70
            group_093.inputs[68].default_value = False
            # Socket_71
            group_093.inputs[69].default_value = False
            # Socket_72
            group_093.inputs[70].default_value = False
            # Socket_73
            group_093.inputs[71].default_value = False
            # Socket_74
            group_093.inputs[72].default_value = False
            # Socket_75
            group_093.inputs[73].default_value = False
            # Socket_76
            group_093.inputs[74].default_value = False
            # Socket_77
            group_093.inputs[75].default_value = False
            # Socket_78
            group_093.inputs[76].default_value = False
            # Socket_79
            group_093.inputs[77].default_value = False
            # Socket_80
            group_093.inputs[78].default_value = False
            # Socket_81
            group_093.inputs[79].default_value = False
            # Socket_82
            group_093.inputs[80].default_value = False
            # Socket_83
            group_093.inputs[81].default_value = False

            # node Group.013
            group_013_5 = nodestorage.nodes.new("GeometryNodeGroup")
            group_013_5.name = "Group.013"
            group_013_5.node_tree = color_element
            # Socket_0
            group_013_5.inputs[0].default_value = (1.0, 1.0, 1.0, 1.0)
            # Socket_2
            group_013_5.inputs[1].default_value = (0.8509804010391235, 1.0, 1.0, 1.0)
            # Socket_3
            group_013_5.inputs[2].default_value = (
                0.800000011920929,
                0.501960813999176,
                1.0,
                1.0,
            )
            # Socket_4
            group_013_5.inputs[3].default_value = (0.7607843279838562, 1.0, 0.0, 1.0)
            # Socket_5
            group_013_5.inputs[4].default_value = (
                1.0,
                0.7098039388656616,
                0.7098039388656616,
                1.0,
            )
            # Socket_6
            group_013_5.inputs[5].default_value = (
                0.5647059082984924,
                0.5647059082984924,
                0.5647059082984924,
                1.0,
            )
            # Socket_7
            group_013_5.inputs[6].default_value = (
                0.1882352977991104,
                0.3137255012989044,
                0.9725490212440491,
                1.0,
            )
            # Socket_8
            group_013_5.inputs[7].default_value = (
                1.0,
                0.05098039284348488,
                0.05098039284348488,
                1.0,
            )
            # Socket_9
            group_013_5.inputs[8].default_value = (
                0.5647059082984924,
                0.8784313797950745,
                0.3137255012989044,
                1.0,
            )
            # Socket_10
            group_013_5.inputs[9].default_value = (
                0.7019608020782471,
                0.8901960849761963,
                0.9607843160629272,
                1.0,
            )
            # Socket_11
            group_013_5.inputs[10].default_value = (
                0.6705882549285889,
                0.3607843220233917,
                0.9490196108818054,
                1.0,
            )
            # Socket_12
            group_013_5.inputs[11].default_value = (0.5411764979362488, 1.0, 0.0, 1.0)
            # Socket_13
            group_013_5.inputs[12].default_value = (
                0.7490196228027344,
                0.6509804129600525,
                0.6509804129600525,
                1.0,
            )
            # Socket_14
            group_013_5.inputs[13].default_value = (
                0.9411764740943909,
                0.7843137383460999,
                0.6274510025978088,
                1.0,
            )
            # Socket_15
            group_013_5.inputs[14].default_value = (1.0, 0.501960813999176, 0.0, 1.0)
            # Socket_16
            group_013_5.inputs[15].default_value = (1.0, 1.0, 0.1882352977991104, 1.0)
            # Socket_17
            group_013_5.inputs[16].default_value = (
                0.12156862765550613,
                0.9411764740943909,
                0.12156862765550613,
                1.0,
            )
            # Socket_18
            group_013_5.inputs[17].default_value = (
                0.501960813999176,
                0.8196078538894653,
                0.8901960849761963,
                1.0,
            )
            # Socket_19
            group_013_5.inputs[18].default_value = (
                0.5607843399047852,
                0.250980406999588,
                0.8313725590705872,
                1.0,
            )
            # Socket_20
            group_013_5.inputs[19].default_value = (0.239215686917305, 1.0, 0.0, 1.0)
            # Socket_21
            group_013_5.inputs[20].default_value = (
                0.9019607901573181,
                0.9019607901573181,
                0.9019607901573181,
                1.0,
            )
            # Socket_23
            group_013_5.inputs[21].default_value = (
                0.7490196228027344,
                0.7607843279838562,
                0.7803921699523926,
                1.0,
            )
            # Socket_24
            group_013_5.inputs[22].default_value = (
                0.6509804129600525,
                0.6509804129600525,
                0.6705882549285889,
                1.0,
            )
            # Socket_25
            group_013_5.inputs[23].default_value = (
                0.5411764979362488,
                0.6000000238418579,
                0.7803921699523926,
                1.0,
            )
            # Socket_26
            group_013_5.inputs[24].default_value = (
                0.6117647290229797,
                0.47843137383461,
                0.7803921699523926,
                1.0,
            )
            # Socket_27
            group_013_5.inputs[25].default_value = (
                0.8784313797950745,
                0.4000000059604645,
                0.20000000298023224,
                1.0,
            )
            # Socket_28
            group_013_5.inputs[26].default_value = (
                1.0,
                0.8509804010391235,
                0.5607843399047852,
                1.0,
            )
            # Socket_29
            group_013_5.inputs[27].default_value = (
                0.7803921699523926,
                0.5411764979362488,
                0.5411764979362488,
                1.0,
            )
            # Socket_30
            group_013_5.inputs[28].default_value = (
                0.7843137383460999,
                0.501960813999176,
                0.20000000298023224,
                1.0,
            )
            # Socket_31
            group_013_5.inputs[29].default_value = (
                0.4901960790157318,
                0.501960813999176,
                0.6901960968971252,
                1.0,
            )
            # Socket_32
            group_013_5.inputs[30].default_value = (
                0.7607843279838562,
                0.5607843399047852,
                0.5607843399047852,
                1.0,
            )
            # Socket_33
            group_013_5.inputs[31].default_value = (
                0.4000000059604645,
                0.5607843399047852,
                0.5607843399047852,
                1.0,
            )
            # Socket_34
            group_013_5.inputs[32].default_value = (
                0.7411764860153198,
                0.501960813999176,
                0.8901960849761963,
                1.0,
            )
            # Socket_35
            group_013_5.inputs[33].default_value = (1.0, 0.6313725709915161, 0.0, 1.0)
            # Socket_36
            group_013_5.inputs[34].default_value = (
                0.6509804129600525,
                0.16078431904315948,
                0.16078431904315948,
                1.0,
            )
            # Socket_37
            group_013_5.inputs[35].default_value = (
                0.3607843220233917,
                0.7215686440467834,
                0.8196078538894653,
                1.0,
            )
            # Socket_38
            group_013_5.inputs[36].default_value = (
                0.43921568989753723,
                0.18039216101169586,
                0.6901960968971252,
                1.0,
            )
            # Socket_39
            group_013_5.inputs[37].default_value = (0.0, 1.0, 0.0, 1.0)
            # Socket_40
            group_013_5.inputs[38].default_value = (0.5803921818733215, 1.0, 1.0, 1.0)
            # Socket_41
            group_013_5.inputs[39].default_value = (
                0.5803921818733215,
                0.8784313797950745,
                0.8784313797950745,
                1.0,
            )
            # Socket_42
            group_013_5.inputs[40].default_value = (
                0.45098039507865906,
                0.7607843279838562,
                0.7882353067398071,
                1.0,
            )
            # Socket_44
            group_013_5.inputs[41].default_value = (
                0.3294117748737335,
                0.7098039388656616,
                0.7098039388656616,
                1.0,
            )
            # Socket_45
            group_013_5.inputs[42].default_value = (
                0.23137255012989044,
                0.6196078658103943,
                0.6196078658103943,
                1.0,
            )
            # Socket_46
            group_013_5.inputs[43].default_value = (
                0.1411764770746231,
                0.4901960790157318,
                0.4901960790157318,
                1.0,
            )
            # Socket_47
            group_013_5.inputs[44].default_value = (
                0.03921568766236305,
                0.4901960790157318,
                0.5490196347236633,
                1.0,
            )
            # Socket_48
            group_013_5.inputs[45].default_value = (
                0.0,
                0.4117647111415863,
                0.5215686559677124,
                1.0,
            )
            # Socket_49
            group_013_5.inputs[46].default_value = (
                0.7529411911964417,
                0.7529411911964417,
                0.7529411911964417,
                1.0,
            )
            # Socket_50
            group_013_5.inputs[47].default_value = (
                1.0,
                0.8509804010391235,
                0.5607843399047852,
                1.0,
            )
            # Socket_51
            group_013_5.inputs[48].default_value = (
                0.6509804129600525,
                0.4588235318660736,
                0.45098039507865906,
                1.0,
            )
            # Socket_52
            group_013_5.inputs[49].default_value = (
                0.4000000059604645,
                0.501960813999176,
                0.501960813999176,
                1.0,
            )
            # Socket_53
            group_013_5.inputs[50].default_value = (
                0.6196078658103943,
                0.38823530077934265,
                0.7098039388656616,
                1.0,
            )
            # Socket_54
            group_013_5.inputs[51].default_value = (
                0.8313725590705872,
                0.47843137383461,
                0.0,
                1.0,
            )
            # Socket_55
            group_013_5.inputs[52].default_value = (
                0.5803921818733215,
                0.0,
                0.5803921818733215,
                1.0,
            )
            # Socket_56
            group_013_5.inputs[53].default_value = (
                0.25882354378700256,
                0.6196078658103943,
                0.6901960968971252,
                1.0,
            )
            # Socket_57
            group_013_5.inputs[54].default_value = (
                0.34117648005485535,
                0.09019608050584793,
                0.5607843399047852,
                1.0,
            )
            # Socket_58
            group_013_5.inputs[55].default_value = (0.0, 0.7882353067398071, 0.0, 1.0)
            # Socket_59
            group_013_5.inputs[56].default_value = (
                0.43921568989753723,
                0.8313725590705872,
                1.0,
                1.0,
            )
            # Socket_60
            group_013_5.inputs[57].default_value = (1.0, 1.0, 0.7803921699523926, 1.0)
            # Socket_61
            group_013_5.inputs[58].default_value = (
                0.8509804010391235,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_62
            group_013_5.inputs[59].default_value = (
                0.7803921699523926,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_63
            group_013_5.inputs[60].default_value = (
                0.6392157077789307,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_65
            group_013_5.inputs[61].default_value = (
                0.5607843399047852,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_66
            group_013_5.inputs[62].default_value = (
                0.3803921639919281,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_67
            group_013_5.inputs[63].default_value = (
                0.2705882489681244,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_68
            group_013_5.inputs[64].default_value = (
                0.1882352977991104,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_69
            group_013_5.inputs[65].default_value = (
                0.12156862765550613,
                1.0,
                0.7803921699523926,
                1.0,
            )
            # Socket_70
            group_013_5.inputs[66].default_value = (0.0, 1.0, 0.6117647290229797, 1.0)
            # Socket_71
            group_013_5.inputs[67].default_value = (
                0.0,
                0.9019607901573181,
                0.4588235318660736,
                1.0,
            )
            # Socket_72
            group_013_5.inputs[68].default_value = (
                0.0,
                0.8313725590705872,
                0.32156863808631897,
                1.0,
            )
            # Socket_73
            group_013_5.inputs[69].default_value = (
                0.0,
                0.7490196228027344,
                0.21960784494876862,
                1.0,
            )
            # Socket_74
            group_013_5.inputs[70].default_value = (
                0.0,
                0.6705882549285889,
                0.1411764770746231,
                1.0,
            )
            # Socket_75
            group_013_5.inputs[71].default_value = (
                0.3019607961177826,
                0.7607843279838562,
                1.0,
                1.0,
            )
            # Socket_76
            group_013_5.inputs[72].default_value = (
                0.3019607961177826,
                0.6509804129600525,
                1.0,
                1.0,
            )
            # Socket_77
            group_013_5.inputs[73].default_value = (
                0.12941177189350128,
                0.5803921818733215,
                0.8392156958580017,
                1.0,
            )
            # Socket_78
            group_013_5.inputs[74].default_value = (
                0.14901961386203766,
                0.4901960790157318,
                0.6705882549285889,
                1.0,
            )
            # Socket_79
            group_013_5.inputs[75].default_value = (
                0.14901961386203766,
                0.4000000059604645,
                0.5882353186607361,
                1.0,
            )
            # Socket_80
            group_013_5.inputs[76].default_value = (
                0.09019608050584793,
                0.3294117748737335,
                0.529411792755127,
                1.0,
            )
            # Socket_81
            group_013_5.inputs[77].default_value = (
                0.8156862854957581,
                0.8156862854957581,
                0.8784313797950745,
                1.0,
            )
            # Socket_82
            group_013_5.inputs[78].default_value = (
                1.0,
                0.8196078538894653,
                0.13725490868091583,
                1.0,
            )
            # Socket_83
            group_013_5.inputs[79].default_value = (
                0.7215686440467834,
                0.7215686440467834,
                0.8156862854957581,
                1.0,
            )

            # node Group.019
            group_019_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_019_2.name = "Group.019"
            group_019_2.node_tree = starfile_instances
            # Socket_3
            group_019_2.inputs[2].default_value = 1
            # Socket_4
            group_019_2.inputs[3].default_value = False
            # Socket_5
            group_019_2.inputs[4].default_value = False
            # Socket_8
            group_019_2.inputs[6].default_value = -1.0
            # Socket_7
            group_019_2.inputs[7].default_value = -10.0
            # Socket_11
            group_019_2.inputs[8].default_value = 0.5
            # Socket_12
            group_019_2.inputs[9].default_value = 1.0

            # node Group.015
            group_015_4 = nodestorage.nodes.new("GeometryNodeGroup")
            group_015_4.name = "Group.015"
            group_015_4.node_tree = animate_fraction
            # Socket_1
            group_015_4.inputs[0].default_value = False
            # Socket_3
            group_015_4.inputs[1].default_value = False
            # Socket_2
            group_015_4.inputs[2].default_value = 0.0

            # node Group.036
            group_036_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_036_1.name = "Group.036"
            group_036_1.node_tree = animate_collection_pick
            # Socket_2
            group_036_1.inputs[1].default_value = True
            # Input_5
            group_036_1.inputs[2].default_value = 1.0

            # node Group.032
            group_032_1 = nodestorage.nodes.new("GeometryNodeGroup")
            group_032_1.name = "Group.032"
            group_032_1.node_tree = style_preset_2
            # Socket_5
            group_032_1.inputs[1].default_value = True
            # Socket_1
            group_032_1.inputs[2].default_value = 3
            # Socket_13
            group_032_1.inputs[3].default_value = False
            # Socket_4
            group_032_1.inputs[4].default_value = True

            # node Group.058
            group_058 = nodestorage.nodes.new("GeometryNodeGroup")
            group_058.name = "Group.058"
            group_058.node_tree = bond_count

            # node Group.084
            group_084 = nodestorage.nodes.new("GeometryNodeGroup")
            group_084.name = "Group.084"
            group_084.node_tree = style_preset_3
            # Socket_4
            group_084.inputs[1].default_value = True
            # Socket_3
            group_084.inputs[2].default_value = 3
            # Socket_1
            group_084.inputs[3].default_value = False

            # node Group.091
            group_091 = nodestorage.nodes.new("GeometryNodeGroup")
            group_091.name = "Group.091"
            group_091.node_tree = attribute_map
            # Socket_2
            group_091.inputs[1].default_value = "b_factor"
            # Socket_3
            group_091.inputs[2].default_value = 0.20000000298023224
            # Socket_4
            group_091.inputs[3].default_value = 3.0

            # node Group.092
            group_092 = nodestorage.nodes.new("GeometryNodeGroup")
            group_092.name = "Group.092"
            group_092.node_tree = style_preset_1
            # Socket_3
            group_092.inputs[1].default_value = True
            # Socket_1
            group_092.inputs[2].default_value = 3
            # Socket_6
            group_092.inputs[3].default_value = False
            # Socket_4
            group_092.inputs[4].default_value = True

            # node Group.094
            group_094 = nodestorage.nodes.new("GeometryNodeGroup")
            group_094.name = "Group.094"
            group_094.node_tree = style_preset_4
            # Socket_2
            group_094.inputs[1].default_value = True
            # Socket_4
            group_094.inputs[2].default_value = 3
            # Socket_6
            group_094.inputs[3].default_value = True
            # Socket_5
            group_094.inputs[4].default_value = True

            # node Group.021
            group_021_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_021_2.name = "Group.021"
            group_021_2.node_tree = animate_trails
            # Socket_4
            group_021_2.inputs[1].default_value = True
            # Socket_2
            group_021_2.inputs[2].default_value = 5
            # Socket_11
            group_021_2.inputs[3].default_value = 1.0
            # Socket_5
            group_021_2.inputs[4].default_value = 10.0
            # Socket_12
            group_021_2.inputs[5].default_value = 6
            # Socket_10
            group_021_2.inputs[6].default_value = 6
            # Socket_7
            group_021_2.inputs[7].default_value = True

            # node Group.095
            group_095 = nodestorage.nodes.new("GeometryNodeGroup")
            group_095.name = "Group.095"
            group_095.node_tree = topology_dssp
            # Socket_6
            group_095.inputs[1].default_value = True

            # node Group.007
            group_007_9 = nodestorage.nodes.new("GeometryNodeGroup")
            group_007_9.name = "Group.007"
            group_007_9.node_tree = color_rainbow
            # Socket_12
            group_007_9.inputs[0].default_value = False
            # Socket_13
            group_007_9.inputs[1].default_value = 0.0
            # Socket_7
            group_007_9.inputs[2].default_value = 0.7616665959358215
            # Socket_8
            group_007_9.inputs[3].default_value = 0.7616665959358215

            # node Group.041
            group_041 = nodestorage.nodes.new("GeometryNodeGroup")
            group_041.name = "Group.041"
            group_041.node_tree = offset_integer
            # Socket_1
            group_041.inputs[0].default_value = 0
            # Socket_3
            group_041.inputs[1].default_value = 0
            # Socket_2
            group_041.inputs[2].default_value = 0

            # node Group.096
            group_096 = nodestorage.nodes.new("GeometryNodeGroup")
            group_096.name = "Group.096"
            group_096.node_tree = offset_vector
            # Socket_2
            group_096.inputs[0].default_value = 0
            # Socket_0
            group_096.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Socket_3
            group_096.inputs[2].default_value = 0

            # node Group.097
            group_097 = nodestorage.nodes.new("GeometryNodeGroup")
            group_097.name = "Group.097"
            group_097.node_tree = offset_boolean
            # Socket_1
            group_097.inputs[0].default_value = 0
            # Socket_2
            group_097.inputs[1].default_value = False
            # Socket_3
            group_097.inputs[2].default_value = 0

            # node Group.098
            group_098 = nodestorage.nodes.new("GeometryNodeGroup")
            group_098.name = "Group.098"
            group_098.node_tree = offset_color
            # Socket_0
            group_098.inputs[0].default_value = 0
            # Input_0
            group_098.inputs[1].default_value = 0

            # node Group.099
            group_099 = nodestorage.nodes.new("GeometryNodeGroup")
            group_099.name = "Group.099"
            group_099.node_tree = between_float
            # Socket_1
            group_099.inputs[0].default_value = 0.0
            # Socket_2
            group_099.inputs[1].default_value = 0.0
            # Socket_3
            group_099.inputs[2].default_value = 0.0

            # node Group.100
            group_100 = nodestorage.nodes.new("GeometryNodeGroup")
            group_100.name = "Group.100"
            group_100.node_tree = between_vector
            # Socket_1
            group_100.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Socket_2
            group_100.inputs[1].default_value = (0.0, 0.0, 0.0)
            # Socket_3
            group_100.inputs[2].default_value = (0.0, 0.0, 0.0)

            # node Group.101
            group_101 = nodestorage.nodes.new("GeometryNodeGroup")
            group_101.name = "Group.101"
            group_101.node_tree = res_info

            # node Group.102
            group_102 = nodestorage.nodes.new("GeometryNodeGroup")
            group_102.name = "Group.102"
            group_102.node_tree = chain_info
            # Socket_8
            group_102.inputs[0].default_value = False

            # node Group.103
            group_103 = nodestorage.nodes.new("GeometryNodeGroup")
            group_103.name = "Group.103"
            group_103.node_tree = group_info
            # Socket_0
            group_103.inputs[0].default_value = 0

            # node Group.104
            group_104 = nodestorage.nodes.new("GeometryNodeGroup")
            group_104.name = "Group.104"
            group_104.node_tree = centroid
            # Socket_4
            group_104.inputs[0].default_value = (0.0, 0.0, 0.0)
            # Socket_1
            group_104.inputs[1].default_value = True
            # Socket_3
            group_104.inputs[2].default_value = 0

            # node Group.105
            group_105 = nodestorage.nodes.new("GeometryNodeGroup")
            group_105.name = "Group.105"
            group_105.node_tree = centre_on_selection
            # Socket_3
            group_105.inputs[1].default_value = True
            # Socket_5
            group_105.inputs[2].default_value = 0

            # node Group.016
            group_016_3 = nodestorage.nodes.new("GeometryNodeGroup")
            group_016_3.name = "Group.016"
            group_016_3.node_tree = fallback_boolean
            # Socket_2
            group_016_3.inputs[0].default_value = ""
            # Socket_0
            group_016_3.inputs[1].default_value = False

            # node Group.017
            group_017_4 = nodestorage.nodes.new("GeometryNodeGroup")
            group_017_4.name = "Group.017"
            group_017_4.node_tree = fallback_integer
            # Socket_3
            group_017_4.inputs[0].default_value = ""
            # Socket_2
            group_017_4.inputs[1].default_value = 0

            # node Group.018
            group_018_2 = nodestorage.nodes.new("GeometryNodeGroup")
            group_018_2.name = "Group.018"
            group_018_2.node_tree = res_group_id

            # node Group.057
            group_057 = nodestorage.nodes.new("GeometryNodeGroup")
            group_057.name = "Group.057"
            group_057.node_tree = fallback_vector
            # Socket_2
            group_057.inputs[0].default_value = ""
            # Socket_1
            group_057.inputs[1].default_value = (0.0, 0.0, 0.0)

            # node Group.085
            group_085 = nodestorage.nodes.new("GeometryNodeGroup")
            group_085.name = "Group.085"
            group_085.node_tree = dihedral_phi

            # node Group.088
            group_088 = nodestorage.nodes.new("GeometryNodeGroup")
            group_088.name = "Group.088"
            group_088.node_tree = dihedral_psi

            # node Group.106
            group_106 = nodestorage.nodes.new("GeometryNodeGroup")
            group_106.name = "Group.106"
            group_106.node_tree = fallback_float
            # Socket_0
            group_106.inputs[0].default_value = ""
            # Socket_1
            group_106.inputs[1].default_value = 0.0

            # node Group.107
            group_107 = nodestorage.nodes.new("GeometryNodeGroup")
            group_107.name = "Group.107"
            group_107.node_tree = offset_float
            # Socket_1
            group_107.inputs[0].default_value = 0
            # Socket_2
            group_107.inputs[1].default_value = 0.0
            # Socket_3
            group_107.inputs[2].default_value = 0

            # node Group.108
            group_108 = nodestorage.nodes.new("GeometryNodeGroup")
            group_108.name = "Group.108"
            group_108.node_tree = boolean_run_fill
            # Socket_0
            group_108.inputs[0].default_value = False
            # Socket_2
            group_108.inputs[1].default_value = 3

            # node Group.109
            group_109 = nodestorage.nodes.new("GeometryNodeGroup")
            group_109.name = "Group.109"
            group_109.node_tree = boolean_run_mask
            # Socket_1
            group_109.inputs[0].default_value = False
            # Socket_2
            group_109.inputs[1].default_value = 0
            # Socket_3
            group_109.inputs[2].default_value = 0
            # Socket_6
            group_109.inputs[3].default_value = 0

            # node Select Ligand_.001
            select_ligand__001 = nodestorage.nodes.new("GeometryNodeGroup")
            select_ligand__001.label = "Select Ligand_"
            select_ligand__001.name = "Select Ligand_.001"
            select_ligand__001.node_tree = select_segment_
            # Input_7
            select_ligand__001.inputs[0].default_value = False
            # Input_8
            select_ligand__001.inputs[1].default_value = False
            # Input_9
            select_ligand__001.inputs[2].default_value = False

            # node Group.110
            group_110 = nodestorage.nodes.new("GeometryNodeGroup")
            group_110.name = "Group.110"
            group_110.node_tree = color_segment_
            # Input_0
            group_110.inputs[0].default_value = (
                0.16151683032512665,
                0.623960554599762,
                0.1956024467945099,
                1.0,
            )
            # Input_2
            group_110.inputs[1].default_value = (
                1.0,
                0.15063196420669556,
                0.15063196420669556,
                1.0,
            )
            # Input_3
            group_110.inputs[2].default_value = (
                0.17016737163066864,
                0.36792799830436707,
                0.8000000715255737,
                1.0,
            )

            # node Group.111
            group_111 = nodestorage.nodes.new("GeometryNodeGroup")
            group_111.name = "Group.111"
            group_111.node_tree = backbone_position
            # Socket_3
            group_111.inputs[0].default_value = 0
            # Socket_2
            group_111.inputs[1].default_value = "backbone_N"
            # Socket_4
            group_111.inputs[2].default_value = 0

            # node Group.080
            group_080 = nodestorage.nodes.new("GeometryNodeGroup")
            group_080.name = "Group.080"
            group_080.node_tree = sample_mix_float
            # Socket_5
            group_080.inputs[2].default_value = 0.5
            # Socket_6
            group_080.inputs[3].default_value = 0.0
            # Socket_9
            group_080.inputs[4].default_value = 0

            # node Group.112
            group_112 = nodestorage.nodes.new("GeometryNodeGroup")
            group_112.name = "Group.112"
            group_112.node_tree = sample_mix_vector
            # Socket_5
            group_112.inputs[2].default_value = 0.5
            # Socket_6
            group_112.inputs[3].default_value = (0.0, 0.0, 0.0)
            # Socket_9
            group_112.inputs[4].default_value = 0

            # node Group.113
            group_113 = nodestorage.nodes.new("GeometryNodeGroup")
            group_113.name = "Group.113"
            group_113.node_tree = fallback_color
            # Socket_3
            group_113.inputs[0].default_value = "Color"
            # Socket_2
            group_113.inputs[1].default_value = (
                0.07164999842643738,
                0.2954249978065491,
                0.23565900325775146,
                1.0,
            )

            # Set parents
            group_011_12.parent = styling
            group_029_2.parent = styling
            mn_style_spheres_1.parent = styling
            mn_select_atomic_number_1.parent = selections
            mn_select_sphere.parent = selections
            mn_select_proximity_1.parent = selections
            mn_select_res_id_single.parent = selections
            mn_select_separate_atoms.parent = selections
            group_070_2.parent = utilities
            group_075_2.parent = frame_001_16
            group_074.parent = utilities
            group_072.parent = frame_001_16
            group_073.parent = frame_001_16
            group_071_2.parent = frame_001_16
            group_067_1.parent = utilities
            group_078.parent = frame_001_16
            group_055.parent = density
            group_054.parent = density
            group_045.parent = density
            group_043.parent = animation
            group_042.parent = animation
            group_053.parent = animation
            mol_col_element_common.parent = color
            group_020_1.parent = color
            group_012_8.parent = animation
            group_030_2.parent = animation
            group_060.parent = color
            group_035_1.parent = color
            group_009_12.parent = color
            group_062.parent = color
            group_005_15.parent = color
            group_031.parent = animation
            group_039.parent = color
            group_64.parent = animation
            group_023_3.parent = assembly
            group_001_43.parent = assembly
            group_076.parent = utilities
            group_040.parent = utilities
            group_049.parent = new_dna
            group_048.parent = new_dna
            group_047.parent = new_dna
            group_051.parent = new_dna
            group_052.parent = new_dna
            group_050.parent = new_dna
            group_079.parent = utilities
            mn_select_cube.parent = selections
            is_peptide_1.parent = selections
            is_side_chain_1.parent = selections
            is_alpha_carbon_1.parent = selections
            group_083.parent = selections
            group_086.parent = selections
            is_lipid_1.parent = selections
            group_087.parent = selections
            mn_select_whole_res.parent = selections
            is_helix_1.parent = selections
            group_089.parent = selections
            group_090.parent = selections
            group_081.parent = color
            group_014_9.parent = selections
            group_069_1.parent = animation
            group_026_3.parent = frame_30
            mn_separate_polymers.parent = selections
            mn_select_res_id_range.parent = selections
            group_002_28.parent = styling
            group_038.parent = styling
            group_008_9.parent = styling
            group_059_5.parent = styling
            group_004_15.parent = styling
            group_056.parent = styling
            group_027_2.parent = styling
            mn_style_sticks_1.parent = styling
            group_025_2.parent = styling
            group_022_2.parent = selections
            group_033_1.parent = frame_001_16
            group_034_1.parent = frame_001_16
            group_024_3.parent = utilities
            mn_style_cartoon_1.parent = styling
            group_082.parent = styling
            mn_style_ball_and_stick.parent = styling
            is_nucleic_2.parent = selections
            color_res_name_1.parent = color
            group_010_12.parent = utilities
            group_093.parent = selections
            group_013_5.parent = color
            group_032_1.parent = styling
            group_058.parent = frame_001_16
            group_084.parent = styling
            group_091.parent = utilities
            group_092.parent = styling
            group_094.parent = styling
            group_021_2.parent = animation
            group_095.parent = frame_001_16
            group_007_9.parent = color
            group_041.parent = utilities
            group_096.parent = utilities
            group_097.parent = utilities
            group_099.parent = utilities
            group_100.parent = utilities
            group_101.parent = frame_001_16
            group_102.parent = frame_001_16
            group_103.parent = utilities
            group_104.parent = utilities
            group_105.parent = animation
            group_016_3.parent = utilities
            group_017_4.parent = utilities
            group_018_2.parent = frame_001_16
            group_057.parent = utilities
            group_085.parent = frame_001_16
            group_088.parent = frame_001_16
            group_106.parent = utilities
            group_107.parent = utilities
            group_108.parent = utilities
            group_109.parent = utilities
            group_111.parent = frame_001_16
            group_113.parent = utilities

            # Set locations
            styling.location = (-1181.0, -149.0)
            selections.location = (-1582.0, 694.0)
            frame_001_16.location = (-799.0, 800.0)
            density.location = (-1593.0, -1824.0)
            animation.location = (-1534.98095703125, 807.4922485351562)
            color.location = (-714.0, 428.0)
            assembly.location = (143.0, 60.0)
            utilities.location = (462.52923583984375, 667.568115234375)
            frame_30.location = (-248.0625, 96.07037353515625)
            new_dna.location = (-977.2938232421875, -302.498291015625)
            group_011_12.location = (41.0, -531.0)
            group_029_2.location = (-179.0, -431.0)
            mn_style_spheres_1.location = (281.0, -171.0)
            mn_select_atomic_number_1.location = (-2138.0, -474.0)
            mn_select_sphere.location = (-2138.0, -234.0)
            mn_select_proximity_1.location = (-1668.0, -574.056640625)
            mn_select_res_id_single.location = (-2558.0, -874.0)
            mn_select_res_id_.location = (-4160.0, 740.0)
            select_ligand__1.location = (-3500.0, 740.0)
            select_entity__1.location = (-3720.0, 740.0)
            mn_select_separate_atoms.location = (-1668.0, -234.056640625)
            mn_select_distance_empty_1.location = (
                -2942.866943359375,
                -372.9307861328125,
            )
            group_070_2.location = (657.4707641601562, -1367.568115234375)
            group_075_2.location = (-3550.0, -1520.0)
            group_074.location = (657.4707641601562, -1527.568115234375)
            group_072.location = (-3350.7626953125, -1280.0)
            group_073.location = (-3350.7626953125, -1480.0)
            group_071_2.location = (-3550.0, -1280.0)
            group_067_1.location = (657.4707641601562, -1227.568115234375)
            group_078.location = (-3750.7626953125, -1280.0)
            group_055.location = (-107.0, -276.0)
            group_054.location = (-356.808349609375, -275.844970703125)
            group_045.location = (-617.158935546875, -278.2940673828125)
            group_043.location = (-504.0, -338.0)
            group_042.location = (-724.0, -338.0)
            group_053.location = (-284.0, -338.0)
            mol_col_element_common.location = (214.0, 152.0)
            group_020_1.location = (-186.0, 12.0)
            group_061.location = (-1120.0, 1260.0)
            group_068_2.location = (-620.0, 1260.0)
            group_065.location = (-880.0, 1260.0)
            group_012_8.location = (-734.3968505859375, 81.875)
            group_030_2.location = (-485.01904296875, 92.50775146484375)
            group_060.location = (14.0, 112.0)
            group_035_1.location = (14.0, 232.0)
            group_009_12.location = (-426.0, 472.0)
            group_062.location = (214.0, 292.0)
            group_005_15.location = (214.0, 472.0)
            group_031.location = (-65.01904296875, 72.50775146484375)
            group_039.location = (-186.0, 152.0)
            group_64.location = (-265.01904296875, 72.50775146484375)
            group_037_1.location = (1720.0, -260.0)
            group_063.location = (1720.0, -800.0)
            group_066.location = (1160.0, 140.0)
            group_023_3.location = (1060.0, -180.0)
            group_001_43.location = (707.1703491210938, -180.0)
            group_output_216.location = (620.0, 400.0)
            group_003_19.location = (1860.0, -1280.0)
            group_064.location = (1677.256591796875, -60.0)
            group_006_11.location = (2080.0, 220.0)
            group_076.location = (-22.52923583984375, -1547.568115234375)
            group_040.location = (-288.96478271484375, -1174.763671875)
            group_049.location = (1780.0, -1600.0)
            group_048.location = (1780.0, -1420.0)
            group_047.location = (1500.0, -1420.0)
            group_051.location = (2360.0, -1600.0)
            group_052.location = (2080.0, -1360.0)
            group_050.location = (2079.06884765625, -1602.8594970703125)
            group_028_2.location = (942.84033203125, -2413.762451171875)
            group_079.location = (-222.52923583984375, -1547.568115234375)
            group_input_211.location = (110.3262939453125, 403.2859191894531)
            select_chain__1.location = (-3940.0, 740.0)
            mn_select_cube.location = (-1938.0, -234.0)
            is_peptide_1.location = (-2958.0, -374.0)
            is_side_chain_1.location = (-2558.0, -374.0)
            is_alpha_carbon_1.location = (-2558.0, -234.0)
            group_083.location = (-2958.0, -514.0)
            group_086.location = (-2758.0, -374.0)
            is_lipid_1.location = (-2758.0, -234.0)
            group_087.location = (-2558.0, -514.0)
            mn_select_whole_res.location = (-2338.0, -874.0)
            is_helix_1.location = (-2758.0, -514.0)
            group_089.location = (-2758.0, -654.0)
            group_090.location = (-2758.0, -794.0)
            mn_select_sec_struct_001.location = (-4860.0, 480.0)
            group_046.location = (-2600.0, 460.0)
            group_044.location = (-2600.0, 720.0)
            group_081.location = (-186.0, 312.0)
            group_014_9.location = (-2558.0, -654.0)
            mn_select_res_name.location = (-5080.0, 480.0)
            group_069_1.location = (-53.59423828125, -178.0)
            group_026_3.location = (1393.59326171875, 471.4764709472656)
            mn_separate_polymers.location = (-1668.0, -414.056640625)
            mn_select_res_id_range.location = (-2348.0, -234.056640625)
            group_002_28.location = (-1263.0771484375, -182.77865600585938)
            group_038.location = (-1039.0, -191.0)
            group_008_9.location = (-1039.0, -431.0)
            group_059_5.location = (-1267.288818359375, -599.9183959960938)
            group_004_15.location = (-819.0, -191.0)
            group_056.location = (-819.0, -511.0)
            group_027_2.location = (-819.0, -1131.0)
            mn_style_sticks_1.location = (-819.0, -871.0)
            group_025_2.location = (-1263.0771484375, -362.7786560058594)
            group_022_2.location = (-2338.0, -474.0)
            group_033_1.location = (-2870.7626953125, -1280.0)
            group_034_1.location = (-2870.7626953125, -1440.0)
            group_024_3.location = (416.1369934082031, -1179.5576171875)
            mn_style_cartoon_1.location = (281.0, -451.0)
            group_082.location = (-179.0, -171.0)
            mn_style_ball_and_stick.location = (41.0, -171.0)
            is_nucleic_2.location = (-2958.0, -234.0)
            color_res_name_1.location = (14.0, 472.0)
            group_010_12.location = (397.47076416015625, -1727.568115234375)
            group_093.location = (-2338.0, -634.0)
            group_013_5.location = (-186.070556640625, 466.6788330078125)
            group_019_2.location = (360.0, -140.0)
            group_015_4.location = (-2700.0, 1020.0)
            group_036_1.location = (-2700.0, 1200.0)
            group_032_1.location = (221.0, -871.0)
            group_058.location = (-3350.7626953125, -1740.0)
            group_084.location = (21.0, -871.0)
            group_091.location = (397.47076416015625, -1547.568115234375)
            group_092.location = (-179.0, -871.0)
            group_094.location = (441.0, -871.0)
            group_021_2.location = (-45.01904296875, -467.49224853515625)
            group_095.location = (-3090.7626953125, -1280.0)
            group_007_9.location = (14.0, 372.0)
            group_041.location = (177.47076416015625, -1807.568115234375)
            group_096.location = (177.47076416015625, -1967.568115234375)
            group_097.location = (-22.52923583984375, -1807.568115234375)
            group_098.location = (-120.0, -1100.0)
            group_099.location = (397.47076416015625, -1887.568115234375)
            group_100.location = (657.4707641601562, -1667.568115234375)
            group_101.location = (-3750.7626953125, -1740.0)
            group_102.location = (-3550.7626953125, -1740.0)
            group_103.location = (177.47076416015625, -1547.568115234375)
            group_104.location = (-222.52923583984375, -2047.568115234375)
            group_105.location = (-285.01904296875, -607.4922485351562)
            group_016_3.location = (-42.52923583984375, -1267.568115234375)
            group_017_4.location = (177.47076416015625, -1327.568115234375)
            group_018_2.location = (-3350.7626953125, -1840.0)
            group_057.location = (177.47076416015625, -1147.568115234375)
            group_085.location = (-3070.7626953125, -1740.0)
            group_088.location = (-2861.0, -1740.0)
            group_106.location = (-42.52923583984375, -1147.568115234375)
            group_107.location = (-22.52923583984375, -1967.568115234375)
            group_108.location = (397.47076416015625, -2047.568115234375)
            group_109.location = (637.4707641601562, -2047.568115234375)
            select_ligand__001.location = (-3280.0, 740.0)
            group_110.location = (-360.0, 1260.0)
            group_111.location = (-3750.7626953125, -1440.0)
            group_080.location = (-2460.0, 1200.0)
            group_112.location = (-2240.0, 1200.0)
            group_113.location = (-42.52923583984375, -1387.568115234375)

            # Set dimensions
            styling.width, styling.height = 1948.5, 1229.0
            selections.width, selections.height = 1530.0, 849.0
            frame_001_16.width, frame_001_16.height = 1130.0, 735.0
            density.width, density.height = 750.0, 281.5
            animation.width, animation.height = 929.5, 935.0
            color.width, color.height = 880.0, 625.0
            assembly.width, assembly.height = 593.0, 329.0
            utilities.width, utilities.height = 1186.5, 1109.0
            frame_30.width, frame_30.height = 240.0, 303.0
            new_dna.width, new_dna.height = 1100.0001220703125, 694.0
            group_011_12.width, group_011_12.height = 180.0, 100.0
            group_029_2.width, group_029_2.height = 180.0, 100.0
            mn_style_spheres_1.width, mn_style_spheres_1.height = 180.0, 100.0
            mn_select_atomic_number_1.width, mn_select_atomic_number_1.height = (
                180.0,
                100.0,
            )
            mn_select_sphere.width, mn_select_sphere.height = 180.0, 100.0
            mn_select_proximity_1.width, mn_select_proximity_1.height = 180.0, 100.0
            mn_select_res_id_single.width, mn_select_res_id_single.height = 180.0, 100.0
            mn_select_res_id_.width, mn_select_res_id_.height = 180.0, 100.0
            select_ligand__1.width, select_ligand__1.height = 180.0, 100.0
            select_entity__1.width, select_entity__1.height = 180.0, 100.0
            mn_select_separate_atoms.width, mn_select_separate_atoms.height = (
                180.0,
                100.0,
            )
            mn_select_distance_empty_1.width, mn_select_distance_empty_1.height = (
                180.0,
                100.0,
            )
            group_070_2.width, group_070_2.height = 180.0, 100.0
            group_075_2.width, group_075_2.height = 180.0, 100.0
            group_074.width, group_074.height = 180.0, 100.0
            group_072.width, group_072.height = 180.0, 100.0
            group_073.width, group_073.height = 180.0, 100.0
            group_071_2.width, group_071_2.height = 180.0, 100.0
            group_067_1.width, group_067_1.height = 180.0, 100.0
            group_078.width, group_078.height = 180.0, 100.0
            group_055.width, group_055.height = 180.0, 100.0
            group_054.width, group_054.height = 180.0, 100.0
            group_045.width, group_045.height = 180.0, 100.0
            group_043.width, group_043.height = 180.0, 100.0
            group_042.width, group_042.height = 180.0, 100.0
            group_053.width, group_053.height = 180.0, 100.0
            mol_col_element_common.width, mol_col_element_common.height = 180.0, 100.0
            group_020_1.width, group_020_1.height = 180.0, 100.0
            group_061.width, group_061.height = 180.0, 100.0
            group_068_2.width, group_068_2.height = 180.0, 100.0
            group_065.width, group_065.height = 180.0, 100.0
            group_012_8.width, group_012_8.height = 180.0, 100.0
            group_030_2.width, group_030_2.height = 180.0, 100.0
            group_060.width, group_060.height = 180.0, 100.0
            group_035_1.width, group_035_1.height = 180.0, 100.0
            group_009_12.width, group_009_12.height = 180.0, 100.0
            group_062.width, group_062.height = 180.0, 100.0
            group_005_15.width, group_005_15.height = 180.0, 100.0
            group_031.width, group_031.height = 180.0, 100.0
            group_039.width, group_039.height = 180.0, 100.0
            group_64.width, group_64.height = 180.0, 100.0
            group_037_1.width, group_037_1.height = 180.0, 100.0
            group_063.width, group_063.height = 180.0, 100.0
            group_066.width, group_066.height = 180.0, 100.0
            group_023_3.width, group_023_3.height = 180.0, 100.0
            group_001_43.width, group_001_43.height = 180.0, 100.0
            group_output_216.width, group_output_216.height = 140.0, 100.0
            group_003_19.width, group_003_19.height = 180.0, 100.0
            group_064.width, group_064.height = 180.0, 100.0
            group_006_11.width, group_006_11.height = 180.0, 100.0
            group_076.width, group_076.height = 180.0, 100.0
            group_040.width, group_040.height = 180.0, 100.0
            group_049.width, group_049.height = 180.0, 100.0
            group_048.width, group_048.height = 180.0, 100.0
            group_047.width, group_047.height = 180.0, 100.0
            group_051.width, group_051.height = 180.0, 100.0
            group_052.width, group_052.height = 180.0, 100.0
            group_050.width, group_050.height = 180.0, 100.0
            group_028_2.width, group_028_2.height = 180.0, 100.0
            group_079.width, group_079.height = 180.0, 100.0
            group_input_211.width, group_input_211.height = 140.0, 100.0
            select_chain__1.width, select_chain__1.height = 180.0, 100.0
            mn_select_cube.width, mn_select_cube.height = 180.0, 100.0
            is_peptide_1.width, is_peptide_1.height = 180.0, 100.0
            is_side_chain_1.width, is_side_chain_1.height = 180.0, 100.0
            is_alpha_carbon_1.width, is_alpha_carbon_1.height = 180.0, 100.0
            group_083.width, group_083.height = 180.0, 100.0
            group_086.width, group_086.height = 180.0, 100.0
            is_lipid_1.width, is_lipid_1.height = 180.0, 100.0
            group_087.width, group_087.height = 180.0, 100.0
            mn_select_whole_res.width, mn_select_whole_res.height = 180.0, 100.0
            is_helix_1.width, is_helix_1.height = 180.0, 100.0
            group_089.width, group_089.height = 180.0, 100.0
            group_090.width, group_090.height = 180.0, 100.0
            mn_select_sec_struct_001.width, mn_select_sec_struct_001.height = (
                180.0,
                100.0,
            )
            group_046.width, group_046.height = 180.0, 100.0
            group_044.width, group_044.height = 180.0, 100.0
            group_081.width, group_081.height = 180.0, 100.0
            group_014_9.width, group_014_9.height = 180.0, 100.0
            mn_select_res_name.width, mn_select_res_name.height = 180.0, 100.0
            group_069_1.width, group_069_1.height = 180.0, 100.0
            group_026_3.width, group_026_3.height = 180.0, 100.0
            mn_separate_polymers.width, mn_separate_polymers.height = 180.0, 100.0
            mn_select_res_id_range.width, mn_select_res_id_range.height = 180.0, 100.0
            group_002_28.width, group_002_28.height = 180.0, 100.0
            group_038.width, group_038.height = 180.0, 100.0
            group_008_9.width, group_008_9.height = 180.0, 100.0
            group_059_5.width, group_059_5.height = 180.0, 100.0
            group_004_15.width, group_004_15.height = 180.0, 100.0
            group_056.width, group_056.height = 180.0, 100.0
            group_027_2.width, group_027_2.height = 180.0, 100.0
            mn_style_sticks_1.width, mn_style_sticks_1.height = 180.0, 100.0
            group_025_2.width, group_025_2.height = 180.0, 100.0
            group_022_2.width, group_022_2.height = 180.0, 100.0
            group_033_1.width, group_033_1.height = 180.0, 100.0
            group_034_1.width, group_034_1.height = 180.0, 100.0
            group_024_3.width, group_024_3.height = 180.0, 100.0
            mn_style_cartoon_1.width, mn_style_cartoon_1.height = 180.0, 100.0
            group_082.width, group_082.height = 180.0, 100.0
            mn_style_ball_and_stick.width, mn_style_ball_and_stick.height = 180.0, 100.0
            is_nucleic_2.width, is_nucleic_2.height = 180.0, 100.0
            color_res_name_1.width, color_res_name_1.height = 180.0, 100.0
            group_010_12.width, group_010_12.height = 180.0, 100.0
            group_093.width, group_093.height = 180.0, 100.0
            group_013_5.width, group_013_5.height = 180.0, 100.0
            group_019_2.width, group_019_2.height = 180.0, 100.0
            group_015_4.width, group_015_4.height = 180.0, 100.0
            group_036_1.width, group_036_1.height = 180.0, 100.0
            group_032_1.width, group_032_1.height = 180.0, 100.0
            group_058.width, group_058.height = 180.0, 100.0
            group_084.width, group_084.height = 180.0, 100.0
            group_091.width, group_091.height = 180.0, 100.0
            group_092.width, group_092.height = 180.0, 100.0
            group_094.width, group_094.height = 180.0, 100.0
            group_021_2.width, group_021_2.height = 180.0, 100.0
            group_095.width, group_095.height = 180.0, 100.0
            group_007_9.width, group_007_9.height = 180.0, 100.0
            group_041.width, group_041.height = 180.0, 100.0
            group_096.width, group_096.height = 180.0, 100.0
            group_097.width, group_097.height = 180.0, 100.0
            group_098.width, group_098.height = 180.0, 100.0
            group_099.width, group_099.height = 180.0, 100.0
            group_100.width, group_100.height = 180.0, 100.0
            group_101.width, group_101.height = 180.0, 100.0
            group_102.width, group_102.height = 180.0, 100.0
            group_103.width, group_103.height = 180.0, 100.0
            group_104.width, group_104.height = 180.0, 100.0
            group_105.width, group_105.height = 180.0, 100.0
            group_016_3.width, group_016_3.height = 180.0, 100.0
            group_017_4.width, group_017_4.height = 180.0, 100.0
            group_018_2.width, group_018_2.height = 180.0, 100.0
            group_057.width, group_057.height = 180.0, 100.0
            group_085.width, group_085.height = 180.0, 100.0
            group_088.width, group_088.height = 180.0, 100.0
            group_106.width, group_106.height = 180.0, 100.0
            group_107.width, group_107.height = 180.0, 100.0
            group_108.width, group_108.height = 180.0, 100.0
            group_109.width, group_109.height = 180.0, 100.0
            select_ligand__001.width, select_ligand__001.height = 180.0, 100.0
            group_110.width, group_110.height = 180.0, 100.0
            group_111.width, group_111.height = 180.0, 100.0
            group_080.width, group_080.height = 180.0, 100.0
            group_112.width, group_112.height = 180.0, 100.0
            group_113.width, group_113.height = 180.0, 100.0

            # initialize nodestorage links
            # group_input_211.Geometry -> group_output_216.Geometry
            nodestorage.links.new(
                group_input_211.outputs[0], group_output_216.inputs[0]
            )
            return nodestorage

        nodestorage = nodestorage_node_group()

        name = bpy.context.object.name
        obj = bpy.data.objects[name]
        mod = obj.modifiers.new(name="NodeStorage", type="NODES")
        mod.node_group = nodestorage
        return {"FINISHED"}


def menu_func(self, context):
    self.layout.operator(NodeStorage.bl_idname)


def register():
    bpy.utils.register_class(NodeStorage)
    bpy.types.NODE_MT_add.append(menu_func)


def unregister():
    bpy.utils.unregister_class(NodeStorage)
    bpy.types.NODE_MT_add.remove(menu_func)


if __name__ == "__main__":
    register()
